<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Node.js 安装</title>
      <link href="posts/abb0658c/"/>
      <url>posts/abb0658c/</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>​ NodeJS 一般指 node.js。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型。Node 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与 PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。</p><ul><li><p>官网：<a href="http://nodejs.cn/">http://nodejs.cn/</a></p></li><li><p>下载地址：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://oss.imoyt.top/img/20210218001103.png" alt="image-20210218001101152"></p><p>选择自己需要的版本，点击即可下载。</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>​ 按提示下一步即可，和安装 windows 软件没区别</p><h2 id="三、检查是否安装成功"><a href="#三、检查是否安装成功" class="headerlink" title="三、检查是否安装成功"></a>三、检查是否安装成功</h2><p>​ 安装完后，可以在命令行中输入 node -v 来查看安装版本和是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://oss.imoyt.top/img/20210218001727.png" alt="image-20210218001726645"></p><blockquote><p><code>注意</code>：以下 4、5 这两部分(没有强制要求，可以设置也可以不设置)</p><p>​ 这两部分默认是在 C 盘用户目录 Reaming 下的 node 里面</p></blockquote><h2 id="四、新建两个要配置的文件夹"><a href="#四、新建两个要配置的文件夹" class="headerlink" title="四、新建两个要配置的文件夹"></a>四、新建两个要配置的文件夹</h2><p><img src= "/img/loading.gif" data-lazy-src="https://oss.imoyt.top/img/20210218001956.png" alt="image-20210218001954642"></p><h2 id="五、修改-npm-配置修改-npm-配置"><a href="#五、修改-npm-配置修改-npm-配置" class="headerlink" title="五、修改 npm 配置修改 npm 配置"></a>五、修改 npm 配置修改 npm 配置</h2><p>​ 配置 npm 的全局模块的存放路径以及 cache 的路径，可以用一下两个命令完成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\Nodeutils\node_global&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\Nodeutils\node_cache&quot;</span></span><br></pre></td></tr></table></figure><p>​ 这样此后所安装的模块都会安装到改路径下。</p><h2 id="六、配置环境变量"><a href="#六、配置环境变量" class="headerlink" title="六、配置环境变量"></a>六、配置环境变量</h2><p>配置环境变量 <code>NODE_PATH</code>指向安装路径下的 <code>node_modules</code><br><img src= "/img/loading.gif" data-lazy-src="https://oss.imoyt.top/img/20210218002309.png" alt="image-20210218002308627"></p><h2 id="七、测试并安装淘宝-NPM-镜像"><a href="#七、测试并安装淘宝-NPM-镜像" class="headerlink" title="七、测试并安装淘宝 NPM 镜像"></a>七、测试并安装淘宝 NPM 镜像</h2><p>​ 因为 npm 下载资源来源国外，网络不稳定，下载也慢，安装了淘宝的镜像后使用国内 cnpm 资源会变得非常快在 CMD 命令提示符中输入下面的命令。</p><ul><li><strong>在 cmd 输入以下命令</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm  install  -g  cnpm  --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ul><li><strong>安装完成后输入 cnpm -v 查看是否安装成功</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://oss.imoyt.top/img/20210218002447.png" alt="image-20210218002446204"></p><ul><li>成功显示版本号<img src= "/img/loading.gif" data-lazy-src="https://oss.imoyt.top/img/20210218002152.png" alt="image-20210218002150813"></li></ul><blockquote><p>至此, windows 环境下 node 安装完毕!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 卸载 Mysql</title>
      <link href="posts/9103988a/"/>
      <url>posts/9103988a/</url>
      
        <content type="html"><![CDATA[<p><strong>防止重装</strong></p><ul><li>yum 方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看yum是否安装过mysql</span></span><br><span class="line">yum list installed mysql*</span><br></pre></td></tr></table></figure><p><code>如或显示了列表，说明系统中有MySQL </code><br><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210209162914.png" alt="image-20210209162826025"><br>根据列表上的名字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum remove mysql-community-client mysql-community-common mysql-community-libs mysql-community-libs-compat mysql-community-server mysql57-community-release</span><br><span class="line">rm -rf /var/lib/mysql</span><br><span class="line">rm /etc/my.cnf</span><br></pre></td></tr></table></figure><ul><li><strong>rpm 查看安装</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep -i mysql</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210209162928.png" alt="image-20210209162927188"></p><ul><li><strong>rpm 卸载</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rpm -e mysql57-community-release-el7-9.noarch</span><br><span class="line">rpm -e mysql-community-server-5.7.17-1.el7.x86_64</span><br><span class="line">rpm -e mysql-community-libs-5.7.17-1.el7.x86_64</span><br><span class="line">rpm -e mysql-community-libs-compat-5.7.17-1.el7.x86_64</span><br><span class="line">rpm -e mysql-community-common-5.7.17-1.el7.x86_64</span><br><span class="line">rpm -e mysql-community-client-5.7.17-1.el7.x86_64</span><br><span class="line"><span class="built_in">cd</span> /var/lib/</span><br><span class="line">rm -rf mysql/</span><br></pre></td></tr></table></figure><blockquote><p><strong>清除余项</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">whereis mysql</span><br><span class="line">mysql: /usr/bin/mysql /usr/lib64/mysql /usr/<span class="built_in">local</span>/mysql /usr/share/mysql /usr/share/man/man1/mysql.1.gz</span><br><span class="line"><span class="comment">#删除上面的文件夹</span></span><br><span class="line">rm -rf /usr/bin/mysql</span><br></pre></td></tr></table></figure><blockquote><p><strong>删除配置</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm –rf /usr/my.cnf</span><br><span class="line">rm -rf /root/.mysql_sercret</span><br></pre></td></tr></table></figure><p><strong>剩余配置检查</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list | grep -i mysql</span><br><span class="line">chkconfig --del mysqld</span><br></pre></td></tr></table></figure><p>根据上面的列表，删除 ,如：<strong>mysqld</strong></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity 细节度权限控制</title>
      <link href="posts/a868dd1/"/>
      <url>posts/a868dd1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Role-和-Authority-的区别"><a href="#一、Role-和-Authority-的区别" class="headerlink" title="一、Role 和 Authority 的区别"></a>一、Role 和 Authority 的区别</h2><blockquote><p>用户拥有的权限表示</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">roles(<span class="string">&quot;ADMIN&quot;</span>,<span class="string">&quot;学徒&quot;</span>,<span class="string">&quot;宗师&quot;</span>)</span><br><span class="line">authorities(<span class="string">&quot;USER&quot;</span>,<span class="string">&quot;MANAGER&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>给资源授予权限（角色或权限）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//.antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;学徒&quot;</span>)</span><br><span class="line">//.antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasAnyRole(<span class="string">&quot;学徒&quot;</span>,<span class="string">&quot;ADMIN&quot;</span>)//拥有任何一个角色都可以访问</span><br><span class="line">.antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasAnyAuthority(<span class="string">&quot;学徒&quot;</span>,<span class="string">&quot;ADMIN&quot;</span>) //拥有任何一个权限都可以访问</span><br><span class="line">.antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;大师&quot;</span>)</span><br><span class="line">.antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;宗师&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><p><strong>roles</strong> (“ADMIN”,”学徒”,”宗师”)，增加”ROLE_“前缀存放：<code>【&quot;ROLE_ADMIN&quot;,&quot;ROLE_学徒&quot;,&quot;ROLE\_宗师&quot;】</code></p><p>表示拥有的权限。一个角色表示的是多个权限，用户传入的角色不能以 ROLE_开头，否则会报错。ROLE_是自动加上的</p><p>如果我们保存的用户的角色：直接传入角色的名字，权限【new SimpleGrantedAuthority(“ROLE_“ + role)】保存即可</p></li><li><p><strong>authorities</strong>(“USER”,”MANAGER”)，原样存放：<code>【&quot;USER&quot;,&quot;MANAGER&quot;】</code></p><p>表示拥有的权限。如果我们保存的是真正的权限；直接传入权限名字，权限【new SimpleGrantedAuthority(role)】保存</p></li></ul><p>无论是 Role 还是 Authority 都保存在 List&lt;GrantedAuthority&gt;,每个用户都拥有自己的权限集合 -&gt; List&lt;GrantedAuthority&gt;</p><blockquote><p>验证用户权限</p></blockquote><ol><li><strong>通过角色（权限）验证</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;学徒&quot;</span>)</span><br><span class="line">.antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasAnyRole(<span class="string">&quot;学徒&quot;</span>,<span class="string">&quot;ADMIN&quot;</span>)</span><br></pre></td></tr></table></figure><p>拥有任何一个角色都可以访问，验证时会自动增加”ROLE_“进行查找验证：【”ROLE_学徒”,”ROLE_ADMIN”】</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210205173746.png" alt="image-20210205173647915"></p><ol start="2"><li><strong>通过权限验证</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasAuthority(<span class="string">&quot;学徒&quot;</span>)</span><br><span class="line">.antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasAnyAuthority(<span class="string">&quot;学徒&quot;</span>,<span class="string">&quot;ADMIN&quot;</span>)</span><br></pre></td></tr></table></figure><p>拥有任何一个权限都可以访问，验证时原样查找进行验证：【”学徒”,”ADMIN”】</p><h2 id="二、细粒度的资源控制"><a href="#二、细粒度的资源控制" class="headerlink" title="二、细粒度的资源控制"></a>二、细粒度的资源控制</h2><ul><li><p>authenticated()：通过认证的用户都可以访问</p></li><li><p>permitAll()：允许所有人访问，即使未登录</p></li><li><p>authorizeRequests()：更细粒度的控制</p></li><li><p>access(String)： SpEL：Spring 表达式</p><p>​ ==.access(“hasRole(‘大师’) <strong>AND</strong> hasAuthority(‘user:delete’) <strong>OR</strong> hasIpAddress(‘192.168.0.1’)”)==</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210205174006.jpg"></p><h2 id="三、细粒度的资源控制相应注解"><a href="#三、细粒度的资源控制相应注解" class="headerlink" title="三、细粒度的资源控制相应注解"></a>三、细粒度的资源控制相应注解</h2><blockquote><p>开启注解控制权限模式</p></blockquote><p><code>@EnableWebSecurity</code>：开启 Spring Security 注解</p><p><code>@EnableGlobalMethodSecurity(prePostEnabled=true)</code>：开启全局的细粒度方法级别权限控制功能</p><blockquote><p>几个权限检查注解</p></blockquote><ol><li><strong>@PreAuthorize</strong>：方法执行前检查</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果具有ROLE_ADMIN 权限 则访问该方法</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>@PostAuthorize</strong>：方法执行后检查，失败抛异常</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostAuthorize</span>：允许方法调用，但是，如果表达式结果为<span class="keyword">false</span>抛出异常</span><br><span class="line"><span class="comment">//returnObject可以获取返回对象user，判断user属性username是否和访问该方法的用户对象的用户名一样。不一样则抛出异常。</span></span><br><span class="line"><span class="meta">@PostAuthorize(&quot;returnObject.user.username==principal.username&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> userId)</span></span>&#123;</span><br><span class="line">   <span class="comment">//允许进入</span></span><br><span class="line">...</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li> <strong>@PostFilter</strong>：允许方法调用，但是按照表达式过滤方法结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将结果过滤，即选出性别为男的用户</span></span><br><span class="line"><span class="meta">@PostFilter(&quot;returnObject.user.sex==&#x27;男&#x27; &quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//允许进入</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>@PreFilter</strong>：允许方法调用，但必须在进入方法前过滤输入值</li><li><strong>@Secured</strong>：拥有指定角色才可以访问方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Secured(&#x27;ADMIN&#x27;)</span>   等价于    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;)&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="四、细粒度的资源控制注解中可写的表达式"><a href="#四、细粒度的资源控制注解中可写的表达式" class="headerlink" title="四、细粒度的资源控制注解中可写的表达式"></a>四、细粒度的资源控制注解中可写的表达式</h2><p><strong>所有能使用的表达式见下面文档连接：</strong></p><p><a href="https://docs.spring.io/spring-security/site/docs/4.0.1.RELEASE/reference/htmlsingle/#el-common-built-in">https://docs.spring.io/spring-security/site/docs/4.0.1.RELEASE/reference/htmlsingle/#el-common-built-in</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210205174456.png" alt="image-20210205174455438"></p><h2 id="五、细粒度权限控制实现步骤"><a href="#五、细粒度权限控制实现步骤" class="headerlink" title="五、细粒度权限控制实现步骤"></a>五、细粒度权限控制实现步骤</h2><h3 id="1、开启全局的细粒度方法级别权限控制功能"><a href="#1、开启全局的细粒度方法级别权限控制功能" class="headerlink" title="1、开启全局的细粒度方法级别权限控制功能"></a>1、开启全局的细粒度方法级别权限控制功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br></pre></td></tr></table></figure><h3 id="2、将手动授权的方式注释掉"><a href="#2、将手动授权的方式注释掉" class="headerlink" title="2、将手动授权的方式注释掉"></a>2、将手动授权的方式注释掉</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .antMatchers(&quot;/level1/**&quot;).hasAnyAuthority(&quot;学徒&quot;,&quot;ADMIN&quot;)</span></span><br><span class="line"><span class="comment">// .antMatchers(&quot;/level2/**&quot;).hasRole(&quot;大师&quot;)</span></span><br><span class="line"><span class="comment">// .antMatchers(&quot;/level3/**&quot;).hasRole(&quot;宗师&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="3、给访问资源的方法增加注解，进行访问授权"><a href="#3、给访问资源的方法增加注解，进行访问授权" class="headerlink" title="3、给访问资源的方法增加注解，进行访问授权"></a>3、给访问资源的方法增加注解，进行访问授权</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GongfuController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 授权（权限检查）使用 AOP; MethodSecurityInterceptor</span></span><br><span class="line"><span class="comment"> * 方法执行之前 AccessDecisionManager 利用投票机制决定这个方法是否可以运行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;学徒&#x27;) AND hasAnyAuthority(&#x27;putong:luohanquan&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/level1/1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">leve1Page1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;/level1/1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;学徒&#x27;) AND hasAnyAuthority(&#x27;putong:wudangchangquan&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/level1/2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">leve1Page2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;/level1/2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;学徒&#x27;) AND hasAnyAuthority(&#x27;putong:quanzhenjianfa&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/level1/3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">leve1Page3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;/level1/3&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、通过数据库加载用户权限"><a href="#4、通过数据库加载用户权限" class="headerlink" title="4、通过数据库加载用户权限"></a>4、通过数据库加载用户权限</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        String queryUser = <span class="string">&quot;SELECT * FROM `t_admin` WHERE loginacct=?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、查询指定用户的信息</span></span><br><span class="line">        Map&lt;String, Object&gt; map = jdbcTemplate.queryForMap(queryUser, username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询用户拥有的角色集合</span></span><br><span class="line">        String sql1 = <span class="string">&quot;SELECT t_role.* FROM t_role LEFT JOIN t_admin_role ON t_admin_role.roleid=t_role.id WHERE t_admin_role.adminid=?&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; roleList = jdbcTemplate.query(sql1, <span class="keyword">new</span> ColumnMapRowMapper(), map.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;roleList=&quot;</span>+roleList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询用户拥有的权限集合</span></span><br><span class="line">        String sql2 = <span class="string">&quot;SELECT distinct t_permission.* FROM t_permission LEFT JOIN t_role_permission ON t_role_permission.permissionid = t_permission.id LEFT JOIN t_admin_role ON t_admin_role.roleid=t_role_permission.roleid WHERE t_admin_role.adminid=?&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; permissionList = jdbcTemplate.query(sql2, <span class="keyword">new</span> ColumnMapRowMapper(), map.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;permissionList=&quot;</span>+permissionList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用户权限=【角色+权限】</span></span><br><span class="line">        Set&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> HashSet&lt;GrantedAuthority&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; rolemap : roleList) &#123;</span><br><span class="line">            String rolename = rolemap.get(<span class="string">&quot;name&quot;</span>).toString();</span><br><span class="line">            authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">&quot;ROLE_&quot;</span> + rolename));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; permissionmap : permissionList) &#123;</span><br><span class="line">            String permissionName = permissionmap.get(<span class="string">&quot;name&quot;</span>).toString();</span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(permissionName)) &#123;</span><br><span class="line">                authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(permissionName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;authorities=&quot;</span>+authorities);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// return new</span></span><br><span class="line">        <span class="comment">// User(map.get(&quot;loginacct&quot;).toString(),map.get(&quot;userpswd&quot;).toString(),</span></span><br><span class="line">        <span class="comment">// AuthorityUtils.createAuthorityList(&quot;ADMIN&quot;,&quot;USER&quot;));</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(map.get(<span class="string">&quot;loginacct&quot;</span>).toString(), map.get(<span class="string">&quot;userpswd&quot;</span>).toString(), authorities);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5、准备数据"><a href="#5、准备数据" class="headerlink" title="5、准备数据"></a>5、准备数据</h3><p>​ 测试所需的表请从 <a href="https://oy6090.top/">https:oy6090.top</a> 获取, 以下是表中需要修改的测试数据</p><blockquote><p><strong>admin</strong> 表</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210205180128.png" alt="image-20210205175919192"></p><blockquote><p><strong>t_admin_role</strong> 表</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210205181130.png" alt="image-20210205181129992"></p><blockquote><p><strong>t_role</strong> 表</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210205180215.png" alt="image-20210205180214593"></p><blockquote><p><strong>t_permission</strong> 表</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210205180317.png" alt="image-20210205180315466"></p><blockquote><p><strong>t_role_permission</strong> 表</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210205180353.png" alt="image-20210205180352577"></p><h3 id="6、测试"><a href="#6、测试" class="headerlink" title="6、测试"></a>6、测试</h3><ul><li>访问 level1/1 和 / leve1/2 都是正常</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210205181230.png" alt="image-20210205181228305"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210205181249.png" alt="image-20210205181247202"></p><ul><li>访问 level1/3 没有权限被拦截</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210205181306.png" alt="image-20210205181304618"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity 基础总结</title>
      <link href="posts/f1d1d958/"/>
      <url>posts/f1d1d958/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><a href="https://docs.spring.io/spring-security/site/docs/4.2.10.RELEASE/guides/html5/helloworld-xml.html">https://docs.spring.io/spring-security/site/docs/4.2.10.RELEASE/guides/html5/helloworld-xml.html</a></p><p>SpringSecurity 融合 Spring 技术栈，提供 JavaEE 应 用的整体安全解决方案；</p><p>Spring Security 为基于 Java EE 的企业软件应用提供<strong>全面</strong>的安全服务。</p><p>Spring Security 只需要少量配置，就能构建一个强大的安全的应用系统。</p><p>目前市面上受欢迎的两个安全框架：Apache Shiro、SpringSecurity；</p><p>SpringSecurity 可以无缝整合 Spring 应用，具有强大的自动化 web 安全管控功能。而 Shiro 是一个轻量级强大的安全框架，可以脱离 web 应用来提供安全管控，但是对于 web 的一些定制安全需要手动编写；SpringBoot 底层默认整合 SpringSecurity 作为安全框架，所以我们推荐 web 应用使用 SpringSecurity 来控制安全；</p><h3 id="1、文档"><a href="#1、文档" class="headerlink" title="1、文档"></a>1、文档</h3><p><strong>Hello Spring Security</strong> &lt;<a href="https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/javaconfig/helloworld">https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/javaconfig/helloworld</a> &gt; 基于 Java 配置整合示例</p><p><strong>Hello Spring Security Boot</strong> <a href="https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/boot/helloworld">https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/boot/helloworld</a> 与 SpringBoot 整合案例</p><p><strong>Hello Spring Security XML</strong> <a href="https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/xml/helloworld">https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/xml/helloworld</a> 基于 XML 方式整合示例</p><p><strong>Hello Spring MVC Security</strong> <a href="https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/javaconfig/hellomvc">https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/javaconfig/hellomvc</a> SpringMVC 集成示例</p><p><strong>Custom Login Form</strong> <a href="https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/javaconfig/form">https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/javaconfig/form</a> 自定义登录表单示例</p><h3 id="2、使用方式"><a href="#2、使用方式" class="headerlink" title="2、使用方式"></a>2、使用方式</h3><ul><li><p>一种是全部利用配置文件，将用户、权限、资源(url)硬编码在 xml 文件中</p></li><li><p>二种是用户和权限用数据库存储，而资源(url)和权限的对应采用硬编码配置</p></li><li><p><code>三种是细分角色和权限，并将用户、角色、权限和资源均采用数据库存储，并且自定义过滤器，代替原有的FilterSecurityInterceptor过滤器， 并分别实现AccessDecisionManager、InvocationSecurityMetadataSourceService和UserDetailsService，并在配置文件中进行相应配置。</code></p></li><li><p>四是修改 springsecurity 的源代码，主要是修改 InvocationSecurityMetadataSourceService 和 UserDetailsService 两个类。</p><ol><li><p>InvocationSecurityMetadataSourceService</p><p>将配置文件或数据库中存储的资源(url)提取出来加工成为 url 和权限列表的 Map 供 Security 使用</p></li><li><p>UserDetailsService</p></li></ol></li></ul><p>​ 提取用户名和权限组成一个完整的(UserDetails)User 对象，该对象可以提供用户的详细信息供 AuthentationManager 进行认证与授权使用</p><h3 id="3、概念"><a href="#3、概念" class="headerlink" title="3、概念"></a>3、概念</h3><blockquote><p><strong>认证</strong></p></blockquote><p>​ <code>authenfication</code>: 身份验证</p><p>​ “身份验证” 是指建立主体（principal）的过程，主体就是他们声称的是谁 （“主体” 通常指用户、设备或在应用程序中可以执行动作的其他系统）。也就是 “证明你是谁”。</p><blockquote><p><strong>授权</strong></p></blockquote><p>​ <code>authorization</code>: 授权</p><p>​ “授权” 是指确定主体（principal） 是否被允许执行系统中某个动作的过程。也就是 “你能做什么！”</p><blockquote><p>为了达到“授权”决策（安全框架决定你是否有权限做此事），“身份验证”（authentication）过程已经建立了主体的身份（Principal）</p></blockquote><h2 id="二、SpringSecurity-HellWorld"><a href="#二、SpringSecurity-HellWorld" class="headerlink" title="二、SpringSecurity-HellWorld"></a>二、SpringSecurity-HellWorld</h2><h2 id="1、测试环境搭建"><a href="#1、测试环境搭建" class="headerlink" title="1、测试环境搭建"></a>1、测试环境搭建</h2><h3 id="1-1-创建普通的-maven-war-工程：spring-security-helloworld"><a href="#1-1-创建普通的-maven-war-工程：spring-security-helloworld" class="headerlink" title="1.1 创建普通的 maven-war 工程：spring-security-helloworld"></a>1.1 创建普通的 maven-war 工程：spring-security-helloworld</h3><p>​ <code>注意：</code>以下所有的测试都采用的 <strong>Idea</strong> 集成开发工具</p><blockquote><p><strong>pom 文件增加依赖</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.20.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>web.xml 配置</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>spring 配置:spring.xml</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.oy.security&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>导入实验资源</strong></p></blockquote><ul><li>需要资源的博客末尾有下载地址</li><li>导入页面</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203111442.png" alt="image-20210203111400600"></p><ul><li>导入 controller</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203165351.png" alt="image-20210203165335907"></p><blockquote><p><strong>运行测试</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203111543.png" alt="image-20210203111542765"></p><h2 id="2、引入-SpringSecurity-框架"><a href="#2、引入-SpringSecurity-框架" class="headerlink" title="2、引入 SpringSecurity 框架"></a>2、引入 SpringSecurity 框架</h2><h3 id="2-1-添加-security-pom-依赖"><a href="#2-1-添加-security-pom-依赖" class="headerlink" title="2.1 添加 security-pom 依赖"></a>2.1 添加 security-pom 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标签库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-taglibs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-web-xml-中添加-SpringSecurity-的-Filter-进行安全控制"><a href="#2-2-web-xml-中添加-SpringSecurity-的-Filter-进行安全控制" class="headerlink" title="2.2 web.xml 中添加 SpringSecurity 的 Filter 进行安全控制"></a>2.2 web.xml 中添加 SpringSecurity 的 Filter 进行安全控制</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span><span class="comment">&lt;!--名称固定,不能变 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-加入-SpringSecurity-配置类"><a href="#2-3-加入-SpringSecurity-配置类" class="headerlink" title="2.3 加入 SpringSecurity 配置类"></a>2.3 加入 SpringSecurity 配置类</h3><ul><li>@Configuration、@Bean 注解作用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//声明当前类是一个配置类。相当与XML配置文件作用。</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span>  <span class="comment">//声明式配置，启用SpringSecurity安全机制。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-启动测试效果"><a href="#2-4-启动测试效果" class="headerlink" title="2.4 启动测试效果"></a>2.4 启动测试效果</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203165804.png" alt="image-20210203165802954"></p><ul><li>所有资源访问受限（包括静态资源）</li><li>框架自带一个默认的登录界面</li><li>账号密码错误会有提示</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203170523.png" alt="image-20210203170522858"></p><ul><li>查看登录页面的源码，发现有个 hidden-input: name = “<code>_csrf</code>“ 这个是 springsecurity 帮我们防止<code>“跨站请求伪造” </code>攻击；还可以防止表单重复提交。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203170648.png" alt="image-20210203170641242"></p><h2 id="三、SpringSecurity-实验"><a href="#三、SpringSecurity-实验" class="headerlink" title="三、SpringSecurity 实验"></a>三、SpringSecurity 实验</h2><h3 id="1、实验一：-授权首页和静态资源"><a href="#1、实验一：-授权首页和静态资源" class="headerlink" title="1、实验一： 授权首页和静态资源"></a>1、实验一： 授权首页和静态资源</h3><ul><li>配置类 （<strong>AppWebSecurityConfig</strong> extends <strong>WebSecurityConfigurerAdapter</strong>）</li><li><strong>重写 configure(HttpSecurity http)方法</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 声明当前类是一个配置类。相当于XML配置文件作用。</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span>  <span class="comment">//声明式配置，启用SpringSecurity安全机制</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//super.configure(http); // 取消默认配置</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                <span class="comment">// 设置匹配的资源放行</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/layui/**&quot;</span>,<span class="string">&quot;/index.jsp&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">// 剩余任何资源必须认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>测试结果</strong></li></ul><blockquote><p>静态资源和 index.jsp 都可以访问</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203171904.png" alt="image-20210203171903224"></p><blockquote><p>不存在的资源</p></blockquote><ol><li>有权限无资源 400</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203172203.png" alt="image-20210203172202192"></p><ol start="2"><li>无权限</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203172243.png" alt="image-20210203172242911"></p><h3 id="2、实验二：-默认及自定义登录页"><a href="#2、实验二：-默认及自定义登录页" class="headerlink" title="2、实验二： 默认及自定义登录页"></a>2、实验二： 默认及自定义登录页</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//super.configure(http); // 取消默认配置</span></span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        <span class="comment">// 设置匹配的资源放行</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/layui/**&quot;</span>,<span class="string">&quot;/index.jsp&quot;</span>).permitAll()</span><br><span class="line">        <span class="comment">// 剩余任何资源必须认证</span></span><br><span class="line">        .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实验二: 默认及自定义登录页</span></span><br><span class="line">    http.formLogin(); <span class="comment">// 默认登录页</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="http://localhost:8080/SpringSecurity/level3/3">http://localhost:8080/SpringSecurity/level3/3</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203174331.png" alt="image-20210203174330647"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//super.configure(http); // 取消默认配置</span></span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        <span class="comment">// 设置匹配的资源放行</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/layui/**&quot;</span>,<span class="string">&quot;/index.jsp&quot;</span>).permitAll()</span><br><span class="line">        <span class="comment">// 剩余任何资源必须认证</span></span><br><span class="line">        .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实验二: 默认及自定义登录页</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义登录页</span></span><br><span class="line">    http.formLogin().loginPage(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 在访问没有权限资源或页面时，将会自动跳转到<code>index.jsp</code>登录页面</p><ul><li>在测试的时候需要先暂时<code>_csrf</code>这个功能</li></ul><blockquote><input name="_csrf" type="hidden" value="755f0b3c-0965-430b-852e-dcf6c77e7edb" /></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.csrf().disable();</span><br></pre></td></tr></table></figure><h3 id="3、实验三：-自定义表单登录逻辑分析"><a href="#3、实验三：-自定义表单登录逻辑分析" class="headerlink" title="3、实验三： 自定义表单登录逻辑分析"></a>3、实验三： 自定义表单登录逻辑分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//super.configure(http); // 取消默认配置</span></span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        <span class="comment">// 设置匹配的资源放行</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/layui/**&quot;</span>,<span class="string">&quot;/index.jsp&quot;</span>).permitAll()</span><br><span class="line">        <span class="comment">// 剩余任何资源必须认证</span></span><br><span class="line">        .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义登录页</span></span><br><span class="line">    http.formLogin().loginPage(<span class="string">&quot;/index.jsp&quot;</span>)</span><br><span class="line">        .loginProcessingUrl(<span class="string">&quot;/index.jsp&quot;</span>)</span><br><span class="line">        .usernameParameter(<span class="string">&quot;loginacct&quot;</span>)</span><br><span class="line">        .passwordParameter(<span class="string">&quot;userpswd&quot;</span>)</span><br><span class="line">        .defaultSuccessUrl(<span class="string">&quot;/main.html&quot;</span>);</span><br><span class="line">    http.csrf().disable(); <span class="comment">// 禁用csrf</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>表单提交地址：${PATH }/index.jsp</p></li><li><p>表单提交请求方式：post</p></li><li><p>提交表单：</p><ul><li>引入 jquery: &lt;script src=”${PATH }/layui/jquery.min.js”&gt;&lt;/script&gt;</li><li>$(“form”).submit();</li></ul></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203181848.png" alt="image-20210203181846728"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203181906.png" alt="image-20210203181905444"></p><blockquote><p>如果没有关闭 CSRF， 提交请求被拒绝， 需要暂时禁用 csrf：http.csrf().disable();</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203181951.png" alt="image-20210203181950686"></p><ul><li>表单提交请求失败，提取错误消息：**${SPRING_SECURITY_LAST_EXCEPTION.message}**</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layadmin-user-login-box layadmin-user-login-header&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>layuiAdmin<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>layui 官方出品的单页面后台管理模板系统<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;SPRING_SECURITY_LAST_EXCEPTION.message&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203182707.png" alt="image-20210203182702663"></p><h3 id="4、实验四：-自定义认证用户信息"><a href="#4、实验四：-自定义认证用户信息" class="headerlink" title="4、实验四： 自定义认证用户信息"></a>4、实验四： 自定义认证用户信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 默认认证</span></span><br><span class="line">    <span class="comment">//super.configure(auth);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//实验四：自定义认证用户信息 - 基于内存认证方式</span></span><br><span class="line">    auth.inMemoryAuthentication()</span><br><span class="line">        .withUser(<span class="string">&quot;zhangsan&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).roles(<span class="string">&quot;学徒&quot;</span>,<span class="string">&quot;大师&quot;</span>)</span><br><span class="line">        .and()</span><br><span class="line">        .withUser(<span class="string">&quot;lisi&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).authorities(<span class="string">&quot;罗汉拳&quot;</span>,<span class="string">&quot;武当长拳&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 输入用户名和密码之后一致，就可以登录页面后台，前提是与自己基于内存认证方式一致的用户名和密码</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203183706.png" alt="image-20210203183705870"></p><ul><li>CSRF 跨站请求伪造</li><li>SpringSecurity 添加了 crsf 功能 【DefaultCsrfToken】,所有的表单提交为了防止跨站请求的伪造，我们需要加上_csrf 项；或者，暂时禁用 <code>http.csrf().disable();</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 可以在页面任意位置加，没有唯一性</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203221250.png" alt="image-20210203221217981"></p><h3 id="5、实验五：用户注销完成"><a href="#5、实验五：用户注销完成" class="headerlink" title="5、实验五：用户注销完成"></a>5、实验五：用户注销完成</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//super.configure(http); // 取消默认配置</span></span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        <span class="comment">// 设置匹配的资源放行</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/layui/**&quot;</span>,<span class="string">&quot;/index.jsp&quot;</span>).permitAll()</span><br><span class="line">        <span class="comment">// 剩余任何资源必须认证</span></span><br><span class="line">        .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//http.logout(); //默认注销请求  请求路径：&quot;/logout&quot;</span></span><br><span class="line">    http.logout().logoutUrl(<span class="string">&quot;/logout&quot;</span>).logoutSuccessUrl(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-item&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;logout&quot;</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;PATH&#125;/logout&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">&quot;$(&#x27;#logout&#x27;).submit()&quot;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203222858.png" alt="image-20210203222857350"></p><ul><li><p>/logout: 退出系统</p></li><li><p><code>如果csrf 开启，必须post、方式的/logout 请求，表单中需要增加 csrf token</code></p></li><li><p>logoutUrl()；退出系统需要发送的请求</p></li><li><p>logoutSuccessUrl()；退出系统成功以后要跳转的页面地址</p></li><li><p>addLogoutHandler()：自定义注销处理器</p></li><li><p>deleteCookies()：指定需要删除的 cookie</p></li><li><p>invalidateHttpSession()：session 失效（DEBUG）</p></li></ul><h3 id="6、实验六：基于角色的访问控制"><a href="#6、实验六：基于角色的访问控制" class="headerlink" title="6、实验六：基于角色的访问控制"></a>6、实验六：基于角色的访问控制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        <span class="comment">// 允许所有人都访问静态资源</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/layui/**&quot;</span>,<span class="string">&quot;/index.jsp&quot;</span>).permitAll()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;学徒&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;大师&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;宗师&quot;</span>)</span><br><span class="line">        <span class="comment">// 放置最后，以上没有规定的都需要权限认证</span></span><br><span class="line">        .anyRequest().authenticated();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><pre><code>1.  将.anyRequest().authenticated()错误的设置在前面，后面的设置就不起作用了。</code></pre><ol start="2"><li> 设置所有, “/**“ 都可以访问，其他再进行的设置就不会起作用了</li><li> 设置匿名访问/level3/** 可以不用登录，匿名访问：<code>.anyRequest().anonymous();</code></li></ol><p><strong>拥有该角色的资源可以访问，否则不可以访问</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 默认认证</span></span><br><span class="line">    <span class="comment">//super.configure(auth);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//实验四：自定义认证用户信息 - 基于内存认证方式</span></span><br><span class="line">    auth.inMemoryAuthentication()</span><br><span class="line">        .withUser(<span class="string">&quot;zhangsan&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).roles(<span class="string">&quot;学徒&quot;</span>,<span class="string">&quot;大师&quot;</span>)</span><br><span class="line">        .and()</span><br><span class="line">        .withUser(<span class="string">&quot;自定义访问拒绝处理页面，lisi&quot;</span>).password(<span class="string">&quot;111111&quot;</span>).authorities(<span class="string">&quot;USER&quot;</span>,<span class="string">&quot;MANGER&quot;</span>);</span><br><span class="line">    <span class="comment">// .withUser(&quot;lisi&quot;).password(&quot;123456&quot;).authorities(&quot;罗汉拳&quot;,&quot;武当长拳&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、实验七：自定义访问拒绝处理页面"><a href="#7、实验七：自定义访问拒绝处理页面" class="headerlink" title="7、实验七：自定义访问拒绝处理页面"></a>7、实验七：自定义访问拒绝处理页面</h3><blockquote><p>直接增加处理映射界面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.exceptionHandling().accessDeniedPage(<span class="string">&quot;/unauth.html&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>在控制器类中增加映射处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/unauth.html&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">unauth</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;unauth&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>增加显示页面，将 main.jsp 复制,命名为 unauth.jsp，增加一句提示信息</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你无权访问该页面...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203225724.png" alt="image-20210203225722734"></p><blockquote><p><strong>测试显示效果</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203225759.png" alt="image-20210203225758442"></p><h3 id="8、实验八：记住我功能"><a href="#8、实验八：记住我功能" class="headerlink" title="8、实验八：记住我功能"></a>8、实验八：记住我功能</h3><h4 id="8-1-记住我功能-免登录原理"><a href="#8-1-记住我功能-免登录原理" class="headerlink" title="8.1 记住我功能-免登录原理"></a>8.1 记住我功能-免登录原理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.rememberMe();</span><br></pre></td></tr></table></figure><blockquote><p>默认规则</p></blockquote><ul><li>页面 checkbox 提交 <code>remember-me</code>参数</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203230541.png" alt="image-20210203230539852"></p><ul><li>默认记住 2 周登录状态：<code>AbstractRememberMeServices</code></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203230713.png" alt="image-20210203230712762"></p><ul><li>会在<strong>cookie</strong>中保存名为：remember-me 的 cookie</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203230802.png" alt="image-20210203230802123"></p><ul><li>登录后页面，关闭浏览器，直接访问：<a href="http://localhost:8080/SpringSecurity/main.html">http://localhost:8080/SpringSecurity/main.html</a> 可以成功访问，不必登录。</li><li>这种方式，token 值是放置在内存中的，<strong>服务器端重启 tomcat,token 会失效</strong>。需要将 token 记录在数据库持久化才不会失效。</li></ul><h4 id="8-2-记住我-数据版"><a href="#8-2-记住我-数据版" class="headerlink" title="8.2 记住我-数据版"></a>8.2 记住我-数据版</h4><blockquote><p><strong>引入 pom.xml 包</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.20.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>配置数据源</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/security?useSSL=false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  jdbcTemplate--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>创建表</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> persistent_logins (</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    series <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">primary</span> <span class="keyword">key</span>,</span><br><span class="line">    token <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    last_used <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203231620.png" alt="image-20210203231619271"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203231728.png" alt="image-20210203231727138"></p><blockquote><p><strong>设置记住我</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//记住我</span></span><br><span class="line">    JdbcTokenRepositoryImpl ptr = <span class="keyword">new</span> JdbcTokenRepositoryImpl();</span><br><span class="line">    ptr.setDataSource(dataSource);</span><br><span class="line">    http.rememberMe().tokenRepository(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203232102.png" alt="image-20210203232100434"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210203232127.png" alt="image-20210203232126591"></p><h2 id="四、认证"><a href="#四、认证" class="headerlink" title="四、认证"></a>四、认证</h2><h3 id="1、自定义-UserDatailsService-检索用户"><a href="#1、自定义-UserDatailsService-检索用户" class="headerlink" title="1、自定义 UserDatailsService 检索用户"></a>1、自定义 UserDatailsService 检索用户</h3><blockquote><p><strong>创建表结构</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_admin` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `loginacct` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `userpswd` <span class="type">char</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `createtime` <span class="type">char</span>(<span class="number">19</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">16</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_admin`(`id`,`loginacct`,`userpswd`,`username`,`email`,`createtime`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;superadmin&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;超级管理员&#x27;</span>,<span class="string">&#x27;admin@atguigu.com&#x27;</span>,<span class="string">&#x27;2019-01-12 17:18:00&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;lisi@atguigu.com&#x27;</span>,<span class="string">&#x27;2019-01-12 17:18:00&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;f1887d3f9e6ee7a32fe5e76f4ab80d63&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;wangwu@163.com&#x27;</span>,<span class="string">&#x27;2019-01-12 17:18:00&#x27;</span>),(<span class="number">8</span>,<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;aaa@atguigu.com&#x27;</span>,<span class="string">&#x27;2019-01-12 17:18:00&#x27;</span>),(<span class="number">12</span>,<span class="string">&#x27;xxxx&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;xxxx&#x27;</span>,<span class="string">&#x27;xxxx@163.com&#x27;</span>,<span class="string">&#x27;2019-01-21 10:54:36&#x27;</span>),(<span class="number">13</span>,<span class="string">&#x27;yy&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;yy&#x27;</span>,<span class="string">&#x27;yy@atguigu.com&#x27;</span>,<span class="string">&#x27;2019-01-21 10:56:49&#x27;</span>),(<span class="number">14</span>,<span class="string">&#x27;qqq&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;qqqq&#x27;</span>,<span class="string">&#x27;qqq@atguigu.com&#x27;</span>,<span class="string">&#x27;2019-01-21 11:00:01&#x27;</span>),(<span class="number">15</span>,<span class="string">&#x27;qqq456&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;测试中文123&#x27;</span>,<span class="string">&#x27;qqq654@atguigu.com&#x27;</span>,<span class="string">&#x27;2019-01-21 11:15:53&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_menu` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `pid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `icon` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `url` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">24</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_menu`(`id`,`pid`,`name`,`icon`,`url`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">0</span>,<span class="string">&#x27;控制面板&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-dashboard&#x27;</span>,<span class="string">&#x27;main.html&#x27;</span>),(<span class="number">2</span>,<span class="number">0</span>,<span class="string">&#x27;权限管理&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon glyphicon-tasks&#x27;</span>,<span class="keyword">NULL</span>),(<span class="number">3</span>,<span class="number">2</span>,<span class="string">&#x27;用户维护&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-user&#x27;</span>,<span class="string">&#x27;admin/index.html&#x27;</span>),(<span class="number">4</span>,<span class="number">2</span>,<span class="string">&#x27;角色维护&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-king&#x27;</span>,<span class="string">&#x27;role/index.html&#x27;</span>),(<span class="number">5</span>,<span class="number">2</span>,<span class="string">&#x27;权限维护&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-lock&#x27;</span>,<span class="string">&#x27;permission/index.html&#x27;</span>),(<span class="number">6</span>,<span class="number">2</span>,<span class="string">&#x27;菜单维护&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-th-list&#x27;</span>,<span class="string">&#x27;menu/index.html&#x27;</span>),(<span class="number">7</span>,<span class="number">0</span>,<span class="string">&#x27;业务审核&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-ok&#x27;</span>,<span class="keyword">NULL</span>),(<span class="number">8</span>,<span class="number">7</span>,<span class="string">&#x27;实名认证审核&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-check&#x27;</span>,<span class="string">&#x27;auth_cert/index.html&#x27;</span>),(<span class="number">9</span>,<span class="number">7</span>,<span class="string">&#x27;广告审核&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-check&#x27;</span>,<span class="string">&#x27;auth_adv/index.html&#x27;</span>),(<span class="number">10</span>,<span class="number">7</span>,<span class="string">&#x27;项目审核&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-check&#x27;</span>,<span class="string">&#x27;auth_project/index.html&#x27;</span>),(<span class="number">11</span>,<span class="number">0</span>,<span class="string">&#x27;业务管理&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-th-large&#x27;</span>,<span class="keyword">NULL</span>),(<span class="number">12</span>,<span class="number">11</span>,<span class="string">&#x27;资质维护&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-picture&#x27;</span>,<span class="string">&#x27;cert/index.html&#x27;</span>),(<span class="number">13</span>,<span class="number">11</span>,<span class="string">&#x27;分类管理&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-equalizer&#x27;</span>,<span class="string">&#x27;certtype/index.html&#x27;</span>),(<span class="number">14</span>,<span class="number">11</span>,<span class="string">&#x27;流程管理&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-random&#x27;</span>,<span class="string">&#x27;process/index.html&#x27;</span>),(<span class="number">15</span>,<span class="number">11</span>,<span class="string">&#x27;广告管理&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-hdd&#x27;</span>,<span class="string">&#x27;advert/index.html&#x27;</span>),(<span class="number">16</span>,<span class="number">11</span>,<span class="string">&#x27;消息模板&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-comment&#x27;</span>,<span class="string">&#x27;message/index.html&#x27;</span>),(<span class="number">17</span>,<span class="number">11</span>,<span class="string">&#x27;项目分类&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-list&#x27;</span>,<span class="string">&#x27;projectType/index.html&#x27;</span>),(<span class="number">18</span>,<span class="number">11</span>,<span class="string">&#x27;项目标签&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-tags&#x27;</span>,<span class="string">&#x27;tag/index.html&#x27;</span>),(<span class="number">19</span>,<span class="number">0</span>,<span class="string">&#x27;参数管理&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-list-alt&#x27;</span>,<span class="string">&#x27;param/index.html&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_permission` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `icon` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `pid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">21</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_permission`(`id`,`name`,`title`,`icon`,`pid`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;用户模块&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-user&#x27;</span>,<span class="number">0</span>),(<span class="number">2</span>,<span class="string">&#x27;user:add&#x27;</span>,<span class="string">&#x27;新增&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-plus&#x27;</span>,<span class="number">1</span>),(<span class="number">3</span>,<span class="string">&#x27;user:delete&#x27;</span>,<span class="string">&#x27;删除&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-remove&#x27;</span>,<span class="number">1</span>),(<span class="number">4</span>,<span class="string">&#x27;user:update&#x27;</span>,<span class="string">&#x27;更新&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-pencil&#x27;</span>,<span class="number">1</span>),(<span class="number">5</span>,<span class="string">&#x27;user:get&#x27;</span>,<span class="string">&#x27;查询&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-zoom-in&#x27;</span>,<span class="number">1</span>),(<span class="number">6</span>,<span class="string">&#x27;user:assign:role&#x27;</span>,<span class="string">&#x27;授予角色&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-user&#x27;</span>,<span class="number">1</span>),(<span class="number">7</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;角色模块&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-heart&#x27;</span>,<span class="number">0</span>),(<span class="number">8</span>,<span class="string">&#x27;role:add&#x27;</span>,<span class="string">&#x27;新增&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-plus&#x27;</span>,<span class="number">7</span>),(<span class="number">9</span>,<span class="string">&#x27;role:delete&#x27;</span>,<span class="string">&#x27;删除&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-remove&#x27;</span>,<span class="number">7</span>),(<span class="number">10</span>,<span class="string">&#x27;role:get&#x27;</span>,<span class="string">&#x27;查询&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-zoom-in&#x27;</span>,<span class="number">7</span>),(<span class="number">11</span>,<span class="string">&#x27;role:update&#x27;</span>,<span class="string">&#x27;修改&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-pencil&#x27;</span>,<span class="number">7</span>),(<span class="number">12</span>,<span class="string">&#x27;role:assign:permission&#x27;</span>,<span class="string">&#x27;授予权限&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-user&#x27;</span>,<span class="number">7</span>),(<span class="number">13</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;菜单模块&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-th-list&#x27;</span>,<span class="number">0</span>),(<span class="number">14</span>,<span class="string">&#x27;menu:add&#x27;</span>,<span class="string">&#x27;新增&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-plus&#x27;</span>,<span class="number">13</span>),(<span class="number">15</span>,<span class="string">&#x27;menu:delete&#x27;</span>,<span class="string">&#x27;删除&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-remove&#x27;</span>,<span class="number">13</span>),(<span class="number">16</span>,<span class="string">&#x27;menu:update&#x27;</span>,<span class="string">&#x27;修改&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-pencil&#x27;</span>,<span class="number">13</span>),(<span class="number">17</span>,<span class="string">&#x27;menu:get&#x27;</span>,<span class="string">&#x27;查询&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-zoom-in&#x27;</span>,<span class="number">13</span>),(<span class="number">18</span>,<span class="string">&#x27;menu:assign:permission&#x27;</span>,<span class="string">&#x27;授予权限&#x27;</span>,<span class="string">&#x27;glyphicon glyphicon-user&#x27;</span>,<span class="number">13</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_role` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">44</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_role`(`id`,`name`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;PM - 项目经理&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;SE - 软件工程师&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;PG - 程序员&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;TL - 组长&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;GL - 组长&#x27;</span>),(<span class="number">6</span>,<span class="string">&#x27;QA - 品质保证&#x27;</span>),(<span class="number">7</span>,<span class="string">&#x27;QC - 品质控制&#x27;</span>),(<span class="number">8</span>,<span class="string">&#x27;SA - 软件架构师&#x27;</span>),(<span class="number">9</span>,<span class="string">&#x27;CMO / CMS - 配置管理员&#x27;</span>),(<span class="number">10</span>,<span class="string">&#x27;测试工程师&#x27;</span>),(<span class="number">11</span>,<span class="string">&#x27;审批人员&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_role_permission` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `roleid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `permissionid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`),</span><br><span class="line">  KEY `FK_Reference_3` (`roleid`),</span><br><span class="line">  KEY `FK_Reference_4` (`permissionid`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `FK_Reference_4` <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (`permissionid`) <span class="keyword">REFERENCES</span> `t_permission` (`id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `FK_Reference_3` <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (`roleid`) <span class="keyword">REFERENCES</span> `t_role` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">14</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_role_permission`(`id`,`roleid`,`permissionid`) <span class="keyword">values</span> (<span class="number">7</span>,<span class="number">1</span>,<span class="number">1</span>),(<span class="number">8</span>,<span class="number">1</span>,<span class="number">2</span>),(<span class="number">9</span>,<span class="number">1</span>,<span class="number">6</span>),(<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>),(<span class="number">11</span>,<span class="number">1</span>,<span class="number">16</span>),(<span class="number">12</span>,<span class="number">1</span>,<span class="number">17</span>),(<span class="number">13</span>,<span class="number">1</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_admin_role` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `adminid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `roleid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`),</span><br><span class="line">  KEY `FK_Reference_1` (`adminid`),</span><br><span class="line">  KEY `FK_Reference_2` (`roleid`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `FK_Reference_2` <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (`roleid`) <span class="keyword">REFERENCES</span> `t_role` (`id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `FK_Reference_1` <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (`adminid`) <span class="keyword">REFERENCES</span> `t_admin` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">15</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_admin_role`(`id`,`adminid`,`roleid`) <span class="keyword">values</span> (<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>),(<span class="number">9</span>,<span class="number">1</span>,<span class="number">4</span>),(<span class="number">11</span>,<span class="number">1</span>,<span class="number">8</span>),(<span class="number">12</span>,<span class="number">15</span>,<span class="number">1</span>),(<span class="number">13</span>,<span class="number">15</span>,<span class="number">2</span>),(<span class="number">14</span>,<span class="number">15</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_permission_menu` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `menuid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `permissionid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`),</span><br><span class="line">  KEY `FK_Reference_10` (`menuid`),</span><br><span class="line">  KEY `FK_Reference_9` (`permissionid`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `FK_Reference_10` <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (`menuid`) <span class="keyword">REFERENCES</span> `t_menu` (`id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `FK_Reference_9` <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (`permissionid`) <span class="keyword">REFERENCES</span> `t_permission` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">19</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_permission_menu`(`id`,`menuid`,`permissionid`) <span class="keyword">values</span> (<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>),(<span class="number">8</span>,<span class="number">2</span>,<span class="number">2</span>),(<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">10</span>,<span class="number">2</span>,<span class="number">4</span>),(<span class="number">11</span>,<span class="number">2</span>,<span class="number">5</span>),(<span class="number">12</span>,<span class="number">2</span>,<span class="number">6</span>),(<span class="number">13</span>,<span class="number">2</span>,<span class="number">7</span>),(<span class="number">14</span>,<span class="number">2</span>,<span class="number">8</span>),(<span class="number">15</span>,<span class="number">2</span>,<span class="number">9</span>),(<span class="number">16</span>,<span class="number">2</span>,<span class="number">10</span>),(<span class="number">17</span>,<span class="number">2</span>,<span class="number">11</span>),(<span class="number">18</span>,<span class="number">2</span>,<span class="number">12</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>配置 configure(AuthenticationManagerBuilder auth)</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserDetailsService userDetailsService;<span class="comment">//用户详情查询服务组件的接口</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//根据用户名查询出用户的详细信息</span></span><br><span class="line">auth.userDetailsService(userDetailsService);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>编写 UserDetailService 实现</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210204160558.png" alt="image-20210204160515382"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        String queryUser = <span class="string">&quot;SELECT * FROM `t_admin` WHERE loginacct=?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、查询指定用户的信息</span></span><br><span class="line">        Map&lt;String, Object&gt; map = jdbcTemplate.queryForMap(queryUser, username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、将查询到的用户封装到框架使用的UserDetails里面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(map.get(<span class="string">&quot;loginacct&quot;</span>).toString(), map.get(<span class="string">&quot;userpswd&quot;</span>).toString(),</span><br><span class="line">                AuthorityUtils.createAuthorityList(<span class="string">&quot;ADMIN&quot;</span>, <span class="string">&quot;USER&quot;</span>));<span class="comment">//暂时写死，过后数据库中查</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>运行测试结果，密码不一致，跳转到登录页，并提示错误消息</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210204160602.png" alt="image-20210204160556591"></p><h3 id="2、基于数据库-MD5-密码-认证"><a href="#2、基于数据库-MD5-密码-认证" class="headerlink" title="2、基于数据库(MD5 密码)认证"></a>2、基于数据库(MD5 密码)认证</h3><h4 id="2-1-配置-configure-AuthenticationManagerBuilder-auth"><a href="#2-1-配置-configure-AuthenticationManagerBuilder-auth" class="headerlink" title="2.1 配置 configure(AuthenticationManagerBuilder auth)"></a>2.1 配置 configure(AuthenticationManagerBuilder auth)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserDetailsService userDetailsService;<span class="comment">//用户详情查询服务组件的接口</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-引入-MD5-加密工具类：MD5Util-java"><a href="#2-2-引入-MD5-加密工具类：MD5Util-java" class="headerlink" title="2.2 引入 MD5 加密工具类：MD5Util.java"></a>2.2 引入 MD5 加密工具类：MD5Util.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.security.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MD5算法 哈希算法 MD5算法具有以下特点： 1、压缩性：任意长度的数据，算出的MD5值长度都是固定的。 2、容易计算：从原数据计算出MD5值很容易。</span></span><br><span class="line"><span class="comment"> * 3、抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。</span></span><br><span class="line"><span class="comment"> * 4、强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Util</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">digest16</span><span class="params">(String inStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> digest(inStr, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">digest</span><span class="params">(String inStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> digest(inStr, <span class="number">32</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">digest</span><span class="params">(String inStr, <span class="keyword">int</span> rang)</span> </span>&#123;</span><br><span class="line">MessageDigest md5 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (StringUtil.isEmpty(inStr)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">md5 = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>); <span class="comment">// 取得算法</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>[] charArray = inStr.toCharArray();</span><br><span class="line"><span class="keyword">byte</span>[] byteArray = <span class="keyword">new</span> <span class="keyword">byte</span>[charArray.length];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length; i++) &#123;</span><br><span class="line">byteArray[i] = (<span class="keyword">byte</span>) charArray[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] md5Bytes = md5.digest(byteArray); <span class="comment">// 加密</span></span><br><span class="line"></span><br><span class="line">StringBuilder hexValue = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; md5Bytes.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> val = ((<span class="keyword">int</span>) md5Bytes[i]) &amp; <span class="number">0xff</span>;</span><br><span class="line"><span class="keyword">if</span> (val &lt; <span class="number">16</span>)</span><br><span class="line">hexValue.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">hexValue.append(Integer.toHexString(val));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (rang == <span class="number">32</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> hexValue.toString();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> hexValue.toString().substring(<span class="number">8</span>, <span class="number">24</span>);<span class="comment">// 转换为32位字符串</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">String s = <span class="keyword">new</span> String(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">System.out.println(digest(s));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-PasswordEncoder-接口实现类：PasswordEncoderImpl"><a href="#2-3-PasswordEncoder-接口实现类：PasswordEncoderImpl" class="headerlink" title="2.3 PasswordEncoder 接口实现类：PasswordEncoderImpl"></a>2.3 PasswordEncoder 接口实现类：PasswordEncoderImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordEncoderImpl</span> <span class="keyword">implements</span> <span class="title">PasswordEncoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  密码加密的算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> charSequence</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(CharSequence charSequence)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MD5Util.digest(charSequence.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较登录密码和数据库存储密码是否一致</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> charSequence 页面的明文密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 数据库的密文密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence charSequence, String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.equals(MD5Util.digest(charSequence.toString()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、基于数据库-BCryptPasswordEncoder-密码加密认证"><a href="#3、基于数据库-BCryptPasswordEncoder-密码加密认证" class="headerlink" title="3、基于数据库(BCryptPasswordEncoder)密码加密认证"></a>3、基于数据库(BCryptPasswordEncoder)密码加密认证</h3><h4 id="3-1-PasswordEncoder-接口"><a href="#3-1-PasswordEncoder-接口" class="headerlink" title="3.1 PasswordEncoder 接口"></a>3.1 PasswordEncoder 接口</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210204163304.png" alt="image-20210204163302959"></p><h4 id="3-2-使用-BCryptPasswordEncoder-进行密码加密"><a href="#3-2-使用-BCryptPasswordEncoder-进行密码加密" class="headerlink" title="3.2 使用 BCryptPasswordEncoder 进行密码加密"></a>3.2 使用 BCryptPasswordEncoder 进行密码加密</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 推荐密码加密器用这个 BCryptPasswordEncoder; 将一个字符串加密成一个永不重复的密文</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">// 1、加盐+加随机数</span></span><br><span class="line">auth.userDetailsService(userDetailsService).passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder());</span><br></pre></td></tr></table></figure><h4 id="3-3-本地测试"><a href="#3-3-本地测试" class="headerlink" title="3.3 本地测试"></a>3.3 本地测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BCryptPasswordEncoderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BCryptPasswordEncoder pe = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line"></span><br><span class="line">        String encode = pe.encode(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        System.out.println(encode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. $2a$10$9MeQiXyoq.DVWmdNPC7/TuiwOPCSmeT0xLbMWkUrbAF5.Pnq2mdEK</span></span><br><span class="line">        <span class="comment">// 2. $2a$10$gqjnDfOJ/c9Stvz6pQFXLOHxIQzSpOQXgcgJxpsMgglAtDrMY2Kda</span></span><br><span class="line">        <span class="comment">// 3. $2a$10$tnjbeb0J1vUdynJeu.IYiu5TPQwmrBUiYa0pfgIZIIuQ3r4yIt/ea</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-服务器运行测试"><a href="#3-4-服务器运行测试" class="headerlink" title="3.4 服务器运行测试"></a>3.4 服务器运行测试</h4><p>将生成的密文存储到数据库中（注意：<code>userpswd字段长度</code>）把 userpaswd 字段长度扩大，重新启动服务器进行测试。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210204164521.png" alt="image-20210204164520586"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>众筹项目Bug整理</title>
      <link href="posts/ed909786/"/>
      <url>posts/ed909786/</url>
      
        <content type="html"><![CDATA[<h2 id="一、页面不删除原有属性，重复加载"><a href="#一、页面不删除原有属性，重复加载" class="headerlink" title="一、页面不删除原有属性，重复加载"></a>一、页面不删除原有属性，重复加载</h2><p>​ 权限维护模块</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210131002953.png" alt="image-20210131002903407"></p><p><strong>解决方式：</strong></p><p><code>原：</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210131003232.png" alt="image-20210131003230871"></p><p><code>改：</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210131003320.png" alt="image-20210131003318858"></p><h2 id="二、后台无法保存获取-ID-值"><a href="#二、后台无法保存获取-ID-值" class="headerlink" title="二、后台无法保存获取 ID 值"></a>二、后台无法保存获取 ID 值</h2><p><code> 问题描述:</code> 权限维护模块从前台获取数据后传输到后台后，在逻辑处理时把获取的参数值，过滤掉 id。导致项目出现修改错误。</p><blockquote><p><strong>修改前：</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210131151311.png" alt="image-20210131151302171"></p><blockquote><p><strong>修改后：</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210131151405.png" alt="image-20210131151403773"></p><p><strong>解决方式：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210201171842.png" alt="image-20210131151443387"></p><p><code>修改为：</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210131151550.png" alt="image-20210131151548139"></p><h2 id="三、整合-SpringSecurity"><a href="#三、整合-SpringSecurity" class="headerlink" title="三、整合 SpringSecurity"></a>三、整合 SpringSecurity</h2><blockquote><p>spring security 的使用时报错如下 <strong>An internal error occurred while trying to authenticate the user A granted authority textual representation is required</strong></p></blockquote><p>使用角色来控制权限的时候不仅仅<br>需要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (TRole role:roleList) &#123;</span><br><span class="line">    authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">&quot;ROLE_&quot;</span>+role.getName()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前面加上 ROLE_的固定格式，还要注意数据库查询出来的值不能为空!，数据中含有空值都不可以</p><p>由于我是用数据库中的表来实验</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210206013542.png" alt="image-20210206013534059"></p><p><code>这是改之后的表</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210206013556.png" alt="image-20210206013554845"></p><blockquote><p><strong>SpringSecurity 配置中的一些问题 登录页面不跳转</strong></p></blockquote><p><code>原：</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210207162356.png" alt="image-20210206013706990"></p><p><code>修改：</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210206013731.png" alt="image-20210206013729575"></p>]]></content>
      
      
      <categories>
          
          <category> 项目Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 安装 Redis</title>
      <link href="posts/15f4985b/"/>
      <url>posts/15f4985b/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-7-安装-Redis"><a href="#CentOS-7-安装-Redis" class="headerlink" title="CentOS 7 安装 Redis"></a>CentOS 7 安装 Redis</h1><h2 id="一、安装环境"><a href="#一、安装环境" class="headerlink" title="一、安装环境"></a>一、安装环境</h2><blockquote><ul><li>CnetOS 7</li><li>Redis 3.2.5 (没有唯一性)</li></ul></blockquote><table><thead><tr><th>Redis 官方网站</th><th>Redis 中文官方网站</th></tr></thead><tbody><tr><td><a href="http://redis.io/"><strong>http://Redis.io</strong></a></td><td><a href="http://www.redis.net.cn/"><strong>http://www.Redis.net.cn</strong></a></td></tr></tbody></table><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><ol><li><strong>下载获得 redis-3.2.5.tar.gz 后将它放入我们的 Linux 目录/opt</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126164332.png" alt="image-20210126164324483"></p><ol start="2"><li><strong>解压</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-3.2.5.tar.gz</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126164534.png" alt="image-20210126164534139"></p><ol start="3"><li><p><strong>在 redis-3.2.5 目录下执行 make 命令</strong> <strong>（redis 使用 C 语言编写的）</strong></p><p>如果<strong>make</strong> 执行<strong>成功</strong>，可以跳过以下，直接 执行 <code>第五步</code>（<strong>执行 make install</strong>）</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126164815.png" alt="image-20210126164814834"></p><p><code>注意：</code> 运行 make 命令时出现故障意出现的错误解析：<strong>gcc</strong>：命令未找到</p><p><strong>运行一下命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line"></span><br><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>在 redis-3.2.5 目录下再次执行 make 命令</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126165117.png" alt="image-20210126165115970"></p><p><code>在一次报错，解决方案：</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make distclean</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126165222.png" alt="image-20210126165221909"></p><p><strong>在 redis-3.2.5 目录下再次执行 make 命令</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126165420.png" alt="image-20210126165419874"></p><ol start="5"><li><strong>执行 make install</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126165832.png" alt="image-20210126165832147"></p><h3 id="2、启动测试"><a href="#2、启动测试" class="headerlink" title="2、启动测试"></a>2、启动测试</h3><p>进入默认安装目录：<strong>usr/local/bin</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2ze0txryr001i924054zZ redis-3.2.5]# cd /usr/local/bin</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126170016.png" alt="image-20210126170015705"></p><ul><li><p>Redis-benchmark:性能测试工具，可以在自己本子运行，看看自己本子性能如何(服务启动起来后执行)</p></li><li><p>Redis-check-aof：修复有问题的 AOF 文件，rdb 和 aof 后面讲</p></li><li><p>Redis-check-dump：修复有问题的 dump.rdb 文件</p></li><li><p>Redis-sentinel：Redis 集群使用</p></li><li><p><strong>redis-server</strong>：Redis 服务器启动命令</p></li><li><p><strong>redis-cli</strong>：客户端，操作入口</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2ze0txryr001i924054zZ bin]# redis-server</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126170316.png" alt="image-20210126170315758"></p><blockquote><p><strong>备份 redis.conf</strong>：拷贝一份 redis.conf 到其他目录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp  /opt/redis-3.2.5/redis.conf  /myredis</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：myredis 这个目录在拷贝之前要存在,没有的话自己先创建在拷贝</p><blockquote><p><strong>修改 myredis 的 redis.conf 文件</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126170747.png" alt="image-20210126170746159"></p><p><strong>修改 redis.conf(128</strong>行)<strong>文件将里面的 daemonize no</strong> <strong>改成 yes</strong>，让服务在后台启动</p><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126170858.png" alt="image-20210126170857792"></p><blockquote><p><strong>启动命令</strong></p></blockquote><p>执行 <code>redis-server /myredis/redis.conf </code><strong>（变为后台启动）</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126171126.png" alt="image-20210126171125872"></p><blockquote><p><strong>客户端访问: Redis-cli</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126171209.png" alt="image-20210126171208826"></p><p><strong>多个端口可以 Redis-cli</strong> <strong>–p 6379</strong></p><blockquote><p><strong>测试验证： ping</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126171247.png" alt="image-20210126171246578"></p><h3 id="3、关闭"><a href="#3、关闭" class="headerlink" title="3、关闭"></a>3、关闭</h3><blockquote><p><strong>单实例关闭：Redis-cli shutdown</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126171334.png" alt="image-20210126171333642"></p><blockquote><p><strong>也可以进入终端后再关闭</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126171406.png" alt="image-20210126171405785"></p><blockquote><p><strong>多实例关闭</strong></p></blockquote><p>​ <strong>指定端口关闭:Redis-cli -p 6379 shutdown</strong></p><h2 id="三、卸载"><a href="#三、卸载" class="headerlink" title="三、卸载"></a>三、卸载</h2><ol><li>查看 redis 是否允许</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep redis</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126171649.png" alt="image-20210126171648881"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli shutdown # 关闭redis</span><br></pre></td></tr></table></figure><ol start="2"><li>删除 make 的时候生成的几个 redisXXX 的文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f /usr/local/bin/redis*</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126171802.png" alt="image-20210126171801308"></p><ol start="3"><li>删除掉解压后的文件目录和所以文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /usr/local/redis</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210126171853.png" alt="image-20210126171852651"></p>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 基础总结（2.X）</title>
      <link href="posts/3b74a348/"/>
      <url>posts/3b74a348/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Github 源码 ：<a href="https://github.com/OYCodeSite/VueCode.git">https://github.com/OYCodeSite/VueCode.git</a></p></blockquote><h1 id="vue-环境搭建"><a href="#vue-环境搭建" class="headerlink" title="vue 环境搭建"></a>vue 环境搭建</h1><h2 id="一、初始化项目"><a href="#一、初始化项目" class="headerlink" title="一、初始化项目"></a>一、初始化项目</h2><ol><li>生成 package.json</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">yarn</span> <span class="string">init</span> <span class="string">-y</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建入口 js: src/index.js</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">console.log(&#x27;Hello</span> <span class="string">Webpack!&#x27;)</span></span><br><span class="line"><span class="string">document.getElementById(&#x27;root&#x27;).innerHTML</span> <span class="string">=</span> <span class="string">&#x27;&lt;h1&gt;Hello222&lt;/h1&gt;&#x27;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建页面文件: index.html</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;div</span> <span class="string">id=&quot;root&quot;&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、webpack-基本使用"><a href="#二、webpack-基本使用" class="headerlink" title="二、webpack 基本使用"></a>二、webpack 基本使用</h2><ol><li>下载依赖包</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">yarn</span> <span class="string">add</span> <span class="string">-D</span> <span class="string">webpack</span> <span class="string">webpack-cli</span></span><br><span class="line"><span class="string">yarn</span> <span class="string">add</span> <span class="string">-D</span> <span class="string">html-webpack-plugin</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建 webpack 配置: webpack.config.js</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">const</span> <span class="string">path</span> <span class="string">=</span> <span class="string">require(&#x27;path&#x27;)</span></span><br><span class="line"><span class="string">const</span> <span class="string">HtmlWebpackPlugin</span> <span class="string">=</span> <span class="string">require(&#x27;html-webpack-plugin&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="string">module.exports</span> <span class="string">=</span> &#123;</span><br><span class="line">  <span class="string">//</span> <span class="string">模式:</span> <span class="string">生产环境</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="string">//</span> <span class="string">入口</span></span><br><span class="line">  <span class="attr">entry:</span> &#123;</span><br><span class="line">    <span class="attr">app:</span> <span class="string">path.resolve(__dirname</span>, <span class="string">&#x27;src/index.js&#x27;</span><span class="string">)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">//</span> <span class="string">出口(打包生成js)</span></span><br><span class="line">  <span class="attr">output:</span> &#123;</span><br><span class="line">    <span class="attr">filename:</span> <span class="string">&#x27;static/js/[name].bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path:</span> <span class="string">path.resolve(__dirname</span>, <span class="string">&#x27;dist&#x27;</span><span class="string">)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">//</span> <span class="string">模块加载器</span></span><br><span class="line">  <span class="attr">module:</span> &#123;</span><br><span class="line">    <span class="attr">rules:</span> [</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">//</span> <span class="string">插件</span></span><br><span class="line">  <span class="attr">plugins:</span> [</span><br><span class="line">    <span class="string">new</span> <span class="string">HtmlWebpackPlugin(</span>&#123;</span><br><span class="line">      <span class="attr">template:</span> <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">filename:</span> <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">    &#125;<span class="string">)</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>生成环境打包并运行</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">配置打包命令:</span>  <span class="attr">&quot;build&quot;:</span> <span class="string">&quot;webpack --mode production&quot;</span></span><br><span class="line"><span class="string">打包项目:</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line"><span class="string">运行打包项目:</span> <span class="string">serve</span> <span class="string">dist</span></span><br></pre></td></tr></table></figure><h2 id="三、开发环境运行"><a href="#三、开发环境运行" class="headerlink" title="三、开发环境运行"></a>三、开发环境运行</h2><ol><li>现在的问题</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每次修改项目代码后, 必须重新打包, 重新运行</span><br></pre></td></tr></table></figure><ol start="2"><li>下载依赖包</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">yarn</span> <span class="string">add</span> <span class="string">-D</span> <span class="string">webpack-dev-server</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置开发服务器</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer:</span> &#123; <span class="attr">open:</span> <span class="literal">true</span>, <span class="string">?</span> <span class="string">//</span> <span class="string">自动打开浏览器</span></span><br><span class="line">      <span class="string">quiet</span></span><br><span class="line">    <span class="string">:</span> <span class="literal">true</span>, <span class="string">//</span> <span class="string">不做太多日志输出</span> &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>配置开启 source-map 调试</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devtool:</span> <span class="string">&quot;cheap-module-eval-source-map&quot;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>开发环境运行</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">配置命令:</span> <span class="attr">&quot;dev&quot;:</span> <span class="string">&quot;webpack-dev-server --mode development&quot;</span></span><br><span class="line"><span class="string">执行命令:</span> <span class="string">yarn</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><h2 id="四、打包处理-ES6-CSS-图片"><a href="#四、打包处理-ES6-CSS-图片" class="headerlink" title="四、打包处理 ES6/CSS/图片"></a>四、打包处理 ES6/CSS/图片</h2><ol><li>处理 ES6</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">a.</span> <span class="string">下载依赖包</span></span><br><span class="line"><span class="string">yarn</span> <span class="string">add</span> <span class="string">-D</span> <span class="string">babel-loader</span> <span class="string">@babel/core</span> <span class="string">@babel/preset-env</span></span><br><span class="line"><span class="string">b.</span> <span class="string">配置</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">test:</span> <span class="string">/\.js$/</span>,</span><br><span class="line">        <span class="string">//exclude:</span> <span class="string">/(node_modules|bower_components)/</span>,</span><br><span class="line">        <span class="attr">include:</span> <span class="string">path.resolve(__dirname</span>, <span class="string">&#x27;src&#x27;</span><span class="string">)</span>,</span><br><span class="line">        <span class="attr">use:</span> &#123;</span><br><span class="line">            <span class="attr">loader:</span> <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options:</span> &#123;</span><br><span class="line">            <span class="attr">presets:</span> [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>处理 CSS</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a. 下载依赖包</span><br><span class="line">    yarn add -D css-loader style-loader</span><br><span class="line">b. 配置</span><br><span class="line">&#123;</span><br><span class="line">    test: /\.css$/,</span><br><span class="line">    use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>], <span class="comment">// 多个loader从右到左处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>处理图片</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">a.</span> <span class="string">下载依赖包</span></span><br><span class="line">       <span class="string">yarn</span> <span class="string">add</span> <span class="string">-D</span> <span class="string">url-loader@2.3.0</span> <span class="string">file-loader@4.3.0</span></span><br><span class="line"><span class="string">b.</span> <span class="string">配置</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">test:</span> <span class="string">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line"><span class="attr">loader:</span> <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line"><span class="attr">options:</span> &#123;</span><br><span class="line"><span class="attr">limit:</span> <span class="number">1000</span>,</span><br><span class="line"><span class="attr">name:</span> <span class="string">&#x27;static/img/[name].[hash:7].[ext]&#x27;</span> <span class="string">//</span> <span class="string">相对于output.path</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">a.</span> <span class="string">添加图片:</span> <span class="string">src/assets/imgs/logo.png</span></span><br><span class="line"><span class="string">b.</span> <span class="string">添加css:</span> <span class="string">src/assets/css/my.css</span></span><br><span class="line"><span class="string">img</span> &#123;</span><br><span class="line"><span class="attr">width:</span> <span class="string">200px;</span></span><br><span class="line"><span class="attr">height:</span> <span class="string">200px;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">c.</span> <span class="string">index.js</span></span><br><span class="line"><span class="string">import</span> <span class="string">logo</span> <span class="string">from</span> <span class="string">&#x27;./assets/imgs/logo.png&#x27;</span></span><br><span class="line"><span class="string">import</span>  <span class="string">&#x27;./assets/css/my.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">const</span> <span class="string">image</span> <span class="string">=</span> <span class="string">new</span> <span class="string">Image()</span></span><br><span class="line"><span class="string">image.src</span> <span class="string">=</span> <span class="string">logo</span></span><br><span class="line"><span class="string">document.body.appendChild(image)</span></span><br><span class="line"><span class="string">document.getElementById(&#x27;root&#x27;).innerHTML</span> <span class="string">=</span> <span class="string">&#x27;&lt;h1&gt;Hello222&lt;/h1&gt;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="五、搭建-vue-的环境"><a href="#五、搭建-vue-的环境" class="headerlink" title="五、搭建 vue 的环境"></a>五、搭建 vue 的环境</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1). 文档:</span><br><span class="line">    https://vue-loader.vuejs.org/zh/</span><br><span class="line"></span><br><span class="line">2). 下载依赖包:</span><br><span class="line">    yarn add vue</span><br><span class="line">    yarn add -D vue-loader vue-template-compiler</span><br><span class="line"></span><br><span class="line">3). 配置</span><br><span class="line">    const VueLoaderPlugin = require(&#x27;vue-loader/lib/plugin&#x27;)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">      test: /\.vue$/,</span><br><span class="line">      include: path.resolve(__dirname, &#x27;src&#x27;),</span><br><span class="line">      loader: &#x27;vue-loader&#x27;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">      test: /\.css$/,</span><br><span class="line">      use: [&#x27;vue-style-loader&#x27;, &#x27;css-loader&#x27;],</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    new VueLoaderPlugin()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引入模块的解析</span></span><br><span class="line">    resolve: &#123;</span><br><span class="line">      extensions: [&#x27;.js&#x27;, &#x27;.vue&#x27;, &#x27;.json&#x27;], // 可以省略的后缀名</span><br><span class="line">      alias: &#123; // 路径别名(简写方式)</span><br><span class="line">        &#x27;vue$&#x27;: &#x27;vue/dist/vue.esm.js&#x27;,  // 表示精准匹配</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">4). 编码:</span><br><span class="line">    src/App.vue</span><br><span class="line">    src/index.js</span><br></pre></td></tr></table></figure><h2 id="六、解决开发环境-ajax-请求跨域问题"><a href="#六、解决开发环境-ajax-请求跨域问题" class="headerlink" title="六、解决开发环境 ajax 请求跨域问题"></a>六、解决开发环境 ajax 请求跨域问题</h2><ol><li>利用 webpack-dev-server 进行请求代理转发</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">webpack-dev-server内部利用http-proxy-middle包对特定请求进行转发操作</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置:</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">        <span class="comment">// 处理以/api开头路径的请求</span></span><br><span class="line">        <span class="comment">// &#x27;/api&#x27;: &#x27;http://localhost:4000&#x27;</span></span><br><span class="line">        &#x27;/api&#x27;: &#123;</span><br><span class="line">            target: &#x27;http://localhost:4000&#x27;, // 转发的目标地址</span><br><span class="line">            pathRewrite: &#123;</span><br><span class="line">                &#x27;^/api&#x27; : &#x27;&#x27;  // 转发请求时去除路径前面的/api</span><br><span class="line">            &#125;,</span><br><span class="line">            changeOrigin: true, // 支持跨域</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">).</span> <span class="string">利用webpack-dev-server进行请求代理转发</span></span><br><span class="line">    <span class="string">webpack-dev-server内部利用http-proxy-middle包对特定请求进行转发操作</span></span><br><span class="line"><span class="number">2</span><span class="string">).</span> <span class="string">配置:</span></span><br><span class="line">    <span class="attr">devServer:</span> &#123;</span><br><span class="line">      <span class="attr">proxy:</span> &#123;</span><br><span class="line">        <span class="string">//</span> <span class="string">处理以/api开头路径的请求</span></span><br><span class="line">        <span class="string">//</span> <span class="string">&#x27;/api&#x27;</span><span class="string">:</span> <span class="string">&#x27;http://localhost:4000&#x27;</span></span><br><span class="line">        <span class="string">&#x27;/api&#x27;</span><span class="string">:</span> &#123;</span><br><span class="line">          <span class="attr">target:</span> <span class="string">&#x27;http://localhost:4000&#x27;</span>, <span class="string">//</span> <span class="string">转发的目标地址</span></span><br><span class="line">          <span class="attr">pathRewrite:</span> &#123;</span><br><span class="line">            <span class="string">&#x27;^/api&#x27;</span> <span class="string">:</span> <span class="string">&#x27;&#x27;</span>  <span class="string">//</span> <span class="string">转发请求时去除路径前面的/api</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">changeOrigin:</span> <span class="literal">true</span>, <span class="string">//</span> <span class="string">支持跨域</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="七、配置-async-await-的编译环境"><a href="#七、配置-async-await-的编译环境" class="headerlink" title="七、配置 async/await 的编译环境"></a>七、配置 async/await 的编译环境</h2><ol><li>下载包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel/runtime-corejs2</span><br></pre></td></tr></table></figure><ol start="2"><li>配置</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">presets: [</span><br><span class="line">   [&#x27;@babel/preset-env&#x27;, &#123;</span><br><span class="line">       useBuiltIns: &#x27;usage&#x27;,</span><br><span class="line">       &#x27;corejs&#x27;: 2 // 处理一些新语法的实现</span><br><span class="line">   &#125;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="八、解决-mint-ui-按需引入配置异常的问题"><a href="#八、解决-mint-ui-按需引入配置异常的问题" class="headerlink" title="八、解决 mint-ui 按需引入配置异常的问题"></a>八、解决 mint-ui 按需引入配置异常的问题</h2><ol><li>文档上的配置</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;plugins&quot;: [</span><br><span class="line">    [<span class="string">&quot;component&quot;</span>, [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;libraryName&quot;</span>: <span class="string">&quot;mint-ui&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;style&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="2"><li>异常信息</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Error:</span> <span class="string">.plugins[0][1]</span> <span class="string">must</span> <span class="string">be</span> <span class="string">an</span> <span class="string">object,</span> <span class="literal">false</span><span class="string">,</span> <span class="string">or</span> <span class="string">undefined</span></span><br></pre></td></tr></table></figure><ol start="3"><li> 原因</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文档编写时, 是根据老的babel版本编写的, 新版本的babel配置有变化</span><br><span class="line">以前是数组, 现在只能是对象</span><br></pre></td></tr></table></figure><ol start="4"><li>修正</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;plugins&quot;: [</span><br><span class="line">    [<span class="string">&quot;component&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">&quot;libraryName&quot;</span>: <span class="string">&quot;mint-ui&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;style&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="九、解决-history-模式路由请求-404-的问题"><a href="#九、解决-history-模式路由请求-404-的问题" class="headerlink" title="九、解决 history 模式路由请求 404 的问题"></a>九、解决 history 模式路由请求 404 的问题</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">devServer: historyApiFallback: true, // 任意的 404 响应都被替代为 index.html</span><br><span class="line">output: publicPath: &#x27;/&#x27;, // 引入打包的文件时路径以/开头</span><br></pre></td></tr></table></figure><h1 id="vue-组件化"><a href="#vue-组件化" class="headerlink" title="vue 组件化"></a>vue 组件化</h1><h2 id="一、vue-单文件组件"><a href="#一、vue-单文件组件" class="headerlink" title="一、vue 单文件组件"></a>一、vue 单文件组件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;xxx&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: []&#x2F;&#123;&#125;</span><br><span class="line">  data()&#123;&#125;,</span><br><span class="line">  computed: &#123;&#125;</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  watch: &#123;&#125;</span><br><span class="line">  filters: &#123;&#125;</span><br><span class="line">  directives: &#123;&#125;</span><br><span class="line">  components: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="二、组件化编码的基本流程"><a href="#二、组件化编码的基本流程" class="headerlink" title="二、组件化编码的基本流程"></a>二、组件化编码的基本流程</h2><ol><li><p>拆分界面, 抽取组件</p></li><li><p>编写静态组件</p></li><li><p>编写动态组件</p><ul><li>初始化数据, 动态显示初始化界面</li><li>实现与用户交互功能</li></ul></li><li><p>设计 data<br>类型: [{id: 1, title: ‘xxx’, completed: false}]<br>名称: todos<br>位置: 如果只是哪个组件用, 交给它, 如果是哪些组件用, 交给共同的父组件</p></li><li><p>关于状态数据的更新<br>data 数据定义在哪个组件, 更新数据的行为就定义在哪个组件<br>如果子组件要更新父组件的数据, 调用父组件的更新函数来更新父组件的数据<br>一个组件接收属性数据不要直接修改, 只是用来读取显示的</p></li></ol><h2 id="三、组件间通信"><a href="#三、组件间通信" class="headerlink" title="三、组件间通信"></a>三、组件间通信</h2><ol><li><strong>组件通信的 5 种方式</strong></li></ol><blockquote><p>props<br>vue 的自定义事件<br>全局事件总线<br>slot<br>vuex</p></blockquote><ol start="2"><li><strong>props</strong></li></ol><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">父子组件间通信的基本方式</span><br><span class="line">属性值的2大类型:</span><br><span class="line">    一般&#x2F;非函数: 父组件--&gt;子组件</span><br><span class="line">    函数: 子组件--&gt;父组件</span><br><span class="line">问题:</span><br><span class="line">    隔层组件间传递: 必须逐层传递(麻烦)</span><br><span class="line">    兄弟组件间: 必须借助父组件(麻烦)</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>vue 自定义事件</strong></li></ol><ul><li>给子组件标签绑定事件监听</li><li>子组件向父组件的通信方式</li><li>功能类似于 function props</li><li>不适合隔层组件和兄弟组件间的通信</li></ul><ol start="4"><li>全局事件总线</li></ol><ul><li>利用 vm 对象的$on()/$emit()/$off()</li><li>利用 vm 对象是组件对象的原型对象</li><li>创建 vm 对象作为全局事件总线对象保存到 Vue 的原型对象上, 所有的组件对象都可以直接可见:<ul><li>Vue.prototype.$bus = new Vue()</li><li>任意组件 A 可以通过 this.$bus.$on()绑定监听接收数据</li><li>任意组件 B 可以通过 this.$bus.$emit()分发事件, 传递数据</li></ul></li></ul><ol start="4"><li><strong>slot</strong></li></ol><ul><li>父组件向子组件通信</li><li>通信是带数据的标签</li></ul><p><code>注意</code>: ==标签是在父组件中解析==</p><ol start="5"><li><strong>vuex</strong></li></ol><ul><li>多组件共享状态(数据的管理)</li><li>组件间的关系也没有限制</li><li>功能比事件总线强大, 更适用于 vue 项目</li></ul><h1 id="vue-单文件组件"><a href="#vue-单文件组件" class="headerlink" title="vue 单文件组件"></a>vue 单文件组件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;xxx&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: []&#x2F;&#123;&#125;</span><br><span class="line">  data()&#123;&#125;,</span><br><span class="line">  computed: &#123;&#125;</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  watch: &#123;&#125;</span><br><span class="line">  filters: &#123;&#125;</span><br><span class="line">  directives: &#123;&#125;</span><br><span class="line">  components: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h1 id="vue-ajax"><a href="#vue-ajax" class="headerlink" title="vue-ajax"></a>vue-ajax</h1><h2 id="一、vue-项目中常用的-2-个-ajax-库"><a href="#一、vue-项目中常用的-2-个-ajax-库" class="headerlink" title="一、vue 项目中常用的 2 个 ajax 库"></a>一、vue 项目中常用的 2 个 ajax 库</h2><ul><li><p><strong>vue-resource</strong></p><p>vue 插件，非官方库， vue1.x 使用广泛</p><p><strong>在线文档：</strong><a href="https://github.com/pagekit/vue-resource/blob/develop/docs/http.md">https://github.com/pagekit/vue-resource/blob/develop/docs/http.md</a></p></li><li><p><strong>axios</strong></p><p>通用的 ajax 请求库，官方推荐， vue2.x 使用广泛</p><p><strong>在线文档：</strong><a href="https://github.com/pagekit/vue-resource/blob/develop/docs/http.md">https://github.com/pagekit/vue-resource/blob/develop/docs/http.md</a></p></li></ul><p><strong>安装插件：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// yarn 安装</span><br><span class="line">yarn add vue-resource axios</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// nmp 安装</span><br><span class="line">npm install vue-resource --save</span><br><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure><h2 id="二、vue-resource、axios-的使用"><a href="#二、vue-resource、axios-的使用" class="headerlink" title="二、vue-resource、axios 的使用"></a>二、vue-resource、axios 的使用</h2><blockquote><p><strong>案例效果</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210113113619.gif" alt="ajax_test (4)"></p><blockquote><p><strong>vue-resource:</strong></p></blockquote><p><strong>编码：</strong></p><p><em>index.js</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">&quot;vue-resource&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> APP <span class="keyword">from</span> <span class="string">&quot;./APP.vue&quot;</span>; <span class="comment">// 引入自定义组件</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明使用Vue插件</span></span><br><span class="line">Vue.use(VueResource); <span class="comment">// 内部给所有的组件对象都添加一个属性对象: $http</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&quot;#root&quot;</span>,</span><br><span class="line">  render: <span class="function">(<span class="params">h</span>) =&gt;</span> h(APP),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><em>APP.vue</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p v-if&#x3D;&quot;!repoName&quot;&gt;loading...&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p v-else&gt;</span><br><span class="line">      most star repo is</span><br><span class="line">      &lt;a :href&#x3D;&quot;repoUrl&quot;&gt;&#123;&#123; repoName &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;ecmascript-6&quot;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            repoName : &#39;&#39;,</span><br><span class="line">            repoUrl: &#39;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">      &#x2F;&#x2F; 利用vue-resource发送ajax请求获取数据</span><br><span class="line">      this.$http.get(&#39;https:&#x2F;&#x2F;api.github.com&#x2F;search&#x2F;repositories?q&#x3D;v&amp;sort&#x3D;stars&#39;)</span><br><span class="line">      .then(response &#x3D;&gt;&#123;</span><br><span class="line">          const result &#x3D; response.data;</span><br><span class="line">          const &#123;name,html_url&#125; &#x3D; result.items[0];</span><br><span class="line">          this.repoName &#x3D; name;</span><br><span class="line">          this.repoUrl &#x3D; html_url;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(error &#x3D;&gt;&#123;</span><br><span class="line">          alert(&#39;请求出错了&#39;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>axios</strong></p></blockquote><p><em>index.js</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> APP <span class="keyword">from</span> <span class="string">&quot;./APP.vue&quot;</span>; <span class="comment">// 引入自定义组件</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&quot;#root&quot;</span>,</span><br><span class="line">  render: <span class="function">(<span class="params">h</span>) =&gt;</span> h(APP),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><em>APP.vue</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p v-if&#x3D;&quot;!repoName&quot;&gt;loading...&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p v-else&gt;</span><br><span class="line">      most star repo is</span><br><span class="line">      &lt;a :href&#x3D;&quot;repoUrl&quot;&gt;&#123;&#123; repoName &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;ecmascript-6&quot;&gt;</span><br><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">  export default &#123;</span><br><span class="line">      data()&#123;</span><br><span class="line">          return&#123;</span><br><span class="line">              repoName : &#39;&#39;,</span><br><span class="line">              repoUrl: &#39;&#39;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        &#x2F;&#x2F; 利用axious 发送ajax 请求获取数据</span><br><span class="line">        axios.get(&#39;https:&#x2F;&#x2F;api.github.com&#x2F;search&#x2F;repositories&#39;,&#123;</span><br><span class="line">            params: &#123;</span><br><span class="line">                q : &#39;v&#39;,</span><br><span class="line">                sort: &#39;stars&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(response &#x3D;&gt;&#123;</span><br><span class="line">            const result &#x3D; response.data;</span><br><span class="line">            const &#123;name, html_url&#125; &#x3D; result.items[0];</span><br><span class="line">            this.repoName &#x3D; name;</span><br><span class="line">            this.repoUrl &#x3D; html_url;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(error &#x3D;&gt;&#123;</span><br><span class="line">            alert(&#39;请求出错了&#39;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="三、使用-express-快速搭建后台接口"><a href="#三、使用-express-快速搭建后台接口" class="headerlink" title="三、使用 express 快速搭建后台接口"></a>三、使用 express 快速搭建后台接口</h2><p><strong>编码：</strong></p><p><em>server.js</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    后台服务器应用模块： 使用express快速搭建后台路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册后台路由（转发请求）</span></span><br><span class="line">app.get(<span class="string">&quot;/repositories/:q&quot;</span>, <span class="function">(<span class="params">rep, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> q = rep.params.q;</span><br><span class="line">  axios(&#123;</span><br><span class="line">    method: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    url: <span class="string">&quot;https://api.github.com/search/repositories&quot;</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">      q,</span><br><span class="line">      sort: <span class="string">&quot;stars&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, html_url &#125; = response.data.items[<span class="number">0</span>];</span><br><span class="line">    res.send(&#123;</span><br><span class="line">      status: <span class="number">0</span>,</span><br><span class="line">      data: &#123; name, html_url &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="string">&quot;4000&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;server listen on http://localhost:4000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><blockquote><p><strong>启动 express:</strong> node server.js</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210113123342.png" alt="image-20210113123341827"></p><ul><li><a href="http://localhost:4000/repositories/v">http://localhost:4000/repositories/v</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210113123246.png" alt="image-20210113123245518"></p><h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><h2 id="一、vuex-的核心概念"><a href="#一、vuex-的核心概念" class="headerlink" title="一、vuex 的核心概念"></a>一、vuex 的核心概念</h2><h3 id="1、state"><a href="#1、state" class="headerlink" title="1、state"></a>1、state</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vuex管理的状态对象 它应该是唯一的 const state &#x3D; &#123; xxx: initValue &#125;</span><br></pre></td></tr></table></figure><h3 id="2、mutations"><a href="#2、mutations" class="headerlink" title="2、mutations"></a>2、mutations</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">包含多个直接更新state的方法(回调函数)的对象 谁来触发:</span><br><span class="line">action中的commit(&#39;mutation名称&#39;) 只能包含同步的代码, 不能写异步代码 const</span><br><span class="line">mutations &#x3D; &#123; yyy (state, &#123;data1&#125;) &#123; &#x2F;&#x2F; 更新state的某个属性 &#125; &#125;</span><br></pre></td></tr></table></figure><h3 id="3、actions"><a href="#3、actions" class="headerlink" title="3、actions"></a>3、actions</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">包含多个事件回调函数的对象 通过执行: commit()来触发mutation的调用, 间接更新state</span><br><span class="line">谁来触发: 组件中: $store.dispatch(&#39;action名称&#39;, data1) &#x2F;&#x2F; &#39;zzz&#39;</span><br><span class="line">可以包含异步代码(定时器, ajax) const actions &#x3D; &#123; zzz (&#123;commit, state&#125;, data1) &#123;</span><br><span class="line">commit(&#39;yyy&#39;, &#123;data1&#125;) &#125; &#125;</span><br></pre></td></tr></table></figure><h3 id="4、getters"><a href="#4、getters" class="headerlink" title="4、getters"></a>4、getters</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">包含多个计算属性(getter)的对象 谁来读取: 组件中: $store.getters.xxx const</span><br><span class="line">getters &#x3D; &#123; mmm (state) &#123; return ... &#125; &#125;</span><br></pre></td></tr></table></figure><h3 id="5、modules"><a href="#5、modules" class="headerlink" title="5、modules"></a>5、modules</h3><pre><code>包含多个module的对象一个module是一个包含state/mutations/actions/getters的对象是将一复杂应用的vuex代码进行多模块拆分的第2种方式</code></pre><h3 id="6、store"><a href="#6、store" class="headerlink" title="6、store"></a>6、store</h3><pre><code>vuex的核心管理对象, 是组件与vuex通信的中间人读取数据的属性    state: 包含最新状态数据的对象    getters: 包含getter计算属性的对象更新数据的方法    dispatch(): 分发调用action    commit(): 提交调用mutation</code></pre><h2 id="二、使用-vuex"><a href="#二、使用-vuex" class="headerlink" title="二、使用 vuex"></a>二、使用 vuex</h2><h2 id="1-创建并向外暴露-store-对象"><a href="#1-创建并向外暴露-store-对象" class="headerlink" title="1. 创建并向外暴露 store 对象"></a>1. 创建并向外暴露 store 对象</h2><pre><code>export default new Vuex.Store(&#123;  state,  mutations,  actions,  getters,  modules: &#123;    a,    b  &#125;&#125;)</code></pre><h2 id="2-注册-store-main-js"><a href="#2-注册-store-main-js" class="headerlink" title="2. 注册 store: main.js"></a>2. 注册 store: main.js</h2><pre><code>import store from &#39;./store&#39;new Vue(&#123;  store&#125;)</code></pre><h2 id="3-组件中通过-store-与-vuex-通信"><a href="#3-组件中通过-store-与-vuex-通信" class="headerlink" title="3. 组件中通过 store 与 vuex 通信"></a>3. 组件中通过 store 与 vuex 通信</h2><pre><code>import &#123;mapState, mapGetters&#125; from &#39;vuex&#39;export default &#123;  computed: (    ...mapState([&#39;xxx&#39;]),    ...mapGetters([&#39;yyy&#39;])  )  methods: &#123;        test () &#123;            this.$store.dispatch(&#39;zzz&#39;, data)            this.$store.commit(&#39;zzz&#39;, data)        &#125;  &#125;&#125;</code></pre><h2 id="三、-Vuex-结构图"><a href="#三、-Vuex-结构图" class="headerlink" title="三、 Vuex 结构图"></a>三、 Vuex 结构图</h2><p><img src= "/img/loading.gif" data-lazy-src="https://pic.oy6090.top/img/20210125001801.png" alt="image-20210125001753385"></p><h1 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h1><h2 id="一、vue-router-的基本使用"><a href="#一、vue-router-的基本使用" class="headerlink" title="一、vue-router 的基本使用"></a>一、vue-router 的基本使用</h2><pre><code>1). 创建路由器: router/index.js    new VueRouter(&#123;      mode: &#39;hash/history&#39;      routes: [        &#123; // 一般路由          path: &#39;/about&#39;,          component: About        &#125;,        &#123; // 自动跳转路由          path: &#39;/&#39;,          redirect: &#39;/about&#39;        &#125;      ]    &#125;)2). 注册路由器: main.js    import router from &#39;./router&#39;    new Vue(&#123;      router    &#125;)3). 使用路由组件标签:    &lt;router-link to=&quot;/xxx&quot;&gt;Go to XXX&lt;/router-link&gt;  // 可以不使用    &lt;router-view&gt;&lt;/router-view&gt;  // 必须使用4). 2个对象    $router: 代表路由器对象, 包含一些实现路由跳转/导航的方法: push()/replace()/back()    $route: 代表当前路由对象, 包含一些路由相关的属性: path/params/query/meta</code></pre><h2 id="二、编写路由的-3-步"><a href="#二、编写路由的-3-步" class="headerlink" title="二、编写路由的 3 步"></a>二、编写路由的 3 步</h2><ul><li><p>定义路由组件</p></li><li><p>映射路由</p></li><li><p>使用<router-view/>显示当前路由组件</p></li></ul><h2 id="三、-嵌套路由"><a href="#三、-嵌套路由" class="headerlink" title="三、 嵌套路由"></a>三、 嵌套路由</h2><pre><code>children: [    &#123;      path: &#39;/home/news/:id/:title&#39;,      component: news    &#125;,    &#123;      path: &#39;message&#39;,      component: message    &#125;]</code></pre><h2 id="四、-向路由组件传递数据"><a href="#四、-向路由组件传递数据" class="headerlink" title="四、 向路由组件传递数据"></a>四、 向路由组件传递数据</h2><pre><code>params/query: &lt;router-link to=&quot;/home/news/123/abc?zzz=1234&quot;&gt;将请求参数映射成props: props=true | props: route =&gt; (&#123;id: route.params.id&#125;)变相props: &lt;router-view msg=&#39;abc&#39;&gt;</code></pre><h2 id="五、动态路由与路由别名"><a href="#五、动态路由与路由别名" class="headerlink" title="五、动态路由与路由别名"></a>五、动态路由与路由别名</h2><pre><code>注册路由:    &#123;        name: &#39;news&#39;        path: &#39;/home/news/:id/:title&#39;,        component: News    &#125;跳转:    &lt;router-link to=&quot;&#123;name: &#39;news&#39;, params: &#123;id: 1, title: &#39;abc&#39;&#125;&#125;&quot;&gt;    router.push(&#123;name: &#39;news&#39;, params: &#123;id: 1, title: &#39;abc&#39;&#125;&#125;)</code></pre><h2 id="六、缓存路由组件"><a href="#六、缓存路由组件" class="headerlink" title="六、缓存路由组件"></a>六、缓存路由组件</h2><pre><code>路由组件对象默认的生命周期: 被切换时就会死亡, 切换回来时重新创建&lt;keep-alive exlude=&quot;A,B&quot;&gt;  &lt;router-view&gt;&lt;/router-view&gt;&lt;/keep-alive&gt;</code></pre><h2 id="七、-路由的编程式导航"><a href="#七、-路由的编程式导航" class="headerlink" title="七、 路由的编程式导航"></a>七、 路由的编程式导航</h2><pre><code>this.$router.push(path): 相当于点击路由链接(可以返回到当前路由界面)this.$router.replace(path): 用新路由替换当前路由(不可以返回到当前路由界面)this.$router.back(): 请求(返回)上一个记录路由</code></pre><h2 id="八、-路由的-2-种模式比较-解决-history-模式-404-问题"><a href="#八、-路由的-2-种模式比较-解决-history-模式-404-问题" class="headerlink" title="八、 路由的 2 种模式比较, 解决 history 模式 404 问题"></a>八、 路由的 2 种模式比较, 解决 history 模式 404 问题</h2><pre><code>hash模式:    路径中带#: http://localhost:8080/#/home/news    发请求的路径: http://localhost:8080  项目根路径    响应: 返回的总是index页面  ==&gt; path部分(/home/news)被解析为前台路由路径history模式:    路径中不带#: http://localhost:8080/home/news    发请求的路径: http://localhost:8080/home/news    响应: 404错误    希望: 如果没有对应的资源, 返回index页面, path部分(/home/news)被解析为前台路由路径    解决: 添加配置        devServer: historyApiFallback: true, // 任意的 404 响应都被替代为 index.html        output: publicPath: &#39;/&#39;, // 引入打包的文件时路径以/开头</code></pre><h1 id="Vue-源码分析"><a href="#Vue-源码分析" class="headerlink" title="Vue 源码分析"></a>Vue 源码分析</h1><h2 id="一、debug-调试"><a href="#一、debug-调试" class="headerlink" title="一、debug 调试"></a>一、debug 调试</h2><ol><li><p>调试的目的</p><p>查找 bug: 不断缩小可疑代码的范围</p><p>查看程序的运行流程(用于熟悉新接手项目的代码)</p></li><li><p>如何开启调试模式</p><p>添加 debugger 语句: 程序运行前 此方式用打包后才运行的项目</p><p>添加(打)断点: 程序运行前或者过程中 此方式用运行源码 js</p></li><li><p>如何进行调试操作</p><p><strong>resume</strong>: 恢复程序执行(可能执行完或者进入下一个断点处)<br><strong>step over</strong>: 单步跳转, 尝试执行完当前语句, 进入下一条(如果内部有断点, 自动进入内部断点处)<br><strong>step into</strong>: 跳入, 进入当前调用函数内部<br><strong>step out</strong>: 跳出, 一次性执行完当前函数后面所有语句,并出去<br><strong>deactivate breakpoints</strong>: 使所有断点暂时失效</p><p><strong>call stack:</strong> 显示是程序函数调用的过程</p><p><strong>scope:</strong> 当前执行环境对应的作用域中包含的变量数据</p><p><strong>breakpoints:</strong> 断点列表</p></li></ol><h2 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h2><ol><li>[].slice.call(lis): 将伪数组转换为真数组</li><li>node.nodeType: 得到节点类型</li><li>Object.defineProperty(obj, propertyName, {}): 给对象添加/修改属性(指定描述符)<ol><li>configurable: true/false 是否可以重新 define</li><li>enumerable: true/false 是否可以枚举(for..in / keys())</li><li>value: 指定初始值</li><li>writable: true/false value 是否可以修改存取(访问)描述符</li><li>get: 函数, 用来得到当前属性值</li><li>set: 函数, 用来监视当前属性值的变化</li></ol></li><li>Object.keys(obj): 得到对象自身可枚举的属性名的数组</li><li>DocumentFragment: 文档碎片(高效批量更新多个节点)</li><li>obj.hasOwnProperty(prop): 判断 prop 是否是 obj 自身的属性</li></ol><h2 id="三、数据代理-MVVM-js"><a href="#三、数据代理-MVVM-js" class="headerlink" title="三、数据代理(MVVM.js)"></a>三、数据代理(MVVM.js)</h2><ol><li><p>通过一个对象代理对另一个对象中属性的操作(读/写)</p></li><li><p>通过 vm 对象来代理 data 对象中所有属性的操作</p></li><li><p>好处: 更方便的操作 data 中的数据</p></li><li><p>基本实现流程</p><ol><li>通过 Object.defineProperty()给 vm 添加与 data 对象的属性对应的属性描述符</li><li>所有添加的属性都包含 getter/setter</li><li>在 getter/setter 内部去操作 data 中对应的属性数据</li></ol></li></ol><h2 id="四、模板解析-compile-js"><a href="#四、模板解析-compile-js" class="headerlink" title="四、模板解析(compile.js)"></a>四、模板解析(compile.js)</h2><p>1.模板解析的关键对象: compile 对象 2.模板解析的基本流程:</p><ul><li><p>将 el 的所有子节点取出, 添加到一个新建的文档 fragment 对象中</p></li><li><p>对 fragment 中的所有层次子节点递归进行编译解析处理</p><ul><li>对插值文本节点进行解析</li><li>对元素节点的指令属性进行解析</li><li>事件指令解析</li><li>一般指令解析</li></ul></li><li><p>将解析后的 fragment 添加到 el 中显示</p><p>3.解析插值语法节点: textNode.textContent = value</p></li><li><p>根据正则对象得到匹配出的表达式字符串: 子匹配/RegExp.$1</p></li><li><p>从 data 中取出表达式对应的属性值</p></li><li><p>将属性值设置为 文本节点的 textConten</p><p>4.事件指令解析: elementNode.addEventListener(‘eventName’, callback.bind(vm))</p></li><li><p>从指令名中取出事件名</p></li><li><p>根据指令属性值(表达式)从 methods 中得到对应的事件处理函数对象</p></li><li><p>给当前元素节点绑定指定事件名和回调函数的 dom 事件监听</p></li><li><p>指令解析完后, 移除此指令属性</p><p>5.一般指令解析: elementNode.xxx = value</p></li><li><p>得到指令名和指令值(表达式)</p></li><li><p>从 data 中根据表达式得到对应的值</p></li><li><p>根据指令名确定需要操作元素节点的什么属性</p><ul><li>v-text—textContent 属性</li><li>v-html—innerHTML 属性</li><li>v-class–className 属性</li></ul></li></ul><h2 id="五、数据劫持–-gt-数据绑定"><a href="#五、数据劫持–-gt-数据绑定" class="headerlink" title="五、数据劫持–&gt;数据绑定"></a>五、数据劫持–&gt;数据绑定</h2><ol><li><p>数据绑定(model==&gt;View)</p><p>一旦更新了 data 中的某个属性数据, 所有界面上直接使用或间接使用了此属性的节点都会更新(更新)</p></li><li><p>数据劫持</p><ul><li>数据劫持是 vue 中用来实现数据绑定的一种技术</li><li>基本思想: 通过 defineProperty()来监视 data 中所有属性(任意层次)数据的变化, 一旦变化就去更新界面</li></ul></li><li><p>四个重要对象</p></li></ol><blockquote><p><strong>Observer</strong></p></blockquote><ul><li><p>用来对 data 所有属性数据进行劫持的构造函数</p><ul><li>给 data 中所有属性重新定义属性描述(get/set)<ul><li>为 data 中的每个属性创建对应的 dep 对象</li></ul></li></ul></li></ul><blockquote><p><strong>Dep(Depend)</strong></p></blockquote><ul><li><p>data 中的每个属性(所有层次)都对应一个 dep 对象</p><ul><li><p>创建的时机:</p><ul><li><p>在初始化 define data 中各个属性时创建对应的 dep 对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在data中的某个属性值被设置为新的对象时</span><br><span class="line">对象的结构</span><br><span class="line">&#123;</span><br><span class="line">id, &#x2F;&#x2F; 每个dep都有一个唯一的id</span><br><span class="line">subs &#x2F;&#x2F;包含n个对应watcher的数组(subscribes的简写)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>subs 属性说明</p><p>当一个 watcher 被创建时, 内部会将当前 watcher 对象添加到对应的 dep 对象的 subs 中</p><p>当此 data 属性的值发生改变时, 所有 subs 中的 watcher 都会收到更新的通知, 从而最终更新对应的界面</p></li></ul></li></ul><blockquote><p><strong>Compile</strong></p></blockquote><ul><li>用来解析模板页面的对象的构造函数(一个实例)</li><li>利用 compile 对象解析模板页面</li><li>每解析一个表达式(非事件指令)都会创建一个对应的 watcher 对象, 并建立 watcher 与 dep 的关系</li><li>complie 与 watcher 关系: 一对多的关系</li></ul><blockquote><p><strong>Watcher</strong></p></blockquote><ul><li>模板中每个非事件指令或表达式都对应一个 watcher 对象</li><li>监视当前表达式数据的变化</li><li>创建的时机: 在初始化编译模板时</li><li>对象的组成</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; vm, &#x2F;&#x2F;vm对象 exp, &#x2F;&#x2F;对应指令的表达式 cb,</span><br><span class="line">&#x2F;&#x2F;当表达式所对应的数据发生改变的回调函数 value, &#x2F;&#x2F;表达式当前的值 depIds</span><br><span class="line">&#x2F;&#x2F;表达式中各级属性所对应的dep对象的集合对象 &#x2F;&#x2F;属性名为dep的id, 属性值为dep &#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结: dep 与 watcher 的关系: 多对多</p></blockquote><ul><li>一个 data 中的属性对应对应一个 dep, 一个 dep 中可能包含多个 watcher(模板中有几个表达式使用到了属性)</li><li>模板中一个非事件表达式对应一个 watcher, 一个 watcher 中可能包含多个 dep(表达式中包含了几个 data 属性)</li><li>数据绑定使用到 2 个核心技术<ul><li><strong>defineProperty()</strong><ul><li>订阅者-发布者</li></ul></li></ul></li></ul><blockquote><p><strong>双向数据绑定</strong></p></blockquote><ol><li>双向数据绑定是建立在单向数据绑定(model==&gt;View)的基础之上的</li><li>双向数据绑定的实现流程:<ul><li>在解析 v-model 指令时, 给当前元素添加 input 监听</li><li>当 input 的 value 发生改变时, 将最新的值赋值给当前表达式所对应的 data 属性</li></ul></li></ol><h1 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h1><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><h2 id="二、vue-的脚手架"><a href="#二、vue-的脚手架" class="headerlink" title="二、vue 的脚手架"></a>二、vue 的脚手架</h2><ol><li>脚手架 V2: 相对老的项目</li><li>脚手架 v3: 新的项目</li><li>脚手架 v4: 最新的(当前用得还少)</li></ol><h2 id="三、使用-vue-的脚手架"><a href="#三、使用-vue-的脚手架" class="headerlink" title="三、使用 vue 的脚手架"></a>三、使用 vue 的脚手架</h2><blockquote><p><strong>脚手架 v3</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个项目</span></span><br><span class="line">vue create vue-app3</span><br></pre></td></tr></table></figure><blockquote><p><strong>脚手架 v2</strong></p></blockquote><p>Vue CLI &gt;= 3 和旧版使用了相同的 <code>vue</code> 命令，所以 Vue CLI 2 (<code>vue-cli</code>) 被覆盖了。如果你仍然需要使用旧版本的 <code>vue init</code> 功能，你可以全局安装一个桥接工具：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同</span></span><br><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure><h2 id="四、比较-V2-与-V3-创建的项目"><a href="#四、比较-V2-与-V3-创建的项目" class="headerlink" title="四、比较 V2 与 V3 创建的项目"></a>四、比较 V2 与 V3 创建的项目</h2><ol><li>v2 的配置是直接可见, v3 是包装隐藏起来了</li><li>修改配置: v2 是直接在配置文件中修改, v3 提供了一个专门的配置: vue.config.js, 我们可以根据文档在此文件中添加配置</li><li>vue 使用的是不带编译器的版本, 打包文件更小 不写 template 配置, 直接 render 配置</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 核心基础（2.X）</title>
      <link href="posts/b41f8f0d/"/>
      <url>posts/b41f8f0d/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Vue-的基本认识"><a href="#一、Vue-的基本认识" class="headerlink" title="一、Vue 的基本认识"></a>一、Vue 的基本认识</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201225195043.png" alt="image-20201225194902965"></p><p><strong>官网：</strong></p><ol><li>英文官网: <a href="https://vuejs.org/">https://vuejs.org/</a></li><li>中文官网: <a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></li></ol><h3 id="1、Vue-的特点"><a href="#1、Vue-的特点" class="headerlink" title="1、Vue 的特点"></a>1、Vue 的特点</h3><ol><li>遵循<code>MVVM</code> 模式</li><li>编码简洁，体积小，运行效率高，适合移动/ PC 端开发</li><li>它本身只关注 UI， 可以轻松的引入 vue 插件或其他的第三库开发项目</li></ol><h2 id="二、Vue-的基本使用"><a href="#二、Vue-的基本使用" class="headerlink" title="二、Vue 的基本使用"></a>二、Vue 的基本使用</h2><blockquote><p><strong>永远的 HelloWord</strong></p></blockquote><p><strong>编码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 配置对象： 属性名是一些特定的名称</span></span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>, <span class="comment">// 值是选择器 element 用来查找跟元素</span></span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      username: <span class="string">&quot;OY_test&quot;</span>, <span class="comment">// 包含多个可变数据的对象，相当于state,为模板页面提供数据</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果示例：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201225203932.gif" alt="1"></p><blockquote><p><strong>Vue 的 MVVM</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201225204905.png" alt="image-20201225204904937"></p><h2 id="三、模板语法"><a href="#三、模板语法" class="headerlink" title="三、模板语法"></a>三、模板语法</h2><blockquote><p><strong>模板的理解</strong></p></blockquote><ul><li>动态的 html 页面</li><li>包含了一些 JS 语法代码<ul><li>双大括号表达式 （<code>&#123;&#123;&#125;&#125;`）  - 指令（以 v-开头的自定义标签属性）### 1、双大括号表达式- **语法：** `&#123;&#123;exp&#125;&#125;</code></li></ul></li><li><strong>功能：</strong> 向页面输出数据</li><li>可以调用对象的方法</li></ul><h3 id="2、指令一：-强制数据绑定"><a href="#2、指令一：-强制数据绑定" class="headerlink" title="2、指令一： 强制数据绑定"></a>2、指令一： 强制数据绑定</h3><ul><li><strong>语法</strong> 指定变化的属性值</li><li><strong>完整写法：</strong>v-bin:xxx = ‘yyy’ (yyy 会作为表达式解析执行)</li><li><strong>简介写法：</strong> :xxx = ‘yyy’</li></ul><h3 id="3、指令二：绑定事件监听"><a href="#3、指令二：绑定事件监听" class="headerlink" title="3、指令二：绑定事件监听"></a>3、指令二：绑定事件监听</h3><ul><li>功能：绑定指定事件名的回调函数</li><li>完整写法：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-on:keyup&#x3D;&#39;xxx&#39; v-on:keyup&#x3D;&#39;xxx&#39;(参数) v-on:keyup.enter&#x3D;&#39;xxx&#39;</span><br></pre></td></tr></table></figure><ul><li>简介写法：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@keyup&#x3D;&#39;xxx&#39; @keyup.enter&#x3D;&#39;xxx&#39;</span><br></pre></td></tr></table></figure><h3 id="4、编码示例"><a href="#4、编码示例" class="headerlink" title="4、编码示例"></a>4、编码示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;h2&gt;1. 双大括号表达式&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;msg.toUpperCase()&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;h2&gt;2. 指令一: 强制数据绑定&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;url&quot;&gt;访问指定站点&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;&lt;!--不能使用--&gt;</span><br><span class="line">  &lt;a v-bind:href&#x3D;&quot;url&quot;&gt;访问指定站点2&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;</span><br><span class="line">  &lt;a :href&#x3D;&quot;url&quot;&gt;访问指定站点3&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h2&gt;3. 指令二: 绑定事件监听&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;handleClick&quot;&gt;点我&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;handleClick&quot;&gt;点我2&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: &quot;NBA I Like This Game!&quot;,</span><br><span class="line">    url: &quot;http:&#x2F;&#x2F;www.baidu.com&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">      alert(&quot;处理点击&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果示例：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201225205641.gif" alt="1"></p><h2 id="四、计算属性和监视"><a href="#四、计算属性和监视" class="headerlink" title="四、计算属性和监视"></a>四、计算属性和监视</h2><h3 id="1、计算属性"><a href="#1、计算属性" class="headerlink" title="1、计算属性"></a>1、计算属性</h3><ul><li>在 computed 属性对象中定义计算属性的方法</li><li>在页面中使用 <code>&#123;&#123;方法名&#125;&#125;</code> 来显示计算的结果</li></ul><h3 id="2、监视属性"><a href="#2、监视属性" class="headerlink" title="2、监视属性"></a>2、监视属性</h3><ul><li>通过 vm 对象的 $watch() 或 watch 配置来监视指定的属性</li><li>当属性变化时，回调函数自动调用，在函数内部进行计算</li></ul><h3 id="3、编码示例"><a href="#3、编码示例" class="headerlink" title="3、编码示例"></a>3、编码示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">  姓: &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;First Name&quot; v-model&#x3D;&quot;firstName&quot;&gt;&lt;br&gt;</span><br><span class="line">  名: &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Last Name&quot; v-model&#x3D;&quot;lastName&quot;&gt;&lt;br&gt;</span><br><span class="line">  姓名1(单向): &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Full Name1&quot; v-model&#x3D;&quot;fullName1&quot;&gt;&lt;br&gt;</span><br><span class="line">  姓名2(单向): &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Full Name2&quot; v-model&#x3D;&quot;fullName2&quot;&gt;&lt;br&gt;</span><br><span class="line">  姓名3(双向): &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Full Name3&quot; v-model&#x3D;&quot;fullName3&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">  el: &quot;#demo&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &quot;Kobe&quot;,</span><br><span class="line">    lastName: &quot;bryant&quot;,</span><br><span class="line">    fullName2: &quot;Kobe bryant&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  computed: &#123;</span><br><span class="line">    fullName1: function () &#123;</span><br><span class="line">      return this.firstName + &quot; &quot; + this.lastName;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    fullName3: &#123;</span><br><span class="line">      get: function () &#123;</span><br><span class="line">        return this.firstName + &quot; &quot; + this.lastName;</span><br><span class="line">      &#125;,</span><br><span class="line">      set: function (value) &#123;</span><br><span class="line">        var names &#x3D; value.split(&quot; &quot;);</span><br><span class="line">        this.firstName &#x3D; names[0];</span><br><span class="line">        this.lastName &#x3D; names[1];</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    lastName: function (newVal, oldVal) &#123;</span><br><span class="line">      this.fullName2 &#x3D; this.firstName + &quot; &quot; + newVal;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">vm.$watch(&quot;fistName&quot;, function (val) &#123;</span><br><span class="line">  this.fullName2 &#x3D; val + &quot; &quot; + this.lastName;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果示例：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201226130612.gif" alt="1"></p><h2 id="五、Class-与-Style-绑定"><a href="#五、Class-与-Style-绑定" class="headerlink" title="五、Class 与 Style 绑定"></a>五、Class 与 Style 绑定</h2><h3 id="1、class-绑定"><a href="#1、class-绑定" class="headerlink" title="1、class 绑定"></a>1、class 绑定</h3><ul><li>:class = ‘xxx’</li><li>表达式是字符串： ‘classA’</li><li>表达式是对象：{classA: isA, classB: isB}</li><li>表达式是数组：[‘classA’,’classB’]</li></ul><h3 id="2、style-绑定"><a href="#2、style-绑定" class="headerlink" title="2、style 绑定"></a>2、style 绑定</h3><ul><li>:style=”{color: activeColor, fontSize: fontSize + ‘px’}”</li><li>其中 activeColor/fontSize 是 data 属性</li></ul><h3 id="3、编码示例-1"><a href="#3、编码示例-1" class="headerlink" title="3、编码示例"></a>3、编码示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">  &lt;h2&gt;1. class绑定: :class&#x3D;&#39;xxx&#39;&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;p class&#x3D;&quot;classC&quot; :class&#x3D;&quot;Myclass&quot;&gt;xxxx&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p :class&#x3D;&quot;&#123;classA: hasA, classB: hasB&#125;&quot;&gt;yyyy&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p :class&#x3D;&quot;[&#39;classA&#39;,&#39;classB&#39;]&quot;&gt;zzz&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h2&gt;2. style绑定&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;p :style&#x3D;&quot;&#123;color: Mycolor, fontSize: mySize + &#39;px&#39;&#125;&quot;&gt;xxxxxxx&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;button @click&#x3D;&quot;update&quot;&gt;更新&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &quot;#demo&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    Myclass: &quot;classA&quot;,</span><br><span class="line">    hasA: true,</span><br><span class="line">    hasB: false,</span><br><span class="line">    Mycolor: &quot;red&quot;,</span><br><span class="line">    mySize: 20,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    update() &#123;</span><br><span class="line">      console.log(this);</span><br><span class="line">      (this.Myclass &#x3D; &quot;classB&quot;),</span><br><span class="line">        (this.hasA &#x3D; !this.hasA),</span><br><span class="line">        (this.hasB &#x3D; !this.hasB),</span><br><span class="line">        (this.Mycolor &#x3D; &quot;#ff0000&quot;),</span><br><span class="line">        (this.mySize &#x3D; 30);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果示例：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201226180039.gif" alt="1"></p><h2 id="六、条件渲染"><a href="#六、条件渲染" class="headerlink" title="六、条件渲染"></a>六、条件渲染</h2><h3 id="1、条件渲染指令"><a href="#1、条件渲染指令" class="headerlink" title="1、条件渲染指令"></a>1、条件渲染指令</h3><ul><li>v-if 与 v-else</li><li>v-show</li></ul><h3 id="2、比较-v-if-与-v-show"><a href="#2、比较-v-if-与-v-show" class="headerlink" title="2、比较 v-if 与 v-show"></a>2、比较 v-if 与 v-show</h3><ul><li>如果需要频繁切换 v-show 较好</li><li>当条件不成立时，v-if 的所有子节点不会解析(项目中使用)</li></ul><h3 id="3、编码"><a href="#3、编码" class="headerlink" title="3、编码"></a>3、编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">  &lt;p v-if&#x3D;&quot;ok&quot;&gt;表白成功&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p v-else&gt;表白失败&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;p v-show&#x3D;&quot;ok&quot;&gt;求婚成功&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p v-show&#x3D;&quot;!ok&quot;&gt;求婚失败&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;button @Click&#x3D;&quot;toggle&quot;&gt;切换&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &quot;#demo&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      ok: true,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    toggle() &#123;</span><br><span class="line">      this.ok &#x3D; !this.ok;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果示例：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201226213355.gif" alt="1"></p><h2 id="七、列表渲染"><a href="#七、列表渲染" class="headerlink" title="七、列表渲染"></a>七、列表渲染</h2><h3 id="1、列表显示指令"><a href="#1、列表显示指令" class="headerlink" title="1、列表显示指令"></a>1、列表显示指令</h3><ul><li><p>数组: v-for / index</p></li><li><p>对象: v-for / key</p></li></ul><h3 id="2、列表的更新显示"><a href="#2、列表的更新显示" class="headerlink" title="2、列表的更新显示"></a>2、列表的更新显示</h3><ul><li>删除 Item</li><li>替换 Item</li></ul><h3 id="3、列表的高级处理"><a href="#3、列表的高级处理" class="headerlink" title="3、列表的高级处理"></a>3、列表的高级处理</h3><blockquote><p><strong>列表过滤</strong></p></blockquote><ul><li>VUE 数据绑定如何实现？<ol><li>Vue 会监视 data 中所有的层次的属性</li><li>对象中的属性数据通过添加 set 方法来实现监视</li><li>数组中的元素对应也实现了监视；重写数组一系列更新元素的方法<ol><li>调用原生的对应的方法对元素进行处理</li><li>去更新界面</li></ol></li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">  &lt;h2&gt;测试: v-for 遍历数组&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;(p, index) in persons&quot; :key&#x3D;&quot;p.id&quot;&gt;</span><br><span class="line">      &#123;&#123;p.id&#125;&#125; -- &#123;&#123;p.name&#125;&#125; -- &#123;&#123;p.age&#125;&#125;</span><br><span class="line">      -- &lt;button @click&#x3D;&quot;deleteP(index)&quot;&gt;删除&lt;&#x2F;button&gt;</span><br><span class="line">      -- &lt;button @click&#x3D;&quot;updateP(index,&#123;id: Date.now(), name: &#39;Jarry&#39;,age: 19&#125;)&quot;&gt;更新&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;h2&gt;测试: v-for 遍历对象&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;(value, key) in persons[0]&quot; :key&#x3D;&quot;key&quot;&gt;</span><br><span class="line">      &#123;&#123;key&#125;&#125; &#x3D; &#123;&#123;value&#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &quot;#demo&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    persons: [</span><br><span class="line">      &#123; id: 1, name: &quot;Tom&quot;, age: 15 &#125;,</span><br><span class="line">      &#123; id: 2, name: &quot;Jack&quot;, age: 12 &#125;,</span><br><span class="line">      &#123; id: 4, name: &quot;Bob&quot;, age: 17 &#125;,</span><br><span class="line">      &#123; id: 6, name: &quot;Rose&quot;, age: 16 &#125;,</span><br><span class="line">      &#123; id: 8, name: &quot;Else&quot;, age: 13 &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    deleteP(index) &#123;</span><br><span class="line">      this.persons.splice(index, 1);</span><br><span class="line">    &#125;,</span><br><span class="line">    updateP(index, newP) &#123;</span><br><span class="line">      &#x2F;&#x2F; 第一种方式</span><br><span class="line">      &#x2F;&#x2F; this.persons[index].id &#x3D; newP.id;</span><br><span class="line">      &#x2F;&#x2F; this.Persons[index].name &#x3D; newP.name;</span><br><span class="line">      &#x2F;&#x2F; this.Persons[index].age &#x3D; newP.age;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; this.persons[index] &#x3D; newP &#x2F;&#x2F; 不会更新界面</span><br><span class="line"></span><br><span class="line">      this.persons.splice(index, 1, newP); &#x2F;&#x2F; VUE重写后的splice方法</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果示例：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201226220643.gif" alt="2"></p><blockquote><p><strong>列表排序</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for&#x3D;&quot;(p, index) in filterPersons&quot; :key&#x3D;&quot;p.id&quot;&gt;</span><br><span class="line">        &#123;&#123;p.id&#125;&#125; -- &#123;&#123;p.name&#125;&#125; -- &#123;&#123;p.age&#125;&#125;</span><br><span class="line">      &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;sortType&#x3D;2&quot;&gt;按年龄升序&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;sortType&#x3D;3&quot;&gt;按年龄降序&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;sortType&#x3D;1&quot;&gt;原本顺序&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    searchName: &quot;&quot;,</span><br><span class="line">    sortType: 1, &#x2F;&#x2F; 排序的类型, 1:不排序, 2:升序, 3: 降序</span><br><span class="line">    persons: [</span><br><span class="line">      &#123; id: 1, name: &quot;Tom&quot;, age: 15 &#125;,</span><br><span class="line">      &#123; id: 2, name: &quot;Jack&quot;, age: 12 &#125;,</span><br><span class="line">      &#123; id: 4, name: &quot;Bob&quot;, age: 17 &#125;,</span><br><span class="line">      &#123; id: 6, name: &quot;Rose&quot;, age: 16 &#125;,</span><br><span class="line">      &#123; id: 8, name: &quot;Else&quot;, age: 13 &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    filterPersons() &#123;</span><br><span class="line">      &#x2F;&#x2F; 1.得到依赖数据</span><br><span class="line">      const &#123; sortType, searchName, persons &#125; &#x3D; this;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 2. 进行计算处理，产生结果数据并返回</span><br><span class="line">      &#x2F;&#x2F; 过滤</span><br><span class="line">      const arr &#x3D; persons.filter((p) &#x3D;&gt; p.name.indexOf(searchName) &gt;&#x3D; 0);</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 进行排序</span><br><span class="line">      if (sortType !&#x3D;&#x3D; 1) &#123;</span><br><span class="line">        arr.sort((p1, p2) &#x3D;&gt; &#123;</span><br><span class="line">          if (sortType &#x3D;&#x3D;&#x3D; 2) &#123;</span><br><span class="line">            &#x2F;&#x2F; 升序</span><br><span class="line">            return p1.age - p2.age;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; 降序</span><br><span class="line">            return p2.age - p1.age;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      return arr;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果示例：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201226223435.gif" alt="1"></p><h2 id="八、事件处理"><a href="#八、事件处理" class="headerlink" title="八、事件处理"></a>八、事件处理</h2><h3 id="1、绑定监听"><a href="#1、绑定监听" class="headerlink" title="1、绑定监听"></a>1、绑定监听</h3><ol><li><p> v-on:xxx=”fun”</p></li><li><p> @xxx=”fun”</p></li><li><p> @xxx=”fun(参数)”</p></li><li><p> 默认事件形参: event</p></li><li><p> 隐含属性对象: $event</p></li></ol><h3 id="2、事件修饰符"><a href="#2、事件修饰符" class="headerlink" title="2、事件修饰符"></a>2、事件修饰符</h3><ol><li> .prevent： 阻止事件的默认行为 event.preventDefault()</li><li> .stop: 停止对事件冒泡 event.stopPropagation()</li></ol><h3 id="3、按键修饰符"><a href="#3、按键修饰符" class="headerlink" title="3、按键修饰符"></a>3、按键修饰符</h3><ol><li> .keycode： 操作的是某个 keycode 值的键</li><li> .keyName: 操作的某个按键名的键（少部分）</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201227144525.png" alt="image-20201227144439145"></p><h3 id="4、编码示例-1"><a href="#4、编码示例-1" class="headerlink" title="4、编码示例"></a>4、编码示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;example&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h2&gt;1. 绑定监听&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;test1&quot;&gt;test1&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;test2(&#39;abc&#39;)&quot;&gt;test2&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;test3(&#39;abc&#39;,$event)&quot;&gt;test3&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h2&gt;2. 事件修饰符&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;!-- 阻止(prevent)事件的默认行为</span><br><span class="line">    停止(stop)事件冒泡 --&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;oy6090.top&quot; @click.prevent&#x3D;&quot;test4&quot;&gt;去学习&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;div style&#x3D;&quot;width:200px; height: 200px; background: red;&quot; @click&#x3D;&quot;test5&quot;&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;width: 100px; height: 100px; background: blue;&quot; @click.stop&#x3D;&quot;test6&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;p @clik.once&#x3D;&quot;test6&quot;&gt;xxxxx&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h2&gt;3. 按键修饰符&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;msg&quot; @Keyup.13&#x3D;&quot;test7&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;msg&quot; @Keyup.enter&#x3D;&quot;test7&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#39;#example&#39;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: &#39;&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      test1(e)&#123;</span><br><span class="line">        alert(e.target.innerText);</span><br><span class="line">      &#125;,</span><br><span class="line">      test2(value)&#123;</span><br><span class="line">        alert(value);</span><br><span class="line">      &#125;,</span><br><span class="line">      test3(value,event)&#123;</span><br><span class="line">        alert(value+&quot;---&quot; + event.target.innerText);</span><br><span class="line">      &#125;,</span><br><span class="line">      test4(event)&#123;</span><br><span class="line">        &#x2F;&#x2F;event.preventDefault();</span><br><span class="line">        alert(&#39;点击了&#39;);</span><br><span class="line">      &#125;,</span><br><span class="line">      test5()&#123;</span><br><span class="line">        alert(&#39;out&#39;);</span><br><span class="line">      &#125;,</span><br><span class="line">      test6()&#123;</span><br><span class="line">        alert(&#39;inner&#39;);</span><br><span class="line">      &#125;,</span><br><span class="line">      test7()&#123;</span><br><span class="line">        alert(this.msg)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果示例：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201227144821.gif" alt="1"></p><h2 id="九、表单输入绑定"><a href="#九、表单输入绑定" class="headerlink" title="九、表单输入绑定"></a>九、表单输入绑定</h2><h3 id="1、使用-v-model-对表单数据自动收集"><a href="#1、使用-v-model-对表单数据自动收集" class="headerlink" title="1、使用 v-model 对表单数据自动收集"></a>1、使用 v-model 对表单数据自动收集</h3><ol><li>text/textarea</li><li>checkbox</li><li>radio</li><li>select</li></ol><h3 id="2、编码示例"><a href="#2、编码示例" class="headerlink" title="2、编码示例"></a>2、编码示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">  &lt;form action&#x3D;&quot;&#x2F;xxx&quot; @submit.prevent&#x3D;&quot;register&quot;&gt;</span><br><span class="line">    &lt;span&gt;用户名: &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;user.username&quot;&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span&gt;密码: &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;user.pwd&quot;&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span&gt;性别: &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;female&quot; v-model&#x3D;&quot;user.sex&quot; value&#x3D;&quot;女&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;female&quot;&gt;女&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;male&quot; v-model&#x3D;&quot;user.sex&quot; value&#x3D;&quot;男&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;male&quot;&gt;男&lt;&#x2F;label&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span&gt;爱好: &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;basket&quot; v-model&#x3D;&quot;user.likes&quot; value&#x3D;&quot;basket&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;basket&quot;&gt;篮球&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;foot&quot; v-model&#x3D;&quot;user.likes&quot; value&#x3D;&quot;foot&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;foot&quot;&gt;足球&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;pingpang&quot; v-model&#x3D;&quot;user.likes&quot; value&#x3D;&quot;pingpang&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;pingpang&quot;&gt;乒乓&lt;&#x2F;label&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span&gt;城市: &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;select v-model&#x3D;&quot;user.cityID&quot;&gt;</span><br><span class="line">      &lt;option value&#x3D;&quot;&quot;&gt;未选择&lt;&#x2F;option&gt;</span><br><span class="line">      &lt;option :value&#x3D;&quot;city.id&quot; v-for&#x3D;&quot;(city, index) in allcitys&quot; :key&#x3D;&quot;city.id&quot;&gt;&#123;&#123;city.name&#125;&#125;&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;&#x2F;select&gt;&lt;br&gt;</span><br><span class="line">    &lt;span&gt;介绍: &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;textarea rows&#x3D;&quot;10&quot; v-model&#x3D;&quot;user.info&quot;&gt;&lt;&#x2F;textarea&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;注册&quot;&gt;</span><br><span class="line">  &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &quot;#demo&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    user: &#123;</span><br><span class="line">      username: &quot;&quot;,</span><br><span class="line">      pwd: &quot;&quot;,</span><br><span class="line">      sex: &quot;女&quot;,</span><br><span class="line">      likes: [&quot;foot&quot;],</span><br><span class="line">      cityID: &quot;1&quot;,</span><br><span class="line">      info: &quot;&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    allcitys: [</span><br><span class="line">      &#123; id: 1, name: &quot;HN&quot; &#125;,</span><br><span class="line">      &#123; id: 2, name: &quot;SZ&quot; &#125;,</span><br><span class="line">      &#123; id: 3, name: &quot;HB&quot; &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    register() &#123;</span><br><span class="line">      alert(&quot;发送注册的ajax请求：&quot; + JSON.stringify(this.user));</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>示例效果：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201227151232.gif" alt="2"></p><h2 id="十、Vue-实例生命周期"><a href="#十、Vue-实例生命周期" class="headerlink" title="十、Vue 实例生命周期"></a>十、Vue 实例生命周期</h2><h3 id="1、生命周期流程图"><a href="#1、生命周期流程图" class="headerlink" title="1、生命周期流程图"></a>1、生命周期流程图</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201227151723.png" alt="image-20201227151722111"></p><h3 id="2、Vue-生命周期分析"><a href="#2、Vue-生命周期分析" class="headerlink" title="2、Vue 生命周期分析"></a>2、Vue 生命周期分析</h3><ol><li><strong>初始化显示</strong></li></ol><ul><li><p>beforeCreate()</p></li><li><p>created()</p></li><li><p>beforeMount()</p></li><li><p>mounted()</p></li></ul><ol start="2"><li><strong>更新状态： this.xxx = value</strong></li></ol><ul><li>beforeUpdate()</li><li>updated()</li></ul><ol start="3"><li><strong>销毁 vue 实例：vm.$destory()</strong></li></ol><ul><li>beforeDestory()</li><li>destoryed()</li></ul><h3 id="3、常用的生命周期方法"><a href="#3、常用的生命周期方法" class="headerlink" title="3、常用的生命周期方法"></a>3、常用的生命周期方法</h3><ol><li>created()/mounted() : 发送 ajax 请求，启动定时器等异步任务。</li><li>beforeDestory(): 做收尾工作， 如： 清除定时器。</li></ol><h3 id="4、编码示例-2"><a href="#4、编码示例-2" class="headerlink" title="4、编码示例"></a>4、编码示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;test&quot;&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;destoryVM&quot;&gt;destory vue&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;p v-show&#x3D;&quot;isShow&quot; ref&#x3D;&quot;content&quot;&gt;Vue 生命周期 &#123;&#123;isShow ? &#39;show...&#39; : &#39;hide...&#39;&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &quot;#test&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isShow: true,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    console.log(&quot;beforeCreate()&quot;, this.isShow);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 实现数据代码： 后面可以通过vm 读取data 中的数据</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&quot;created()&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 在第一次显示之后在显示</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&quot;mounted()&quot;);</span><br><span class="line">    this.intervalId &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&quot;-----&quot;);</span><br><span class="line">      this.isShow &#x3D; !this.isShow;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate() &#123;</span><br><span class="line">    &#x2F;&#x2F; 读取是老的界面</span><br><span class="line">    console.log(&quot;beforeUpdate()&quot;, this.isShow, this.$refs.content.innerHTML);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  updated() &#123;</span><br><span class="line">    console.log(&quot;updated()&quot;, this.isShow, this.$refs.content.innerHTML);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 销毁之前执行一次</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    console.log(&quot;beforeDestroy()&quot;);</span><br><span class="line">    clearInterval(this.intervalId);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    console.log(&quot;destroyed()&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    destoryVM() &#123;</span><br><span class="line">      this.$destroy();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>实例效果：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201227155958.gif" alt="1"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201227160110.png" alt="image-20201227160110083"></p><h2 id="十一、过渡-amp-动画"><a href="#十一、过渡-amp-动画" class="headerlink" title="十一、过渡&amp;动画"></a>十一、过渡&amp;动画</h2><h3 id="1、vue-动画的理解"><a href="#1、vue-动画的理解" class="headerlink" title="1、vue 动画的理解"></a>1、vue 动画的理解</h3><ol><li>操作 css 的 trasition 或 animation</li><li>vue 会给目标元素添加/移除特定的 class</li><li>过渡的相关类名<ul><li>xxx-enter-active: 指定显示的 transition</li><li>xxx-leave-active: 指定隐藏的 transition</li><li>xxx-enter/xxx-leave-to: 指定隐藏时的样式</li></ul></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201227201639.png" alt="image-20201227201632372"></p><h3 id="2、基本过渡动画的编码"><a href="#2、基本过渡动画的编码" class="headerlink" title="2、基本过渡动画的编码"></a>2、基本过渡动画的编码</h3><ol><li>在目标元素外包裹 &lt;transition name=”xxx”&gt;</li><li>定义 class 样式<ul><li>指定过渡样式：transition</li><li>指定隐藏时的样式： opacity/其他</li></ul></li></ol><h3 id="3、编码示例-2"><a href="#3、编码示例-2" class="headerlink" title="3、编码示例"></a>3、编码示例</h3><blockquote><p>示例一：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">&#x2F;*过渡样式*&#x2F;</span><br><span class="line">.move-enter-active,</span><br><span class="line">.move-leave-active &#123;</span><br><span class="line">  transition: opacity 5s;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*隐藏时的样式*&#x2F;</span><br><span class="line">.move-enter,</span><br><span class="line">.move-leave-to &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*显示的过渡样式*&#x2F;</span><br><span class="line">.move2-enter-active &#123;</span><br><span class="line">  transition: all 1s;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*隐藏的过渡样式*&#x2F;</span><br><span class="line">.move2-leave-active &#123;</span><br><span class="line">  transition: all 5s;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*隐藏时的样式*&#x2F;</span><br><span class="line">.move2-enter,</span><br><span class="line">.move2-leave-to &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translateX(20px);</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;show&#x3D;!show&quot;&gt;</span><br><span class="line">    Toggle</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line">  &lt;transition name&#x3D;&quot;move&quot;&gt;</span><br><span class="line">    &lt;p v-show&#x3D;&quot;show&quot;&gt;Hello&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;transition&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;demo2&quot;&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;show&#x3D;!show&quot;&gt;</span><br><span class="line">    Toggle2</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line">  &lt;transition name&#x3D;&quot;move2&quot;&gt;</span><br><span class="line">    &lt;p v-show&#x3D;&quot;show&quot;&gt;Hello2&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;transition&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &quot;#demo&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: true,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &quot;#demo2&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: true,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果示例：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201227211728.gif" alt="1"></p><blockquote><p>示例二：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">&#x2F;*显示动画样式*&#x2F;</span><br><span class="line">.bounce-enter-active &#123;</span><br><span class="line">  animation: bounce-in 0.5s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.bounce-leave-active &#123;</span><br><span class="line">  animation: bounce-in 0.5s reverse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes bounce-in &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: scale(0);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    transform: scale(1.5);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: scale(1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;example-2&quot;&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;show &#x3D; !show&quot;&gt;Toggle show&lt;&#x2F;button&gt;&lt;br&gt;</span><br><span class="line">    &lt;transition name&#x3D;&quot;bounce&quot;&gt;</span><br><span class="line">        &lt;p v-if&#x3D;&quot;show&quot; style&#x3D;&quot;display: inline-block;&quot;&gt;Lorem&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &quot;#example-2&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: true,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果示例：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201227211829.gif" alt="2"></p><h2 id="十二、过滤器"><a href="#十二、过滤器" class="headerlink" title="十二、过滤器"></a>十二、过滤器</h2><blockquote><p>功能： 对要显示的数据进行特定格式化在显示</p><p>注意：并没有改变原有的数据，是产生新的对应的数据</p></blockquote><h3 id="1、定义和使用过滤器"><a href="#1、定义和使用过滤器" class="headerlink" title="1、定义和使用过滤器"></a>1、定义和使用过滤器</h3><ul><li>定义过滤器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(filterName,function(value[arg1,arg2,...]))&#123; &#x2F;&#x2F; 进行一定的数据处理</span><br><span class="line">return newValue; &#125;</span><br></pre></td></tr></table></figure><ul><li>使用过滤器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;myData | filterName&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123;myData | filterName(arg)&#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="2、编码示例-1"><a href="#2、编码示例-1" class="headerlink" title="2、编码示例"></a>2、编码示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;test&quot;&gt;</span><br><span class="line">  &lt;h2&gt;显示格式化的日期时间&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;startTime&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;startTime | dateFormate&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;startTime | dateFormate(&#39;YYYY-MM-DD&#39;)&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;startTime | dateFormate(&#39;HH:mm:ss&#39;)&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;moment.js&#x2F;2.29.1&#x2F;moment.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 自定义过滤器</span><br><span class="line">Vue.filter(&quot;dateFormate&quot;, function (value, formatStr &#x3D; &quot;YYYY-MM-DD HH:mm:ss&quot;) &#123;</span><br><span class="line">  &#x2F;&#x2F;return moment(value).format(formatStr || &#39;YYYY-MM-DD HH:mm:ss&#39;)</span><br><span class="line">  return moment(value).format(formatStr);</span><br><span class="line">&#125;);</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &quot;#test&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      startTime: Date.now() - 10000,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果示例：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201227214225.png" alt="image-20201227214225002"></p><h2 id="十三、内置指令与自定义指令"><a href="#十三、内置指令与自定义指令" class="headerlink" title="十三、内置指令与自定义指令"></a>十三、内置指令与自定义指令</h2><h3 id="1、常用内置指令"><a href="#1、常用内置指令" class="headerlink" title="1、常用内置指令"></a>1、常用内置指令</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>v-text</td><td>更新元素的 textContent</td></tr><tr><td>v-html</td><td>更新元素的 innerHTML</td></tr><tr><td>v-if</td><td>如果为 true, 当前标签才会输出到页面</td></tr><tr><td>v-else</td><td>如果为 false, 当前标签才会输出到页面</td></tr><tr><td>v-show</td><td>通过控制 display 样式来控制显示/隐藏</td></tr><tr><td>v-for</td><td>遍历数组/对象</td></tr><tr><td>v-on</td><td>绑定事件监听, 一般简写为@</td></tr><tr><td>v-bind</td><td>强制绑定解析表达式, 可以省略 v-bind</td></tr><tr><td>v-model</td><td>双向数据绑定</td></tr><tr><td>ref</td><td>指定唯一标识, vue 对象通过$els 属性访问这个元素对象</td></tr><tr><td>v-cloak</td><td>防止闪现, 与 css 配合: [v-cloak] { display: none }</td></tr></tbody></table><h3 id="2、自定义指令"><a href="#2、自定义指令" class="headerlink" title="2、自定义指令"></a>2、自定义指令</h3><ul><li>注册全局指令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&#39;my-directive&#39;, function(el, binding)&#123; el.innerHTML &#x3D;</span><br><span class="line">binding.value.toupperCase() &#125;)</span><br></pre></td></tr></table></figure><ul><li>注册局部指令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">directives : &#123; &#39;my-directive&#39; : &#123; bind (el, binding) &#123; el.innerHTML &#x3D;</span><br><span class="line">binding.value.toupperCase() &#125; &#125; &#125;</span><br></pre></td></tr></table></figure><ul><li>使用指令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-my-directive &#x3D; &#39;xxx&#39;</span><br></pre></td></tr></table></figure><h3 id="3、编码示例-3"><a href="#3、编码示例-3" class="headerlink" title="3、编码示例"></a>3、编码示例</h3><blockquote><p>内置指令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;example&quot;&gt;</span><br><span class="line">  &lt;p v-text&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p v-html&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &quot;#example&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;oy6090.top&quot;&gt;去浏览博客&lt;&#x2F;a&gt;&#39;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果示例：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201227220716.png" alt="image-20201227220519693"></p><blockquote><p>自定义指令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">需求: 自定义2个指令</span><br><span class="line">  1. 功能类型于v-text, 但转换为全大写</span><br><span class="line">  2. 功能类型于v-text, 但转换为全小写</span><br><span class="line">--&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;test&quot;&gt;</span><br><span class="line">  &lt;p v-upper-text&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p v-lower-text&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 自定义全局指令</span><br><span class="line">Vue.directive(&quot;upper-text&quot;, (el, binding) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&quot;upper-text&quot;, binding);</span><br><span class="line">  el.innerText &#x3D; binding.value.toUpperCase();</span><br><span class="line">&#125;);</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &quot;#test&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: &quot;I will Back!&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 定义局部指令（只对当前vm的模板有效）</span><br><span class="line">  directives: &#123;</span><br><span class="line">    &quot;lower-text&quot;(el, binding) &#123;</span><br><span class="line">      el.innerText &#x3D; binding.value.toLowerCase();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果示例：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201227220634.png" alt="image-20201227220633649"></p><h2 id="十四、自定义插件"><a href="#十四、自定义插件" class="headerlink" title="十四、自定义插件"></a>十四、自定义插件</h2><blockquote><p>说明：</p></blockquote><ol><li>Vue 插件是一个包含 install 方法的对象</li><li>通过 install 方法给 Vue 或 Vue 实例添加方法，定义全局指令</li></ol><blockquote><p>编码示例：</p></blockquote><ul><li>插件 JS （<strong>vue-myPlugin.js</strong>）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    自定义插件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyPlugin = &#123;&#125;;</span><br><span class="line">  MyPlugin.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.添加全局方法或属性</span></span><br><span class="line">    Vue.myGlobalMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">&quot;Vue 函数对象方法执行&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.添加全局资源</span></span><br><span class="line">    Vue.directive(<span class="string">&quot;my-directive&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">      el.innerHTML = <span class="string">&quot;MyPlugin my-directive &quot;</span> + binding.value;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.添加实例方法</span></span><br><span class="line">    Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">&quot;vue 实例对象方法执行&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">window</span>.MyPlugin = MyPlugin;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>页面使用插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">  &lt;!-- 使用自定义指令 --&gt;</span><br><span class="line">  &lt;p v-my-directive&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;vue-myPlugin.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 使用自定义插件</span><br><span class="line">Vue.use(MyPlugin);</span><br><span class="line"></span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">  el: &quot;#demo&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: &quot;OY_Test&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 调用自定义的静态方法</span><br><span class="line">Vue.myGlobalMethod();</span><br><span class="line">&#x2F;&#x2F; 调用自定义的对象方法</span><br><span class="line">vm.$myMethod();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果示例：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201227222623.gif" alt="2"></p>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 主从复制</title>
      <link href="posts/6b30c31b/"/>
      <url>posts/6b30c31b/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-主从复制"><a href="#MySQL-主从复制" class="headerlink" title="MySQL 主从复制"></a>MySQL 主从复制</h1><blockquote><p><strong>环境准备：</strong></p><ul><li>win10 MySQL 5.5 (主机)</li><li>Linux CentOS7 MySQL 5.7 (从机)</li></ul></blockquote><p>==主从复制原理图：==</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201224155619.png" alt="image-20201224155514906"></p><blockquote><p>MySQL 复制过程分成三步：</p></blockquote><ol><li>master 将改变记录到二进制日志（binary log）。这些记录过程叫做二进制日志事件，binary log events；</li><li>slave 将 master 的 binary log events 拷贝到它的中继日志（relay log）；</li><li>slave 重做中继日志中的事件，将改变应用到自己的数据库中。 MySQL 复制是异步的且串行化的</li></ol><h2 id="复制的基本原则"><a href="#复制的基本原则" class="headerlink" title="复制的基本原则"></a>复制的基本原则</h2><ol><li>每个 slave 只有一个 master</li><li>每个 slave 只能有一个唯一的服务器 ID</li><li>每个 master 可以有多个 salve</li></ol><p>==<strong>注意：</strong>==复制的最大问题 <code>延迟</code>。</p><h2 id="一主一从常见配置"><a href="#一主一从常见配置" class="headerlink" title="一主一从常见配置"></a>一主一从常见配置</h2><p><strong>在开始之前需要注意一下几点：</strong></p><ol><li>MySQL 版本一致且后台正常服务运行（博客开头以提及）</li><li>主从配置在[mysql]结点下，都是小写</li></ol><h3 id="主机修改-my-ini-配置文件（win10）"><a href="#主机修改-my-ini-配置文件（win10）" class="headerlink" title="主机修改 my.ini 配置文件（win10）"></a>主机修改 my.ini 配置文件（win10）</h3><p>​ my.ini 配置文件在 MySQL 的安装目录下，一般默认在 <code>C:\Program Files\MySQL</code>目录下。在修改之前最好先备份一下配置文件，如果在配置中发生错误，可以用配置文件恢复一下。</p><ol><li>主服务器唯一 ID</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server<span class="operator">-</span>id<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>启用二进制日志</p><p>log-bin=自己本地的路径/data/mysqlbin</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log<span class="operator">-</span>bin<span class="operator">=</span>D:<span class="operator">/</span>devSoft<span class="operator">/</span>MySQLServer5<span class="number">.5</span><span class="operator">/</span>data<span class="operator">/</span>mysqlbin</span><br></pre></td></tr></table></figure><ol start="3"><li>设置不要复制的数据库</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binlog<span class="operator">-</span>ignore<span class="operator">-</span>db<span class="operator">=</span>mysql</span><br></pre></td></tr></table></figure><ol start="4"><li><p>设置需要复制的数据库</p><p>binlog-do-db=需要复制的主数据库名字 (<code>根据自己情况而设置，博客我设置的复制的数据库是mysql_01,配置时这个数据库必须还不存在，不能用以前存在的库</code>)</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binlog<span class="operator">-</span>do<span class="operator">-</span>db<span class="operator">=</span>mysql_01</span><br></pre></td></tr></table></figure><ol start="5"><li>设置 logbin 格式</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binlog_format<span class="operator">=</span>STATEMENT（默认）</span><br></pre></td></tr></table></figure><p>==参考示例图：==</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201224161637.png" alt="image-20201224161636333"></p><p><strong>mysql 主从复制起始时，从机不继承主机数据</strong></p><h3 id="从机修改-my-cnf-配置文件（CentOS-7）"><a href="#从机修改-my-cnf-配置文件（CentOS-7）" class="headerlink" title="从机修改 my.cnf 配置文件（CentOS 7）"></a>从机修改 my.cnf 配置文件（CentOS 7）</h3><p>​ my.cnf 配置文件之前，建议您还是备份一份。</p><ol><li>进入 my.cnf 文件目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# cd /etc</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201224162454.png" alt="image-20201224162453175"></p><ol start="2"><li>配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server-id &#x3D; 2</span><br><span class="line">relay-log&#x3D;mysql-relay</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201224162631.png" alt="image-20201224162630616"></p><h3 id="因修改过配置文件，请主机-从机都重启后台-mysql-服务"><a href="#因修改过配置文件，请主机-从机都重启后台-mysql-服务" class="headerlink" title="因修改过配置文件，请主机+从机都重启后台 mysql 服务"></a>因修改过配置文件，请主机+从机都重启后台 mysql 服务</h3><p><strong>win10:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201224163015.png" alt="image-20201224163014270"></p><p><strong>Linux CentOS7：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><h3 id="主机从机都关闭防火墙"><a href="#主机从机都关闭防火墙" class="headerlink" title="主机从机都关闭防火墙"></a>主机从机都关闭防火墙</h3><p><strong>windows 手动关闭</strong>:</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201224163406.png" alt="image-20201224163405229"><strong>关闭 linux 防火墙:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h3 id="在-Windows-主机上建立帐户并授权-slave"><a href="#在-Windows-主机上建立帐户并授权-slave" class="headerlink" title="在 Windows 主机上建立帐户并授权 slave"></a>在 Windows 主机上建立帐户并授权 slave</h3><p><strong>格式</strong>：<code>GRANT REPLICATION SLAVE ON *.* TO &#39;用户名&#39;@&#39;从机器数据库IP&#39; IDENTIFIED BY &#39;123456&#39;;</code></p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT REPLICATION SLAVE ON *.* TO &#x27;oy&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201224164002.png" alt="image-20201224164001892"></p><ol><li><strong>查询 master 的状态</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201224164150.png" alt="image-20201224164149784"></p><p>==注意：==记录下 File 和 Position 的值。（后面会需要用到）执行完此步骤后不要再操作主服务器 MySQL，防止主服务器状态值变化。</p><h3 id="在-Windows-主机上建立帐户并授权-slave-1"><a href="#在-Windows-主机上建立帐户并授权-slave-1" class="headerlink" title="在 Windows 主机上建立帐户并授权 slave"></a>在 Windows 主机上建立帐户并授权 slave</h3><p>格式：</p><blockquote><p>CHANGE MASTER TO MASTER_HOST=’主机 IP’,</p><p>MASTER_USER=’zhangsan’,</p><p>MASTER_PASSWORD=’123456’,</p><p>MASTER_LOG_FILE=’File 名字’,</p><p>MASTER_LOG_POS=Position 数字;</p></blockquote><p>示例：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201224165110.png" alt="image-20201224165109318"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201224165152.png" alt="image-20201224165152156"></p><blockquote><p><strong>启动从服务器复制功能</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure><blockquote><p><strong>检查服务</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201224165512.png" alt="image-20201224165511664"></p><p>上面两个参数都是 Yes，则说明主从配置成功！</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="主机新建库、新建表、insert-记录，从机复制"><a href="#主机新建库、新建表、insert-记录，从机复制" class="headerlink" title="主机新建库、新建表、insert 记录，从机复制"></a>主机新建库、新建表、insert 记录，从机复制</h3><p><strong>windowns:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database mydb_01;</span><br><span class="line">use mydb_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> mytb1(</span><br><span class="line">    id <span class="type">int</span> ,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mytb1 <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mytb1 <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;oy&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>linux:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201224165850.png" alt="image-20201224165850051"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201224170121.png" alt="image-20201224170121024"></p><h3 id="停止从服务复制功能"><a href="#停止从服务复制功能" class="headerlink" title="停止从服务复制功能"></a>停止从服务复制功能</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure><h3 id="重新配置主从"><a href="#重新配置主从" class="headerlink" title="重新配置主从"></a>重新配置主从</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">reset master;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 安装 MySQL 5.7</title>
      <link href="posts/1c9cc24c/"/>
      <url>posts/1c9cc24c/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-7-安装-MySQL-5-7"><a href="#CentOS-7-安装-MySQL-5-7" class="headerlink" title="CentOS 7 安装 MySQL 5.7"></a>CentOS 7 安装 MySQL 5.7</h1><h2 id="一、下载地址"><a href="#一、下载地址" class="headerlink" title="一、下载地址"></a>一、下载地址</h2><p>官网下载地址：<a href="http://dev.mysql.com/downloads/mysql/">http://dev.mysql.com/downloads/mysql/</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210155701.png" alt="image-20201210155659997"></p><h2 id="二、拷贝-amp-解压缩"><a href="#二、拷贝-amp-解压缩" class="headerlink" title="二、拷贝&amp;解压缩"></a>二、拷贝&amp;解压缩</h2><p><code>注意：</code> 我自己本人使用版本是 mysql 5.7.16 但是目前官网上的 GA 版 mysql 是 5.7.32 版，两个版本安装都一样，版本选择根据自己来决定。这里以<strong>5.7.16</strong>版为<strong>演示</strong>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210155829.png" alt="image-20201210155829125"></p><h2 id="三、检查工作"><a href="#三、检查工作" class="headerlink" title="三、检查工作"></a>三、检查工作</h2><h3 id="1、检查当前系统是否安装过-mysql"><a href="#1、检查当前系统是否安装过-mysql" class="headerlink" title="1、检查当前系统是否安装过 mysql"></a>1、检查当前系统是否安装过 mysql</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep mariadb</span><br></pre></td></tr></table></figure><p>==如果存在如下：==</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210160242.png" alt="image-20201210160241455"></p><p><strong>请执行以下卸载命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps  mariadb-libs</span><br></pre></td></tr></table></figure><h3 id="2、检查当前-mysql-依赖环境"><a href="#2、检查当前-mysql-依赖环境" class="headerlink" title="2、检查当前 mysql 依赖环境"></a>2、检查当前 mysql 依赖环境</h3><p>==执行安装命令前，先执行查询命令==</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep libaio</span><br></pre></td></tr></table></figure><p>如果存在 libaio 包如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210160513.png" alt="image-20201210160512951"></p><p>如果不存在请参考博客目录： <code>十一、Bug</code> 有解决方案</p><p>==在执行命令：==</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep net-tools</span><br></pre></td></tr></table></figure><p>如果存在 net-tools 包如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210160652.png" alt="image-20201210160652142"></p><blockquote><p><strong>如果不存在需要到 centos 安装盘里进行 rpm 安装</strong></p></blockquote><h2 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h2><h3 id="1、通过-Xftp-工具把在下载好文件发送到-Linux-的-opt-目录下"><a href="#1、通过-Xftp-工具把在下载好文件发送到-Linux-的-opt-目录下" class="headerlink" title="1、通过 Xftp 工具把在下载好文件发送到 Linux 的 opt 目录下"></a>1、通过 Xftp 工具把在下载好文件发送到 Linux 的 opt 目录下</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210161052.png" alt="image-20201210161051656"></p><h3 id="2、在-mysql-的安装目录下执行-必须按照顺序执行"><a href="#2、在-mysql-的安装目录下执行-必须按照顺序执行" class="headerlink" title="2、在 mysql 的安装目录下执行:==(必须按照顺序执行)=="></a>2、在 mysql 的安装目录下执行:==(必须按照顺序执行)==</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.16-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.16-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.16-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-5.7.16-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210161931.png" alt="image-20201210161930157"></p><p>==<strong>注意：</strong>==如在检查工作时，没有检查 mysql 依赖环境在安装 mysql-community-server 会报错</p><h2 id="四、查看-MySQL-安装版本"><a href="#四、查看-MySQL-安装版本" class="headerlink" title="四、查看 MySQL 安装版本"></a>四、查看 MySQL 安装版本</h2><p><strong>执行以下命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin --version</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210162159.png" alt="image-20201210162159199"></p><h2 id="五、MySQL-服务的初始化"><a href="#五、MySQL-服务的初始化" class="headerlink" title="五、MySQL 服务的初始化"></a>五、MySQL 服务的初始化</h2><blockquote><p>为了保证数据库目录为与文件的所有者为 mysql 登陆用户，如果你是以 root 身份运行 mysql 服务，需要执行下面的命令初始化</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize --user=mysql</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：另外 –initialize 选项默认以“安全”模式来初始化，则会为 root 用户生成一个密码并将该密码标记为过期，登陆后你需要设置一个新的密码。</p><p><strong>查看密码：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210162501.png" alt="image-20201210162500890"></p><p>==root@localhost: 后面就是初始化的密码==</p><h2 id="六、MySQL-服务的启与停"><a href="#六、MySQL-服务的启与停" class="headerlink" title="六、MySQL 服务的启与停"></a>六、MySQL 服务的启与停</h2><p><strong>启动</strong>：<code>systemctl start mysqld.service</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210162832.png" alt="image-20201210162831231"></p><p><strong>关闭：</strong><code>systemctl stop mysqld.service</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210162922.png" alt="image-20201210162921994"></p><h2 id="七、首次登陆"><a href="#七、首次登陆" class="headerlink" title="七、首次登陆"></a>七、首次登陆</h2><blockquote><p>首次登陆通过 <strong>mysql -uroot -p</strong>进行登录，在 Enter password：录入初始化密码</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210163134.png" alt="image-20201210163133832"></p><blockquote><p>因为初始化密码默认是过期的，所以查看数据库会报错</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210163259.png" alt="image-20201210163258630"></p><blockquote><p>修改密码：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;new_password&#x27;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210163353.png" alt="image-20201210163353276"></p><p>设置完密码就可以用新密码登陆，正常使用数据库了 ！！！</p><h2 id="八、自启动-mysql-服务"><a href="#八、自启动-mysql-服务" class="headerlink" title="八、自启动 mysql 服务"></a>八、自启动 mysql 服务</h2><blockquote><p>查看 mysql 是否自启动（默认自启动）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-unit-files|grep mysqld.service</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210163935.png" alt="image-20201210163934384"></p><p>==<strong>注意：</strong>==如不是 enabled 可以运行如下命令设置自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld.sercice</span><br></pre></td></tr></table></figure><h2 id="九、修改字符集问题"><a href="#九、修改字符集问题" class="headerlink" title="九、修改字符集问题"></a>九、修改字符集问题</h2><blockquote><p>问题：mysql5.7 直接插入中文数据报错。</p><p>可以使用以下方法解决问题</p></blockquote><ol><li><strong>修改配置文件</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim  /etc/my.cnf</span><br></pre></td></tr></table></figure><p>在最后加上中文字符集配置: <code>character_set_server=utf8</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210164316.png" alt="image-20201210164315928"></p><ol start="2"><li>重新启动 mysql</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>==<strong>扩展：</strong>==已生成的库表字符集如何变更</p><ol><li>修改数据库的字符集</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> database mydb <span class="type">character</span> <span class="keyword">set</span> <span class="string">&#x27;utf8&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>修改数据表的字符集</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> mytbl <span class="keyword">convert</span> <span class="keyword">to</span>  <span class="type">character</span> <span class="keyword">set</span> <span class="string">&#x27;utf8&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>到此，Linux 上的 MySQL 数据库就安装完成了</strong></p></blockquote><h2 id="十、远程工具连接-MySQL-数据库"><a href="#十、远程工具连接-MySQL-数据库" class="headerlink" title="十、远程工具连接 MySQL 数据库"></a>十、远程工具连接 MySQL 数据库</h2><blockquote><p><strong>授予权限</strong></p></blockquote><p>先使用 <code>mysql -uroot -p</code> 进入数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> root@<span class="string">&#x27;%&#x27;</span>  identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210165253.png" alt="image-20201210165252685"></p><p>授予通过网络方式登录的的 root 用户 ，对所有库所有表的全部权限，密码设为 6090.</p><blockquote><p><strong>远程连接</strong></p></blockquote><ol><li>先 ping 一下数据库服务器的 ip 地址确认网络畅通。</li><li>关闭数据库服务的防火墙</li></ol><p><strong>补充</strong>：==(根据自己情况来选择)==</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 查看当前防火墙状态如果防火墙处于开启状态，firewalld.service前面的点是高亮的，Active：active（开启））</span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"></span><br><span class="line">//关闭当前的防火墙（仅对本次开机有效，重启后防火墙会再次启用）</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line">//永久关闭防火墙（重启后防火墙依然关闭）</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line"></span><br><span class="line">// 启动防火墙</span><br><span class="line"> systemctl start firewalld</span><br></pre></td></tr></table></figure><p><strong>演示使用命令</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>使用 Navicat 连接</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210170055.png" alt="image-20201210170055182"></p><p><strong>连接成功：</strong></p><p>如果使用的是云服务(阿里云、腾讯云等)记得去安全组里面配置规则，开放 3306 端口。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201210170125.png" alt="image-20201210170124458"></p><h2 id="十一、Bug"><a href="#十一、Bug" class="headerlink" title="十一、Bug"></a>十一、Bug</h2><blockquote><p>使用阿里云服务器安装时，缺少 <code>libaio</code> 依赖</p></blockquote><ul><li>执行 rpm -ivh mysql-community-server-5.7.16-1.el7.x86_64.rpm 报错</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error: Failed dependencies:</span><br><span class="line">libaio.so.1()(64bit) is needed by mysql-community-server-5.7.16-1.el7.x86_64</span><br><span class="line">libaio.so.1(LIBAIO_0.1)(64bit) is needed by mysql-community-server-5.7.16-1.el7.x86_64</span><br><span class="line">libaio.so.1(LIBAIO_0.4)(64bit) is needed by mysql-community-server-5.7.16-1.el7.x86_64</span><br></pre></td></tr></table></figure><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20210202150136.jpg" alt="Snipaste_2021-02-02_14-53-52"></p><p><strong>原因分析</strong>：缺少依赖</p><p><strong>解决方式：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行以下，就可以解决</span></span><br><span class="line">yum install libaio</span><br></pre></td></tr></table></figure><p><strong>参考：</strong><a href="http://www.blogjava.net/amigoxie/archive/2013/02/22/395605.html">http://www.blogjava.net/amigoxie/archive/2013/02/22/395605.html</a></p><p>==<strong>如果对你有帮助的话，请给我点个赞，写作不易，谢谢！！！！</strong>==</p>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 基本操作总结</title>
      <link href="posts/949df4a0/"/>
      <url>posts/949df4a0/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-基本操作总结"><a href="#Docker-基本操作总结" class="headerlink" title="Docker 基本操作总结"></a>Docker 基本操作总结</h1><h2 id="一、Docker-的基本组成"><a href="#一、Docker-的基本组成" class="headerlink" title="一、Docker 的基本组成"></a>一、Docker 的基本组成</h2><h3 id="①-镜像（image）"><a href="#①-镜像（image）" class="headerlink" title="① 镜像（image）"></a>① 镜像（image）</h3><p>​ Docker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125102611.png" alt="image-20201125102603152"></p><h3 id="②-容器（container）"><a href="#②-容器（container）" class="headerlink" title="② 容器（container）"></a>② 容器（container）</h3><ul><li><p>Docker 利用容器（Container）独立运行的一个或一组应用。==容器是用镜像创建的运行实例。==</p></li><li><p>它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。</p></li><li><p>==可以把容器看做是一个简易版的 Linux 环境==（包括 root 用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p></li><li><p>容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。</p></li></ul><h3 id="③-仓库（repository）"><a href="#③-仓库（repository）" class="headerlink" title="③ 仓库（repository）"></a>③ 仓库（repository）</h3><ul><li><p>仓库（Repository）是集中存放镜像文件的场所。</p></li><li><p>仓库(Repository)和仓库注册服务器（Registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。</p></li><li><p>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。</p></li><li><p>最大的公开仓库是 Docker Hub(<a href="https://hub.docker.com/)%EF%BC%8C%E5%AD%98%E6%94%BE%E4%BA%86%E6%95%B0%E9%87%8F%E5%BA%9E%E5%A4%A7%E7%9A%84%E9%95%9C%E5%83%8F%E4%BE%9B%E7%94%A8%E6%88%B7%E4%B8%8B%E8%BD%BD%E3%80%82%E5%9B%BD%E5%86%85%E7%9A%84%E5%85%AC%E5%BC%80%E4%BB%93%E5%BA%93%E5%8C%85%E6%8B%AC%E9%98%BF%E9%87%8C%E4%BA%91">https://hub.docker.com/)，存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云</a> 、网易云 等</p></li></ul><h3 id="④-Docker-的架构图"><a href="#④-Docker-的架构图" class="headerlink" title="④ Docker 的架构图"></a>④ Docker 的架构图</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125103157.png" alt="image-20201125103156718"></p><h2 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h2><p>请参考：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><h3 id="①-CentOS7-安装-Docker"><a href="#①-CentOS7-安装-Docker" class="headerlink" title="① CentOS7 安装 Docker"></a>① CentOS7 安装 Docker</h3><p>​ 官网中文安装参考手册：<a href="https://docs.docker-cn.com/engine/installation/linux/docker-ce/centos/#prerequisites">https://docs.docker-cn.com/engine/installation/linux/docker-ce/centos/#prerequisites</a></p><ol><li><p><strong>确定 CentOS7 版本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125103807.png" alt="image-20201125103806151"></p></li><li><p><strong>yum 安装 gcc 相关</strong></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>卸载旧版本(根据自己的情况选择)</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove docker docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>安装需要的软件包</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>设置 stable 镜像仓库</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ol start="6"><li><strong>更新 yum 软件包索引</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><ol start="7"><li><strong>安装 DOCKER CE</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><ol start="8"><li><strong>启动 docker</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>9.<strong>测试</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125105133.png" alt="image-20201125105132518"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125105450.png" alt="image-20201125105448967"></p><ol start="10"><li><strong>卸载</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove docker-ce</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h3 id="②-修改镜像加速源"><a href="#②-修改镜像加速源" class="headerlink" title="② 修改镜像加速源"></a>② 修改镜像加速源</h3><p><code>本篇博客采用的是 阿里云镜像源加速</code></p><p>可以先参考了解一下：<a href="https://dev.aliyun.com/search.html">https://dev.aliyun.com/search.html</a></p><ol><li><p><strong>注册一个属于自己的阿里云账户(可复用淘宝账号)</strong></p></li><li><p><strong>获得加速器地址连接</strong></p></li></ol><ul><li>登陆阿里云开发者平台</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125110243.png" alt="image-20201125110242402"></p><ul><li>获取加速器地址</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125110316.png" alt="image-20201125110315122"></p><h3 id="③-配置本机-Docker-运行镜像加速器"><a href="#③-配置本机-Docker-运行镜像加速器" class="headerlink" title="③ 配置本机 Docker 运行镜像加速器"></a>③ 配置本机 Docker 运行镜像加速器</h3><p><code>配置镜像加速CentOS7版本</code></p><ul><li>mkdir -p /etc/docker</li><li>vim /etc/docker/daemon.json</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash">阿里云</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://｛自已的编码｝.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125110600.png" alt="image-20201125110559470"></p><ul><li>systemctl daemon-reload</li><li>systemctl restart docker</li></ul><h3 id="④-底层原理"><a href="#④-底层原理" class="headerlink" title="④ 底层原理"></a>④ 底层原理</h3><ol><li><p><strong>Docker 工作机制</strong></p><p>Docker 是一个 Client-Server 结构的系统，Docker 守护进程运行在主机上， 然后通过 Socket 连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 容器，是一个运行时环境，就是我们前面说到的集装箱。</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125110850.png" alt="image-20201125110849091"></p><h2 id="三、Docker-常用命令"><a href="#三、Docker-常用命令" class="headerlink" title="三、Docker 常用命令"></a>三、Docker 常用命令</h2><h3 id="①-帮助命令"><a href="#①-帮助命令" class="headerlink" title="① 帮助命令"></a>① 帮助命令</h3><ul><li>docker version</li><li>docker info</li><li>docker info</li></ul><h3 id="②-镜像命令"><a href="#②-镜像命令" class="headerlink" title="② 镜像命令"></a>② 镜像命令</h3><h4 id="1、docker-images"><a href="#1、docker-images" class="headerlink" title="1、docker images"></a>1、docker images</h4><ul><li>查看本地镜像仓库镜像源</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125111313.png" alt="image-20201125111311989"></p><blockquote><p><strong>各个选项说明:</strong></p></blockquote><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>REPOSITORY</td><td>表示镜像的仓库源</td></tr><tr><td>TAG</td><td>镜像的标签</td></tr><tr><td>IMAGE ID</td><td>镜像 ID</td></tr><tr><td>CREATED</td><td>镜像创建时间</td></tr><tr><td>SIZE</td><td>镜像大小</td></tr></tbody></table><p>​ 同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像。</p><blockquote><p><strong>OPTIONS 说明：</strong></p></blockquote><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>列出本地所有的镜像（含中间映像层）</td></tr><tr><td>-q</td><td>只显示镜像 ID。</td></tr><tr><td>–digests</td><td>显示镜像的摘要信息</td></tr><tr><td>–no-trunc</td><td>显示完整的镜像信息</td></tr></tbody></table><h4 id="2、docker-search"><a href="#2、docker-search" class="headerlink" title="2、docker search"></a>2、docker search</h4><ul><li>查询镜像源</li></ul><blockquote><p>docker search [OPTIONS] 镜像名字</p></blockquote><blockquote><p><strong>OPTIONS 说明：</strong></p></blockquote><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>–no-trunc</td><td>显示完整的镜像描述</td></tr><tr><td>-s</td><td>列出收藏数不小于指定值的镜像。</td></tr><tr><td>–automated</td><td>只列出 automated build 类型的镜像</td></tr></tbody></table><h4 id="3、docker-pull"><a href="#3、docker-pull" class="headerlink" title="3、docker pull"></a>3、docker pull</h4><ul><li>拉取镜像源</li></ul><blockquote><p>docker pull 镜像名字[:TAG]</p></blockquote><h4 id="4、docker-rmi"><a href="#4、docker-rmi" class="headerlink" title="4、docker rmi"></a>4、docker rmi</h4><ul><li><p>删除镜像源</p></li><li><p>删除单个</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi  -f 镜像ID</span><br></pre></td></tr></table></figure><ul><li>删除多个</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f 镜像名1:TAG 镜像名2:TAG</span><br></pre></td></tr></table></figure><ul><li>删除全部</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f $(docker images -qa)</span><br></pre></td></tr></table></figure><h3 id="③-容器命令"><a href="#③-容器命令" class="headerlink" title="③ 容器命令"></a>③ 容器命令</h3><blockquote><p>有镜像才能创建容器，这是根本前提(下载一个 CentOS 镜像演示)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><blockquote><p>新建并启动容器</p></blockquote><ul><li><strong>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</strong></li></ul><p><strong>OPTIONS 说明</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-d</td><td>后台运行容器，并返回容器 ID，也即启动守护式容器</td></tr><tr><td>-i</td><td>以交互模式运行容器，通常与 -t 同时使用</td></tr><tr><td>-t</td><td>为容器重新分配一个伪输入终端，通常与 -i 同时使用</td></tr><tr><td>-P</td><td>随机端口映射</td></tr><tr><td>-p</td><td>指定端口映射，有以下四种格式：<br />ip:hostPort:containerPort<br/>ip::containerPort<br/>hostPort:containerPort<br/>containerPort</td></tr></tbody></table><blockquote><p>列出当前所有正在运行的容器</p></blockquote><ul><li><p><strong>docker ps [OPTIONS]</strong></p><p><strong>OPTIONS 说明</strong></p></li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>列出当前所有正在运行的容器+历史上运行过的</td></tr><tr><td>-l</td><td>显示最近创建的容器。</td></tr><tr><td>-n</td><td>显示最近 n 个创建的容器。 docker ps -n 3</td></tr><tr><td>-q</td><td>静默模式，只显示容器编号</td></tr><tr><td>–no-trunc</td><td>不截断输出</td></tr></tbody></table><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125164213.png" alt="image-20201125164206636"></p><blockquote><p>退出容器</p></blockquote><ul><li>exit: 容器停止退出</li><li>ctrl+P+Q: 容器不停止退出</li></ul><blockquote><p>启动容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start  容器ID或者容器名</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125164629.png" alt="image-20201125164628315"></p><blockquote><p>重启容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart 容器ID或者容器名</span><br></pre></td></tr></table></figure><blockquote><p>停止容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器ID或者容器名</span><br></pre></td></tr></table></figure><blockquote><p>强制停止容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill 容器ID或者容器名</span><br></pre></td></tr></table></figure><blockquote><p>删除已停止的容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器ID</span><br></pre></td></tr></table></figure><p><strong>一次性删除多个容器</strong></p><ul><li><strong>docker rm -f $(docker ps -a -q)</strong></li><li><strong>docker ps -a -q | xargs docker rm</strong></li></ul><h3 id="④-核心命令"><a href="#④-核心命令" class="headerlink" title="④ 核心命令"></a>④ 核心命令</h3><h4 id="1、启动守护式容器"><a href="#1、启动守护式容器" class="headerlink" title="1、启动守护式容器"></a>1、启动守护式容器</h4><ul><li>启动守护式容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d 容器名</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：使用镜像 centos:latest 以后台模式启动一个容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d centos</span><br></pre></td></tr></table></figure><p><code>问题</code>：然后 docker ps -a 进行查看, 会发现容器已经退出,很重要的要说明的一点: ==Docker 容器后台运行,就必须有一个前台进程.<br>容器运行的命令如果不是那些一直挂起的命令（比如运行 top，tail）==，就是会自动退出的。</p><p>这个是 docker 的机制问题,比如你的 web 容器,我们以 nginx 为例，正常情况下,我们配置启动服务只需要启动响应的 service 即可。例如 service nginx start 但是,这样做,nginx 为后台进程模式运行,就导致 docker 前台没有运行的应用,这样的容器后台启动后,会立即自杀因为他觉得他没事可做了所以，最佳的解决方案是,将你要运行的程序以前台进程的形式运行。</p><ul><li>从 Hub 上下载 tomcat 镜像到本地并成功运行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 8080:8080 tomcat</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-p</td><td>主机端口:docker 容器端口</td></tr><tr><td>-P</td><td>随机分配端口</td></tr><tr><td>i</td><td>交互</td></tr><tr><td>t</td><td>终端</td></tr></tbody></table><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125170051.png" alt="image-20201125170050572"></p><ul><li>查看容器日志</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail 容器ID</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d centos &#x2F;bin&#x2F;sh -c &quot;while true;do echo hello zzyy;sleep 2;done&quot;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125170254.png" alt="image-20201125170253224"></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-t</td><td>是加入时间戳</td></tr><tr><td>-f</td><td>跟随最新的日志打印</td></tr><tr><td>–tail</td><td>数字 显示最后多少条</td></tr></tbody></table><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125170449.png" alt="image-20201125170447540"></p><ul><li>查看容器内运行的进程</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器ID</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125170715.png" alt="image-20201125170714558"></p><ul><li>进入正在运行的容器并以命令行交互</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器ID bashShell</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125170821.png" alt="image-20201125170820560"></p><p><strong>其他：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器ID ls -l /tmp</span><br></pre></td></tr></table></figure><ul><li>重新进入 docker attach 容器 ID</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125171522.png" alt="image-20201125171522193"></p><p>==<strong>上述两个区别</strong>==</p><ul><li><code>attach</code> 直接进入容器启动命令的终端，不会启动新的进程</li><li><code>exec</code> 是在容器中打开新的终端，并且可以启动新的进程</li></ul><h2 id="四、小总结"><a href="#四、小总结" class="headerlink" title="四、小总结"></a>四、小总结</h2><p><strong>常用命令：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201125171746.png" alt="image-20201125171745545"></p><p><strong>Docker 命令总结：</strong></p><table><thead><tr><th>指令</th><th>英文</th><th>说明</th></tr></thead><tbody><tr><td>attach</td><td>Attach to a running container</td><td>当前 shell 下 attach 连接指定运行镜像</td></tr><tr><td>build</td><td>Build an image from a Dockerfile</td><td>通过 Dockerfile 定制镜像</td></tr><tr><td>commit</td><td>Create a new image from a container changes</td><td>提交当前容器为新的镜像</td></tr><tr><td>cp</td><td>Copy files/folders from the containers filesystem to the host path</td><td>从容器中拷贝指定文件或者目录到宿主机中</td></tr><tr><td>create</td><td>Create a new container</td><td>创建一个新的容器，同 run，但不启动容器</td></tr><tr><td>diff</td><td>Inspect changes on a container’s filesystem</td><td>查看 docker 容器变化</td></tr><tr><td>events</td><td>Get real time events from the server</td><td>从 docker 服务获取容器实时事件</td></tr><tr><td>exec</td><td>Run a command in an existing container</td><td>在已存在的容器上运行命令</td></tr><tr><td>export</td><td>Stream the contents of a container as a tar archive</td><td>导出容器的内容流作为一个 tar 归档文件[对应 import ]</td></tr><tr><td>history</td><td>Show the history of an image</td><td>展示一个镜像形成历史</td></tr><tr><td>images</td><td>List images</td><td>列出系统当前镜像</td></tr><tr><td>import</td><td>Create a new filesystem image from the contents of a tarball</td><td>从 tar 包中的内容创建一个新的文件系统映像[对应 export]</td></tr><tr><td>info</td><td>Display system-wide information</td><td>显示系统相关信息</td></tr><tr><td>inspect</td><td>Return low-level information on a container</td><td>查看容器详细信息</td></tr><tr><td>kill</td><td>Kill a running container</td><td>kill 指定 docker 容器</td></tr><tr><td>load</td><td>Load an image from a tar archive</td><td>从一个 tar 包中加载一个镜像[对应 save]</td></tr><tr><td>login</td><td>Register or Login to the docker registry server</td><td>注册或者登陆一个 docker 源服务器</td></tr><tr><td>logout</td><td>Log out from a Docker registry server</td><td>从当前 Docker registry 退出</td></tr><tr><td>logs</td><td>Fetch the logs of a container</td><td>输出当前容器日志信息</td></tr><tr><td>port</td><td>Lookup the public-facing port which is NAT-ed to PRIVATE_PORT</td><td>查看映射端口对应的容器内部源端口</td></tr><tr><td>pause</td><td>Pause all processes within a container</td><td>暂停容器</td></tr><tr><td>ps</td><td>List containers</td><td>列出容器列表</td></tr><tr><td>pull</td><td>Pull an image or a repository from the docker registry server</td><td>从 docker 镜像源服务器拉取指定镜像或者库镜像</td></tr><tr><td>push</td><td>Push an image or a repository to the docker registry server</td><td>推送指定镜像或者库镜像至 docker 源服务器</td></tr><tr><td>restart</td><td>Restart a running container</td><td>重启运行的容器</td></tr><tr><td>rm</td><td>Remove one or more containers</td><td>移除一个或者多个容器</td></tr><tr><td>rmi</td><td>Remove one or more images</td><td>移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</td></tr><tr><td>run</td><td>Run a command in a new container</td><td>创建一个新的容器并运行一个命令</td></tr><tr><td>save</td><td>Save an image to a tar archive</td><td>保存一个镜像为一个 tar 包[对应 load]</td></tr><tr><td>search</td><td>Search for an image on the Docker Hub</td><td>在 docker hub 中搜索镜像</td></tr><tr><td>start</td><td>Start a stopped containers</td><td>启动容器</td></tr><tr><td>stop</td><td>Stop a running containers</td><td>停止容器</td></tr><tr><td>tag</td><td>Tag an image into a repository</td><td>给源中镜像打标签</td></tr><tr><td>top</td><td>Lookup the running processes of a container</td><td>查看容器中运行的进程信息</td></tr><tr><td>unpause</td><td>Unpause a paused container</td><td>取消暂停容器</td></tr><tr><td>version</td><td>Show the docker version information</td><td>查看 docker 版本号</td></tr><tr><td>wait</td><td>Block until a container stops, then print its exit code</td><td>截取容器停止时的退出状态值</td></tr></tbody></table><p>更详细请参考：<a href="https://oy6090.top/post/658751968.html">springboot 之 docker 博客</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Alibaba Seata处理分布式事务</title>
      <link href="posts/a8da4fb0/"/>
      <url>posts/a8da4fb0/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringCloud-Alibaba-Seata-处理分布式事务"><a href="#SpringCloud-Alibaba-Seata-处理分布式事务" class="headerlink" title="SpringCloud Alibaba Seata 处理分布式事务"></a>SpringCloud Alibaba Seata 处理分布式事务</h1><h2 id="一、分布式事务问题"><a href="#一、分布式事务问题" class="headerlink" title="一、分布式事务问题"></a>一、分布式事务问题</h2><h3 id="①-分布式前"><a href="#①-分布式前" class="headerlink" title="① 分布式前"></a>① 分布式前</h3><p>​ 单机单库没这个问题 <code>从 1： 1 -&gt; 1:N -&gt; N: N </code></p><h3 id="②-分布式之后"><a href="#②-分布式之后" class="headerlink" title="② 分布式之后"></a>② 分布式之后</h3><p>​ 单体应用被拆分成微服务应用， 原来的三个模块被拆分成三个独立的应用，分别使用三个独立的数据源。</p><p>​ 业务操作需要调用三个服务来完成。 此时每个服务内部的数据一致性由本地事务来保证， 但是全局的数据一致性问题没法保证。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201115231229.png" alt="image-20201115231222106"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201115231229.png" alt="image-20201115231230163"></p><h3 id="③-一句话"><a href="#③-一句话" class="headerlink" title="③ 一句话"></a>③ 一句话</h3><p>​ 一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用， 就会产生分布式事务问题 。</p><h2 id="二、Seata-简介"><a href="#二、Seata-简介" class="headerlink" title="二、Seata 简介"></a>二、Seata 简介</h2><h3 id="①-是什么"><a href="#①-是什么" class="headerlink" title="① 是什么"></a>① 是什么</h3><p>​ Seata 是一款开源的分布式事务解决方案， 致力于在微服务架构下提供高性能和简单易用的分布式事务服务</p><p>​ 官网地址 <a href="http://seata.io/zh-cn/">http://seata.io/zh-cn/</a></p><h3 id="②-能干嘛"><a href="#②-能干嘛" class="headerlink" title="② 能干嘛"></a>② 能干嘛</h3><p>​ 一个典型的分布式事务过程</p><ol><li><strong>分布式事务处理过程的-ID+三组件模型</strong></li></ol><ul><li><p><strong>Transaction ID XID</strong></p><p>全局唯一的事务 ID</p></li><li><p><strong>3 组件概念</strong></p><p>==Transaction Coordinator(TC)==<br>事务协调器， 维护全局事务的运行状态， 负责协调并驱动全局事务的提交或回滚;</p><p>==Transaction Manager(TM)==<br>控制全局事务的边界， 负责开启一个全局事务， 并最终发起全局提交或全局回滚的决议;</p><p>==Resource Manager(RM)==<br>控制分支事务， 负责分支注册， 状态汇报， 并接收事务协调器的指令， 驱动分支（本地） 事务的提交和回滚；</p></li></ul><ol start="2"><li><strong>处理过程</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201115232306.png" alt="image-20201115232305577"></p><ol start="3"><li><p><strong>去哪下</strong></p><p>发布说明: <a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a></p></li><li><p><strong>怎么玩</strong></p></li></ol><ul><li>Spring 本地@Transactional</li><li>全局@GlobalTransactional</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201115232604.png" alt="image-20201115232603341"></p><h2 id="三、Seata-Server-安装"><a href="#三、Seata-Server-安装" class="headerlink" title="三、Seata-Server 安装"></a>三、Seata-Server 安装</h2><h3 id="①-官网地址"><a href="#①-官网地址" class="headerlink" title="① 官网地址"></a>① 官网地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;seata.io&#x2F;zh-cn&#x2F;</span><br></pre></td></tr></table></figure><h3 id="②-下载版本"><a href="#②-下载版本" class="headerlink" title="② 下载版本"></a>② 下载版本</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201115232735.png" alt="image-20201115232734543"></p><h3 id="③-修改配置文件"><a href="#③-修改配置文件" class="headerlink" title="③ 修改配置文件"></a>③ 修改配置文件</h3><ul><li>seata-server-0.9.0.zip 解压到指定目录并修改 conf 目 录下的 file.conf 配置文件</li></ul><ol><li>先备份原始 file.conf 文件 、</li></ol><blockquote><p>主要修改： 自定义事务组名称+事务日志存储模式为 db+数据库连接信息</p></blockquote><blockquote><p><strong>file.conf</strong></p></blockquote><ol><li>service 模块</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgroup_mapping.fsp_tx_group &#x3D; &quot;default&quot;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201116205820.png" alt="image-20201116205819062"></p><ol start="2"><li>store 模块</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mode &#x3D; &quot;db&quot;</span><br><span class="line">url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;seata&quot;</span><br><span class="line">user &#x3D; &quot;root&quot;</span><br><span class="line">password &#x3D; &quot;你自己的密码&quot;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201116152654.png" alt="image-20201116152647090"></p><h3 id="④-mysql5-7-数据库新建库-seata"><a href="#④-mysql5-7-数据库新建库-seata" class="headerlink" title="④ mysql5.7 数据库新建库 seata"></a>④ mysql5.7 数据库新建库 seata</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database seata;</span><br></pre></td></tr></table></figure><h3 id="⑤-在-seata-库里建表"><a href="#⑤-在-seata-库里建表" class="headerlink" title="⑤ 在 seata 库里建表"></a>⑤ 在 seata 库里建表</h3><p>建 表 db_store.sql 在 \seata-server-0.9.0\seata\conf 目 录 里 面 db_store.sq</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201116153114.png" alt="image-20201116153112748"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- the table to store GlobalSession data</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> `global_table`;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `global_table` (</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">128</span>)  <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  `transaction_id` <span class="type">bigint</span>,</span><br><span class="line">  `status` tinyint <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  `application_id` <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">  `transaction_service_group` <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">  `transaction_name` <span class="type">varchar</span>(<span class="number">128</span>),</span><br><span class="line">  `timeout` <span class="type">int</span>,</span><br><span class="line">  `begin_time` <span class="type">bigint</span>,</span><br><span class="line">  `application_data` <span class="type">varchar</span>(<span class="number">2000</span>),</span><br><span class="line">  `gmt_create` datetime,</span><br><span class="line">  `gmt_modified` datetime,</span><br><span class="line">  <span class="keyword">primary</span> <span class="keyword">key</span> (`xid`),</span><br><span class="line">  key `idx_gmt_modified_status` (`gmt_modified`, `status`),</span><br><span class="line">  key `idx_transaction_id` (`transaction_id`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- the table to store BranchSession data</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> `branch_table`;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `branch_table` (</span><br><span class="line">  `branch_id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  `transaction_id` <span class="type">bigint</span> ,</span><br><span class="line">  `resource_group_id` <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">  `resource_id` <span class="type">varchar</span>(<span class="number">256</span>) ,</span><br><span class="line">  `lock_key` <span class="type">varchar</span>(<span class="number">128</span>) ,</span><br><span class="line">  `branch_type` <span class="type">varchar</span>(<span class="number">8</span>) ,</span><br><span class="line">  `status` tinyint,</span><br><span class="line">  `client_id` <span class="type">varchar</span>(<span class="number">64</span>),</span><br><span class="line">  `application_data` <span class="type">varchar</span>(<span class="number">2000</span>),</span><br><span class="line">  `gmt_create` datetime,</span><br><span class="line">  `gmt_modified` datetime,</span><br><span class="line">  <span class="keyword">primary</span> <span class="keyword">key</span> (`branch_id`),</span><br><span class="line">  key `idx_xid` (`xid`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- the table to store lock data</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> `lock_table`;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `lock_table` (</span><br><span class="line">  `row_key` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">96</span>),</span><br><span class="line">  `transaction_id` long ,</span><br><span class="line">  `branch_id` long,</span><br><span class="line">  `resource_id` <span class="type">varchar</span>(<span class="number">256</span>) ,</span><br><span class="line">  `table_name` <span class="type">varchar</span>(<span class="number">32</span>) ,</span><br><span class="line">  `pk` <span class="type">varchar</span>(<span class="number">36</span>) ,</span><br><span class="line">  `gmt_create` datetime ,</span><br><span class="line">  `gmt_modified` datetime,</span><br><span class="line">  <span class="keyword">primary</span> <span class="keyword">key</span>(`row_key`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="⑥-修-改-seata-server-0-9-0-seata-conf-目-录-下-的-registry-conf-配置文件-、"><a href="#⑥-修-改-seata-server-0-9-0-seata-conf-目-录-下-的-registry-conf-配置文件-、" class="headerlink" title="⑥ 修 改 seata-server-0.9.0\seata\conf 目 录 下 的 registry.conf 配置文件 、"></a>⑥ 修 改 seata-server-0.9.0\seata\conf 目 录 下 的 registry.conf 配置文件 、</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class="line">  type <span class="operator">=</span> &quot;nacos&quot;</span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr <span class="operator">=</span> &quot;localhost:8848&quot;</span><br><span class="line">    namespace <span class="operator">=</span> &quot;&quot;</span><br><span class="line">    cluster <span class="operator">=</span> &quot;default&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201116153248.png" alt="image-20201116153247607"></p><p>==目的是==： 指明注册中心为 nacos， 及修改 nacos 连接信息</p><h3 id="⑦-先启动-Nacos-端口号-8848"><a href="#⑦-先启动-Nacos-端口号-8848" class="headerlink" title="⑦ 先启动 Nacos 端口号 8848"></a>⑦ 先启动 Nacos 端口号 8848</h3><h3 id="⑧-再启动-seata-server"><a href="#⑧-再启动-seata-server" class="headerlink" title="⑧ 再启动 seata-server"></a>⑧ 再启动 seata-server</h3><ul><li><strong>seata-server.bat</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201116154329.png" alt="image-20201116154328861"></p><h2 id="四、订单-库存-账户业务数据库准备"><a href="#四、订单-库存-账户业务数据库准备" class="headerlink" title="四、订单/库存/账户业务数据库准备"></a>四、订单/库存/账户业务数据库准备</h2><h3 id="①-以下演示都需要先启动-Nacos-后启动-Seata，-保证两个都-OK"><a href="#①-以下演示都需要先启动-Nacos-后启动-Seata，-保证两个都-OK" class="headerlink" title="① 以下演示都需要先启动 Nacos 后启动 Seata， 保证两个都 OK"></a>① 以下演示都需要先启动 Nacos 后启动 Seata， 保证两个都 OK</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201116154606.png" alt="image-20201116154605362"></p><h3 id="②-分布式事务业务说明"><a href="#②-分布式事务业务说明" class="headerlink" title="② 分布式事务业务说明"></a>② 分布式事务业务说明</h3><p>==业务说明==</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201116154705.png" alt="image-20201116154704659"></p><p>下订单–&gt;扣库存–&gt;减账户（ 余额）</p><h3 id="③-创建业务数据库"><a href="#③-创建业务数据库" class="headerlink" title="③ 创建业务数据库"></a>③ 创建业务数据库</h3><ul><li>seata_order: 存储订单的数据库</li><li>seata_storage:存储库存的数据库</li><li>seata_account: 存储账户信息的数据库</li></ul><blockquote><p><strong>建表 SQL</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE seata_order；</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE seata_storage；</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE  seata_account;</span><br></pre></td></tr></table></figure><h3 id="④-按照上述-3-库分别建对应业务表"><a href="#④-按照上述-3-库分别建对应业务表" class="headerlink" title="④ 按照上述 3 库分别建对应业务表"></a>④ 按照上述 3 库分别建对应业务表</h3><ul><li>seata_order 库下建 t_order 表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order(</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>,</span><br><span class="line">`user_id` <span class="type">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户 id&#x27;</span>,</span><br><span class="line">`product_id` <span class="type">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;产品 id&#x27;</span>,</span><br><span class="line">`count` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line">`money` <span class="type">DECIMAL</span>(<span class="number">11</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;金额&#x27;</span>,</span><br><span class="line">`status` <span class="type">INT</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单状态： 0： 创建中; 1： 已完结&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">7</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_order;</span><br></pre></td></tr></table></figure><ul><li>seata_storage 库下建 t_storage 表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_storage(</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>,</span><br><span class="line">`product_id` <span class="type">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;产品 id&#x27;</span>,</span><br><span class="line">`total` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;总库存&#x27;</span>,</span><br><span class="line">`used` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;已用库存&#x27;</span>,</span><br><span class="line">`residue` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;剩余库存&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_storage(`id`,`product_id`,`total`,`used`,`residue`)<span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;100&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;100&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_storage;</span><br></pre></td></tr></table></figure><ul><li>seata_account 库下建 t_account 表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_account(</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`user_id` <span class="type">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户 id&#x27;</span>,</span><br><span class="line">`total` <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;总额度&#x27;</span>,</span><br><span class="line">`used` <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;已用余额&#x27;</span>,</span><br><span class="line">`residue` <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;剩余可用额度&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> seata_account.t_account(`id`,`user_id`,`total`,`used`,`residue`)<span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1000&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1000&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_account;</span><br></pre></td></tr></table></figure><h3 id="⑤-按照上述-3-库分别建对应的回滚日志表"><a href="#⑤-按照上述-3-库分别建对应的回滚日志表" class="headerlink" title="⑤ 按照上述 3 库分别建对应的回滚日志表"></a>⑤ 按照上述 3 库分别建对应的回滚日志表</h3><ul><li>订单-库存-账户 3 个库下都需要建各自的回滚日志表</li><li>\seata-server-0.9.0\seata\conf 目录下的 db_undo_log.sql</li></ul><blockquote><p>建表 SQL</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> `undo_log`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `undo_log` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `branch_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `context` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `rollback_info` longblob <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_status` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_created` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ext` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `ux_undo_log` (`xid`,`branch_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h3 id="⑥-最终效果"><a href="#⑥-最终效果" class="headerlink" title="⑥ 最终效果"></a>⑥ 最终效果</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201116161837.png" alt="image-20201116161835626"></p><h2 id="五、订单-库存-账户业务微服务准备"><a href="#五、订单-库存-账户业务微服务准备" class="headerlink" title="五、订单/库存/账户业务微服务准备"></a>五、订单/库存/账户业务微服务准备</h2><h4 id="1-业务需求"><a href="#1-业务需求" class="headerlink" title="1. 业务需求"></a>1. 业务需求</h4><ul><li>下订单-&gt;减库存-&gt;扣余额-&gt;改（订单） 状态</li></ul><h4 id="2-新建订单-Order-Module"><a href="#2-新建订单-Order-Module" class="headerlink" title="2. 新建订单 Order-Module"></a>2. 新建订单 Order-Module</h4><blockquote><p>建 Module : seata-order-service2001</p></blockquote><blockquote><p><strong>POM</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--seata--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--feign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web-actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql-druid--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>YML</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seata-order-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">alibaba:</span></span><br><span class="line">      <span class="attr">seata:</span></span><br><span class="line">        <span class="comment"># 自定义事务组名称需要与seata-server中的对应</span></span><br><span class="line">        <span class="attr">tx-service-group:</span> <span class="string">fsp_tx_group</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 当前数据源操作类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment"># mysql驱动类</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/seata_order</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">6090</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">io:</span></span><br><span class="line">      <span class="attr">seata:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>file.conf</strong></p></blockquote><p>​ 拷贝 seata-server/conf 目录下的 file.conf 到项目 resources 里面</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201116163528.png" alt="image-20201116163527578"></p><blockquote><p><strong>registry.conf</strong></p></blockquote><p>​ 拷贝 seata-server/conf 目录下的 registry.conf 到项目 resources 里面</p><blockquote><p><strong>domain</strong></p></blockquote><ul><li>CommonResult</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Integer code;</span><br><span class="line">   <span class="keyword">private</span> String message;</span><br><span class="line">   <span class="keyword">private</span> T date;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code, String message)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(code, message,<span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Order</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status; <span class="comment">//订单状态： 0 创建中； 1:已完结</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Dao 接口及实现</strong></p></blockquote><ul><li><strong>OrderDao</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建订单</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(Order order)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改订单状态，从零开始</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span>Long userId, <span class="meta">@Param(&quot;status&quot;)</span> Integer status)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>resources 文 件 夹 下 新 建 mapper 文 件 夹 后 添 加 OrderMapper.xml</strong></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.oy.springcloud.dao.OrderDao&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=<span class="string">&quot;BaseResultMap&quot;</span> type=<span class="string">&quot;com.oy.springcloud.domain.Order&quot;</span>&gt;</span><br><span class="line">        &lt;id column=&quot;id&quot; property=&quot;id&quot; jdbcType=&quot;BIGINT&quot;&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;user_id&quot;</span> property=<span class="string">&quot;userId&quot;</span> jdbcType=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;product_id&quot;</span> property=<span class="string">&quot;productId&quot;</span> jdbcType=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;count&quot;</span> property=<span class="string">&quot;count&quot;</span> jdbcType=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;money&quot;</span> property=<span class="string">&quot;money&quot;</span> jdbcType=<span class="string">&quot;DECIMAL&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;status&quot;</span> property=<span class="string">&quot;status&quot;</span> jdbcType=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(Order order)</span></span>;--&gt;</span><br><span class="line">    &lt;insert id=<span class="string">&quot;create&quot;</span>&gt;</span><br><span class="line">        <span class="function">insert into <span class="title">t_order</span><span class="params">(id,user_id, product_id, count, money,status)</span> <span class="title">values</span><span class="params">(<span class="keyword">null</span>,#&#123;userId&#125;,#&#123;productId&#125;,#&#123;count&#125;,#&#123;money&#125;,<span class="number">0</span>)</span></span>;</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">   &lt;!-- <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="meta">@Param(&quot;useId&quot;)</span>Long userId, <span class="meta">@Param(&quot;status&quot;)</span> Integer status)</span></span>;--&gt;</span><br><span class="line">    &lt;update id=<span class="string">&quot;update&quot;</span>&gt;</span><br><span class="line">        update t_order set status = 1 where user_id=#&#123;userId&#125; and status = #&#123;status&#125;;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Service 接口及实现</strong></p></blockquote><ul><li><strong>OrderService</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(Order order)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>OrderServiceImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderDao orderDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StorageService storageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@GlobalTransactional(name = &quot;fsp-create-order&quot;,rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;开始新建订单&quot;</span>);</span><br><span class="line">        <span class="comment">//新建订单</span></span><br><span class="line">        orderDao.create(order);</span><br><span class="line">        <span class="comment">//扣减库存</span></span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;订单微服务开始调用库存， 做扣减 Count&quot;</span>);</span><br><span class="line">        storageService.decrease(order.getProductId(),order.getCount());</span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;订单微服务开始调用库存， 做扣减 end&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//扣减账户</span></span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;订单微服务开始调用账户， 做扣减 Money&quot;</span>);</span><br><span class="line">        accountService.decrease(order.getUserId(),order.getMoney());</span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;订单微服务开始调用账户， 做扣减 end&quot;</span>);</span><br><span class="line">        <span class="comment">//修改订单状态， 从零到 1 代表已经完成</span></span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;修改订单状态开始&quot;</span>);</span><br><span class="line">        orderDao.update(order.getUserId(),<span class="number">0</span>);</span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;修改订单状态结束&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;下订单结束了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>StorageService</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;seata-storage-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/storage/decrease&quot;)</span></span><br><span class="line">    <span class="function">CommonResult <span class="title">decrease</span><span class="params">(<span class="meta">@RequestParam(&quot;productId&quot;)</span> Long productId, <span class="meta">@RequestParam(&quot;count&quot;)</span> Integer count)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>AccountService</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;seata-account-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/account/decrease&quot;)</span></span><br><span class="line">    <span class="function">CommonResult <span class="title">decrease</span><span class="params">(<span class="meta">@RequestParam(&quot;userId&quot;)</span> Long userId, <span class="meta">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Controller</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/order/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(Order order)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        orderService.create(order);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;订单创建成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Config 配置</strong></p></blockquote><ul><li><strong>MyBatisConfig</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&#123;&quot;com.oy.springcloud.dao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>DataSourceProxyConfig</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProxyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mybatis.mapperLocations&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mapperLocations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceProxy <span class="title">dataSourceProxy</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProxy(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">(DataSourceProxy dataSourceProxy)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSourceProxy);</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(mapperLocations));</span><br><span class="line">        sqlSessionFactoryBean.setTransactionFactory(<span class="keyword">new</span> SpringManagedTransactionFactory());</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>主启动</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span> <span class="comment">// 取消数据源自动创建的配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeataOrderMainApp2001</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(SeataOrderMainApp2001.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-新建库存-Storage-Module"><a href="#3-新建库存-Storage-Module" class="headerlink" title="3.新建库存 Storage-Module"></a>3.新建库存 Storage-Module</h4><blockquote><p>**seata-order-service2002 **</p></blockquote><blockquote><p><strong>POM</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--nacos--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--seata--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--feign--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seata-storage-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">alibaba:</span></span><br><span class="line">      <span class="attr">seata:</span></span><br><span class="line">        <span class="attr">tx-service-group:</span> <span class="string">fsp_tx_group</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/seata_storage</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">io:</span></span><br><span class="line">      <span class="attr">seata:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>file.conf</strong></p></blockquote><blockquote><p><strong>registry.conf</strong></p></blockquote><ul><li>拷贝 seata-server/conf 目录下的<strong>file.conf</strong> 、<strong>registry.conf</strong> 到项目 resources 里面</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201116173328.png" alt="image-20201116173327366"></p><blockquote><p><strong>domain</strong></p></blockquote><ul><li>CommonResult</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String  message;</span><br><span class="line">    <span class="keyword">private</span> T       data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code, String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(code,message,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Storage</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 产品id</span></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总库存</span></span><br><span class="line">    <span class="keyword">private</span> Integer total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已用库存</span></span><br><span class="line">    <span class="keyword">private</span> Integer used;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 剩余库存</span></span><br><span class="line">    <span class="keyword">private</span> Integer residue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Dao 接口及实现</strong></p></blockquote><ul><li><strong>StorageDao</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减库存信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(<span class="meta">@Param(&quot;productId&quot;)</span>Long productId, <span class="meta">@Param(&quot;count&quot;)</span> Integer count)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>resources 文 件 夹 下 新 建 mapper 文 件 夹 后 添 加 StorageMapper.xml</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.oy.springcloud.dao.StorageDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.oy.springcloud.domain.Storage&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;product_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;productId&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;used&quot;</span> <span class="attr">property</span>=<span class="string">&quot;used&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;residue&quot;</span> <span class="attr">property</span>=<span class="string">&quot;residue&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--void decrease(@Param(&quot;productId&quot;)Long productId, @Param(&quot;count&quot;) Integer count);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;decrease&quot;</span>&gt;</span></span><br><span class="line">        UPDATE  t_storage SET used = used + #&#123;count&#125;, residue = residue - #&#123;count&#125; WHERE product_id = #&#123;productId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Service 接口及实现</strong></p></blockquote><ul><li>StorageService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减库存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(Long productId, Integer count)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>StorageServiceImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageServiceImpl</span> <span class="keyword">implements</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(StorageServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StorageDao storageDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减库存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrease</span><span class="params">(Long productId, Integer count)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;-------&gt;storage-service 中扣减库存开始&quot;</span>);</span><br><span class="line">        storageDao.decrease(productId, count);</span><br><span class="line">        LOGGER.info(<span class="string">&quot;-------&gt;storage-service 中扣减库存结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Controller</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StorageService storageService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减库存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/storage/decrease&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">decrease</span><span class="params">(Long productId, Integer count)</span></span>&#123;</span><br><span class="line">        storageService.decrease(productId, count);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;扣减库存成功！ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Config 配置</strong></p></blockquote><ul><li>MyBatisConfig</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&#123;&quot;com.oy.springcloud.dao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>DataSourceProxyConfig</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> OY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/11/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProxyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mybatis.mapperLocations&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mapperLocations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceProxy <span class="title">dataSourceProxy</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProxy(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">(DataSourceProxy dataSourceProxy)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSourceProxy);</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(mapperLocations));</span><br><span class="line">        sqlSessionFactoryBean.setTransactionFactory(<span class="keyword">new</span> SpringManagedTransactionFactory());</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>主启动</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeataStorageServiceApplication2002</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(SeataStorageServiceApplication2002.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-新建账户-Account-Module"><a href="#4-新建账户-Account-Module" class="headerlink" title="4.新建账户 Account-Module"></a>4.新建账户 Account-Module</h4><blockquote><p>seata-account-service2003</p></blockquote><blockquote><p><strong>POM</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--seata--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--feign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2003</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seata-account-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">alibaba:</span></span><br><span class="line">      <span class="attr">seata:</span></span><br><span class="line">        <span class="attr">tx-service-group:</span> <span class="string">fsp_tx_group</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/seata_account</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">6090</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">io:</span></span><br><span class="line">      <span class="attr">seata:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><blockquote><p>file.conf</p><p>registry.conf</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201116223931.png" alt="image-20201116223930267"></p><blockquote><p><strong>domain</strong></p></blockquote><ul><li>CommonResult</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code, String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(code,message,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Account</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户 id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总额度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal total;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已用额度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal used;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 剩余额度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal residue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Dao 接口及实现</strong></p></blockquote><ul><li>AccountDao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减账户余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span> Long userId, <span class="meta">@Param(&quot;money&quot;)</span> BigDecimal money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>resources 文 件 夹 下 新 建 mapper 文 件 夹 后 添 加 AccountMapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.oy.springcloud.dao.AccountDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">type</span>=<span class="string">&quot;com.oy.springcloud.domain.Account&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;used&quot;</span> <span class="attr">property</span>=<span class="string">&quot;used&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;residue&quot;</span> <span class="attr">property</span>=<span class="string">&quot;residue&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;decrease&quot;</span>&gt;</span></span><br><span class="line">        UPDATE t_account SET residue = residue - #&#123;money&#125;,used = used + #&#123;money&#125; WHERE user_id = #&#123;userId&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Service 接口及实现</strong></p></blockquote><ul><li>AccountService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减账户余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(<span class="meta">@RequestParam(&quot;userId&quot;)</span> Long userId, <span class="meta">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AccountServiceImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl.class);</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrease</span><span class="params">(Long userId, BigDecimal money)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;-------&gt;account-service 中扣减账户余额开始&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">20</span>); &#125; <span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">        &#123; e.printStackTrace(); &#125;</span><br><span class="line">        accountDao.decrease(userId,money);</span><br><span class="line">        LOGGER.info(<span class="string">&quot;-------&gt;account-service 中扣减账户余额结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Controller</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AccountService accountService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减账户余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/account/decrease&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">decrease</span><span class="params">(<span class="meta">@RequestParam(&quot;userId&quot;)</span> Long userId,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="meta">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span></span>&#123;</span><br><span class="line">        accountService.decrease(userId,money);<span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;扣减账户余额成功！ &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Config 配置</strong></p></blockquote><ul><li>MyBatisConfig</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&#123;&quot;com.oy.springcloud.dao.AccountDao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>DataSourceProxyConfig</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProxyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mybatis.mapperLocations&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mapperLocations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceProxy <span class="title">dataSourceProxy</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProxy(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">(DataSourceProxy dataSourceProxy)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSourceProxy);</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(mapperLocations));</span><br><span class="line">        sqlSessionFactoryBean.setTransactionFactory(<span class="keyword">new</span> SpringManagedTransactionFactory());</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>主启动</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeataAccountMainApp2003</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(SeataAccountMainApp2003.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：如果报错 <code>A component required a bean of type &#39;com.oy.springcloud.dao.AccountDao&#39; that could not be found.</code></p><p>请在启动类上加：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201117225144.png" alt="image-20201117225144074"></p><h2 id="六、Test"><a href="#六、Test" class="headerlink" title="六、Test"></a>六、Test</h2><h3 id="①-下订单-gt-减库存-gt-扣余额-gt-改（订单）-状态"><a href="#①-下订单-gt-减库存-gt-扣余额-gt-改（订单）-状态" class="headerlink" title="① 下订单-&gt;减库存-&gt;扣余额-&gt;改（订单） 状态"></a>① 下订单-&gt;减库存-&gt;扣余额-&gt;改（订单） 状态</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201117225246.png" alt="image-20201117225245162"></p><p>我们只需要使用一个 <code>@GlobalTransactional</code> 注解在业务方法上；</p><h3 id="②-数据库初始化情况"><a href="#②-数据库初始化情况" class="headerlink" title="② 数据库初始化情况"></a>② 数据库初始化情况</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201117225437.png" alt="image-20201117225437068"></p><h3 id="③-正常下单"><a href="#③-正常下单" class="headerlink" title="③ 正常下单"></a>③ 正常下单</h3><ul><li><a href="http://localhost:2001/order/create?userId=1&amp;producId=1&amp;count=10&amp;money=100">http://localhost:2001/order/create?userId=1&amp;producId=1&amp;count=10&amp;money=100</a></li></ul><p><strong>数据库情况</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201117231614.png" alt="image-20201117231613480"></p><h3 id="④-超时异常，-没加-GlobalTransactional"><a href="#④-超时异常，-没加-GlobalTransactional" class="headerlink" title="④ 超时异常， 没加@GlobalTransactional"></a>④ 超时异常， 没加@GlobalTransactional</h3><blockquote><p><strong>AccountServiceImpl 添加超时</strong></p></blockquote><ul><li><p><strong>数据库情况</strong></p><p>余额和库存都已经扣除，但是订单状态还是未支付，结果就是，这个订单仍要再次支付</p></li><li><p><strong>故障情况</strong></p></li></ul><ol><li>当库存和账户余额扣减后， 订单状态并没有设置为已经完成，没有从零改为 1</li><li>而且由于 feign 的重试机制， 账户余额还有可能被多次扣减</li></ol><h3 id="⑤-超时异常，-添加-GlobalTransactional"><a href="#⑤-超时异常，-添加-GlobalTransactional" class="headerlink" title="⑤ 超时异常， 添加@GlobalTransactional"></a>⑤ 超时异常， 添加@GlobalTransactional</h3><blockquote><p><strong>AccountServiceImpl 添加超时</strong></p></blockquote><p>OrderServiceImpl <code>@GlobalTransactional</code></p><p>下单后数据库数据并没有任何改变， 记录都添加不进来</p><h2 id="七、Seata-之原理简介"><a href="#七、Seata-之原理简介" class="headerlink" title="七、Seata 之原理简介"></a>七、Seata 之原理简介</h2><h3 id="①-Seata"><a href="#①-Seata" class="headerlink" title="① Seata"></a>① Seata</h3><p>​ 2019 年 1 月份蚂蚁金服和阿里巴巴共同开源的分布式事务解决方案 Simple Extensible Autonomous Transaction Architecture,简单可扩展自治事务框架 2020 起初， 参加工作后用 1.0 以后的版本</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201117232535.png" alt="image-20201117232534917"></p><h3 id="②-再看-TC-TM-RM-三大组件"><a href="#②-再看-TC-TM-RM-三大组件" class="headerlink" title="② 再看 TC/TM/RM 三大组件"></a>② 再看 TC/TM/RM 三大组件</h3><p>分布式事务的执行流程</p><ol><li>TM 开启分布式事务(TM 向 TC 注册全局事务记录)</li><li>换业务场景， 编排数据库， 服务等事务内资源（RM 报资源准备状态）</li><li>TM 结束分布式事务， 事务一阶段结束（TM 通知 TC 滚分布式事务）</li><li>TC 汇总事务信息， 决定分布式事务是提交还是回滚</li><li>TC 通知所有 RM 提交/回滚资源， 事务二阶段结束</li></ol><h3 id="③-AT-模式如何做到对业务的无侵入"><a href="#③-AT-模式如何做到对业务的无侵入" class="headerlink" title="③ AT 模式如何做到对业务的无侵入"></a>③ AT 模式如何做到对业务的无侵入</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201117232705.png" alt="image-20201117232704461"></p><ul><li><strong>一阶段加载</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201117232725.png" alt="image-20201117232724911"></p><ul><li><p>二阶段提交</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201117232742.png" alt="image-20201117232741406"></p></li><li><p>二阶段回滚</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201117232756.png" alt="image-20201117232755908"></p><h3 id="④-补充"><a href="#④-补充" class="headerlink" title="④ 补充"></a>④ 补充</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201117232817.png" alt="image-20201117232817071"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Alibaba Sentinel实现熔断与限流</title>
      <link href="posts/13005592/"/>
      <url>posts/13005592/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV18E411x7eT?from=search&seid=4388336378730572330">博客参考学习视频</a></p><h1 id="SpringCloud-Alibaba-Sentinel-实现熔断与限流"><a href="#SpringCloud-Alibaba-Sentinel-实现熔断与限流" class="headerlink" title="SpringCloud Alibaba Sentinel 实现熔断与限流"></a>SpringCloud Alibaba Sentinel 实现熔断与限流</h1><h2 id="一、Sentinel"><a href="#一、Sentinel" class="headerlink" title="一、Sentinel"></a>一、Sentinel</h2><h3 id="①-官网"><a href="#①-官网" class="headerlink" title="① 官网"></a>① 官网</h3><ul><li>英文： <a href="https://github.com/alibaba/Sentinel">https://github.com/alibaba/Sentinel</a></li><li>中文：<a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></li></ul><h3 id="②-是什么"><a href="#②-是什么" class="headerlink" title="② 是什么"></a>② 是什么</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108112414.png" alt="image-20201108112406927"></p><p><strong>一句话解释， 之前我们讲解过的 Hystrix</strong></p><h3 id="③-去哪下"><a href="#③-去哪下" class="headerlink" title="③ 去哪下"></a>③ 去哪下</h3><p>​ <a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108112639.png" alt="image-20201108112638640"></p><h3 id="④-能干嘛"><a href="#④-能干嘛" class="headerlink" title="④ 能干嘛"></a>④ 能干嘛</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108112704.png" alt="image-20201108112703841"></p><h3 id="⑤-怎么玩"><a href="#⑤-怎么玩" class="headerlink" title="⑤ 怎么玩"></a>⑤ 怎么玩</h3><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_sentinel%E6%9C%8D%E5%8A%A1%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E9%97%AE">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_sentinel%E6%9C%8D%E5%8A%A1%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E9%97%AE</a></p><p><strong>服务使用中的各种问题</strong></p><ol><li>服务雪崩</li><li>服务降级</li><li>服务熔断</li><li>服务限流</li></ol><h2 id="二、安装-Sentinel-控制台"><a href="#二、安装-Sentinel-控制台" class="headerlink" title="二、安装 Sentinel 控制台"></a>二、安装 Sentinel 控制台</h2><h3 id="①-sentinel-组件由-2-部分组成"><a href="#①-sentinel-组件由-2-部分组成" class="headerlink" title="① sentinel 组件由 2 部分组成"></a>① sentinel 组件由 2 部分组成</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108113520.png" alt="image-20201108113520189"></p><ul><li>后台</li><li>前台 8080</li></ul><h3 id="②-安装步骤"><a href="#②-安装步骤" class="headerlink" title="② 安装步骤"></a>② 安装步骤</h3><p><strong>下载：</strong> <a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p><code>下载到本地 sentinel-dashboard-1.8.0.jar </code></p><blockquote><p><strong>运行命令</strong></p></blockquote><ol><li><strong>前提：</strong></li></ol><ul><li>java8 环境 OK</li><li>8080 端口不能被占用</li></ul><ol start="2"><li><strong>命令：</strong></li></ol><ul><li>java -jar sentinel-dashboard-1.8.0.jar</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108113959.png" alt="image-20201108113958353"></p><blockquote><p><strong>访问 sentinel 管理界面</strong></p></blockquote><ul><li><a href="http://localhost:8080/">http://localhost:8080</a></li><li>登录账号密码均为 sentinel</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108114505.png" alt="image-20201108114504188"></p><h2 id="三、初始化演示工程"><a href="#三、初始化演示工程" class="headerlink" title="三、初始化演示工程"></a>三、初始化演示工程</h2><h3 id="①-启动-Nacos8848-成功"><a href="#①-启动-Nacos8848-成功" class="headerlink" title="① 启动 Nacos8848 成功"></a>① 启动 Nacos8848 成功</h3><ul><li><a href="http://localhost:8848/nacos/#/login">http://localhost:8848/nacos/#/login</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108115021.png" alt="image-20201108115021112"></p><h3 id="②-Module"><a href="#②-Module" class="headerlink" title="② Module"></a>② Module</h3><blockquote><p>建 Module</p></blockquote><ul><li><strong>cloudalibaba-sentinel-service8401</strong></li></ul><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba sentinel --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件+actuator --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span> <span class="comment">#配置Sentinel dashboard地址</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">ds1:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 激活Sentinel对Feign的支持</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>主启动</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp8401</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(MainApp8401.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>业务类 FlowLimitController</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testA&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-----testA&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testB&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;----testB&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="③-启动-Sentinel8080"><a href="#③-启动-Sentinel8080" class="headerlink" title="③ 启动 Sentinel8080"></a>③ 启动 Sentinel8080</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sentinel-dashboard-<span class="number">1.8</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h3 id="④-启动微服务-8401"><a href="#④-启动微服务-8401" class="headerlink" title="④ 启动微服务 8401"></a>④ 启动微服务 8401</h3><h3 id="⑤-启动-8401-微服务后查看-sentienl-控制台"><a href="#⑤-启动-8401-微服务后查看-sentienl-控制台" class="headerlink" title="⑤ 启动 8401 微服务后查看 sentienl 控制台"></a>⑤ 启动 8401 微服务后查看 sentienl 控制台</h3><ul><li><strong>空空如也， 啥都没有</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108121631.png" alt="image-20201108121629166"></p><p>==Sentinel 采用的懒加载说明==</p><ol><li>执行一次访问即可</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108121802.png" alt="image-20201108121801473"></p><p><strong>结论</strong></p><p>sentinel8080 正在监控微服务 8401</p><h2 id="四、流控规则"><a href="#四、流控规则" class="headerlink" title="四、流控规则"></a>四、流控规则</h2><h3 id="①-基本介绍"><a href="#①-基本介绍" class="headerlink" title="① 基本介绍"></a>① 基本介绍</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108123258.png" alt="image-20201108123257272"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108123349.png" alt="image-20201108123348454"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108123358.png" alt="image-20201108123357901"></p><h3 id="②-流控模式"><a href="#②-流控模式" class="headerlink" title="② 流控模式"></a>② 流控模式</h3><blockquote><p><strong>直接（默认）</strong></p></blockquote><ol><li><strong>直接-&gt;快速失败， 系统默认</strong></li><li><strong>配置及说明</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108123732.png" alt="image-20201108123724974"></p><ol start="3"><li><strong>测试</strong></li></ol><ul><li>快速点击访问 <a href="http://localhost:8401/testA">http://localhost:8401/testA</a></li><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108123919.png" alt="image-20201108123918045"></p><ul><li><strong>思考：</strong> 直接调用默认报错信息， 技术方面 OK but， 是否应该有我们自己的后续处理？类似有一个 fallback 的兜底方法？</li></ul><blockquote><p><strong>关联</strong></p></blockquote><ol><li><p>是什么？</p><p>当关联的资源达到阈值时， 就限流自己,当与 A 关联的资源 B 达到阈值后， 就限流自己 B 惹事， A 挂了 。</p></li><li><p>配置 A</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108124115.png" alt="image-20201108124114752"></p><ol start="3"><li>postman 模拟并发密集访问 testB</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108125004.png" alt="image-20201108125003345"></p><ul><li><strong>访问 testB 成功</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108125034.png" alt="image-20201108125034237"></p><p><strong>postman 里新建多线程集合组</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108125201.png" alt="image-20201108125200069"></p><p><strong>将访问地址添加进新线程组</strong><br><code>Run： 大批量线程高并发访问 B， 导致 A 失效了 </code></p><ol start="4"><li><strong>运行后发现 testA 挂了</strong></li></ol><ul><li><p>点击访问 <a href="http://localhost:8401/testA">http://localhost:8401/testA</a></p></li><li><p>结果： Blocked by Sentinel (flow limiting)</p></li></ul><blockquote><p><strong>链路</strong></p></blockquote><p>链路模式针对的是上级接口，粒度控制的更细。</p><p>这个模式需要配合@SentinelResource 注解使用，在资源上添加 @SentinelResource 注解，表示这是一个资源，同时给出资源名。</p><p><strong>新增 TestService 接口类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">message</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新增 TestServiceImpl 类，该类的 message()方法上加上@SentinelResource(“message”)注解，表示资源名为 messge：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;</span><br><span class="line"><span class="keyword">import</span> com.example.mallorder.service.TestService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SentinelResource(&quot;message&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">message</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改 TestController 类，让两个测试方法都调用 TestService 提供的方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.servlet.CommonFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterContextConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">sentinelFilterRegistration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> CommonFilter());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        <span class="comment">// 入口资源关闭聚合</span></span><br><span class="line">        registration.addInitParameter(CommonFilter.WEB_CONTEXT_UNIFY, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        registration.setName(<span class="string">&quot;sentinelFilter&quot;</span>);</span><br><span class="line">        registration.setOrder(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108213141.png" alt="image-20201108213134785"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108213214.png" alt="image-20201108213213884"></p><p>此时的路口资源就是</p><ul><li>/testA</li><li>/testB</li></ul><p>当入口资源达到阈值的时候，就会启动此资源名为 message 的对应路口资源的流控。</p><p><strong>==坑来了，怎么解决？==</strong></p><p><strong>禁止收敛 URL 的入口 context</strong></p><p>从 1.6.3 版本开始，Sentinel Web filter 默认收敛所有 URL 的入口 context，因此链路限流不生效。</p><p>1.7.0 版本开始（对应 SCA 的 2.1.1.RELEASE)，官方在 CommonFilter 引入了 WEB_CONTEXT_UNIFY 参数，用于控制是否收敛 context。将其配置为 false 即可根据不同的 URL 进行链路限流。</p><p>SCA 2.1.1.RELEASE 之后的版本,可以通过配置 spring.cloud.sentinel.web-context-unify=false 即可关闭收敛，我们当前使用的版本是 SpringCloud Alibaba 2.1.0.RELEASE，无法实现链路限流。</p><p>目前官方还未发布 SCA 2.1.2.RELEASE，所以我们只能使用 2.1.1.RELEASE，需要写代码的形式实现。</p><ol><li><strong>暂时将 SpringCloud Alibaba 的版本调整为 2.1.1.RELEASE</strong></li><li><strong>配置文件中关闭 sentinel 的 CommonFilter 实例化</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108213454.png" alt="image-20201108213453237"></p><ol start="3"><li><strong>添加一个配置类，自己构建 CommonFilter 实例</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.servlet.CommonFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterContextConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">sentinelFilterRegistration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> CommonFilter());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        <span class="comment">// 入口资源关闭聚合</span></span><br><span class="line">        registration.addInitParameter(CommonFilter.WEB_CONTEXT_UNIFY, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        registration.setName(<span class="string">&quot;sentinelFilter&quot;</span>);</span><br><span class="line">        registration.setOrder(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别通过两个路口资源进行访问，发现设置的入口资源被限流了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108213845.png" alt="image-20201108213844599"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108213816.png" alt="image-20201108213815753"></p><h3 id="③-流控效果"><a href="#③-流控效果" class="headerlink" title="③ 流控效果"></a>③ 流控效果</h3><p>直接-&gt;快速失败（默认的流控处理） ：</p><ol><li><strong>直接失败， 抛出异常</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Blocked by Sentinel (flow limiting)</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>源码</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.csp.sentinel.slots.block.flow.controller.DefaultController</span><br></pre></td></tr></table></figure><blockquote><p><strong>预热：</strong></p></blockquote><ol><li><p><strong>说明</strong></p><p>公式： 阈值除以 coldFactor（默认值为 3） ， 经过预热时长后才会达到阈值</p></li><li><p><strong>官网</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108220410.png" alt="image-20201108220409193"></p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108220941.png" alt="image-20201108220940150">默认 coldFactor 为 33. 默认 coldFactor 为 3， 即请求 QPS 从 threshold/3 开始， 经预热时长逐渐升至设定的 QPS 阈值。</p><p><strong>限流冷启动</strong> ： <a href="https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81---%E5%86%B7%E5%90%AF%E5%8A%A8">https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81---%E5%86%B7%E5%90%AF%E5%8A%A8</a></p><ol start="3"><li><strong>源码</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108223002.png" alt="image-20201108223002134"></p><ol start="4"><li><strong>Warmup 配置</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108223111.png" alt="image-20201108223110269"></p><ol start="5"><li><p><strong>多次点击 <a href="http://localhost:8401/testB">http://localhost:8401/testB</a></strong></p><p>刚开始不行， 后续慢慢 OK</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108223859.png" alt="image-20201108223858937"></p></li><li><p><strong>应用场景</strong></p><p>如秒杀系统在开启的瞬间会有很多流量上来， 很有可能把系统打死， 预热方式就是为了保护系统， 可慢慢的把流量放进来， 慢慢的把阈值增长到设置的阈值</p></li></ol><blockquote><p><strong>排队等待：</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108224033.png" alt="image-20201108224032518"></p><ol><li><strong>匀速排队， 阈值必须设置为 QPS</strong></li><li><strong>官网</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108224242.png" alt="image-20201108224241754"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108224252.png" alt="image-20201108224251861"></p><ol start="3"><li><p><strong>源码</strong></p><p>com.alibaba.csp.sentinel.slots.block.flow.controller.RateLimiterController</p></li><li><p><strong>测试</strong></p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108224644.png" alt="image-20201108224643433"></p><h2 id="五、降级规则"><a href="#五、降级规则" class="headerlink" title="五、降级规则"></a>五、降级规则</h2><h3 id="①-基本介绍-1"><a href="#①-基本介绍-1" class="headerlink" title="① 基本介绍"></a>① 基本介绍</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108224734.png" alt="image-20201108224734254"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108224836.png" alt="image-20201108224835397"></p><p><strong>进一步说明</strong></p><p>​ Sentinel 熔断降级会在调用链路中某个出现稳定的资源不稳定状态时（例如调用超时或异常比例高），对这个资源的调用进行限制，让请求快速失败，避免影响到其他的资源而导致级联错误。</p><p>​ 当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动熔断（默认行为是抛出 DegradeException）。</p><p><strong>Sentinel 的断路器是没有半开状态的</strong></p><p>​ 半开的状态系统自动去检测是否请求有异常， 没有异常就关闭断路器恢复使用， 有异常则继续打开断路器不可用。 具体可以参考 Hystrix</p><p><strong>复习 Hystrix</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108225650.png" alt="image-20201108225649093"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108225700.png" alt="image-20201108225659826"></p><h3 id="②-降级策略实战"><a href="#②-降级策略实战" class="headerlink" title="② 降级策略实战"></a>② 降级策略实战</h3><blockquote><p><strong>RT</strong></p></blockquote><ol><li><strong>是什么</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108230406.png" alt="image-20201108230405904"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108230414.png" alt="image-20201108230413924"></p><ol start="2"><li><strong>测试</strong></li></ol><p><em>代码</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testD</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;TestD 测试 RT&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;-----testD&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>配置</em></p><p><code>注意</code>：我这里更换了版本，有些配置选项不一样了。版本是 1.7</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201108232951.png" alt="image-20201108232949807"></p><p><em>jmeter 压测</em></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201109223752.png" alt="image-20201109223746061"></p><p><strong>结论：</strong></p><p>​ 按照一秒钟打进来 10 个线程（大于 5 个了）调用 testD ,我们希望 200 毫秒处理本次任务，如果超过 200 毫秒还没处理完，在未来 1 秒钟的时间窗口内，断路器打开（保险丝跳闸）微服务不可用，保险丝跳闸断电了，后续我停止 jmeter， 没有这么大的访问量，断路器关闭（保险丝恢复），微服务恢复 OK。</p><blockquote><p><strong>异常比例</strong></p></blockquote><p><strong>1. 是什么</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201109224311.png" alt="image-20201109224310438"></p><p><strong>2. 测试</strong></p><p><strong><em>代码</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testE&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testE</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;testE 异常比例&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------testE&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>配置</em></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201109225145.png" alt="image-20201109225145163"></p><p><em>Jmeter</em></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201109225226.png" alt="image-20201109225225883"></p><p><em>结论：</em></p><p>​ 按照上述配置，单独访问一次，必须来一次报错一次（int age = 10/0）,调用一次错一次；</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201109225421.png" alt="image-20201109225420350"></p><p>开启 jmeter 后， 直接高并发发送请求，多次调用达到我们的配置条件了。断路器开启（保险丝跳闸），微服务不可用了，不在报错 error 而是服务降级了。</p><blockquote><p><strong>异常数</strong></p></blockquote><ol><li>是什么</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201109225659.png" alt="image-20201109225659259"></p><ol start="2"><li>异常数是按照分钟统计的</li><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testF&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testF</span><span class="params">()</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;testF 测试异常数&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------testF 测试异常数&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>配置</em></p><p>​ <a href="http://localhost:8041/testF">http://localhost:8041/testF</a>, 第一次访问决定报错，因为除数不能为零，我们看到 error 窗口，但是达到 5 次报错后，进入熔断后降级。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201109231103.png" alt="image-20201109231102510"></p><h2 id="六、热点-key-限流"><a href="#六、热点-key-限流" class="headerlink" title="六、热点 key 限流"></a>六、热点 key 限流</h2><h3 id="①-基本介绍-2"><a href="#①-基本介绍-2" class="headerlink" title="① 基本介绍"></a>① 基本介绍</h3><p><code> 是什么：</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201111214006.png" alt="image-20201111213958968"></p><h3 id="②-官网"><a href="#②-官网" class="headerlink" title="② 官网"></a>② 官网</h3><p><a href="https://github.com/alibaba/Sentinel/wiki/">https://github.com/alibaba/Sentinel/wiki/</a></p><p>热点参数限流</p><h3 id="③-承上启下复习-start"><a href="#③-承上启下复习-start" class="headerlink" title="③ 承上启下复习 start"></a>③ 承上启下复习 start</h3><p>兜底方法： 分为系统默认和客户自定义，两种之前的 Case, 限流出问题，都是 sentinel 系统默认的提示： Blocked by sentinel （flow limiting）我们能不能自定？ 类似 hystrix， 某个方法出问题了，就找对应的兜底降级方法？</p><p>结论： 从 ==HystrixCommand== 到 ==@SentinelResource==</p><h3 id="④-代码"><a href="#④-代码" class="headerlink" title="④ 代码"></a>④ 代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  热点 key 限流</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/testHotKey&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;testHotKey&quot;, blockHandler = &quot;deal_testHotKey&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHotKey</span><span class="params">(<span class="meta">@RequestParam(value = &quot;p1&quot;, required = false)</span> String p1, <span class="meta">@RequestParam(value = &quot;p2&quot;, required = false)</span> String p2)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;----testHotKey&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 兜底方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deal_testHotKey</span><span class="params">(String p1, String p2, BlockException exception)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;-----deal_testHotKey,o(╥﹏╥)o&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>com.alibaba.csp.sentinel.slots.block.BlockException</strong></p><h3 id="⑤-配置"><a href="#⑤-配置" class="headerlink" title="⑤ 配置"></a>⑤ 配置</h3><p>​ @SentinelResource(value = “testHotKey”), 异常打到了前台用户界面看不到，不友好</p><p>​ @SentinelResource(value = “testHotKey “, blockHandler = “deal_testHotKey”), 方法 testHostKey 里面的一个参数只要 QPS 超过每秒 1 次，马上降级处理。用了我们自己定义的 blockHandler 。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201111220635.png" alt="image-20201111220633939"></p><h3 id="⑥-测试"><a href="#⑥-测试" class="headerlink" title="⑥ 测试"></a>⑥ 测试</h3><ul><li>Error： <a href="http://localhost:8401/testHotKey?p1=abc">http://localhost:8401/testHotKey?p1=abc</a></li><li>Error： <a href="http://localhost:8401/testHotKey?p1=abc&amp;p2=33">http://localhost:8401/testHotKey?p1=abc&amp;p2=33</a></li><li>Right： <a href="http://localhost:8401/testHotKey?p2=abc">http://localhost:8401/testHotKey?p2=abc</a></li></ul><h3 id="⑦-参数例外项"><a href="#⑦-参数例外项" class="headerlink" title="⑦ 参数例外项"></a>⑦ 参数例外项</h3><p>上述案例演示了第一个参数 p1,当 QPS 超过 1 秒 1 次点击后马上被限流</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201111220722.png" alt="image-20201111220721325"></p><ol><li><p><strong>普通</strong></p><p>超过 1 秒钟一个后， 达到阈值 1 后马上被限流</p></li><li><p><strong>我们期望 p1 参数当它是某个特殊值时， 它的限流值和平时不一样</strong></p></li><li><p><strong>特例</strong></p><p>假如当 p1 的值等于 5 时， 它的阈值可以达到 200</p><p><code>配置</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201111221249.png" alt="image-20201111221248677"></p></li></ol><p><code>测试 </code></p><pre><code>1. http://localhost:8401/testHotKey?p1=5 √</code></pre><ol start="2"><li><a href="http://localhost:8401/testHotKey?p1=3">http://localhost:8401/testHotKey?p1=3</a> ×</li><li>当 p1 等于 5 的时候， 阈值变为 200</li><li>当 p1 不等于 5 的时候， 阈值就是平常的 1</li></ol><p><code>前提条件</code></p><ol><li>热点参数的注意点， 参数必须是基本类型或者 String</li></ol><h3 id="⑧-其他"><a href="#⑧-其他" class="headerlink" title="⑧ 其他"></a>⑧ 其他</h3><p><strong>==@SentinelResource==</strong></p><p>​ 处理的是 Sentinel 控制台配置的违规情况，有 blockHandler 方法配置的兜底处理</p><p><strong>==RuntimeException==</strong></p><p>​ int age = 10/ 0, 这个是 java 运行时报出的运行时异常 RuntimeException, @SentinelException, @SentineResource 不管</p><p>==<strong>总结</strong>==</p><p>@SentineIResource 主管配置出错，运行出错该走异常走异常</p><h2 id="七、系统规则"><a href="#七、系统规则" class="headerlink" title="七、系统规则"></a>七、系统规则</h2><h3 id="①-是什么"><a href="#①-是什么" class="headerlink" title="① 是什么"></a>① 是什么</h3><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81">https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201111222507.png" alt="image-20201111222506495"></p><h3 id="②-各项配置参数说明"><a href="#②-各项配置参数说明" class="headerlink" title="② 各项配置参数说明"></a>② 各项配置参数说明</h3><p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的 load、CPU 使用率、平均 RT、入口 QPS 和并发线程数等几个维度监控应用指标，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><p>系统保护规则是应用整体维度的，而不是资源维度的，并且<strong>仅对入口流量生效</strong>。入口流量指的是进入应用的流量（<code>EntryType.IN</code>），比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p><p>系统规则支持以下的模式：</p><ul><li><strong>Load 自适应</strong>（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 <code>maxQps * minRt</code> 估算得出。设定参考值一般是 <code>CPU cores * 2.5</code>。</li><li><strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li><li><strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li><li><strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li></ul><h3 id="③-配置全局-QPS"><a href="#③-配置全局-QPS" class="headerlink" title="③ 配置全局 QPS"></a>③ 配置全局 QPS</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201111222748.png" alt="image-20201111222747417"></p><h2 id="八、-SentinelResource"><a href="#八、-SentinelResource" class="headerlink" title="八、@SentinelResource"></a>八、@SentinelResource</h2><h3 id="①-按资源名称限流-后续处理"><a href="#①-按资源名称限流-后续处理" class="headerlink" title="① 按资源名称限流+后续处理"></a>① 按资源名称限流+后续处理</h3><ul><li><strong>启动 Nacos 成功</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201111223016.png" alt="image-20201111223015278"></p><ul><li><strong>启动 Sentinel 成功</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201111222951.png" alt="image-20201111222950261"></p><blockquote><p><strong>Module</strong></p></blockquote><p>​ cloudalibaba-sentinel-service8401</p><blockquote><p><strong>POM</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>YML</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span> <span class="comment">#配置Sentinel dashboard地址</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span> <span class="comment">#默认 8719， 假如被占用了会自动从 8719 开始依次+1 扫描。 直至找到未被占用的端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>业务类 RateLimitController</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/byResource&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;byResource&quot;,blockHandler = &quot;handleException&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">byResource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot; 按 资 源 名 称 限 流 测 试 OK&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial001&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handleException</span><span class="params">(BlockException exception)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;exception.getClass().getCanonicalName()+\&quot;t 服务\n&quot;</span> + <span class="string">&quot;不可用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>主启动</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp8401</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(MainApp8401.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>配置流控规则</strong></p></blockquote><ol><li><strong>配置步骤</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201111224247.png" alt="image-20201111224246183"></p><ol start="2"><li>图形配置和代码关系</li><li>表示 1 秒钟内查询次数大于 1， 就跑到我们自定义的处流， 限流 。</li></ol><blockquote><p><strong>测试</strong></p></blockquote><ol><li>1 秒钟点击 1 下， OK</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201111224526.png" alt="image-20201111224525340"></p><ol start="2"><li><p>超过上述问题， 疯狂点击， 返回了自己定义的限流处理信息.</p><p><em>限流发送</em></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201111224644.png" alt="image-20201111224644000"></p></li></ol><h3 id="②-按照-Url-地址限流-后续处理"><a href="#②-按照-Url-地址限流-后续处理" class="headerlink" title="② 按照 Url 地址限流+后续处理"></a>② 按照 Url 地址限流+后续处理</h3><blockquote><p>通过访问的 URL 来限流， 会返回 Sentinel 自带默认的限流处理信息 。</p></blockquote><blockquote><p><strong>业务类 RateLimitController</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;byUrl&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">byUrl</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;按 url 限流测试 OK&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial002&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>访问一次</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201111225318.png" alt="image-20201111225317206"></p><blockquote><p><strong>Sentinel 控制台配置</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201111225620.png" alt="image-20201111225619737"></p><blockquote><p><strong>测试</strong></p></blockquote><ul><li><p>疯狂点击 <a href="http://localhost:8401/rateLimit/byUrl">http://localhost:8401/rateLimit/byUrl</a></p></li><li><p>结果</p><p>会返回 Sentinel 自带的限流处理限流结果</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201111225735.png" alt="image-20201111225730851"></p></li></ul><h3 id="③-上面兜底方法面临的问题"><a href="#③-上面兜底方法面临的问题" class="headerlink" title="③ 上面兜底方法面临的问题"></a>③ 上面兜底方法面临的问题</h3><ol><li>系统默认的，没有体现我们自己的业务要求。</li><li>依照现有的条件，我们自定义的处理方法又和业务代码块耦合在一块，不直观。</li><li>每个业务方法都添加一个兜底的，那代码膨胀加剧。</li><li>全局统一的处理方法没有体现。</li></ol><h3 id="④-客户自定义限流处理逻辑"><a href="#④-客户自定义限流处理逻辑" class="headerlink" title="④ 客户自定义限流处理逻辑"></a>④ 客户自定义限流处理逻辑</h3><blockquote><p><strong>创建 customerBlockHandler 类用于自定义限流处理逻辑,自定义限流处理类</strong></p></blockquote><blockquote><p><strong>CustomerBlockHandler</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113201514.png" alt="image-20201113201507173"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerBlockHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handleException</span><span class="params">(BlockedException exception)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">2020</span>, <span class="string">&quot;自定义限流处理信息....CustomerBlockHandler&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handleException2</span><span class="params">(BlockedException exception)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">2020</span>, <span class="string">&quot;自定义限流处理信息2....CustomerBlockHandler--2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>RateLimitController</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.oy.springcloud.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerBlockHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handleException</span><span class="params">(BlockException exception)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">2020</span>, <span class="string">&quot;自定义限流处理信息....CustomerBlockHandler&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handleException2</span><span class="params">(BlockException exception)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">2020</span>, <span class="string">&quot;自定义限流处理信息2....CustomerBlockHandler--2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>启动微服务后先调用一次</strong></p></blockquote><ul><li><a href="http://localhost:8401/rateLimit/customerBlockHandler">http://localhost:8401/rateLimit/customerBlockHandler</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113201711.png" alt="image-20201113201710570"></p><blockquote><p><strong>Sentinel 控制台配置</strong></p></blockquote><ul><li>测试后我们自定义的出来了</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113203316.png" alt="image-20201113203315568"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113203328.png" alt="image-20201113203327191"></p><ul><li>进一步说明</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113225106.png" alt="image-20201113225105340"></p><h3 id="⑤-更多注解属性说明"><a href="#⑤-更多注解属性说明" class="headerlink" title="⑤ 更多注解属性说明"></a>⑤ 更多注解属性说明</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113205443.png" alt="image-20201113205442117"></p><p><code>@SentinelResource</code> 用于定义资源，并提供可选的异常处理和 fallback 配置项。 <code>@SentinelResource</code> 注解包含以下属性：</p><ul><li><code>value</code>：资源名称，必需项（不能为空）</li><li><code>entryType</code>：entry 类型，可选项（默认为 <code>EntryType.OUT</code>）</li><li><code>blockHandler</code> / <code>blockHandlerClass</code>: <code>blockHandler</code> 对应处理 <code>BlockException</code> 的函数名称，可选项。blockHandler 函数访问范围需要是 <code>public</code>，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 <code>BlockException</code>。blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>blockHandlerClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li><li><code>fallback</code> / <code>fallbackClass</code>：fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了 exceptionsToIgnore 里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求：<ul><li>返回值类型必须与原函数返回值类型一致；</li><li>方法参数列表需要和原函数一致，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li><li>fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li></ul></li><li>defaultFallback（since 1.6.0）：默认的 fallback 函数名称，可选项，通常用于通用的 fallback 逻辑（即可以用于很多服务或方法）。默认 fallback 函数可以针对所有类型的异常（除了 exceptionsToIgnore 里面排除掉的异常类型）进行处理。若同时配置了 fallback 和 defaultFallback，则只有 fallback 会生效。defaultFallback 函数签名要求：<ul><li>返回值类型必须与原函数返回值类型一致；</li><li>方法参数列表需要为空，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li><li>defaultFallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li></ul></li><li><code>exceptionsToIgnore</code>（since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 fallback 逻辑中，而是会原样抛出。</li></ul><blockquote><p>注：1.6.0 之前的版本 fallback 函数只针对降级异常（<code>DegradeException</code>）进行处理，<strong>不能针对业务异常进行处理</strong>。</p></blockquote><p>特别地，若 blockHandler 和 fallback 都进行了配置，则被限流降级而抛出 <code>BlockException</code> 时只会进入 <code>blockHandler</code> 处理逻辑。若未配置 <code>blockHandler</code>、<code>fallback</code> 和 <code>defaultFallback</code>，则被限流降级时会将 <code>BlockException</code> <strong>直接抛出</strong>（若方法本身未定义 throws BlockException 则会被 JVM 包装一层 <code>UndeclaredThrowableException</code>）。</p><p><strong>官网</strong>：<a href="https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81">https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81</a></p><blockquote><p><strong>多说一句</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113205549.png" alt="image-20201113205548458"></p><blockquote><p><strong>Sentinel 主要有三个核心 API</strong></p></blockquote><ol><li>SphU 定义资源</li><li>Tracer 定义统计</li><li>ContextUtil 定义了上下文</li></ol><h2 id="九、服务熔断功能"><a href="#九、服务熔断功能" class="headerlink" title="九、服务熔断功能"></a>九、服务熔断功能</h2><h3 id="①-sentinel-整合-ribbon-openFeign-fallback"><a href="#①-sentinel-整合-ribbon-openFeign-fallback" class="headerlink" title="① sentinel 整合 ribbon+openFeign+fallback"></a>① sentinel 整合 ribbon+openFeign+fallback</h3><h3 id="②-Ribbon-系列"><a href="#②-Ribbon-系列" class="headerlink" title="② Ribbon 系列"></a>② Ribbon 系列</h3><h4 id="1-启动-nacos-和-sentinel-提供者-9003-9004"><a href="#1-启动-nacos-和-sentinel-提供者-9003-9004" class="headerlink" title="1. 启动 nacos 和 sentinel,提供者 9003/9004"></a>1. 启动 nacos 和 sentinel,提供者 9003/9004</h4><blockquote><p>新建 cloudalibaba-provider-payment9003/9004</p></blockquote><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-provider-payment9003<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud openfeign --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba sentinel --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML： 记得修改不同的端口号</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9003</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置Nacos地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>主启动</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain9003</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(PaymentMain9003.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>业务类</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Long, Payment&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        hashMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Payment(<span class="number">1L</span>,<span class="string">&quot;28a8c1e3bc2742d8848569891fb42181&quot;</span>));</span><br><span class="line">        hashMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Payment(<span class="number">2L</span>,<span class="string">&quot;bba8c1e3bc2742d8848569891ac32182&quot;</span>));</span><br><span class="line">        hashMap.put(<span class="number">3L</span>,<span class="keyword">new</span> Payment(<span class="number">3L</span>,<span class="string">&quot;6ua8c1e3bc2742d8848569891xt92183&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        Payment payment = hashMap.get(id);</span><br><span class="line">        CommonResult&lt;Payment&gt; result = <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;frommysql,serverPort: &quot;</span>+serverPort,payment);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>地址： <a href="http://localhost:9003/paymentSQL/1">http://localhost:9003/paymentSQL/1</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113220234.png" alt="image-20201113220233221"></p><h4 id="2-消费者-84"><a href="#2-消费者-84" class="headerlink" title="2.消费者 84"></a>2.消费者 84</h4><blockquote><p><strong>新建 cloudalibaba-consumer-nacos-order84</strong></p></blockquote><blockquote><p><strong>POM</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud openfeign --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba sentinel --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">84</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment">#配置Sentinel dashboard地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="comment">#默认8719端口，假如被占用会自动从8719开始依次+1扫描,直至找到未被占用的端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活Sentinel对Feign的支持</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosMain84</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(OrderNacosMain84.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类</p></blockquote><ol><li><strong>ApplicationContextConfig</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113222316.png" alt="image-20201113222315547"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>CircleBreakerController 的全部源码</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleBreakerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_URL = <span class="string">&quot;http://nacos-payment-provider&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/fallback/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">//@SentinelResource(value = &quot;fallback&quot;) //没有配置</span></span><br><span class="line">    <span class="comment">//@SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;) //fallback 只负责业务异常</span></span><br><span class="line">    <span class="comment">//@SentinelResource(value = &quot;fallback&quot;,blockHandler = &quot;blockHandler&quot;) //blockHandler只负责 sentinel 控制台配置违规</span></span><br><span class="line">    <span class="comment">//@SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;,blockHandler = &quot;blockHandler&quot;, exceptionsToIgnore = &#123;IllegalArgumentException.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">fallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL +<span class="string">&quot;/paymentSQL/&quot;</span>+id, CommonResult.class,id);</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (<span class="string">&quot;IllegalArgumentException,非法参数异常....&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result.getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException (<span class="string">&quot;NullPointerException,该 ID 没有对应记录,空指针异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//fallback</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handlerFallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id,Throwable e)</span> </span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment(id,<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>,<span class="string">&quot; 兜 底 异 常 handlerFallback,exception 内 容 &quot;</span>+e.getMessage(),payment);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//blockHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">blockHandler</span><span class="params">(<span class="meta">@PathVariable</span> Long id, BlockException blockException)</span> </span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment(id,<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">445</span>,<span class="string">&quot;blockHandler-sentinel 限 流 , 无 此 流 水 : blockException &quot;</span>+blockException.getMessage(),payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改后重启微服务</p></blockquote><ul><li>热部署对 java 代码级生效即使</li><li>对@SentinelResource 注解内属性，有时效果不好</li></ul><blockquote><p>目的</p></blockquote><ul><li>fallback 管运行异常</li><li>blockHandler 管配置违规</li></ul><blockquote><p>测试地址</p></blockquote><ul><li><a href="http://localhost:84/consumer/fallback/1">http://localhost:84/consumer/fallback/1</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113224154.png" alt="image-20201113224153652"></p><blockquote><p><strong>没有任何配置</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleBreakerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_URL = <span class="string">&quot;http://nacos-payment-provider&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/fallback/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;fallback&quot;)</span> <span class="comment">//没有配置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">fallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL +<span class="string">&quot;/paymentSQL/&quot;</span>+id, CommonResult.class,id);</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (<span class="string">&quot;IllegalArgumentException,非法参数异常....&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result.getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException (<span class="string">&quot;NullPointerException,该 ID 没有对应记录,空指针异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//fallback</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handlerFallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id,Throwable e)</span> </span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment(id,<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>,<span class="string">&quot; 兜 底 异 常 handlerFallback,exception 内 容 &quot;</span>+e.getMessage(),payment);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//blockHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">blockHandler</span><span class="params">(<span class="meta">@PathVariable</span> Long id, BlockException blockException)</span> </span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment(id,<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">445</span>,<span class="string">&quot;blockHandler-sentinel 限 流 , 无 此 流 水 : blockException &quot;</span>+blockException.getMessage(),payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>给客户 error 页面， 不友好</em></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113224436.png" alt="image-20201113224434865"></p><blockquote><p><strong>只配置 fallback</strong></p></blockquote><p>编码（那个业务类下面的 CircleBreakerController 的全部源码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;)</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113224531.png" alt="image-20201113224530611"></p><blockquote><p><strong>只配置 blockHandler</strong></p></blockquote><p>编码（那个业务类下面的 CircleBreakerController 的全部源码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(value = &quot;fallback&quot;,blockHandler = &quot;blockHandler&quot;)</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113224926.png" alt="image-20201113224925701"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113224907.png" alt="image-20201113224906603"></p><blockquote><p><strong>fallback 和 blockHandler 都配置</strong></p></blockquote><p><code>结果</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113224811.png" alt="image-20201113224810968"></p><blockquote><p><strong>忽略属性…</strong></p></blockquote><p>编码（那个业务类下面的 CircleBreakerController 的全部源码）<br>==图说==</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113225208.png" alt="image-20201113225207460"></p><h4 id="3-Feign-系列"><a href="#3-Feign-系列" class="headerlink" title="3.Feign 系列"></a>3.Feign 系列</h4><blockquote><p>修改 84 模块</p></blockquote><blockquote><p><strong>POM</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>YML</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">84</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment">#配置Sentinel dashboard地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="comment">#默认8719端口，假如被占用会自动从8719开始依次+1扫描,直至找到未被占用的端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活Sentinel对Feign的支持</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>业务类</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113230421.png" alt="image-20201113230420142"></p><ol><li>带@FeignClient 注解的业务接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;nacos-payment-provider&quot;,fallback = PaymentFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>fallback=PaymentFallbackService.class</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">44444</span>,<span class="string">&quot; 服 务 降 级 返 回,---PaymentFallbackService&quot;</span>,<span class="keyword">new</span> Payment(id,<span class="string">&quot;errorSerial&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Controller</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OpenFeign</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/consumer/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> paymentService.paymentSQL(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>主启动</strong></p></blockquote><p>添加<code>@EnableFeignClients</code> 启动 Feign 的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosMain84</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(OrderNacosMain84.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="http://localhost:84/consumer/paymentSQL/1">http://localhost:84/consumer/paymentSQL/1</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113231149.png" alt="image-20201113231148089"></p><p>测试 84 调用 9003， 此时故意关闭 9003 微服务提供者， 看 84 消费侧自动降级， 不会被耗死。</p><h4 id="4-熔断框架比较"><a href="#4-熔断框架比较" class="headerlink" title="4.熔断框架比较"></a>4.熔断框架比较</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113231407.png" alt="image-20201113231406811"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113231416.png" alt="image-20201113231415934"></p><h2 id="十、规则持久化"><a href="#十、规则持久化" class="headerlink" title="十、规则持久化"></a>十、规则持久化</h2><h3 id="①-是什么-1"><a href="#①-是什么-1" class="headerlink" title="① 是什么"></a>① 是什么</h3><p>​ 一旦我们重启应用， Sentinel 规则将消失， 生产环境需要将配置规则进行持久化</p><h3 id="②-怎么玩"><a href="#②-怎么玩" class="headerlink" title="② 怎么玩"></a>② 怎么玩</h3><p>将限流配置规则持久化进 Nacos 保存， 只要刷新 8401 某个 rest 地址， sentinel 控制台的流控规则就能看到， 只要 Nacos 里面的配置不删除， 针对 8401 上 Sentinel 上的流控规则持续有效 。</p><h3 id="③-步骤"><a href="#③-步骤" class="headerlink" title="③ 步骤"></a>③ 步骤</h3><blockquote><p><strong>修改 cloudalibaba-sentinel-service8401</strong></p></blockquote><blockquote><p><strong>POM</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>YML</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span> <span class="comment">#配置Sentinel dashboard地址</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">ds1:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 激活Sentinel对Feign的支持</span></span><br></pre></td></tr></table></figure><ul><li>添加 Nacos 数据源配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">        <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">ds1:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>添加 Nacos 业务规则配置</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113232629.png" alt="image-20201113232628786"></p><p><strong>内容解析</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;resource&quot;</span>: <span class="string">&quot;/rateLimit/byUrl&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;limitApp&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;grade&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;count&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;strategy&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;controlBehavior&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;clusterMode&quot;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113232708.png" alt="image-20201113232707123"></p><blockquote><p><strong>启动 8401 后刷新 sentinel 发现业务规则有了</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113233021.png" alt="image-20201113233021046"></p><blockquote><p>快速访问测试接口</p></blockquote><ol><li><a href="http://localhost:8401/rateLimit/byUrl">http://localhost:8401/rateLimit/byUrl</a></li><li>默认</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113233711.png" alt="image-20201113233710028"></p><ol start="3"><li>停止 8401 再看 sentinel</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113233423.png" alt="image-20201113233422194"></p><ol start="4"><li>重新启动 8401 再看 sentinel</li></ol><ul><li>乍一看还是没有， 稍等一会儿 , 多次调用： <a href="http://localhost:8401/rateLimit/byUrl">http://localhost:8401/rateLimit/byUrl</a> , 重新配置出现了， 持久化验证通过</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201113233753.png" alt="image-20201113233752208"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Alibaba Nacos 服务注册和配置中心</title>
      <link href="posts/dfb9e877/"/>
      <url>posts/dfb9e877/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV18E411x7eT?from=search&seid=4388336378730572330">博客参考学习视频</a></p><h1 id="SpringCloud-Alibaba-Nacos-服务注册和配置中心"><a href="#SpringCloud-Alibaba-Nacos-服务注册和配置中心" class="headerlink" title="SpringCloud Alibaba Nacos 服务注册和配置中心"></a>SpringCloud Alibaba Nacos 服务注册和配置中心</h1><h2 id="一、Nacos-简介"><a href="#一、Nacos-简介" class="headerlink" title="一、Nacos 简介"></a>一、Nacos 简介</h2><h3 id="①-为什么叫-Nacos"><a href="#①-为什么叫-Nacos" class="headerlink" title="① 为什么叫 Nacos"></a>① 为什么叫 Nacos</h3><p>前四个字母分别为 Naming 和 Configuration 的前两个字母，最后的 s 为 Service。</p><h3 id="②-是什么"><a href="#②-是什么" class="headerlink" title="② 是什么"></a>② 是什么</h3><p>一个更易于构建云原生应用的动态服务发现，配置管理和服务管理中心。</p><p>Nacos : Dynamic Naming and Configuration Service</p><p><code>Nacos 就 是 注 册 中 心 + 配 置 中 心 的 组 合 等 价 于 Nacos = Eureka + Config+Bus </code></p><h3 id="③-能干嘛"><a href="#③-能干嘛" class="headerlink" title="③ 能干嘛"></a>③ 能干嘛</h3><ul><li>代替 Eureka 做服务注册中心</li><li>替代 Config 做服务配置中心</li></ul><h3 id="④-去哪下"><a href="#④-去哪下" class="headerlink" title="④ 去哪下"></a>④ 去哪下</h3><p><a href="https://github.com/alibaba/Nacos">https://github.com/alibaba/Nacos </a></p><p><strong>官网文档：</strong></p><ul><li><a href="https://nacos.io/zh-cn/index.html">https://nacos.io/zh-cn/index.html </a></li><li><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_nacos_discovery">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_nacos_discovery</a></li></ul><h3 id="⑤-各种注册中心比较"><a href="#⑤-各种注册中心比较" class="headerlink" title="⑤ 各种注册中心比较"></a>⑤ 各种注册中心比较</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201101233432.png" alt="image-20201101233424665"></p><h2 id="二、安装并运行-Nacos"><a href="#二、安装并运行-Nacos" class="headerlink" title="二、安装并运行 Nacos"></a>二、安装并运行 Nacos</h2><h3 id="①-本地-Java8-Maven-环境已经-OK"><a href="#①-本地-Java8-Maven-环境已经-OK" class="headerlink" title="① 本地 Java8+Maven 环境已经 OK"></a>① 本地 Java8+Maven 环境已经 OK</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201101233536.png" alt="image-20201101233535858"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201101233600.png" alt="image-20201101233559488"></p><h3 id="②-先从官网下载-Nacos"><a href="#②-先从官网下载-Nacos" class="headerlink" title="② 先从官网下载 Nacos"></a>② 先从官网下载 Nacos</h3><p><a href="https://github.com/alibaba/nacos/releases/tag/1.1.4">https://github.com/alibaba/nacos/releases/tag/1.1.4 </a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201101234154.png" alt="image-20201101234153397"></p><h3 id="③-解压安装包，-直接运行-bin-目录下的-startup-cmd"><a href="#③-解压安装包，-直接运行-bin-目录下的-startup-cmd" class="headerlink" title="③ 解压安装包， 直接运行 bin 目录下的 startup.cmd"></a>③ 解压安装包， 直接运行 bin 目录下的 startup.cmd</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201101234226.png" alt="image-20201101234225723"></p><h3 id="④-命令运行成功后直接访问-http-localhost-8848-nacos"><a href="#④-命令运行成功后直接访问-http-localhost-8848-nacos" class="headerlink" title="④ 命令运行成功后直接访问 http://localhost:8848/nacos"></a>④ 命令运行成功后直接访问 <a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a></h3><p>​ <code>默认账号密码都是 nacos </code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201101234326.png" alt="image-20201101234325571"></p><h2 id="三、Nacos-作为服务注册中心演示"><a href="#三、Nacos-作为服务注册中心演示" class="headerlink" title="三、Nacos 作为服务注册中心演示"></a>三、Nacos 作为服务注册中心演示</h2><h3 id="①-官网文档"><a href="#①-官网文档" class="headerlink" title="① 官网文档"></a>① 官网文档</h3><p>​ <a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">https://nacos.io/zh-cn/docs/what-is-nacos.html</a></p><h3 id="②-基于-Nacos-的服务提供者"><a href="#②-基于-Nacos-的服务提供者" class="headerlink" title="② 基于 Nacos 的服务提供者"></a>② 基于 Nacos 的服务提供者</h3><blockquote><p>新建 Module： cloudalibaba-provider-payment9001</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201101234541.png" alt="image-20201101234541040"></p><blockquote><p>POM</p></blockquote><ol><li><strong>父 POM</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud.alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>本模块 POM</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置Nacos地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain9001</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(PaymentMain9001.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nacos registry, serverPort: &quot;</span>+ serverPort+<span class="string">&quot;\t id:&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><ul><li><a href="http://lcoalhost:9001/payment/nacos/1">http://lcoalhost:9001/payment/nacos/1</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102000639.png" alt="image-20201102000639126"></p><ul><li>nacos 控制台</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102000723.png" alt="image-20201102000722791"></p><p><strong>nacos 服务注册中心 + 服务提供者 9001 都 OK</strong></p><h3 id="③-演示-nacos-的负载均衡，参照-9001-新建-9002"><a href="#③-演示-nacos-的负载均衡，参照-9001-新建-9002" class="headerlink" title="③ 演示 nacos 的负载均衡，参照 9001 新建 9002"></a>③ 演示 nacos 的负载均衡，参照 9001 新建 9002</h3><blockquote><p>新建 cloudalibaba-provider-payment9002</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102144849.png" alt="image-20201102144842246"></p><blockquote><p>9002 其他步骤参考 9001</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102145110.png" alt="image-20201102145110159"></p><blockquote><p>或者取巧不想新建重复的劳动力，直接拷贝虚拟端口映射</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102145725.png" alt="image-20201102145723772"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102145953.png" alt="image-20201102145953279"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102150108.png" alt="image-20201102150107933"></p><h3 id="④-基于-Nacos-的服务消费者"><a href="#④-基于-Nacos-的服务消费者" class="headerlink" title="④ 基于 Nacos 的服务消费者"></a>④ 基于 Nacos 的服务消费者</h3><blockquote><p>新建 Module: cloudalibaba-consumer-nacos-order83</p></blockquote><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>==为什么 nacos 支持负载均衡： 因为依赖了 ribbon==</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102150812.png" alt="image-20201102150811323"></p><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">83</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosMain83</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(OrderNacosMain83.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类</p></blockquote><p>① <strong>ApplicationContextBean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② <strong>OrderNacosController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.nacos-user-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverURL;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(serverURL+<span class="string">&quot;/payment/nacos/&quot;</span>+id,String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p><strong>① nacos 控制台</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102152504.png" alt="image-20201102152503736"></p><p><strong>② <a href="http://localhost:83/consumer/payment/nacos/13">http://localhost:83/consumer/payment/nacos/13</a></strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102152549.png" alt="image-20201102152548493"></p><p><strong>③ 83 访问 9001/9002， 轮询负载 OK</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102152612.png" alt="image-20201102152610937"></p><h3 id="⑤-服务注册中心对比"><a href="#⑤-服务注册中心对比" class="headerlink" title="⑤ 服务注册中心对比"></a>⑤ 服务注册中心对比</h3><p><strong>Nacos 全景图所示</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102220236.png" alt="image-20201102220228896"></p><p><strong>Nacos 和 CAP</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102220249.png" alt="image-20201102220248289"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102220321.png" alt="image-20201102220319880"><strong>Nacos 支持 AP 和 CP 模式的切换</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102220744.png" alt="image-20201102220742970"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT <span class="string">&#x27;$NACOS_SERVER:8848/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="四、Nacos-作为服务配置中心演示"><a href="#四、Nacos-作为服务配置中心演示" class="headerlink" title="四、Nacos 作为服务配置中心演示"></a>四、Nacos 作为服务配置中心演示</h2><h3 id="①-Nacos-作为配置中心-基础配置"><a href="#①-Nacos-作为配置中心-基础配置" class="headerlink" title="① Nacos 作为配置中心-基础配置"></a>① Nacos 作为配置中心-基础配置</h3><blockquote><p>cloudalibaba-config-nacos-client3377</p></blockquote><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nacos-config--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nacos-discovery--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web + actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般基础配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><ol><li><p><strong>why 配置两个</strong></p><p>Nacos 同 springcloud-config 一样，在项目初始化时，要保证先从配置中心配置拉取，拉取配置之后，才能保证项目的正常启动。</p><p>springboot 中配置文件的加载是存在优先级顺序的，bootstrap 优先级高于 application</p></li><li><p><strong>bootstrap</strong></p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nacos配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#指定yaml格式的配置</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>application.yml</strong></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigClientMain3377</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(NacosConfigClientMain3377.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类(controller)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configinfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config/info&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfiginfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> configinfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<code>@RefreshScope </code></p><p>通过 Spring Cloud 原生注解 @RefreshScope 实现配置自动更新</p><h3 id="②-在-Nacos-中添加配置信息"><a href="#②-在-Nacos-中添加配置信息" class="headerlink" title="② 在 Nacos 中添加配置信息"></a>② 在 Nacos 中添加配置信息</h3><ol><li><strong>Nacos 中的匹配规则</strong></li></ol><p><strong>理论：</strong></p><p>​ Nacos 中的 dataid 的组成格式与 springBoot 配置文件中的匹配规则</p><p>​ <strong>官网</strong>：<a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html">https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html</a></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102222644.png" alt="image-20201102222643702"></p><h3 id="③-实操"><a href="#③-实操" class="headerlink" title="③ 实操"></a><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102222654.png" alt="image-20201102222653418">③ 实操</h3><blockquote><p>配置新增： nacos-config-client-dev</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102222815.png" alt="image-20201102222814585"></p><blockquote><p>Nacos 界面配置对应</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102223021.png" alt="image-20201102223020710"></p><p>==设置 DataId==</p><p><strong>公 式</strong> : ${spring.application.name}-${spring.profile.active}.${spring.cloud.nacos.config.file-extension}</p><ul><li>prefix 默认为 spring.application.name 的值</li><li>spring.profile.active 既 为 当 前 环 境 对 应 的 profile, 可 以 通 过 配 置 项 spring.profile.active 来配置</li><li>file-exetension 为 配 置 内 容 的 数 据 格 式 ， 可 以 通 过 配 置 项 spring.cloud.nacos.config.file-extension 配置</li></ul><p><strong>小总结说明</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102223657.png" alt="image-20201102223657073"></p><blockquote><p><strong>测试</strong></p></blockquote><ol><li>启动前需要在 nacos 客户端-配置管理-配置管理栏目下有没有对应的 yaml 配置文件</li><li>运行 cloud-config-nacos-client3377 的主启动类</li><li>调用接口查看配置信息： <a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a> 自带动态刷新</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102224239.png" alt="image-20201102224238724"></p><blockquote><p><strong>自带动态刷新</strong></p></blockquote><p>修改下 Nacos 中的 yaml 配置文件， 再次调用查看配置的接口， 就会发现配置已经刷新</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102224339.png" alt="image-20201102224339085"></p><h3 id="④-Nacos-作为配置中心-分类配置"><a href="#④-Nacos-作为配置中心-分类配置" class="headerlink" title="④ Nacos 作为配置中心-分类配置"></a>④ Nacos 作为配置中心-分类配置</h3><p><strong>问题：</strong> 多环境多项目管理</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102224526.png" alt="image-20201102224525486"></p><blockquote><p><strong>Nacos 的图形化管理界面</strong></p></blockquote><ol><li><strong>配置管理</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102224823.png" alt="image-20201102224822703"></p><ol start="2"><li><strong>命名空间</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102224932.png" alt="image-20201102224931667"></p><blockquote><p><strong>Namespace+Group+Data ID 三者关系？ 为什么这么设计？</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102225035.png" alt="image-20201102225034423"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102225042.png" alt="image-20201102225041492"></p><blockquote><p>Case</p></blockquote><h4 id="1-DataID-方案"><a href="#1-DataID-方案" class="headerlink" title="1.DataID 方案"></a>1.DataID 方案</h4><p>指定 spring.profile.active 和配置文件的 DataID 来使不同环境下读取不同的配置<br>默认空间+默认分组+新建 dev 和 test 两个 DataID</p><blockquote><p>新建 dev 配置 DataID</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102225516.png" alt="image-20201102225514198"></p><blockquote><p>新建 test 配置 DataID</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102225711.png" alt="image-20201102225710757"></p><p>通过 spring.profile.active 属性就能进行多环境下配置文件的读取</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102225731.png" alt="image-20201102225730669"></p><blockquote><p><strong>测试</strong></p></blockquote><ul><li><a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a> 配置是什么就加载什么： test</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102225936.png" alt="image-20201102225935883"></p><h4 id="2-Group-方案"><a href="#2-Group-方案" class="headerlink" title="2.Group 方案"></a>2.Group 方案</h4><blockquote><p>通过 Group 实现环境区分<br>新建 Group</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102230431.png" alt="image-20201102230430982"></p><blockquote><p>在 nacos 图形界面控制台上面新建配置文件 DataID</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102230806.png" alt="image-20201102230805257"></p><blockquote><p>bootstrap+application</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102230838.png" alt="image-20201102230837042"></p><p>​ 在 config 下 增 加 一 条 group 的 配 置 即 可 。 可 配 置 为 DEV_GROUP 或 TEST_GROUP</p><h4 id="3-Namespace-方案"><a href="#3-Namespace-方案" class="headerlink" title="3.Namespace 方案"></a>3.Namespace 方案</h4><blockquote><p>新建 dev/test 的 Namespace</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102231228.png" alt="image-20201102231227555"></p><p><strong>回到服务管理-服务列表查看</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102231257.png" alt="image-20201102231256897"></p><p><strong>按照域名配置填写</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102231358.png" alt="image-20201102231357818"></p><blockquote><p>YML</p></blockquote><ul><li><strong>Bootstrap</strong></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">namespace:</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201102232404.png" alt="image-20201102232403231"></p><ul><li><strong>Application</strong>： 不变</li></ul><h2 id="五、Nacos-集群和持久化配置"><a href="#五、Nacos-集群和持久化配置" class="headerlink" title="五、Nacos 集群和持久化配置"></a>五、Nacos 集群和持久化配置</h2><h3 id="①-官网说明"><a href="#①-官网说明" class="headerlink" title="① 官网说明"></a>① 官网说明</h3><p><a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html">https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</a></p><p><strong>官网架构图：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201105210338.png" alt="image-20201105210331098"></p><p><strong>上图官网翻译， 真实情况</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201105210412.png" alt="image-20201105210411596"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201105210425.png" alt="image-20201105210424889"></p><p><strong>==说明==</strong></p><p>​ 默认使用 Nacos 使用嵌入式数据库实现数据的存储。所以，如果启动多个默认配置下的 Nacos 节点，数据存储是存在一致性问题的。为了解决这个问题，Nacos 采用了集中式存储的方式集群化部署，目前只支持 MySQL 的存储。</p><blockquote><p><strong>Nacos 支持三种部署，模式</strong></p></blockquote><ul><li>单机模式，用于测试和单机试用</li><li>集群部署，用于生产环境，确保高可用。</li><li>多集群模式，用于多数据中心场景。</li></ul><p><strong>windows</strong></p><p>cmd starup.cmd 或者双击 startup.cmd 文件</p><blockquote><p><strong>单机模式支持 mysql</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201105211645.png" alt="image-20201105211643724"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201105211712.png" alt="image-20201105211711137"></p><p><strong>按照上述：</strong> 我们需要 mysql 数据库。</p><p><strong>==官网说明==</strong></p><p><a href="https://nacos.io/zh-cn/docs/deployment.html">https://nacos.io/zh-cn/docs/deployment.html </a></p><h3 id="②-Nacos-持久化配置解释"><a href="#②-Nacos-持久化配置解释" class="headerlink" title="② Nacos 持久化配置解释"></a>② Nacos 持久化配置解释</h3><p>​ Nacos 默认自带的是嵌入式数据库 derby</p><blockquote><p><strong>derby 到 mysql 切换配置步骤</strong></p></blockquote><ol><li><strong>nacos-server-1.1.4\nacos\conf 目录下找到 sql 脚本</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201105213217.png" alt="image-20201105213216687"></p><p><strong>执行脚本:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE nacos_config;</span><br><span class="line">USE nacos_config;</span><br><span class="line"><span class="comment">/* 数据库全名 = nacos_config */</span></span><br><span class="line"><span class="comment">/* 表名称 = config_info */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">`md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">`gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">`src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">`src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,`app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">`c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`c_schema` text,</span><br><span class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">....省略后面的。参考自己的</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>nacos-server-1.1.4\nacos\conf 目 录 下 找 到 application.properties</strong></p><p>在文件下面添加</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.platform<span class="operator">=</span>mysql</span><br><span class="line">db.num<span class="operator">=</span><span class="number">1</span></span><br><span class="line">db.url<span class="number">.0</span><span class="operator">=</span>jdbc:mysql:<span class="operator">/</span><span class="operator">/</span><span class="number">11.162</span><span class="number">.196</span><span class="number">.16</span>:<span class="number">3306</span><span class="operator">/</span>nacos_devtest?characterEncoding<span class="operator">=</span>utf8<span class="operator">&amp;</span>connectTimeout<span class="operator">=</span><span class="number">1000</span><span class="operator">&amp;</span>socketTimeout<span class="operator">=</span><span class="number">3000</span><span class="operator">&amp;</span>autoReconnect<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">db.user<span class="operator">=</span>nacos_devtest</span><br><span class="line">db.password<span class="operator">=</span>youdontknow</span><br></pre></td></tr></table></figure><p>​ <strong>参考</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201105214034.png" alt="image-20201105214033619"></p><p><strong>启动 nacos， 可以看到是个全新的空记录界面， 以前是记录进 derby</strong></p><h3 id="③-Linux-版-Nacos-MySQL-生产环境配置"><a href="#③-Linux-版-Nacos-MySQL-生产环境配置" class="headerlink" title="③ Linux 版 Nacos+MySQL 生产环境配置"></a>③ Linux 版 Nacos+MySQL 生产环境配置</h3><blockquote><p><strong>预计需要</strong>， 1 个 nginx+3 个 nacos 注册中心+1 个 mysql</p></blockquote><p><strong>Nacos 下载 linux 版本</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201105214337.png" alt="image-20201105214336557"></p><ol><li><a href="https://github.com/alibaba/nacos/releases/tag/1.1.4">https://github.com/alibaba/nacos/releases/tag/1.1.4</a></li><li>nacos-server-1.1.4.tar.gz</li><li>解压后安装</li></ol><blockquote><p><strong>集群配置步骤（==重点==）</strong></p></blockquote><ol><li>Linux 服务器上 mysql 数据库配置</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201105224447.png" alt="image-20201105224446675"></p><ol start="2"><li>application.properties 配置</li></ol><p><strong>位置:</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201105224847.png" alt="image-20201105224846519"></p><p><strong>内容</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.platform<span class="operator">=</span>mysql</span><br><span class="line">db.num<span class="operator">=</span><span class="number">1</span></span><br><span class="line">db.url<span class="number">.0</span><span class="operator">=</span>jdbc:mysql:<span class="operator">/</span><span class="operator">/</span><span class="number">1.7</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3306</span><span class="operator">/</span>nacos_config?characterEncoding<span class="operator">=</span>utf8<span class="operator">&amp;</span>connectTimeout<span class="operator">=</span><span class="number">1000</span><span class="operator">&amp;</span>socketTimeout<span class="operator">=</span><span class="number">3000</span><span class="operator">&amp;</span>autoReconnect<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">db.user<span class="operator">=</span>root</span><br><span class="line">db.password<span class="operator">=</span>HF_mysql_654321</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201105224935.png" alt="image-20201105224935183"></p><p>**==注意==**：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201106214923.png" alt="image-20201106214921661"></p><blockquote><p>mysql 授权远程访问</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="④-Linux-服务器上-nacos-的集群配置-cluster-conf"><a href="#④-Linux-服务器上-nacos-的集群配置-cluster-conf" class="headerlink" title="④ Linux 服务器上 nacos 的集群配置 cluster.conf"></a>④ Linux 服务器上 nacos 的集群配置 cluster.conf</h3><ul><li>梳理出 3 台 nacos 机器的不同服务端口号<br>复制出 cluster.conf</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201105234938.png" alt="image-20201105234937053"></p><p><strong>内容</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201105235003.png" alt="image-20201105235002429"></p><p>这个 IP 不能写 127.0.0.1,必须是 Linux 命令 hostname -I 能够识别的 IP</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201106214827.png" alt="image-20201106214819815"></p><h3 id="⑤-编辑-Nacos-的启动脚本-startup-sh，-使它能够接受不同的启动端"><a href="#⑤-编辑-Nacos-的启动脚本-startup-sh，-使它能够接受不同的启动端" class="headerlink" title="⑤ 编辑 Nacos 的启动脚本 startup.sh， 使它能够接受不同的启动端"></a>⑤ 编辑 Nacos 的启动脚本 startup.sh， 使它能够接受不同的启动端</h3><blockquote><p>/mynacos/nacos/bin 目录下有 startup.sh 在什么地方， 修改什么， 怎么修改<br>思考</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201105235107.png" alt="image-20201105235106168"></p><p><strong>修改内容</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201105235129.png" alt="image-20201105235129033"></p><p><img src= "/img/loading.gif" data-lazy-src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20201105235141390.png" alt="image-20201105235141390"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201105235149.png" alt="image-20201105235148021"></p><p>==<strong>注意：</strong>==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里是 —Dserver.port&#x3D;$&#123;PORT&#125;, 不要误认为是“.”</span><br></pre></td></tr></table></figure><p><strong>在启动前一定要先启动 mysql 服务，不然 nacos 会报错：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# service mysql start</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201106215342.png" alt="image-20201106215341333"></p><p><strong>执行方式</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201105234854.png" alt="image-20201105234853323"></p><p><strong>同时通过 window 浏览器访问</strong></p><ul><li><a href="http://192.168.64.129:3333/nacos/#/login">http://192.168.64.129:3333/nacos/#/login</a></li><li><a href="http://192.168.64.129:4444/nacos/#/login">http://192.168.64.129:4444/nacos/#/login</a></li><li><a href="http://192.168.64.129:5555/nacos/#/login">http://192.168.64.129:5555/nacos/#/login</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201106215552.png" alt="image-20201106215551768"></p><h3 id="⑥-Nginx-的配置，-由它作为负载均衡器"><a href="#⑥-Nginx-的配置，-由它作为负载均衡器" class="headerlink" title="⑥ Nginx 的配置， 由它作为负载均衡器"></a>⑥ Nginx 的配置， 由它作为负载均衡器</h3><p>安装 nginx 请参考我这篇博客：</p><p>修改 nginx 的配置文件<br><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201106221625.png" alt="image-20201106221624017"></p><p><strong>nginx.conf</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">upstream cluster&#123;</span><br><span class="line">server 127.0.0.1:3333;</span><br><span class="line">server 127.0.0.1:4444;</span><br><span class="line">server 127.0.0.1:5555;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">listen 1111;</span><br><span class="line">server_name localhost;</span><br><span class="line">location &#x2F;&#123;</span><br><span class="line">proxy_pass http:&#x2F;&#x2F;cluster</span><br><span class="line">  &#125;</span><br><span class="line">....省略</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201106221743.png" alt="image-20201106221742957"></p><p><strong>按照指定启动</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201106221807.png" alt="image-20201106221806722"></p><h3 id="⑦-截止到此处，-1-个-Nginx-3-个-nacos-注册中心-1-个-mysql"><a href="#⑦-截止到此处，-1-个-Nginx-3-个-nacos-注册中心-1-个-mysql" class="headerlink" title="⑦ 截止到此处， 1 个 Nginx+3 个 nacos 注册中心+1 个 mysql"></a>⑦ 截止到此处， 1 个 Nginx+3 个 nacos 注册中心+1 个 mysql</h3><ul><li>测试通过 nginx 访问 nacos<br>https://写你自己虚拟机的 ip:1111/nacos/#/login</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201106221945.png" alt="image-20201106221944129"></p><ul><li>新建一个配置测试</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201106222237.png" alt="image-20201106222236206"></p><ul><li>linux 服务器的 mysql 插入一条记录</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201106222432.png" alt="image-20201106222431752"></p><h3 id="⑧-测试"><a href="#⑧-测试" class="headerlink" title="⑧ 测试"></a>⑧ 测试</h3><p>​ 微服务 cloudalibaba-provider-payment9002 启动注册进 nacos 集群</p><blockquote><p><strong>Yml</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server-addr:</span> <span class="string">写你自己的虚拟机</span> <span class="string">ip:1111</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>结果</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201106223103.png" alt="image-20201106223102350"></p><h2 id="六、高可用小总结"><a href="#六、高可用小总结" class="headerlink" title="六、高可用小总结"></a>六、高可用小总结</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201106223232.png" alt="image-20201106223231628"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Sleuth 分布式请求链路</title>
      <link href="posts/1330258666/"/>
      <url>posts/1330258666/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV18E411x7eT?from=search&seid=4388336378730572330">博客学习参考视频</a></p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="①-为什么会出现这个技术？-需要解决哪些问题？"><a href="#①-为什么会出现这个技术？-需要解决哪些问题？" class="headerlink" title="① 为什么会出现这个技术？ 需要解决哪些问题？"></a>① 为什么会出现这个技术？ 需要解决哪些问题？</h3><p>​ 在微服务框架中，一个由客户端发起的请求在后端系统中会经过多个不同的服务点调用来协同产生最后的请求结果，每一个前端请求都会形成一条复杂的分布式服务调用链路，链路中的任何一环出现高延迟或错误都会引起整个请求最后的失败。</p><h3 id="②-是什么"><a href="#②-是什么" class="headerlink" title="② 是什么"></a>② 是什么</h3><p><a href="https://github.com/spring-cloud/spring-cloud-sleuth">https://github.com/spring-cloud/spring-cloud-sleuth </a></p><p>Spring Cloud Sleuth 提供了一套完整的服务跟踪的解决方案，在分布式系统中提供追踪解决方案并且兼容支持了 zipkin。</p><h3 id="③-解决"><a href="#③-解决" class="headerlink" title="③ 解决"></a>③ 解决</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201023114956.png" alt="image-20201023114955011"></p><h2 id="二、搭建链路监控步骤"><a href="#二、搭建链路监控步骤" class="headerlink" title="二、搭建链路监控步骤"></a>二、搭建链路监控步骤</h2><h3 id="①-zipkin-下载"><a href="#①-zipkin-下载" class="headerlink" title="① zipkin 下载"></a>① zipkin 下载</h3><ol><li>SpringCloud 从 F 版起已不需要自己构建 Zipkin server 了，只需要调用 jar 包即可</li><li><a href="https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/">https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/</a></li><li>zipkin-server-2.12.9.exec.jar</li></ol><blockquote><p><strong>运行 jar</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201023115255.png" alt="image-20201023115255023"></p><blockquote><p><strong>运行控制台</strong></p></blockquote><ol><li><a href="http://localhost:9411/zipkin/">http://localhost:9411/zipkin/</a></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201023115913.png" alt="image-20201023115912407"></p><ol start="2"><li>术语</li></ol><p><strong>完整的调用链路</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201023115938.png" alt="image-20201023115937720"></p><p><strong>上图 what</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201023120438.png" alt="image-20201023120436405"></p><p><strong>名词解释</strong></p><p>Trace： 类似于树结构的 Span 集合，表示一条调用链路，存在唯一标识</p><p>span: 表示调用链路来源，通俗的理解 span 就是一次请求信息</p><h3 id="②-服务提供者"><a href="#②-服务提供者" class="headerlink" title="② 服务提供者"></a>② 服务提供者</h3><blockquote><p><strong>cloud-provider-payment8001</strong></p></blockquote><blockquote><p><strong>POM</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--包含了 sleuth+zipkin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>YML</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="comment">#采样率值介于 0 到 1 之间，1 则表示全部采集</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">6090</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.oy.springcloud.entities</span> <span class="comment"># 所有Entity别名类所在包</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 集群版</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201023123522.png" alt="image-20201023123521600"></p><blockquote><p><strong>业务类 PaymentController</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ====================&gt; zipkin+sleuth</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/zipkin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentZipkin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hi ,i&#x27;am paymentzipkin server fall back，welcome to atguigu，O(∩_∩)O哈哈~&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="③-服务消费者（调用方）"><a href="#③-服务消费者（调用方）" class="headerlink" title="③ 服务消费者（调用方）"></a>③ 服务消费者（调用方）</h3><blockquote><p><strong>cloud-consumer-order80</strong></p></blockquote><blockquote><p><strong>POM</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--包含了 sleuth+zipkin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>YML</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zipkin:</span></span><br><span class="line">  <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line"><span class="attr">sleuth:</span></span><br><span class="line">  <span class="attr">sampler:</span></span><br><span class="line">    <span class="attr">probability:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201023124243.png" alt="image-20201023124242263"></p><blockquote><p><strong>业务类 OrderController</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/zipkin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentZipkin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    String result =</span><br><span class="line">        restTemplate.getForObject(<span class="string">&quot;http://localhost:8001&quot;</span>+<span class="string">&quot;/payment/zipkin/&quot;</span>, String.class);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="④-依次启动-eureka7001-8001-80"><a href="#④-依次启动-eureka7001-8001-80" class="headerlink" title="④ 依次启动 eureka7001/8001/80"></a>④ 依次启动 eureka7001/8001/80</h3><p>80 调用 8001 几次测试下 ： <a href="http://localhost/consumer/payment/zipkin">http://localhost/consumer/payment/zipkin</a></p><h3 id="⑤-打开浏览器访问：http-localhost-9411"><a href="#⑤-打开浏览器访问：http-localhost-9411" class="headerlink" title="⑤ 打开浏览器访问：http:localhost:9411"></a>⑤ 打开浏览器访问：http:localhost:9411</h3><blockquote><p><strong>会出现以下界面</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201023125052.png" alt="image-20201023125051624"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201023125203.png" alt="image-20201023125202606"></p><blockquote><p><strong>查看依赖关系</strong></p></blockquote><p><strong>原理</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201023125238.png" alt="image-20201023125237541"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Stream 消息驱动</title>
      <link href="posts/1677637013/"/>
      <url>posts/1677637013/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV18E411x7eT?from=search&seid=4388336378730572330">博客学习参考视频</a></p><h2 id="一、消息驱动概述"><a href="#一、消息驱动概述" class="headerlink" title="一、消息驱动概述"></a>一、消息驱动概述</h2><h3 id="①-是什么"><a href="#①-是什么" class="headerlink" title="① 是什么"></a>① 是什么</h3><p>​ 一句话： 屏蔽底层消息中间件的差异，降低切换版本，统一消息的编程模型</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201021225211.png" alt="image-20201021225204369"></p><p><strong>官网</strong></p><ol><li><p><a href="https://spring.io/projects/spring-cloud-stream#overview">https://spring.io/projects/spring-cloud-stream#overview</a></p><p>Spring Cloud Stream 是用于构建与共享 消息传递系统 连接的高度可伸缩的事件驱动微服务框架，该框架提供一个灵活的编程模型，它建立在 spring 的基础上，包括支持持久化的发布/订阅、消费以及分区 这三个核心概念</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201021230207.png" alt="image-20201021230206112"></p><ol start="2"><li><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.1.RELEASE/reference/html/">https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.1.RELEASE/reference/html/ </a></li><li>Spring Cloud Stream 中 文 指 导 手 册 ：<a href="https://m.wang1314.com/doc/webapp/topic/20971999.html">https://m.wang1314.com/doc/webapp/topic/20971999.html</a></li></ol><h3 id="②-设计思想"><a href="#②-设计思想" class="headerlink" title="② 设计思想"></a>② 设计思想</h3><blockquote><p><strong>标准 MQ</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201021230553.png" alt="image-20201021230552252"></p><ol><li> 生产者/消费者 之间靠消息媒介传递消息内容 – Message</li><li> 消息必须走特定的通道 – 消息通道 MessageChannel</li><li> 消息通道里的消息如何被消费呢，谁负责处理 – 消息通道 MessageChannel 的子接口 SubscribaleChannel， 由 MessageHandle 消息处理器订阅</li></ol><blockquote><p><strong>为什么用 Cloud Stream</strong></p></blockquote><ol><li>比方说我们用到的了 RabbitMQ 和 Kafka，由于这两个消息中间件的架构上的不同，像 RabbitMQ 有 exchange, kafka 有 Topic 和 Partitions 分区</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201021231226.png" alt="image-20201021231225210"></p><ol start="2"><li>这些中间件的差异性导致我们实际项目开发中会造成一定困扰， 我们如果用了两个消息队列的其中一种， 后面的业务需求，我们想往另外一种消息队列进行迁移， 这时候无疑就是一个灾难性的， 一大堆东西都要中心推倒重新做， 因为他跟我们的系统耦合了， 这时候 springcloud Stream 给我们提供了一种解耦合的方式。</li><li>stream 凭什么可以统一底层差异 。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201021231416.png" alt="image-20201021231415175"></p><p>4.<strong>Binder</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201021231503.png" alt="image-20201021231503099"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201021231647.png" alt="image-20201021231646648"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201021231712.png" alt="image-20201021231711183"></p><ul><li>INPUT 对应消费者</li><li>OUTPUT 对应于生产者</li></ul><blockquote><p><strong>Stream 中的消息通信方式遵循了发布-订阅模式</strong></p></blockquote><ol><li>Topic 主题进行广播</li></ol><ul><li>在 RabbitMQ 就是 Exchange</li><li>在 Kafka 中就是 Topic</li></ul><h3 id="③-Spring-Cloud-Stream-标准流程套路"><a href="#③-Spring-Cloud-Stream-标准流程套路" class="headerlink" title="③ Spring Cloud Stream 标准流程套路"></a>③ Spring Cloud Stream 标准流程套路</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201021232144.png" alt="image-20201021232144095"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201021232153.png" alt="image-20201021232152904"></p><ol><li><p>Binder：很方便的连接中间件，屏蔽差异</p></li><li><p>Channel： 通道，是队列 Query 的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过对 Channel 对队列进行配置</p></li><li><p>Source 和 Sink： 简答的可理解为参照对象是 Spring Cloud Stream 自身，从 Stream 发布消息就是输出，接收消息就是输入</p></li></ol><h3 id="④-编码-API-和常用注解"><a href="#④-编码-API-和常用注解" class="headerlink" title="④ 编码 API 和常用注解"></a>④ 编码 API 和常用注解</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201021232603.png" alt="image-20201021232602501"></p><h2 id="二、案例说明"><a href="#二、案例说明" class="headerlink" title="二、案例说明"></a>二、案例说明</h2><h3 id="①-RabbitaMQ-环境已经-OK"><a href="#①-RabbitaMQ-环境已经-OK" class="headerlink" title="① RabbitaMQ 环境已经 OK"></a>① RabbitaMQ 环境已经 OK</h3><p>​ <a href="https://oy6090.top/2020/10011634411798.html">请参考这篇博客： SpringBoot 与消息</a></p><h3 id="②-工程中新建三个子模块"><a href="#②-工程中新建三个子模块" class="headerlink" title="② 工程中新建三个子模块"></a>② 工程中新建三个子模块</h3><ul><li>cloud-stream-rabbitmq-provider8801,作为生产者进行发消息模块</li><li>cloud-stream-rabbitmq-consumer8802,作为消息接收模块</li><li>cloud-stream-rabbitmq-consumer8803,作为消息接收模块</li></ul><h2 id="三、消息驱动之生产者"><a href="#三、消息驱动之生产者" class="headerlink" title="三、消息驱动之生产者"></a>三、消息驱动之生产者</h2><blockquote><p><strong>新建 Module： cloud-stream-rabbitmq-provider8801</strong></p></blockquote><blockquote><p><strong>POM</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-stream-rabbitmq-provider8801<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--基础配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>YML</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment"># 设置rabbitmq的相关的环境配置</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="number">116.63</span><span class="number">.177</span><span class="number">.72</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">        <span class="attr">output:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">send-8801.com</span> <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>主启动类</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamMQMain8801</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(StreamMQMain8801.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>业务类</strong></p></blockquote><p><strong>发消息接口：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMessageProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>发送消息接口实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableBinding(Source.class)</span> <span class="comment">// 定义消息的推送管道</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessionProvicerImpl</span> <span class="keyword">implements</span> <span class="title">IMessageProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output; <span class="comment">// 消息发送管道</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String serial = UUID.randomUUID().toString();</span><br><span class="line">        output.send(MessageBuilder.withPayload(serial).build());</span><br><span class="line">        System.out.println(<span class="string">&quot;******serial:&quot;</span> + serial);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Controller</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IMessageProvider messageProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/sendMessage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageProvider.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><ul><li>启动 7001eureka</li><li>启动 rabbitmq <a href="http://localhost:15672/">http://localhost:15672/</a> （自己使用的是 Docker）</li><li>启动 8801 访问： <a href="http://localhost:8801/sendMessage">http://localhost:8801/sendMessage</a></li></ul><p><code>注意</code>：有个大坑,视频里的 application.yml 使用了 spring.cloud.stream.binders.defaultRabbit.environment.spring.rabbitmq.xx</p><p>来配置 rabbitmq 的环境如果你是用的其他服务器上的 rabbitmq，比如我使用的我自己的华为云服务器然后创建 docker 容器来运行</p><p>rabbitmq。按照视频中的配置方式的话，启动时会试图连接两次 rabbitmq 程序第一次试图连接访问的就是 application.yml 中配置</p><p>的地址，此时已经订阅成功了但是程序还会在之后进行第二次连接，此时访问的地址就是 localhost:5672，在我的环境中，我本地</p><p>没有 rabbitmq 环境，所以直接报 IOException 所以，如果是使用的自己的服务器来配置，则需要修改配置文件，将 rabbitmq 的配置</p><p>信息移动到 application.yml 中的 spring 节点下修改后的配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-provider</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">华为云ip</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">output:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">send-8801.com</span> <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure><h2 id="四、消息驱动之消费者"><a href="#四、消息驱动之消费者" class="headerlink" title="四、消息驱动之消费者"></a>四、消息驱动之消费者</h2><blockquote><p>新建 Module</p></blockquote><p>​ cloud-stream-rabbitmq-consumer8802</p><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-stream-rabbitmq-consumer8802<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eure</span></span><br><span class="line"><span class="comment">        ka-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8802</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">华为云ip</span> <span class="string">//</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">        <span class="attr">input:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为对象json，如果是文本则设置“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行 Eureka 注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是 30 秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了 5 秒的间隔（默认是 90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">receive-8802.com</span> <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 访问的路径变为 IP 地址</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamMQMain8802</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(StreamMQMain8802.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.StreamListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.messaging.Sink;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> OY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding(Sink.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveMessageListenerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(Sink.INPUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Message&lt;String&gt; message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 消 费 者 1 号 ， 接 受 ： &quot;</span>+message.getPayload()+<span class="string">&quot;\t port:&quot;</span>+serverPort);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>测试 8801 发送 8802 接收消息：</strong></p></blockquote><p>​ <a href="http://localhost:8801/sendMessage">http://localhost:8801/sendMessage</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201022222157.png" alt="image-20201022222150351"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201022222213.png" alt="image-20201022222211554"></p><h2 id="五、分组消费与持久化"><a href="#五、分组消费与持久化" class="headerlink" title="五、分组消费与持久化"></a>五、分组消费与持久化</h2><h3 id="①-配置-8803"><a href="#①-配置-8803" class="headerlink" title="① 配置 8803"></a>① 配置 8803</h3><blockquote><p><strong>依照 8802， clone 出来一份运行 8803</strong></p></blockquote><p>cloud-stream-rabbitmq-consumer8803</p><blockquote><p><strong>POM</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-stream-rabbitmq-consumer8803<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--基础配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8803</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">116.63</span><span class="number">.177</span><span class="number">.72</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">        <span class="attr">input:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为对象json，如果是文本则设置“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行 Eureka 注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是 30 秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了 5 秒的间隔（默认是 90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">receive-8803.com</span> <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 访问的路径变为 IP 地址</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamMQMain8803</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(StreamMQMain8803.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.StreamListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.messaging.Sink;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> OY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding(Sink.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveMessageListenerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(Sink.INPUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Message&lt;String&gt; message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 消 费 者 2 号 ， 接 受 ： &quot;</span>+message.getPayload()+<span class="string">&quot;\t port:&quot;</span>+serverPort);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②-启动"><a href="#②-启动" class="headerlink" title="② 启动"></a>② 启动</h3><ul><li>RabbitMQ</li><li>7001： 服务注册</li><li>8801： 消息生产</li><li>8802： 消息消费</li><li>8803： 消息消费</li></ul><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201022232930.png" alt="image-20201022232929071" style="zoom:150%;" /><h3 id="③-运行后两个问题"><a href="#③-运行后两个问题" class="headerlink" title="③ 运行后两个问题"></a>③ 运行后两个问题</h3><ol><li>有重复消费问题</li><li>消息持久化问题 、</li></ol><h3 id="④-消费：-目前是-8802-8803-同时都收到了，-存在重复消费问题"><a href="#④-消费：-目前是-8802-8803-同时都收到了，-存在重复消费问题" class="headerlink" title="④ 消费： 目前是 8802/8803 同时都收到了， 存在重复消费问题"></a>④ 消费： 目前是 8802/8803 同时都收到了， 存在重复消费问题</h3><ol><li><a href="http://localhost:8801/sendMessage">http://localhost:8801/sendMessage</a></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201022232703.png" alt="image-20201022232702874"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201022232717.png" alt="image-20201022232716057"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201022232732.png" alt="image-20201022232731143"></p><ol start="2"><li><strong>如何解决</strong>： <code>分组和持久化属性 group </code></li><li>生产实际案例</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201022232844.png" alt="image-20201022232842508"></p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201022232902.png" alt="image-20201022232901129" style="zoom:150%;" /><h3 id="⑤-分组"><a href="#⑤-分组" class="headerlink" title="⑤ 分组"></a>⑤ 分组</h3><p><strong>原理</strong></p><p>​ 微服务应用放置于同一个 group 中，就能保证消息只会被其中一个应用消费一次。不同的组是可以消费的。同一个组内发生的竞争的关系，只有一个可以消费。</p><blockquote><p><strong>8802/8803 都变成不同组， group 两个不同</strong></p></blockquote><ol><li><strong>group</strong>: atguiguA、 atguiguB</li><li><strong>8802 修改 YML</strong></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">group:</span> <span class="string">atguiguA</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201023105918.png" alt="image-20201023105911727"></p><ol start="3"><li><strong>8803 修改 YML</strong></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">group:</span> <span class="string">atguiguB</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201023110001.png" alt="image-20201023110000699"></p><ol start="4"><li><strong>我们自己配置</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201023110456.png" alt="image-20201023110455388"></p><p>​ 分布式微服务应用为了实现高可用和负载均衡，实际上都会户数多个实例，本例启动了两个消费微服务（8802/8803）多数情况，生产者发送消息给某个具体微服务只希望被消费一次，按照上面我们启动两个应用的例子，虽然它们同属一个应用，但是这个消息出现了被重复消费两次的情况。为了解决这个问题，在 Spring Cloud Stream 中提供了<code>消费组</code>的概念。</p><ol start="5"><li><strong>结论： 还是重复消费</strong></li></ol><p>8802/8803 实现了轮询分组， 每次只有一个消费者 8801 模块的发的消息只能被 8802 或 8803 其中一个接收到， 这样避免了重复</p><p>消费 。</p><p><code>8802/8803 都变成相同组， group 两个相同 。</code></p><ol><li>group: atguiguA</li><li>8802 修改 YML</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">group:</span> <span class="string">atguiguA</span></span><br></pre></td></tr></table></figure><ol start="3"><li>8803 修改 YML</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">group:</span> <span class="string">atguiguA</span></span><br></pre></td></tr></table></figure><p><strong>结论</strong>： 同一个组的多个微服务实例， 每次只会有一个拿到</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201023111419.png" alt="image-20201023111418775"></p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201023111428.png" alt="image-20201023111427639" style="zoom:150%;" /><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201023111446.png" alt="image-20201023111445460" style="zoom:150%;" /><h3 id="⑥-持久化"><a href="#⑥-持久化" class="headerlink" title="⑥ 持久化"></a>⑥ 持久化</h3><p>通过上述， 解决了重复消费问题， 再看看持久化，停止 8802/8803 并去除掉 8802 的分组 group:atguiguA，8803 的分组</p><p>group:atguiguA 没有去掉。8801 先发送 4 条信息到 rabbitmq。</p><ul><li>先启动 8802， 无分组属性配置， 后台没有打出来消息</li><li>先启动 8803， 有分组属性配置， 后台打出来了 MQ 上的消息</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201023111850.png" alt="image-20201023111850171"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Alibaba 入门简介</title>
      <link href="posts/80f09d1c/"/>
      <url>posts/80f09d1c/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV18E411x7eT?from=search&seid=4388336378730572330">博客参考学习视频</a></p><h1 id="SpringCloud-Alibaba-入门简介"><a href="#SpringCloud-Alibaba-入门简介" class="headerlink" title="SpringCloud Alibaba 入门简介"></a>SpringCloud Alibaba 入门简介</h1><h2 id="一、-why-会出现-SpringCloud-Alibaba-入门简介"><a href="#一、-why-会出现-SpringCloud-Alibaba-入门简介" class="headerlink" title="一、 why 会出现 SpringCloud Alibaba 入门简介"></a>一、 why 会出现 SpringCloud Alibaba 入门简介</h2><h3 id="①-spring-cloud-Netflix-项目进入维护模式"><a href="#①-spring-cloud-Netflix-项目进入维护模式" class="headerlink" title="① spring cloud  Netflix 项目进入维护模式"></a>① spring cloud  Netflix 项目进入维护模式</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/OY6090/pic@main/img/20201029230453.png" alt="image-20201029230452165"></p><p><strong>说明：</strong></p><p><strong>Spring Cloud Netflix 项目进入维护模式</strong></p><p> 最近，Netflix 正式进入维护阶段模式。自2016年以来， Ribbon已处于类似的状态。虽然Hystrix 和 Raibbon 现处于维护模式，但它们仍在Netflix大规模的部署。</p><p>Hystrix仪表板和涡轮已被Atlas取代。对这些项目的最后承诺分别是2年和4年前。Zuul 1和Archaius 1都已被不向后兼容的更高版本所取代。</p><p>以下Spring Cloud Netflix模块和相应的启动器将进入维护模式：</p><p>spring-cloud-netflix-archaius<br>spring-cloud-netflix-hystrix-contract<br>spring-cloud-netflix-hystrix-dashboard<br>spring-cloud-netflix-hystrix-stream<br>spring-cloud-netflix-hystrix<br>spring-cloud-netflix-ribbon<br>spring-cloud-netflix-turbine-stream<br>spring-cloud-netflix-turbine<br>spring-cloud-netflix-zuul</p><p>这不包括Eureka或并发限制模块。</p><p>什么是维护模式？<br>将模块置于维护模式意味着Spring Cloud团队将不再向该模块添加新功能。我们将修复阻止程序错误和安全性问题，还将考虑并审查社区的一些小请求。</p><h3 id="②-SpringCloud-NetFlix-Projects-Entering-Maintenance-Mode"><a href="#②-SpringCloud-NetFlix-Projects-Entering-Maintenance-Mode" class="headerlink" title="② SpringCloud NetFlix Projects Entering Maintenance Mode"></a>② SpringCloud NetFlix Projects Entering Maintenance Mode</h3><p><strong>什么是维护模式</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201029231530.png" alt="image-20201029231529128"></p><p><strong>进入维护模式意味着什么呢？</strong>  </p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201029231507.png" alt="image-20201029231506078"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201029231748.png" alt="image-20201029231747336"></p><h2 id="二、SpringBoot-alibaba-带来了什么"><a href="#二、SpringBoot-alibaba-带来了什么" class="headerlink" title="二、SpringBoot alibaba 带来了什么"></a>二、SpringBoot alibaba 带来了什么</h2><blockquote><p>是什么</p></blockquote><p><strong>官网</strong>： <a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></p><blockquote><p>能干嘛  </p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201029232013.png" alt="image-20201029232012404"></p><blockquote><p>去哪下  </p></blockquote><p><a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a>  </p><blockquote><p>怎么玩  </p></blockquote><ul><li>Sentinel： 把流量作为切入点， 从流量控制、 熔断降级、 系统负载保护等多个维度保护服务的稳定性。</li><li>Nacos： 一个更易于构建云原生应用的动态服务发现、 配置管理和服务管理平台。</li><li>RocketMQ： 一款开源的分布式消息系统， 基于高可用分布式集群技术， 提供低延时的、 高可靠的消息发布与订阅服务。</li><li>Dubbo： Apache Dubbo™ 是一款高性能 Java RPC 框架。</li><li>Seata： 阿里巴巴开源产品， 一个易于使用的高性能微服务分布式事务解决方案。</li><li>Alibaba Cloud ACM： 一款在分布式架构环境中对应用配置进行集中管理和推送的应用配置中心产品。</li><li>Alibaba Cloud OSS: 阿里云对象存储服务（Object Storage Service， 简称 OSS） ，是阿里云提供的海量、 安全、 低成本、 高可靠的云存储服务。 您可以在任何应用、任何时间、 任何地点存储和访问任意类型的数据。</li><li>Alibaba Cloud SchedulerX: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、 精准、 高可靠、 高可用的定时（基于 Cron 表达式） 任务调度服务。</li><li>Alibaba Cloud SMS: 覆盖全球的短信服务， 友好、 高效、 智能的互联化通讯能力， 帮助企业迅速搭建客户触达通道。  </li></ul><p>SpringCloud alibaba 学习资料获取  </p><h2 id="三、SpringCloud-alibaba-学习资料获取"><a href="#三、SpringCloud-alibaba-学习资料获取" class="headerlink" title="三、SpringCloud alibaba 学习资料获取"></a>三、SpringCloud alibaba 学习资料获取</h2><h3 id="①-官网"><a href="#①-官网" class="headerlink" title="① 官网"></a>① 官网</h3><p><a href="https://spring.io/projects/spring-cloud-alibaba#overview">https://spring.io/projects/spring-cloud-alibaba#overview</a>  </p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201029232939.png" alt="image-20201029232938601"></p><h3 id="②-英文"><a href="#②-英文" class="headerlink" title="② 英文"></a>② 英文</h3><ul><li><a href="https://github.com/alibaba/spring-cloud-alibaba">https://github.com/alibaba/spring-cloud-alibaba</a>  </li><li><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html</a>  </li></ul><h3 id="③-中文"><a href="#③-中文" class="headerlink" title="③ 中文"></a>③ 中文</h3><p>  <a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a>  </p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Bus 消息总线</title>
      <link href="posts/272460835/"/>
      <url>posts/272460835/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV18E411x7eT?from=search&seid=4388336378730572330">博客学习参考视频</a></p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="①-上一讲解的加深和扩充，-一言以蔽之"><a href="#①-上一讲解的加深和扩充，-一言以蔽之" class="headerlink" title="① 上一讲解的加深和扩充， 一言以蔽之"></a>① 上一讲解的加深和扩充， 一言以蔽之</h3><p>​ 分布式自动刷新配置功能，Spring Cloud Bus 配合 Spring Cloud Config 使用可以实现配置的动<br>态刷新。</p><h3 id="②-是什么"><a href="#②-是什么" class="headerlink" title="② 是什么"></a>② 是什么</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201020153328.png" alt="image-20201020153327094"></p><p>Bus 支持两种消息代理： RabbitMQ 和 Kafka</p><h3 id="③-能干嘛"><a href="#③-能干嘛" class="headerlink" title="③ 能干嘛"></a>③ 能干嘛</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201020153358.png" alt="image-20201020153357948"></p><h3 id="④-为何被称为总线"><a href="#④-为何被称为总线" class="headerlink" title="④ 为何被称为总线"></a>④ 为何被称为总线</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201020153421.png" alt="image-20201020153420586"></p><h2 id="二、RabbitMQ-环境配置"><a href="#二、RabbitMQ-环境配置" class="headerlink" title="二、RabbitMQ 环境配置"></a>二、RabbitMQ 环境配置</h2><p>安装采用的是 Linux CentOS7 的 Docker 容器，<a href="https://oy6090.top/2020/10011634411798.html">具体安装请参考这篇博客：https://oy6090.top/2020/10011634411798.html</a></p><blockquote><p>安装完成之后，测试：你的 linux 地址:15672</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201020205515.png" alt="image-20201020205507919"></p><p>输入账号密码并登录: guest guest</p><h2 id="三、SpringCloud-Bus-动态刷新全局广播"><a href="#三、SpringCloud-Bus-动态刷新全局广播" class="headerlink" title="三、SpringCloud Bus 动态刷新全局广播"></a>三、SpringCloud Bus 动态刷新全局广播</h2><h3 id="1-必须先具备良好的-RabbitMQ-环境"><a href="#1-必须先具备良好的-RabbitMQ-环境" class="headerlink" title="1.必须先具备良好的 RabbitMQ 环境"></a>1.必须先具备良好的 RabbitMQ 环境</h3><h3 id="2-演示广播效果，-增加复杂度，-再以-3355-为模板再制作一个-3366"><a href="#2-演示广播效果，-增加复杂度，-再以-3355-为模板再制作一个-3366" class="headerlink" title="2.演示广播效果， 增加复杂度， 再以 3355 为模板再制作一个 3366"></a>2.演示广播效果， 增加复杂度， 再以 3355 为模板再制作一个 3366</h3><blockquote><p>新建： cloud-config-client-3366</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-config-client-3366<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>YML</strong> (<strong>bootstrap.yml</strong>)</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3366</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span> <span class="comment">#分支名称 ,注意最新GitHub对master进行了调整，改为main了。</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientMain3366</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(ConfigClientMain3366.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-设计思想"><a href="#3-设计思想" class="headerlink" title="3.设计思想"></a>3.设计思想</h3><ol><li>利用消息总线触发一个客户端 /bus/refresh , 而刷新所有的客户端的配置</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201020211353.png" alt="image-20201020211346665"></p><p>2.利用消息总线触发一个服务端 ConfigServer 的 /bus/refresh 端点，而刷新所有客户端的配置（更加推荐）</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201020211517.png" alt="image-20201020211514950"></p><p><strong>图二的架构显然更加合适， 图一不适合的原因如下</strong></p><ol><li>打破了微服务的职责单一性，因为微服务本身的业务模块，它本身不应该承担配置刷新职责。</li><li>破坏了微服务个节点的对等性</li><li>有一定的局限性。例如，微服务在迁移时，它的网络地址常常会发生变化，此时如果想要做到自动刷新，那就会增加更多的修改。</li></ol><h3 id="4-给-cloud-config-center-3344-配置中心服务端添加消息总线支持"><a href="#4-给-cloud-config-center-3344-配置中心服务端添加消息总线支持" class="headerlink" title="4.给 cloud-config-center-3344 配置中心服务端添加消息总线支持"></a>4.给 cloud-config-center-3344 配置中心服务端添加消息总线支持</h3><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span>  <span class="string">cloud-config-center</span> <span class="comment">#注册进Eureka服务器的微服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/18731049401/springcloud-config.git</span> <span class="comment">#GitHub上面的git仓库名字</span></span><br><span class="line">        <span class="comment">####搜索目录</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span></span><br><span class="line">      <span class="comment">####读取分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span> <span class="comment"># 注意最新GitHub对master进行了调整，改为main了。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#rabbitmq相关配置</span></span><br><span class="line"> <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##rabbitmq相关配置,暴露bus刷新配置的端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span> <span class="comment">#暴露bus刷新配置的端点</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;bus-refresh&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="5-给-cloud-config-center-3355-客户端添加消息总线支持"><a href="#5-给-cloud-config-center-3355-客户端添加消息总线支持" class="headerlink" title="5.给 cloud-config-center-3355 客户端添加消息总线支持"></a>5.给 cloud-config-center-3355 客户端添加消息总线支持</h3><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址k</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><h3 id="6-给-cloud-config-center-3366-客户端添加消息总线支持"><a href="#6-给-cloud-config-center-3366-客户端添加消息总线支持" class="headerlink" title="6.给 cloud-config-center-3366 客户端添加消息总线支持"></a>6.给 cloud-config-center-3366 客户端添加消息总线支持</h3><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3366</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><h3 id="7-测试"><a href="#7-测试" class="headerlink" title="7.测试"></a>7.测试</h3><ul><li>修改 Github 上配置文件增加版本号</li><li>发送 Post 请求</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201020215951.png" alt="image-20201020215950394"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;http://localhost:3344/actuator/bus-refresh&quot;</span><br></pre></td></tr></table></figure><p><strong>一次发送， 处处生效</strong></p><ul><li><strong>配置中心</strong> <a href="http://config-3344.com/config-dev.yml">http://config-3344.com/config-dev.yml</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201020220829.png" alt="image-20201020220828382"></p><ul><li><strong>客户端</strong> <a href="http://localhost:3355/configInfo">http://localhost:3355/configInfo</a> , <a href="http://localhost:3366/configInfo">http://localhost:3366/configInfo</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201020220843.png" alt="image-20201020220841648"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201020220857.png" alt="image-20201020220855665"></p><p><strong>获取配置信息， 发现都已经刷新了</strong></p><h3 id="8-一次修改，-广播通知，-处处生效"><a href="#8-一次修改，-广播通知，-处处生效" class="headerlink" title="8.一次修改， 广播通知， 处处生效"></a>8.一次修改， 广播通知， 处处生效</h3><h2 id="四、SpringCloud-Bus-动态刷新定点通知"><a href="#四、SpringCloud-Bus-动态刷新定点通知" class="headerlink" title="四、SpringCloud Bus 动态刷新定点通知"></a>四、SpringCloud Bus 动态刷新定点通知</h2><h3 id="1-不想全部通知，-只想定点通知"><a href="#1-不想全部通知，-只想定点通知" class="headerlink" title="1.不想全部通知， 只想定点通知"></a>1.不想全部通知， 只想定点通知</h3><blockquote><p>只通知 3355<br>不通知 3366</p></blockquote><h3 id="2-简单一句话"><a href="#2-简单一句话" class="headerlink" title="2.简单一句话"></a>2.简单一句话</h3><p>指定具体某一个实例生效而不是全部</p><p><code>公 式</code> ： <a href="http://localhost/">http://localhost</a>: 配 置 中 心 的 端 口 号 /actuator/bus-refresh/{destination}</p><p>/bus/refresh 请求不再发送到具体的服务实例上， 而是发给 config server 并通过 destination 参数类指定需要更新配置的服务或实例</p><h3 id="3-案例"><a href="#3-案例" class="headerlink" title="3.案例"></a>3.案例</h3><blockquote><p>我们这里以刷新运行在 3355 端口上的 config-client 为例</p></blockquote><p>只通知 3355,不通知 3366</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http:&#x2F;&#x2F;localhost:3344&#x2F;actuator&#x2F;bus-refresh&#x2F;config-client:3355</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201020220720.png" alt="image-20201020220718869"></p><p>4.通知总结 All</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201020220739.png" alt="image-20201020220737963"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud 分布式配置中心</title>
      <link href="posts/1519064184/"/>
      <url>posts/1519064184/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV18E411x7eT?from=search&seid=4388336378730572330">博客学习参考视频</a></p><h2 id="①-概述"><a href="#①-概述" class="headerlink" title="① 概述"></a>① 概述</h2><h3 id="1-分布式系统面临的配置问题"><a href="#1-分布式系统面临的配置问题" class="headerlink" title="1.分布式系统面临的配置问题"></a>1.分布式系统面临的配置问题</h3><p>​ 微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对小，因此系统中出现大量的服务，由于每个服务都需要配置信息才能运行，所以一套集中式的、动态的配置管理设施是必不可少的。</p><p>​ SpringCloud 提供了 ConfigServer 来解决这个问题，我们每一个微服务自己的带着一个 application.yml， 上百个配置文件的管理…o(╥﹏╥)o</p><h3 id="2-是什么"><a href="#2-是什么" class="headerlink" title="2.是什么"></a>2.是什么</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018232008.png" alt="image-20201018232001880"></p><ul><li><p>是什么<br>SpringCloud Config 为微服务架构中微服务提供了集中化的外部配置支持，配置服务器为各个不同微服务应用的的所有环境提供了一个中心化的外部配置。</p></li><li><p>如何使用</p><p>Spring Cloud 分为服务端和客户端两部分</p><p>服务端也称为分布式配置中心，它是一个独立的微服务应用， 用来连接配置服务器并为客户端提供获取配置信息，加密/ 解密信息等访问接口。</p><p>客户端则是通过制定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取好加载配置信息配置服务器默认采用 git 来存储配置信息，这样就有助于缓解配置惊醒版本管理，并且可以通过 git 客户端工具来方便管理和访问配置内容。</p></li></ul><h3 id="3-能干嘛"><a href="#3-能干嘛" class="headerlink" title="3.能干嘛"></a>3.能干嘛</h3><ul><li>集中管理配置文件</li><li>不同的环境不同配置，动态化的配置更新，分环境部署比如 dev/test/prod/beta/release</li><li>运行期间动态调整配置，不在需要在每个服务部署的机器上编写配置文件，服务回向配置中心统一拉取配置自己的信息</li><li>当配置发生变动时，服务不需要重启即可感知到配置的变化并用新的配置</li><li>将配置信息以 REST 接口的形式暴露， post、curl 访问刷新均可…</li></ul><h3 id="4-与-Github-整合配置"><a href="#4-与-Github-整合配置" class="headerlink" title="4.与 Github 整合配置"></a>4.与 Github 整合配置</h3><p>由于 SpringCloud Config 默认使用 Git 来存储配置文件（也有其他方式，比如支持 svn 和 本地文件，但是推荐的还是 git ,而且使用的是 http/https 访问的形式）</p><h3 id="5-官网"><a href="#5-官网" class="headerlink" title="5.官网"></a>5.官网</h3><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/">https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018232902.png" alt="image-20201018232902083"></p><h2 id="②-Config-服务端配置与测试"><a href="#②-Config-服务端配置与测试" class="headerlink" title="② Config 服务端配置与测试"></a>② Config 服务端配置与测试</h2><h3 id="1-用-你-自-己-的-账-号-在-Github-上-新-建-一-个-名-为-sprincloud-config-的新-Repository"><a href="#1-用-你-自-己-的-账-号-在-Github-上-新-建-一-个-名-为-sprincloud-config-的新-Repository" class="headerlink" title="1.用 你 自 己 的 账 号 在 Github 上 新 建 一 个 名 为 sprincloud-config 的新 Repository"></a>1.用 你 自 己 的 账 号 在 Github 上 新 建 一 个 名 为 sprincloud-config 的新 Repository</h3><h3 id="2-由上一步获得刚新建的-git-地址写你自己的仓库地址"><a href="#2-由上一步获得刚新建的-git-地址写你自己的仓库地址" class="headerlink" title="2.由上一步获得刚新建的 git 地址写你自己的仓库地址"></a>2.由上一步获得刚新建的 git 地址写你自己的仓库地址</h3><h3 id="3-本地硬盘上新建-git-仓库并-clone"><a href="#3-本地硬盘上新建-git-仓库并-clone" class="headerlink" title="3.本地硬盘上新建 git 仓库并 clone"></a>3.本地硬盘上新建 git 仓库并 clone</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018233747.png" alt="image-20201018233746596"></p><ul><li>本地地址： D:\44\SpringCloud2020</li><li>git 命令： git clone xxx</li></ul><h3 id="4-此-时-在-本-地-D-盘-符-下-D-44-SpringCloud2020-springcloud-config"><a href="#4-此-时-在-本-地-D-盘-符-下-D-44-SpringCloud2020-springcloud-config" class="headerlink" title="4.此 时 在 本 地 D 盘 符 下 D:\44\SpringCloud2020\springcloud-config"></a>4.此 时 在 本 地 D 盘 符 下 D:\44\SpringCloud2020\springcloud-config</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018233831.png" alt="image-20201018233830424"></p><p><code>表示多个环境的配置文件,保存格式必须为 UTF-8,如果需要修改， 此处模拟运维人员操作 git 和 g 。</code></p><ol><li><strong>git add</strong></li><li><strong>git commit -m “init yml”</strong></li><li><strong>git push origin master</strong></li></ol><h3 id="5-新建-Module-模块-cloud-config-center-3344-它既为-Cloud-的配置中心模块-cloudConfig-Center"><a href="#5-新建-Module-模块-cloud-config-center-3344-它既为-Cloud-的配置中心模块-cloudConfig-Center" class="headerlink" title="5.新建 Module 模块 cloud-config-center-3344 它既为 Cloud 的配置中心模块 cloudConfig Center"></a>5.新建 Module 模块 cloud-config-center-3344 它既为 Cloud 的配置中心模块 cloudConfig Center</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201019165418.png" alt="image-20201019165411961"></p><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-config-center-3344<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-config-center</span> <span class="comment">#注册进Eureka服务器的微服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/OY6090/sprincloud-config.git</span></span><br><span class="line">          <span class="comment">#GitHub上面的git仓库名字</span></span><br><span class="line">          <span class="comment">####搜索目录</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span></span><br><span class="line">      <span class="comment">####读取分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigCenterMain3344</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(ConfigCenterMain3344.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Windows 下修改 hosts 文件， 增加映射</p></blockquote><p>路径：C:\WINDOWS\System32\drivers\etc</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201019170451.png" alt="image-20201019170450212"></p><blockquote><p>测试通过 Config 微服务是否可以从 Github 上获取配置内容</p></blockquote><ol><li>启动微服务 3344</li><li><a href="http://config-3344.com:3344/main/config-dev.yml">http://config-3344.com:3344/main/config-dev.yml</a></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201019171233.png" alt="image-20201019171232495"></p><h3 id="6-读取配置规则"><a href="#6-读取配置规则" class="headerlink" title="6.读取配置规则"></a>6.读取配置规则</h3><blockquote><ol><li> 官网</li></ol></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201019203903.png" alt="image-20201019203901660"></p><blockquote><ol start="2"><li> /{label}/{application}-{profile}.yml（最推荐使用这种方式）</li></ol></blockquote><p><strong>main(maste) 分支</strong></p><ol><li><a href="http://config-3344.com:3344/main/config-dev.yml">http://config-3344.com:3344/main/config-dev.yml</a></li><li><a href="http://config-3344.com:3344/main/config-test.yml">http://config-3344.com:3344/main/config-test.yml</a></li><li><a href="http://config-3344.com:3344/main/config-prod.yml">http://config-3344.com:3344/main/config-prod.yml</a></li></ol><p><strong>dev 分支</strong></p><ol><li><a href="http://config-3344.com:3344/dev/config-dev.yml">http://config-3344.com:3344/dev/config-dev.yml</a></li><li><a href="http://config-3344.com:3344/dev/config-test.yml">http://config-3344.com:3344/dev/config-test.yml</a></li><li><a href="http://config-3344.com:3344/dev/config-prod.yml">http://config-3344.com:3344/dev/config-prod.yml</a></li></ol><blockquote><ol start="3"><li> /{application}-{profile}.yml</li></ol></blockquote><ol><li><a href="http://config-3344.com:3344/config-dev.yml">http://config-3344.com:3344/config-dev.yml</a></li><li><a href="http://config-3344.com:3344/config-test.yml">http://config-3344.com:3344/config-test.yml</a></li><li><a href="http://config-3344.com:3344/config-prod.yml">http://config-3344.com:3344/config-prod.yml</a></li><li><a href="http://config-3344.com:3344/config-xxxx.yml(%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E9%85%8D%E7%BD%AE)">http://config-3344.com:3344/config-xxxx.yml(不存在的配置)</a></li></ol><blockquote><ol start="4"><li> /{application}-{profile}[/{label}]</li></ol></blockquote><ol><li><a href="http://config-3344.com:3344/config/dev/main">http://config-3344.com:3344/config/dev/main</a></li><li><a href="http://config-3344.com:3344/config/test/main">http://config-3344.com:3344/config/test/main</a></li><li><a href="http://config-3344.com:3344/config/prod/main">http://config-3344.com:3344/config/prod/main</a></li></ol><blockquote><ol start="5"><li> 重要配置细节总结</li></ol></blockquote><ul><li><p>/{name}-{profiles}.yml</p></li><li><p>/{label}-{name}-{profiles}.yml</p></li><li><p>label:分支（branch）</p></li><li><p>name:服务名</p></li><li><p>profiles：环境(dev/test/prod)</p></li></ul><p>成功实现了用 SpringCloud Config 通过 GitHub 获取配置信息</p><h2 id="③-Config-客户端配置与测试"><a href="#③-Config-客户端配置与测试" class="headerlink" title="③ Config 客户端配置与测试"></a>③ Config 客户端配置与测试</h2><h3 id="1-新建-cloud-config-client-3355"><a href="#1-新建-cloud-config-client-3355" class="headerlink" title="1. 新建 cloud-config-client-3355"></a>1. 新建 cloud-config-client-3355</h3><h3 id="2-POM"><a href="#2-POM" class="headerlink" title="2.POM"></a>2.POM</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-config-client-3355<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-bootstrap-yml"><a href="#3-bootstrap-yml" class="headerlink" title="3.bootstrap.yml"></a>3.bootstrap.yml</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201019232545.png" alt="image-20201019232544875"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址k</span></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201019232918.png" alt="image-20201019232917919"></p><h3 id="4-修改-config-dev-yml-配置并提交到-GitHub-中，-比如加个变量-age-或者版本号-version"><a href="#4-修改-config-dev-yml-配置并提交到-GitHub-中，-比如加个变量-age-或者版本号-version" class="headerlink" title="4.修改 config-dev.yml 配置并提交到 GitHub 中， 比如加个变量 age 或者版本号 version"></a>4.修改 config-dev.yml 配置并提交到 GitHub 中， 比如加个变量 age 或者版本号 version</h3><h3 id="5-主启动"><a href="#5-主启动" class="headerlink" title="5.主启动"></a>5.主启动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientMain3355</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(ConfigClientMain3355.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-业务类"><a href="#6-业务类" class="headerlink" title="6.业务类"></a>6.业务类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-测试"><a href="#7-测试" class="headerlink" title="7.测试"></a>7.测试</h3><ul><li><strong>启动 Config 配置中心 3344 微服务并自测</strong><ul><li><a href="http://config-3344.com:3344/main/config-dev.yml">http://config-3344.com:3344/main/config-dev.yml</a></li><li><a href="http://config-3344.com:3344/main/config-test.yml">http://config-3344.com:3344/main/config-test.yml</a></li></ul></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201019234731.png" alt="image-20201019234730097"></p><ul><li><strong>启动 3355 作为 Client 准备访问</strong><ul><li><a href="http://localhost:3355/configInfo">http://localhost:3355/configInfo</a></li></ul></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201019234802.png" alt="image-20201019234802075"></p><h3 id="8-成功实现了客户端-3355-访问-SpringCloud-Config3344-通过-GitHub-获取配置信息"><a href="#8-成功实现了客户端-3355-访问-SpringCloud-Config3344-通过-GitHub-获取配置信息" class="headerlink" title="8.成功实现了客户端 3355 访问 SpringCloud Config3344 通过 GitHub 获取配置信息"></a>8.成功实现了客户端 3355 访问 SpringCloud Config3344 通过 GitHub 获取配置信息</h3><h3 id="9-问题随之而来，-分布式配置的动态刷新"><a href="#9-问题随之而来，-分布式配置的动态刷新" class="headerlink" title="9.问题随之而来， 分布式配置的动态刷新"></a>9.问题随之而来， 分布式配置的动态刷新</h3><ol><li> Linux 运维修改 GitHub 上的配置文件内容做调整</li><li> 刷新 3344， 发现 ConfigServer 配置中心立刻响应</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201019235105.png" alt="image-20201019235104513"></p><ol start="3"><li><p>刷新 3355， 发现 ConfigServer 客户端没有任何响应</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201019235128.png" alt="image-20201019235127413"></p></li><li><p>3355 没有变化除非自己重启或者重新加载</p></li><li><p>难道每次运维修改配置文件， 客户端都需要重启？ ？ 噩梦</p></li></ol><h2 id="④-Config-客户端之动态刷新"><a href="#④-Config-客户端之动态刷新" class="headerlink" title="④ Config 客户端之动态刷新"></a>④ Config 客户端之动态刷新</h2><h3 id="1-避免每次更新配置都要重启"><a href="#1-避免每次更新配置都要重启" class="headerlink" title="1.避免每次更新配置都要重启"></a>1.避免每次更新配置都要重启</h3><h3 id="2-动态刷新"><a href="#2-动态刷新" class="headerlink" title="2.动态刷新"></a>2.动态刷新</h3><blockquote><p>修改 3355 模块， POM 文件引入 actuator 监控</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>修改 YML， 暴露监控端口</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址k</span></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>@RefreshScope 业务类 Controller 修改</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时修改 github—&gt; 3344 —&gt; 3355</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201020150347.png" alt="image-20201020150340427"></p><ol><li><a href="http://localhost:3355/configInfo">http://localhost:3355/configInfo</a></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201020150355.png" alt="image-20201020150354347"></p><ol><li> 3355 改变了没有？ ？ ？ 没有改变， (┬＿┬)</li><li> 需要运维人员发送 Post 请求刷新 3355</li><li> 必 须 是 Post 请 求 ： curl -X POST “<a href="http://localhost:3355/actuator/refresh&quot;">http://localhost:3355/actuator/refresh&quot;</a></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201020150557.png" alt="image-20201020150556178"></p><ol start="4"><li>再次： <a href="http://localhost:3355/configInfo">http://localhost:3355/configInfo</a> ,成功实现了客户端 3355 刷新到最新配置内容,避免了服务的重启</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201020150640.png" alt="image-20201020150639862"></p><h3 id="3-想想还有什么问题？"><a href="#3-想想还有什么问题？" class="headerlink" title="3.想想还有什么问题？"></a>3.想想还有什么问题？</h3><p>​ 假如有多个微服务客户端 3355/3366/3377。。。。每个微服务都要执行一次 post 请求， 手动刷新？可否广播， 一次通知， 处处生效？我们想大范围的自动刷新， 求方法———–结合消息总线 Bus 解决以上问题 。</p><p>​ 具体请参考下篇博客：<a href="https://oy6090.top/2020/1020272460835.html">SpringCloud Bus 消息总线: https://oy6090.top/2020/1020272460835.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud 服务网关</title>
      <link href="posts/3556927238/"/>
      <url>posts/3556927238/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV18E411x7eT?from=search&seid=4388336378730572330">博客学习参考视频</a></p><h2 id="GateWay-新网关"><a href="#GateWay-新网关" class="headerlink" title="GateWay 新网关"></a>GateWay 新网关</h2><h3 id="①-概述简介"><a href="#①-概述简介" class="headerlink" title="① 概述简介"></a>① 概述简介</h3><h4 id="1-官网"><a href="#1-官网" class="headerlink" title="1.官网"></a>1.官网</h4><ul><li><p>上一代网关 zuul 1.X：<a href="https://github.com/Netflix/zuul/wiki">https://github.com/Netflix/zuul/wiki </a></p></li><li><p>当 前 网 关 gateway ：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/</a></p></li></ul><h4 id="2-是什么"><a href="#2-是什么" class="headerlink" title="2.是什么"></a>2.是什么</h4><p><strong>概述：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017231518.png" alt="image-20201017231511015"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017231533.png" alt="image-20201017231529685"></p><p><strong>一句话：</strong></p><ol><li>SpringCloud Getaway 使用的 Webflux 中的 reactor-netty 响应式编程组件，底层使用的 Netty 通讯框架</li><li>源码框架</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017231836.png" alt="image-20201017231835609"></p><h4 id="3-能干嘛"><a href="#3-能干嘛" class="headerlink" title="3.能干嘛"></a>3.能干嘛</h4><ol><li>反向代理</li><li>鉴权</li><li>浏览控制</li><li>熔断</li><li>日志监控</li></ol><p>….</p><h4 id="4-微服务架构中网关在哪里"><a href="#4-微服务架构中网关在哪里" class="headerlink" title="4.微服务架构中网关在哪里"></a>4.微服务架构中网关在哪里</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017232036.png" alt="image-20201017232035683"></p><h4 id="5-有了-Zuul-了怎么又出来了-gateway"><a href="#5-有了-Zuul-了怎么又出来了-gateway" class="headerlink" title="5.有了 Zuul 了怎么又出来了 gateway"></a>5.有了 Zuul 了怎么又出来了 gateway</h4><blockquote><p>我们为什么选择 Gatway?</p></blockquote><ol><li><strong>neflix 不太靠谱， zuul2.0 一直跳票,迟迟不发布</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017232139.png" alt="image-20201017232138919"></p><ol start="2"><li><strong>SpringCloud Gateway 具有如下特性</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017232222.png" alt="image-20201017232221246"></p><ol start="3"><li><strong>SpringCloud Gateway 与 Zuul 的区别</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017232614.png" alt="image-20201017232613951"></p><blockquote><p><strong>Zuul1.x 模型</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017232644.png" alt="image-20201017232643447"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017232656.png" alt="image-20201017232655244"></p><blockquote><p><strong>GateWay 模型</strong></p></blockquote><ol><li>WebFlux 是什么</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017232829.png" alt="image-20201017232828772"></p><h3 id="②-三大核心概念"><a href="#②-三大核心概念" class="headerlink" title="② 三大核心概念"></a>② 三大核心概念</h3><h4 id="1-Route-路由"><a href="#1-Route-路由" class="headerlink" title="1.Route(路由)"></a>1.Route(路由)</h4><p>​ 路由的构建网关的基本模块，它由 ID ，目标 URI ， 一系列的断言和过滤器组成，如果断言为 true 则匹配该路由</p><h4 id="2-Predicate-断言"><a href="#2-Predicate-断言" class="headerlink" title="2. Predicate(断言)"></a>2. Predicate(断言)</h4><p>​ 参考的是 java8 的 java.util.function.Predicate 开发人员可以匹配 HTTP 请求中的所有内容（例如请求头或请求参数），如果请求域断言相匹配则进行路由。</p><h4 id="3-Filter-过滤"><a href="#3-Filter-过滤" class="headerlink" title="3. Filter(过滤)"></a>3. Filter(过滤)</h4><p>​ 指的是 Spring 框架中 GatewayFilter 的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</p><h4 id="4-总体"><a href="#4-总体" class="headerlink" title="4. 总体"></a>4. 总体</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017233554.png" alt="image-20201017233554041"></p><h3 id="③-Gateway-工作流程"><a href="#③-Gateway-工作流程" class="headerlink" title="③ Gateway 工作流程"></a>③ Gateway 工作流程</h3><h4 id="1-官网总结"><a href="#1-官网总结" class="headerlink" title="1.官网总结"></a>1.官网总结</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017233731.png" alt="image-20201017233730406"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017233741.png" alt="image-20201017233740334"></p><h4 id="2-核心逻辑"><a href="#2-核心逻辑" class="headerlink" title="2.核心逻辑"></a>2.核心逻辑</h4><p>​ 路由转发+执行过滤器链</p><h3 id="④-入门配置"><a href="#④-入门配置" class="headerlink" title="④ 入门配置"></a>④ 入门配置</h3><blockquote><p>新建 Module: cloud-gateway-gateway9527</p></blockquote><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-gateway-gateway9527<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--新增 gateway--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#服务提供者provider注册进eureka服务列表中</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure><blockquote><p>业务类 （无）</p></blockquote><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GateWayMain9527</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(GateWayMain9527.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>**9527 网关如何做路由映射那？ ？ ？ **</p></blockquote><ul><li>cloud-provider-payment8001 看看 controller 的访问地址<ul><li>get</li><li>lb</li></ul></li><li>我们目前不想暴露 8001 端口，希望在 8001 外面套一层 9527</li></ul><blockquote><p><strong>YML 新增网关配置</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启从注册中心动态创建路由的功能，利用微服务名称j进行路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_route</span> <span class="comment"># 路由的id,没有规定规则但要求唯一,建议配合服务名</span></span><br><span class="line">          <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span> <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_route2</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="string">Path=/payment/lb/**</span> <span class="comment">#断言,路径相匹配的进行路由</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#服务提供者provider注册进eureka服务列表中</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>测试</strong></p></blockquote><ul><li>启动 7001</li><li>启动 8001： cloud-provider-payment8001</li><li>启动 8001： cloud-provider-payment8001</li></ul><p><strong>访问说明</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017235434.png" alt="image-20201017235433754"></p><ul><li>添加网关前： <a href="http://localhost:8001/payment/get/1">http://localhost:8001/payment/get/1</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017235713.png" alt="image-20201017235712871"></p><ul><li>添加网关后： <a href="http://localhost:9527/payment/get/1">http://localhost:9527/payment/get/1</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017235747.png" alt="image-20201017235746463"></p><blockquote><p><strong>YML 配置说明</strong></p></blockquote><p><strong>Gateway 网关路由有两种配置方式</strong></p><ol><li>在配置文件 yml 中配置 (见前面步骤)</li><li>代码中注入 RouteLocator 的 Bean</li></ol><p><strong>官网案例</strong> ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017235948.png" alt="image-20201017235947408"></p><p><strong>自己写一个</strong>：<br>业 务 需 求 ： 通 过 9527 网 关 访 问 到 外 网 的 百 度 新 闻 网 址 <a href="http://news.baidu.com/guoji">http://news.baidu.com/guoji</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018001053.png" alt="image-20201018001052144"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置网关</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> OY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GateWayConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span></span>&#123;</span><br><span class="line">        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();</span><br><span class="line">        routes.route(<span class="string">&quot;path_rote_oy&quot;</span>, r -&gt; r.path(<span class="string">&quot;/guonei&quot;</span>).uri(<span class="string">&quot;http://news.baidu.com/guonei&quot;</span>)).build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator2</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span></span>&#123;</span><br><span class="line">        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();</span><br><span class="line">        routes.route(<span class="string">&quot;path_rote_oy2&quot;</span>, r -&gt; r.path(<span class="string">&quot;/guoji&quot;</span>).uri(<span class="string">&quot;http://news.baidu.com/guoji&quot;</span>)).build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018001207.png" alt="image-20201018001206863"></p><h3 id="⑤-通过服务名实现动态"><a href="#⑤-通过服务名实现动态" class="headerlink" title="⑤ 通过服务名实现动态"></a>⑤ 通过服务名实现动态</h3><p>​ 默认情况下 Gateway 会根据注册中心的服务列表，以注册中心上微服务名为路径路径创建动态路由创建动态路由进行转发，从而实现动态路由的功能</p><blockquote><p>启动： 一个 eureka7001 + 两个服务提供者 8001/8002</p></blockquote><blockquote><p>POM</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018101514.png" alt="image-20201018101507557"></p><blockquote><p>YML: uri: lb//cloud-payment-service</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启从注册中心动态创建路由的功能，利用微服务名称j进行路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_route</span> <span class="comment"># 路由的id,没有规定规则但要求唯一,建议配合服务名</span></span><br><span class="line">          <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb//cloud-payment-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span> <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_route2</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb//cloud-payment-service</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="string">Path=/payment/lb/**</span> <span class="comment">#断言,路径相匹配的进行路由</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#服务提供者provider注册进eureka服务列表中</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure><p><code>需要注意的是uri 的协议为 lb ，表示启用 Gateway 负载均衡功能。</code></p><p><code>lb ://serviceName 是 spring cloud gateway 在微服务中自动为我们创建负载均衡 uri。</code></p><blockquote><p><strong>测试：</strong></p></blockquote><p>​ <a href="http://localhost:9527/payment/lb%EF%BC%9A">http://localhost:9527/payment/lb：</a> 8001/8002 两个端口切换</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018102216.png" alt="image-20201018102215917"></p><h3 id="⑥-Predicate-的使用"><a href="#⑥-Predicate-的使用" class="headerlink" title="⑥ Predicate 的使用"></a>⑥ Predicate 的使用</h3><h4 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1.是什么"></a>1.是什么</h4><p>启动我们的 gateway9527</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018102537.png" alt="image-20201018102438957"></p><h4 id="2-Route-Predicate-Factories-是什么"><a href="#2-Route-Predicate-Factories-是什么" class="headerlink" title="2.Route Predicate Factories 是什么?"></a>2.Route Predicate Factories 是什么?</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018102820.png" alt="image-20201018102818983"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018102834.png" alt="image-20201018102833101"></p><h4 id="3-常用的-Route-Predicate"><a href="#3-常用的-Route-Predicate" class="headerlink" title="3.常用的 Route Predicate"></a>3.常用的 Route Predicate</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018102918.png" alt="image-20201018102917173"></p><blockquote><ol><li> <strong>After Route Predicate</strong></li></ol></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018103102.png"></p><p><code>问题一</code>：上述这个 After 好懂，这个时间时间串串，有点不能理解。使用以下方式即可解开谜团。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ZonedDateTime zbj = ZonedDateTime.now(); <span class="comment">// 默认时区</span></span><br><span class="line">    System.out.println(zbj); <span class="comment">// 2020-10-18T10:35:52.127+08:00[Asia/Shanghai]</span></span><br><span class="line"></span><br><span class="line">    ZonedDateTime zny = ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/Denver&quot;</span>));<span class="comment">// 用指定时区获取当前时间</span></span><br><span class="line">    System.out.println(zny); <span class="comment">// 2020-10-17T20:38:37.693-06:00[America/Denver]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018103915.png" alt="image-20201018103914482"></p><p><strong>YML</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- After=2020-10-18T10:38:37.692+08:00[Asia/Shanghai]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018104344.png" alt="image-20201018104343943"></p><blockquote><ol start="2"><li> <strong>Before Route Predicate</strong></li></ol></blockquote><p><strong>YML</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">After=2020-10-18T10:38:37.692+08:00[Asia/Shanghai]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Before=2020-10-18T10:38:37.692+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li> <strong>Between Route Predicate</strong></li></ol></blockquote><p><strong>YML</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Between=2020-10-18T10:38:37.692+08:00[Asia/Shanghai],2020-10-19T10:38:37.692+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li> <strong>Cookie Route Predicate</strong></li></ol></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018104651.png" alt="image-20201018104650868"></p><p><strong>1) 不带 cookies 访问</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018105548.png" alt="image-20201018105547760"></p><p><strong>2) 带上 cookies 访问</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018105958.png" alt="image-20201018105958123"></p><p>加 入 curl 返 回 中 文 乱 码 ：<a href="https://blog.csdn.net/leedee/article/details/82685636">https://blog.csdn.net/leedee/article/details/82685636</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http:<span class="comment">//localhost:9527/payment/lb --cookie &quot;username=oy&quot;</span></span><br></pre></td></tr></table></figure><p><strong>3）YML</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Cookie=username,oy</span> <span class="comment">#并且Cookie是username=oy才能访问</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018110150.png" alt="image-20201018110149006"></p><blockquote><ol start="5"><li> <strong>Header Route Predicate</strong></li></ol></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018110243.png" alt="image-20201018110242173"></p><p><strong>YML</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span> <span class="comment">#请求头中要有X-Request-Id属性并且值为整数的正则表达式</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018110828.png" alt="image-20201018110827869"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018110354.png" alt="image-20201018110353776"></p><blockquote><ol start="6"><li> <strong>Host Route Predicate</strong></li></ol></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018110919.png" alt="image-20201018110918455"></p><p><strong>YML</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Host=**.somehost.org,**.anotherhost.org</span></span><br></pre></td></tr></table></figure><blockquote><ol start="7"><li> <strong>Method Route Predicate</strong></li></ol></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018111408.png" alt="image-20201018111406971"></p><p><strong>YML</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Method=GET,POST</span></span><br></pre></td></tr></table></figure><blockquote><ol start="8"><li> <strong>Path Route Predicate</strong></li></ol></blockquote><p><strong>YML</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Path=/red/&#123;segment&#125;,/blue/&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><blockquote><ol start="9"><li> <strong>Query Route Predicate</strong></li></ol></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018111514.png" alt="image-20201018111513538"></p><p><strong>YML</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Query=username,</span> <span class="string">\d+</span> <span class="comment">#要有参数名称并且是正整数才能路由</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018111708.png" alt="image-20201018111707585"></p><p><strong>测试：</strong> <a href="http://localhost:9527/payment/lb?username=1">http://localhost:9527/payment/lb?username=1</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018111749.png" alt="image-20201018111747994"></p><blockquote><ol start="10"><li><strong>小总结</strong></li></ol></blockquote><p><strong>All</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018111959.png" alt="image-20201018111959191"></p><p>​ <code>说白了,Predicate就是为了实现一组匹配规则, 让请求过来找到对应的Route进行处理</code></p><h3 id="⑦-Filter-的使用"><a href="#⑦-Filter-的使用" class="headerlink" title="⑦ Filter 的使用"></a>⑦ Filter 的使用</h3><h4 id="1-是什么-1"><a href="#1-是什么-1" class="headerlink" title="1.是什么"></a>1.是什么</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018112247.png" alt="image-20201018112246481"></p><h4 id="2-Spring-Cloud-Gateway-的-Filter"><a href="#2-Spring-Cloud-Gateway-的-Filter" class="headerlink" title="2.Spring Cloud Gateway 的 Filter"></a>2.Spring Cloud Gateway 的 Filter</h4><ul><li><strong>生命周期</strong>， Only Two<ul><li>Pre : 在业务逻辑之前</li><li>Post: 在业务逻辑之后</li></ul></li><li><strong>种类</strong>： Only Two<ul><li>GatewayFilter： 单一</li><li>GlobalFilter: 全局</li></ul></li></ul><h4 id="3-常用的-GatewayFilter"><a href="#3-常用的-GatewayFilter" class="headerlink" title="3.常用的 GatewayFilter"></a>3.常用的 GatewayFilter</h4><blockquote><p><strong>AddRequestParameter</strong></p></blockquote><p><strong>YML</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018112722.png" alt="image-20201018112722005"></p><h4 id="4-自定义过滤器"><a href="#4-自定义过滤器" class="headerlink" title="4.自定义过滤器"></a>4.自定义过滤器</h4><blockquote><p><strong>自定义全局 GlobalFilter</strong></p></blockquote><ol><li><strong>两个主要接口介绍</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impiemerts GlobalFilter ， Ordered</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>能干嘛</strong></li></ol><ul><li>全局日志记录</li><li>统一网关鉴权</li><li>……</li></ul><ol start="3"><li><strong>案例代码</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogGateWayFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;*********come in MyLogGateWayFilter: &quot;</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        String username = exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="keyword">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;*****用户名为 NUll 非法用户.(┬＿┬)&quot;</span>);</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);<span class="comment">// 给人家一个回应</span></span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>测试</strong></p></blockquote><p><strong>启动</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018114818.png" alt="image-20201018114817482"></p><ul><li><p>正确： <a href="http://localhost:9527/payment/lb?username=1">http://localhost:9527/payment/lb?username=1</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018114842.png" alt="image-20201018114840709"></p></li><li><p>错误 ： <a href="http://localhost:9527/payment/lb?usernameaa=1">http://localhost:9527/payment/lb?usernameaa=1</a></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201018114923.png" alt="image-20201018114922381"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud 服务降级</title>
      <link href="posts/2164673978/"/>
      <url>posts/2164673978/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV18E411x7eT?from=search&seid=4388336378730572330">博客学习参考视频</a></p><h2 id="一、Hystrix-断路器"><a href="#一、Hystrix-断路器" class="headerlink" title="一、Hystrix 断路器"></a>一、Hystrix 断路器</h2><h3 id="①-概述"><a href="#①-概述" class="headerlink" title="① 概述"></a>① 概述</h3><h4 id="1-分布式系统面临的问题"><a href="#1-分布式系统面临的问题" class="headerlink" title="1.分布式系统面临的问题"></a>1.分布式系统面临的问题</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016002520.png" alt="image-20201016002519013"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016002531.png" alt="image-20201016002530999"></p><h4 id="2-是什么"><a href="#2-是什么" class="headerlink" title="2.是什么"></a>2.是什么</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016002600.png" alt="image-20201016002559663"></p><h4 id="3-能干嘛"><a href="#3-能干嘛" class="headerlink" title="3.能干嘛"></a>3.能干嘛</h4><ul><li>服务降级</li><li>服务熔断</li><li>接近实时的监控</li></ul><h4 id="4-官-网-资-料"><a href="#4-官-网-资-料" class="headerlink" title="4.官 网 资 料"></a>4.官 网 资 料</h4><p>​ <a href="https://github.com/Netflix/Hystrix/wiki/How-To-Use">https://github.com/Netflix/Hystrix/wiki/How-To-Use</a></p><h4 id="5-Hystrix-官宣，停更进维"><a href="#5-Hystrix-官宣，停更进维" class="headerlink" title="5.Hystrix 官宣，停更进维"></a>5.Hystrix 官宣，停更进维</h4><p>​ <a href="https://github.com/Netflix/Hystrix">https://github.com/Netflix/Hystrix</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016003155.png" alt="image-20201016003154348"></p><ul><li>不在修复 Bug</li><li>不在接收合并请求</li><li>不在发布新版本</li></ul><h3 id="②-Hystrix-重要概念"><a href="#②-Hystrix-重要概念" class="headerlink" title="② Hystrix 重要概念"></a>② Hystrix 重要概念</h3><h4 id="1-服务降级"><a href="#1-服务降级" class="headerlink" title="1.服务降级"></a>1.服务降级</h4><p>服务器忙， 请稍候再试， 不让客户端等待并立刻返回一个友好提示， fallback</p><p>哪些情况会触发降级： 1 程序运行异常、 2 超时、 3 服务熔断触发服务降级 、4 线程池/信号量打满也会导致服务降级</p><h4 id="2-服务熔断"><a href="#2-服务熔断" class="headerlink" title="2.服务熔断"></a>2.服务熔断</h4><p>​ 类比保险丝达到最大服务访问后， 直接拒绝访问， 拉闸限电， 然后调用服务降级的方法并返回友好提示，就是保险丝。</p><p>​ <strong>服务的降级</strong>-&gt;<strong>进而熔断</strong>-&gt;<strong>恢复调用链路</strong></p><h4 id="3-服务限流"><a href="#3-服务限流" class="headerlink" title="3.服务限流"></a>3.服务限流</h4><p>​ 秒杀高并发等操作， 严禁一窝蜂的过来拥挤， 大家排队， 一秒钟 N 个， 有序进行</p><h3 id="③-hystrix-案例"><a href="#③-hystrix-案例" class="headerlink" title="③ hystrix 案例"></a>③ hystrix 案例</h3><h4 id="1-构建"><a href="#1-构建" class="headerlink" title="1.构建"></a>1.构建</h4><blockquote><p>新建 cloud-provider-hystrix-payment8001</p></blockquote><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-hystrix-payment8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--新增 hystrix--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment">#表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">#表名自己就是注册中心，职责维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(PaymentHystrixMain8001.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类</p></blockquote><p>​ Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;paymentInfo_OK,id:&quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;O(∩_∩)O哈哈~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 失败</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timeNumber  = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(timeNumber);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span> + Thread.currentThread().getName()+ <span class="string">&quot;paymentInfo_TimeOut,id:&quot;</span> + id +<span class="string">&quot;\t&quot;</span> +<span class="string">&quot;┭┮﹏┭┮&quot;</span>+<span class="string">&quot;耗时(秒)&quot;</span> + timeNumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService  paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">&quot;*************result:&quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_TimeOut(id);</span><br><span class="line">        log.info(<span class="string">&quot;******result:&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试：</p></blockquote><ul><li><p>先启动 eureka 7001, 启动 cloud-provider-hystrix-payment8001</p></li><li><p>访问：</p><p><a href="http://localhost:8001/payment/hystrix/ok/1">http://localhost:8001/payment/hystrix/ok/1</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016152410.png" alt="image-20201016152409512"></p></li><li><p>在测试访问：<a href="http://localhost:8001/payment/hystrix/timeout/1%EF%BC%8C%E6%AF%8F">http://localhost:8001/payment/hystrix/timeout/1，每</a> 次 调 用 耗 费 3 秒 钟</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016152508.png" alt="image-20201016152506946"></p><ul><li>上述 module 均 OK，以上述为根基平台，从<strong>正确</strong>-&gt;<strong>错误</strong>-&gt;<strong>降级熔断</strong>-&gt;<strong>恢复</strong></li></ul><h4 id="2-高并发测试"><a href="#2-高并发测试" class="headerlink" title="2.高并发测试"></a>2.高并发测试</h4><blockquote><p><strong>Jmeter 压测测试</strong></p></blockquote><p>​ 开 启 Jmeter ， 来 20000 个 并 发 压 死 8001 ， 20000 个 请 求 都 去 访 问 paymentInfo_TimeOut 服务。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016154614.png" alt="image-20201016154613777"></p><ul><li><p>再来一个访问：<a href="http://localhost:8001/payment/hystrix/ok/1%EF%BC%8C">http://localhost:8001/payment/hystrix/ok/1，</a> <a href="http://localhost:8001/payment/hystrix/timeout/1">http://localhost:8001/payment/hystrix/timeout/1</a></p><p>看演示结果： 两个都在自己转圈圈</p></li><li><p>为什么会被卡死： tomcat 的默认的工作线程数被打满了。没有多余的线程来分解压力和处理</p></li></ul><h4 id="3-Jmeter-压测结论"><a href="#3-Jmeter-压测结论" class="headerlink" title="3.Jmeter 压测结论"></a>3.Jmeter 压测结论</h4><p>​ 上面还是服务提供者 8001 自己测试， 假如此时外部的消费者 80 也来访问，那消费者只能干等， 最终导致消费端 80 不满意， 服务端 8001 直接被拖死</p><h4 id="4-看热闹不嫌弃事大，-80-新建加入"><a href="#4-看热闹不嫌弃事大，-80-新建加入" class="headerlink" title="4.看热闹不嫌弃事大， 80 新建加入"></a>4.看热闹不嫌弃事大， 80 新建加入</h4><blockquote><p>新建 cloud-consumer-feign-hystrix-order80</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016155322.png" alt="image-20201016155321248"></p><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-feign-hystrix-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--新增 hystrix--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(PaymentHystrixMain8001.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类</p></blockquote><p><strong>PaymentHystrixService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> OY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正常访问</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时访问</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHyrixController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正常访问</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentHystrixService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">&quot;*****result:&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时访问</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentHystrixService.paymentInfo_TimeOut(id);</span><br><span class="line">        log.info(<span class="string">&quot;*****result:&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>正常测试</p></blockquote><ul><li><a href="http://localhost/consumer/payment/hystrix/ok/1">http://localhost/consumer/payment/hystrix/ok/1</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016163217.png" alt="image-20201016163217022"></p><ul><li><a href="http://localhost/consumer/payment/hystrix/timeout/1">http://localhost/consumer/payment/hystrix/timeout/1</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016163242.png" alt="image-20201016163241381"></p><p><code>注意</code>：测试这个时有可能会报超时错误，如果出现错误只需要在配置文件中配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment"># 指的是建立连接所用的时间,适用于网络状态正常的情况下,两端连接所用的时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="comment"># 指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016163422.png" alt="image-20201016163421515"></p><blockquote><p>高并发测试</p></blockquote><ul><li><p>2W 个线程压 8001，消费端 80 微服务再去访问正常的 OK 微服务 8001 地址</p><p><a href="http://localhost/consumer/payment/hystrix/timeout/1">http://localhost/consumer/payment/hystrix/timeout/1</a></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016163649.png" alt="image-20201016163648968"></p><p>​ 消费者 80， 要么转圈圈等待、 要么消费端报超时错误</p><h4 id="5-故障现象和导致原因"><a href="#5-故障现象和导致原因" class="headerlink" title="5.故障现象和导致原因"></a>5.故障现象和导致原因</h4><ul><li>8001 同一层次的接口服务被困死，因为 tomcat 线程里面的工作线程已经被挤占完毕</li><li>80 此时调用 8001，客户端访问的响应缓慢，转圈圈</li></ul><h4 id="6-上诉结论"><a href="#6-上诉结论" class="headerlink" title="6.上诉结论"></a>6.上诉结论</h4><p>​ 正因为有上述故障或不佳表现， 才有我们的降级/容错/限流等技术诞生</p><h4 id="7-如何解决？解决的要求"><a href="#7-如何解决？解决的要求" class="headerlink" title="7.如何解决？解决的要求"></a>7.如何解决？解决的要求</h4><ul><li><p>超时导致服务器变慢（转圈） ： 超时不再等待</p></li><li><p>出错（宕机或程序运行出错） ： 出错要有兜底</p></li></ul><p><strong>解决：</strong></p><ol><li>对方服务（8001） 超时了， 调用者（80） 不能一直卡死等待，必须有服务降级。</li><li>对方服务（8001） down 机了， 调用者（80） 不能一直卡死等待， 必须有服务降级。</li><li>对方服务（8001） OK， 调用者（80） 自己出故障或有自我要求（自己的等待时间小于服务提供者） ， 自己处理降级</li></ol><h3 id="④-服务降级"><a href="#④-服务降级" class="headerlink" title="④ 服务降级"></a>④ 服务降级</h3><h4 id="1-降低配置：-HystrixCommand"><a href="#1-降低配置：-HystrixCommand" class="headerlink" title="1.降低配置： @HystrixCommand"></a>1.降低配置： @HystrixCommand</h4><h4 id="2-8001-先从自身找问题"><a href="#2-8001-先从自身找问题" class="headerlink" title="2.8001 先从自身找问题"></a>2.8001 先从自身找问题</h4><p>​ 置自身调用超时时间的峰值，峰值内可以正常运行，超过了需要有兜底的方法处理，做服务降级 fallback</p><h4 id="3-8001fallback"><a href="#3-8001fallback" class="headerlink" title="3.8001fallback"></a>3.8001fallback</h4><blockquote><p>业务类启用</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016212903.png" alt="image-20201016212902803"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;paymentInfo_OK,id:&quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;O(∩_∩)O哈哈~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时访问，演示降级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeOutHandler&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name =&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value=&quot;3000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timeNumber  = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(timeNumber);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span> + Thread.currentThread().getName()+ <span class="string">&quot;paymentInfo_TimeOut,id:&quot;</span> + id +<span class="string">&quot;\t&quot;</span> +<span class="string">&quot;┭┮﹏┭┮&quot;</span>+<span class="string">&quot;耗时(秒)&quot;</span> + timeNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOutHandler</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;o(╥﹏╥)o 调用支付接口超时异常：\t&quot;</span> + <span class="string">&quot;\t当前线程池名字：&quot;</span> + Thread.currentThread().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016213120.png" alt="image-20201016213119295"></p><blockquote><p><strong>@HystrixCommand</strong>报异常后如何处理</p></blockquote><p>一旦调用服务方法失败并抛出了错误信息后,会自动调用<code>@HystrixCommand</code>标注好的<code>fallbckMethod</code>调用类中的指定方法</p><p><strong>图示</strong>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016214852.png" alt="image-20201016214851342"></p><blockquote><p>主启动类激活： 添加新注解**@EnableCircuitBreaker**</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(PaymentHystrixMain8001.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-80fallback"><a href="#4-80fallback" class="headerlink" title="4.80fallback"></a>4.80fallback</h4><p>80 订单微服务， 也可以更好的保护自己， 自己也依样画葫芦进行客户端降级保护。</p><blockquote><p>题外话</p></blockquote><p><code>切记我 们 自 己 配 置 过 的 热 部 署 方 式 对 java 代 码 的 改 动 明 显 ， 但对@HystrixCommand 内属性的修改建议重启微服务 </code></p><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 如果处理自身的容错就开启。开启方式与生产端不一样。</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016215256.png" alt="image-20201016215256041"></p><blockquote><p>主启动： @EnableHystrix</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixMain80</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(OrderHystrixMain80.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentTimeOutFallbackMethod&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">    @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;15000&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">    String result = paymentHystrixService.paymentInfo_TimeOut(id);</span><br><span class="line">    log.info(<span class="string">&quot;*****result:&quot;</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentTimeOutFallbackMethod</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是消费者80,对方支付系统繁忙请10秒钟后再试或者自己运行出错请检查自己，o(╥﹏╥)o&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-目前方法"><a href="#5-目前方法" class="headerlink" title="5.目前方法"></a>5.目前方法</h4><ul><li>每个业务方法对应一个兜底的方法，代码膨胀</li><li>统一和自定义的需要分开</li></ul><h4 id="6-解决问题"><a href="#6-解决问题" class="headerlink" title="6.解决问题"></a>6.解决问题</h4><blockquote><p><strong>每个方法配置一个？ ？ ？ 膨胀</strong></p></blockquote><ol><li><strong>feign 接口系列</strong></li><li><strong>@DefaultProperties(defaultFallback = “”)</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016221218.png" alt="image-20201016221217405"></p><p><strong>说明</strong>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016221246.png" alt="image-20201016221245143"></p><blockquote><p>controller 配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHyrixController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正常访问</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentHystrixService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">&quot;*****result:&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时访问</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentHystrixService.paymentInfo_TimeOut(id);</span><br><span class="line">        log.info(<span class="string">&quot;*****result:&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 兜底方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentTimeOutFallbackMethod</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是消费者80,对方支付系统繁忙请10秒钟后再试或者自己运行出错请检查自己，o(╥﹏╥)o&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局fallback</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment_Global_FallbackMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Global异常处理信息,请稍后重试.o(╥﹏╥)o&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>**和业务逻辑混一起？ ？ ？ 混乱 **</p></blockquote><ol><li><p>服务降级，客户端去调用服务端，碰上服务器宕机或关闭</p></li><li><p>本次案例服务案例级处理是在客户端 80 实现完成的，与服务端 8001 没有关系，只需要为 Feign 客户端定义的接口添加一个服务降级处理的实现类即可实现解耦。</p></li><li><p>未来我们要面对的异常</p><p>运行、超时、宕机</p></li><li><p>再看我们的业务类 PaymentController</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016230721.png" alt="image-20201016230720317"></p><ol start="5"><li>修改 cloud-consumer-feign-hystrix-order80</li><li>根 据 cloud-consumer-feign-hystrix-order80 已 经 有 的 PaymentHystrixService 接 口 ， 重 新 新 建 一 个 类<br>（PaymentFallbackService） 实现该接口， 统一为接口里面的方法进行异常处理 。</li><li>PaymentFallbackService 类 实 现 PaymentFeignClientService 接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentHystrixService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-----PaymentFallbackService fall back-paymentInfo_OK , (┬＿┬)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-----PaymentFallbackService fall back-paymentInfo_TimeOut , (┬ ＿┬)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li><strong>YML</strong></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 如果处理自身的容错就开启。开启方式与生产端不一样。</span></span><br></pre></td></tr></table></figure><ol start="9"><li><strong>PaymentFeignClientService 接口</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;,fallback = PaymentFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正常访问</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时访问</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="10"><li><strong>测试</strong></li></ol><ul><li><p>单个 eureka 先启动 7001，PaymentHystrixMain8001 启动</p></li><li><p>正常测试： <a href="http://localhost/consumer/payment/hystrix/ok/1">http://localhost/consumer/payment/hystrix/ok/1</a></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016231720.png" alt="image-20201016231719706"></p><ul><li>故意关闭微服务 8001</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016231759.png" alt="image-20201016231758903"></p><p>​ 客户端自己调用提升： 此时服务端 provider 已经 down 了， 但是我们做了服务降级处理， 让客户端在服务端不可用时也会获得提示信息而不会挂起耗死服务器 。</p><h3 id="⑤-服务熔断"><a href="#⑤-服务熔断" class="headerlink" title="⑤ 服务熔断"></a>⑤ 服务熔断</h3><h4 id="1-断路器"><a href="#1-断路器" class="headerlink" title="1.断路器"></a>1.断路器</h4><p>​ 一句话就是家里保险丝</p><h4 id="2-熔断是什么"><a href="#2-熔断是什么" class="headerlink" title="2.熔断是什么"></a>2.熔断是什么</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016232023.png" alt="image-20201016232022777"></p><p><a href="https://martinfowler.com/bliki/CircuitBreaker.html">大神论文：https://martinfowler.com/bliki/CircuitBreaker.html </a></p><h4 id="3-实操"><a href="#3-实操" class="headerlink" title="3.实操"></a>3.实操</h4><blockquote><p>修改 cloud-provider-hystrix-payment8001</p></blockquote><p><strong>PaymentService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod =</span></span><br><span class="line"><span class="meta">            &quot;paymentCircuitBreaker_fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;), //是否开启断路器</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;), //请求次数</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;), //时间范围</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;), //失败率达到多少后跳闸</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;*****id 不能负数&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">    String serialNumber = IdUtil.simpleUUID();</span><br><span class="line">    <span class="keyword">return</span> Thread.currentThread().getName()+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;调用成功,流水号： &quot;</span>+serialNumber;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker_fallback</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;id 不能负数， 请稍候再试,(┬＿┬)/~~ id: &quot;</span> +id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>why 配置这些参数：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016232454.png" alt="image-20201016232453956"></p><p><strong>PaymentController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/payment/circuit/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    String result = paymentService.paymentCircuitBreaker(id);</span><br><span class="line">    log.info(<span class="string">&quot;*******result:&quot;</span>+result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><ol><li>自测 cloud-provider-hystrix-payment8001</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016232735.png" alt="image-20201016232734315"></p><ol start="2"><li><p>正确： <a href="http://localhost:8001/payment/circuit/1">http://localhost:8001/payment/circuit/1</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016233027.png" alt="image-20201016233026906"></p></li><li><p>错误： <a href="http://localhost:8001/payment/circuit/-1">http://localhost:8001/payment/circuit/-1</a></p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016233054.png" alt="image-20201016233053779"></p><ol start="4"><li>一次正确一次错误 trytry</li><li><strong>重点测试</strong>： 多次错误,然后慢慢正确， 发现刚开始不满足条件，就算是正确的访问地址也不能进行访问， 需要慢慢的恢复链路</li></ol><h4 id="4-原理（小总结）"><a href="#4-原理（小总结）" class="headerlink" title="4.原理（小总结）"></a>4.原理（小总结）</h4><blockquote><p><strong>大神结论</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016233343.png" alt="image-20201016233342518"></p><blockquote><p><strong>熔断类型</strong></p></blockquote><ol><li><p>熔断打开</p><p>请求不再进行调用当前服务， 内部设置时钟一般为 MTTR(平均故障处理时间)，当打开时长达到所设时钟则进入熔断状态 。</p></li><li><p>熔断关闭</p><p>熔断关闭不会对服务进行熔断。</p></li><li><p>熔断半开</p><p>部分请求根据规则调用当前服务， 如果请求成功且符合规则则认为当前服务恢复正常， 关闭熔断 。</p></li></ol><blockquote><p><strong>官网断路器流程图</strong></p></blockquote><ol><li><strong>官网步骤</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016233657.png" alt="image-20201016233656920"></p><ol start="2"><li><strong>断路器在什么情况下开始起作用</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016233721.png" alt="image-20201016233720377"></p><ol start="3"><li><strong>断路器开启或者关闭的条件</strong></li></ol><ul><li><p>当满足一定阀值的时候（默认 10 秒内超过 20 个请求次数）</p></li><li><p>当失败率达到一定的时候（默认 10 秒内超过 50%请求失败）</p></li><li><p>到达以上阀值， 断路器将会开启</p></li><li><p>当开启的时候， 所有请求都不会进行转发</p></li><li><p>一段时间之后（默认是 5 秒）， 这个时候断路器是半开状态， 会让其中一个请求进行转发。 如果成功， 断路器会关闭， 若失败， 继续开启。 重复 4 和 5 。</p></li></ul><ol start="4"><li><p><strong>断路器打开之后</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016234108.png" alt="image-20201016234107457"></p></li><li><p><strong>All 配置</strong></p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016234253.png" alt="image-20201016234250739"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016234230.png" alt="image-20201016234229443"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016234320.png" alt="image-20201016234319121"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016234330.png" alt="image-20201016234330093"></p><h3 id="⑥-服务限流"><a href="#⑥-服务限流" class="headerlink" title="⑥ 服务限流"></a>⑥ 服务限流</h3><blockquote><p>参考我后面的关于高级篇的 alibaba 的 Sentinel 说明</p></blockquote><h3 id="⑦-hystrix-工作流程"><a href="#⑦-hystrix-工作流程" class="headerlink" title="⑦ hystrix 工作流程"></a>⑦ hystrix 工作流程</h3><h4 id="1-hystrix-工作流程"><a href="#1-hystrix-工作流程" class="headerlink" title="1.hystrix 工作流程"></a>1.hystrix 工作流程</h4><p>​ <a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works">https://github.com/Netflix/Hystrix/wiki/How-it-Works </a></p><h4 id="2-hystrix-工作流程"><a href="#2-hystrix-工作流程" class="headerlink" title="2.hystrix 工作流程"></a>2.hystrix 工作流程</h4><p>**官网图例 : **</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017152344.png" alt="image-20201017152337133"></p><p><strong>步骤说明</strong>:</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017152659.png" alt="image-20201017152658751"></p><h3 id="⑧-服务监控-hystrixDashboard"><a href="#⑧-服务监控-hystrixDashboard" class="headerlink" title="⑧ 服务监控 hystrixDashboard"></a>⑧ 服务监控 hystrixDashboard</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017153029.png" alt="image-20201017153028883"></p><h4 id="2-仪表盘-9001"><a href="#2-仪表盘-9001" class="headerlink" title="2.仪表盘 9001"></a>2.仪表盘 9001</h4><blockquote><p>新建 cloud-consumer-hystrix-dashboard9001</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017153156.png" alt="image-20201017153155398"></p><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-hystrix-dashboard9001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span><span class="comment">&lt;!--新增 hystrix dashboard--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br></pre></td></tr></table></figure><blockquote><p>HystrixDashboardMain9001+新注解**@EnableHystrixDashboard**</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboardMain9001</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(HystrixDashboardMain9001.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所有 Provider 微服务提供类（8001/8002/8003） 都需要监控依赖配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>启动 cloud-consumer-hystrix-dashboard9001 该微服务后续将监控微服务 8001</p></blockquote><p>​ <a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017155957.png" alt="image-20201017155956437"></p><h4 id="3-断路器演示-服务监控-hystrixDashboard"><a href="#3-断路器演示-服务监控-hystrixDashboard" class="headerlink" title="3.断路器演示(服务监控 hystrixDashboard)"></a>3.断路器演示(服务监控 hystrixDashboard)</h4><blockquote><p><strong>修改 cloud-provider-hystrix-payment8001</strong></p></blockquote><p><code>注意</code>:新版本 Hystrix 需要在主启动 PaymentHystrixMain8001 中指定监控路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此配置是为了服务监控而配置，与服务容错本身无观，springCloud 升级之后的坑</span></span><br><span class="line"><span class="comment"> * ServletRegistrationBean因为springboot的默认路径不是/hystrix.stream</span></span><br><span class="line"><span class="comment"> * 只要在自己的项目中配置上下面的servlet即可</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">    ServletRegistrationBean&lt;HystrixMetricsStreamServlet&gt; registrationBean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(streamServlet);</span><br><span class="line">    registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    registrationBean.addUrlMappings(<span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">    registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017161412.png" alt="image-20201017161411381"></p><ul><li>Unable to connect to Command Metric Stream.</li><li>404</li></ul><blockquote><p><strong>监控测试</strong></p></blockquote><ul><li><p><strong>启动 1 个 eureka 或者 3 个 eureka 集群均可</strong></p></li><li><p><strong>观察监控窗口</strong></p><p><em>9001 监控 8001</em></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017162107.png" alt="image-20201017162106329"></p><ul><li><p>填写监控地址： <a href="http://localhost:8001/hystrix.stream">http://localhost:8001/hystrix.stream</a></p></li><li><p>测试地址： <a href="http://localhost:8001/payment/circuit/1%E3%80%81http://localhost:8001/payment/circuit/1">http://localhost:8001/payment/circuit/1、http://localhost:8001/payment/circuit/1</a></p></li><li><p>上述测试通过： ok</p></li><li><p>先访问正确地址， 再访问错误地址， 再正确地址， 会发现图示断路器都，是慢慢放开的 。</p></li></ul><p><em>监控结果，成功</em></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017162411.png" alt="image-20201017162411201"></p><p><em>监控结果， 失败</em></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017162502.png" alt="image-20201017162501189"></p><ul><li><strong>如何看</strong>：</li></ul><p><code>7 色 1 圈 </code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017162752.png" alt="image-20201017162751506"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017162644.png" alt="image-20201017162643326"></p><p><code>1 线</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017162703.png" alt="image-20201017162702560"></p><p><code>整图说明 </code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017162831.png" alt="image-20201017162830940"></p><p><code>整图说明 2</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017162859.png" alt="image-20201017162858611"></p><p><code>搞懂一个才能看懂复杂的</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201017163036.png" alt="image-20201017163035515"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud 服务注册与发现</title>
      <link href="posts/368886813/"/>
      <url>posts/368886813/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV18E411x7eT?from=search&seid=4388336378730572330">本篇博客参考学习视频</a></p><h2 id="一、Eureka-服务注册与发现"><a href="#一、Eureka-服务注册与发现" class="headerlink" title="一、Eureka 服务注册与发现"></a>一、Eureka 服务注册与发现</h2><h3 id="①-Eureka-基础知识"><a href="#①-Eureka-基础知识" class="headerlink" title="① Eureka 基础知识"></a>① Eureka 基础知识</h3><h4 id="1-服务治理"><a href="#1-服务治理" class="headerlink" title="1. 服务治理"></a>1. 服务治理</h4><p>​ SpringCloud 封装了 Netflix 公司开发的 Eureka 模块来实现服务治理。 在传统的 RPC 远程调用框架中， 管理每个服务与服务之间依赖关系比较复杂， 所以需要使用服务治理管理服务与服务之间依赖关系， 了以实现服务调用、 负载均衡、容错等， 实现服务发现与注册 。</p><h4 id="2-服务注册"><a href="#2-服务注册" class="headerlink" title="2. 服务注册"></a>2. 服务注册</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008163432.png" alt="image-20201008163431445"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008163442.png" alt="image-20201008163441176"></p><h4 id="3-Eureka-两组件"><a href="#3-Eureka-两组件" class="headerlink" title="3.Eureka 两组件"></a>3.Eureka 两组件</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008163528.png" alt="image-20201008163527932"></p><h3 id="②-单机-Eureka-构建步骤"><a href="#②-单机-Eureka-构建步骤" class="headerlink" title="② 单机 Eureka 构建步骤"></a>② 单机 Eureka 构建步骤</h3><h4 id="1-IDEA-生成-EurekaServer-端服务注册中心-类似物业公司"><a href="#1-IDEA-生成-EurekaServer-端服务注册中心-类似物业公司" class="headerlink" title="1.IDEA 生成 EurekaServer 端服务注册中心 类似物业公司"></a>1.IDEA 生成 EurekaServer 端服务注册中心 类似物业公司</h4><blockquote><p>建 Module</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008163939.png" alt="image-20201008163938347"></p><blockquote><p>改 POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka-server--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--一般为通用配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>1.X 和 2.X 的对比说明</em></strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008164349.png" alt="image-20201008164348553"></p><blockquote><p>写 YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7001</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(EurekaMain7001.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意</code>：需要在启动类上配置注解 <strong>@EnableEurekaServer</strong>,开启注册中心</p><blockquote><p>测试</p></blockquote><p><a href="http://localhost:7001/">http://localhost:7001/</a> ，效果页面</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008165538.png" alt="image-20201008165537963"></p><h4 id="2-EurekaClient-端-cloud-provider-payment8001-将注册进-EurekaServer-成为服务提供者-provider"><a href="#2-EurekaClient-端-cloud-provider-payment8001-将注册进-EurekaServer-成为服务提供者-provider" class="headerlink" title="2.EurekaClient 端 cloud-provider-payment8001 将注册进 EurekaServer 成为服务提供者 provider"></a>2.EurekaClient 端 cloud-provider-payment8001 将注册进 EurekaServer 成为服务提供者 provider</h4><blockquote><p>改 POM ( cloud-provider-payment8001)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>1.X 和 2.X 的对比说明</em></strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008170120.png" alt="image-20201008170119489"></p><blockquote><p>写 YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 表示是否将自己注册进eurekaServer 默认为 true。</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否从EureaServer 抓取已有的注册信息，默认为true.单节点无所谓，集群必须设置true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(PaymentMain8001.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加：注解 <strong>@EnableEurekaClient</strong></p><blockquote><p>测试</p></blockquote><ul><li>先启动 EurekaServer <a href="http://localhost:7001/">http://localhost:7001/</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008203129.png" alt="image-20201008203122376"></p><ul><li>微服务配置说明</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008173135.png" alt="image-20201008173128335"></p><ul><li><strong>自我保护机制</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008173217.png" alt="image-20201008173216519"></p><h4 id="3-EurekaClient-端-cloud-consumer-order80-将注册进-EurekaServer-成为服务消费者-consumer"><a href="#3-EurekaClient-端-cloud-consumer-order80-将注册进-EurekaServer-成为服务消费者-consumer" class="headerlink" title="3.EurekaClient 端 cloud-consumer-order80 将注册进 EurekaServer 成为服务消费者 consumer"></a>3.EurekaClient 端 cloud-consumer-order80 将注册进 EurekaServer 成为服务消费者 consumer</h4><blockquote><p>改 POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>写 YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动 <strong>@EnableEurekaClient</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><ul><li>先启动 EurekaServer, 7001 服务，在启动服务提供者 provider 8001 服务，在启动消费者 consumer 80</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008204123.png" alt="image-20201008204121007"></p><ul><li><a href="http://localhost/consumer/payment/get/1">http://localhost/consumer/payment/get/1</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008204202.png" alt="image-20201008204201760"></p><blockquote><p>BUG</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008210725.png" alt="image-20201008210724219"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008210737.png" alt="image-20201008210736191"></p><h3 id="③-Eureka-构建步骤"><a href="#③-Eureka-构建步骤" class="headerlink" title="③ Eureka 构建步骤"></a>③ Eureka 构建步骤</h3><h4 id="1-Eureka-集群原理说明"><a href="#1-Eureka-集群原理说明" class="headerlink" title="1.Eureka 集群原理说明"></a>1.Eureka 集群原理说明</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008210953.png" alt="image-20201008210953089"></p><p>**微服务 RPC 远程服务调用最核心的是什么 **</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">高可用</span><br></pre></td></tr></table></figure><p><strong>解决办法</strong>：搭建 Eureka 注册中心集群，实现负载均衡+故障容错</p><h4 id="2-EurekaServer-集群环境构建步骤"><a href="#2-EurekaServer-集群环境构建步骤" class="headerlink" title="2.EurekaServer 集群环境构建步骤"></a>2.EurekaServer 集群环境构建步骤</h4><blockquote><p>新建 cloud-eureka-server7002 和 POM</p></blockquote><p>​ 参考 cloud-eureka-server7001 项目工程</p><blockquote><p>修改映射配置</p></blockquote><p>找到 C:\Windows\System32\drivers\etc 路径下的 hosts 文件 <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008213020.png" alt="image-20201008213018672"></p><p>修改映射配置添加进 hosts 文件</p><ul><li>127.0.0.1 eureka7001.com</li><li>127.0.0.1 eureka7002.com</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008221932.png" alt="image-20201008221924946"></p><blockquote><p>写 YML</p></blockquote><ul><li>以前单机</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008213247.png" alt="image-20201008213246584"></p><ul><li>7001</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span> <span class="comment">#设置与 eureka server 交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br></pre></td></tr></table></figure><ul><li>7002</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span> <span class="comment">#设置与 eureka server 交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类 （参考 cloud-eureka-server7001 的主启动类 ）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7002</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(EurekaMain7002.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-将支付服务-8001-微服务发布到上面-2-台-Eureka-集群配置中"><a href="#3-将支付服务-8001-微服务发布到上面-2-台-Eureka-集群配置中" class="headerlink" title="3.将支付服务 8001 微服务发布到上面 2 台 Eureka 集群配置中"></a>3.将支付服务 8001 微服务发布到上面 2 台 Eureka 集群配置中</h4><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class="comment"># 集群版</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008214922.png" alt="image-20201008214921087"></p><h4 id="4-将订单服务-80-微服务发布到上面-2-台-Eureka-集群配置中"><a href="#4-将订单服务-80-微服务发布到上面-2-台-Eureka-集群配置中" class="headerlink" title="4.将订单服务 80 微服务发布到上面 2 台 Eureka 集群配置中"></a>4.将订单服务 80 微服务发布到上面 2 台 Eureka 集群配置中</h4><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#      defaultZone: http://localhost:7001/eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class="comment">#集群版</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008215359.png" alt="image-20201008215358970"></p><h4 id="5-测试-01"><a href="#5-测试-01" class="headerlink" title="5.测试 01"></a>5.测试 01</h4><ul><li>先要启动 EurekaServer， 7001/7002 服务，再要启动服务提供者 provider， 8001 服务，再要启动消费者， 80</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008222219.png" alt="image-20201008222218619"></p><ul><li><a href="http://localhost/consumer/payment/get/1">http://localhost/consumer/payment/get/1</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008222251.png" alt="image-20201008222250676"></p><h4 id="6-支付服务提供者-8001-集群环境构建"><a href="#6-支付服务提供者-8001-集群环境构建" class="headerlink" title="6.支付服务提供者 8001 集群环境构建"></a>6.支付服务提供者 8001 集群环境构建</h4><blockquote><p>新建 cloud-provider-payment8002 和 POM</p></blockquote><p>​ 参考 cloud-provider-payment8001</p><blockquote><p>写 YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">6090</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.oy.springcloud.entities</span> <span class="comment"># 所有Entity别名类所在包</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 集群版</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8002</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(PaymentMain8002.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类 直接从 8001 粘贴</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008223431.png" alt="image-20201008223430791"></p><blockquote><p>修改 8001/8002 的 controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String serverPort;</span><br></pre></td></tr></table></figure><ul><li><strong>8001 和 8002</strong></li></ul><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008223845.png" alt="image-20201008223844291" style="zoom:50%;" /><h4 id="7-负载均衡"><a href="#7-负载均衡" class="headerlink" title="7.负载均衡"></a>7.负载均衡</h4><blockquote><p>Bug： 订单服务访问地址不能写死</p></blockquote><p>原本：（<strong>cloud-consumer-order80</strong>）</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008224334.png" alt="image-20201008224333187"></p><p>更改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>使用@LoadBalanced 注解赋予 RestTemplate 负载均衡的能力 （<strong>cloud-consumer-order80</strong>）</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008224959.png" alt="image-20201008224958711"></p><h4 id="8-测试-02"><a href="#8-测试-02" class="headerlink" title="8.测试 02"></a>8.测试 02</h4><ul><li>先要启动 EurekaServer， 7001/7002 服务</li><li>再要启动服务提供者 provider， 8001/8002 服务</li><li>在启动 consumer 80 服务</li><li><a href="http://localhost/consumer/payment/get/1">http://localhost/consumer/payment/get/1</a> **负载均衡生效， 8001/8002 端口交替出现 **</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008225823.png" alt="image-20201008225822628"></p><h3 id="④-actuator-微服务信息完善"><a href="#④-actuator-微服务信息完善" class="headerlink" title="④ actuator 微服务信息完善"></a>④ actuator 微服务信息完善</h3><h4 id="1-主机名称：服务名称修改"><a href="#1-主机名称：服务名称修改" class="headerlink" title="1.主机名称：服务名称修改"></a>1.主机名称：服务名称修改</h4><blockquote><p>修改 YML (cloud-provider-payment8001) 部分</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">instance:</span></span><br><span class="line">  <span class="attr">instance-id:</span> <span class="string">payment8001</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201009230441.png" alt="image-20201009230434805"></p><h4 id="2-访问信息有-ip-信息提示"><a href="#2-访问信息有-ip-信息提示" class="headerlink" title="2.访问信息有 ip 信息提示"></a>2.访问信息有 ip 信息提示</h4><p>​ 当前问题：没有 ip 提示</p><blockquote><p>修改 cloud-provider-payment8001 YML 部分</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016120001.png" alt="image-20201016111308870"></p><p>_效果_：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201009230918.png" alt="image-20201009230917967"></p><h3 id="⑤-服务发现-Discovery"><a href="#⑤-服务发现-Discovery" class="headerlink" title="⑤ 服务发现 Discovery"></a>⑤ 服务发现 Discovery</h3><h4 id="1-对于注册进-eureka-里面的微服务，可以通过服务发现来获取服务的信息"><a href="#1-对于注册进-eureka-里面的微服务，可以通过服务发现来获取服务的信息" class="headerlink" title="1.对于注册进 eureka 里面的微服务，可以通过服务发现来获取服务的信息"></a>1.对于注册进 eureka 里面的微服务，可以通过服务发现来获取服务的信息</h4><h4 id="2-修改-cloud-provider-payment8001-的-Controller"><a href="#2-修改-cloud-provider-payment8001-的-Controller" class="headerlink" title="2.修改 cloud-provider-payment8001 的 Controller"></a>2.修改 cloud-provider-payment8001 的 Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/discovery&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">    <span class="keyword">for</span> (String element : services) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;**** element:&quot;</span>+ element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">        log.info(instance.getServiceId()+<span class="string">&quot;\t&quot;</span>+instance.getHost()+<span class="string">&quot;\t&quot;</span>+instance.getPort()+<span class="string">&quot;\t&quot;</span>+instance.getUri());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-8001-主启动类"><a href="#3-8001-主启动类" class="headerlink" title="3.8001 主启动类"></a>3.8001 主启动类</h4><blockquote><p>@EnableDiscoveryClient</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 服务发现</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(PaymentMain8001.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h4><ul><li><p>先启动 EurekaServer， 7001/7002 服务，再启动 8001 主启动类，需要稍等一会</p><p><a href="http://localhost:8001/payment/discovery">http://localhost:8001/payment/discovery</a></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010153138.png" alt="image-20201010153131926"></p><h3 id="⑥-Eureka-自我保护"><a href="#⑥-Eureka-自我保护" class="headerlink" title="⑥ Eureka 自我保护"></a>⑥ Eureka 自我保护</h3><h4 id="1-故障现象"><a href="#1-故障现象" class="headerlink" title="1.故障现象"></a>1.故障现象</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010153353.png" alt="image-20201010153351564"></p><h4 id="2-导致原因"><a href="#2-导致原因" class="headerlink" title="2.导致原因"></a>2.导致原因</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010153437.png" alt="image-20201010153435587"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010153446.png" alt="image-20201010153445964"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010153525.png" alt="image-20201010153524632"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010153543.png" alt="image-20201010153542491"></p><p>​ <code>总结</code>：<strong>某时刻某一个微服务不可用了，Eureka 不会立即清理，依旧会对该服务的信息进行保存，属于 CAP 里的 AP 分支</strong></p><h4 id="3-怎么禁止自我保护（一般生产环境中不会禁止自我保护）"><a href="#3-怎么禁止自我保护（一般生产环境中不会禁止自我保护）" class="headerlink" title="3.怎么禁止自我保护（一般生产环境中不会禁止自我保护）"></a>3.怎么禁止自我保护（一般生产环境中不会禁止自我保护）</h4><blockquote><p>注册中心 eureakeServer 端 7001: 出 厂 默 认 ， 自 我 保 护 机 制 是 开 启的:eureka.server.enable-self-preservation = true</p></blockquote><ul><li><p>使用 <strong>eureka.server.enable-self-preservation = false</strong> 可以禁用自我保护模式</p></li><li><p>在 eurekaServer 端 7001 处设置关闭自我保护机制</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010154122.png" alt="image-20201010154122092"></p><p><em>效果图：</em></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010154442.png" alt="image-20201010154441508"></p><blockquote><p>生产者客户端 eureakeClient 端 8001</p></blockquote><p><strong>默认:</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">eureka.instance.lease-renewal-interval-in-seconds</span>=<span class="string">30 单位为秒（ 默认是 30 秒）</span></span><br><span class="line"><span class="meta">eureka.instance.lease-expiration-duration-in-seconds</span>=<span class="string">90 单 位 为 秒（ 默认是 90 秒）</span></span><br></pre></td></tr></table></figure><p><strong>配置:</strong></p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010154944.png" alt="image-20201010154942881" style="zoom:80%;" /><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">instance:</span></span><br><span class="line">  <span class="attr">instance-id:</span> <span class="string">payment8001</span></span><br><span class="line">  <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒)</span></span><br><span class="line">  <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment">#Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务</span></span><br><span class="line">  <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="4-测试-1"><a href="#4-测试-1" class="headerlink" title="4.测试"></a>4.测试</h4><ul><li>7001 和 8001 都配置完成</li><li>先启动 7001 再启动 8001 ，先关闭 8001 ，马上被删除了</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010163756.png" alt="image-20201010163755231"></p><h2 id="二、Zookeeper-服务注册与发现"><a href="#二、Zookeeper-服务注册与发现" class="headerlink" title="二、Zookeeper 服务注册与发现"></a>二、Zookeeper 服务注册与发现</h2><h3 id="①-Eukeka-停止更新了怎么办"><a href="#①-Eukeka-停止更新了怎么办" class="headerlink" title="① Eukeka 停止更新了怎么办"></a>① Eukeka 停止更新了怎么办</h3><p>​ <a href="https://github.com/Netflix/eureka/wiki">https://github.com/Netflix/eureka/wiki</a></p><h3 id="②-SpringCloud-整合-Zookeeper-代替-Eureka"><a href="#②-SpringCloud-整合-Zookeeper-代替-Eureka" class="headerlink" title="② SpringCloud 整合 Zookeeper 代替 Eureka"></a>② SpringCloud 整合 Zookeeper 代替 Eureka</h3><h4 id="1-注册中心-zookeeper"><a href="#1-注册中心-zookeeper" class="headerlink" title="1.注册中心 zookeeper"></a>1.注册中心 zookeeper</h4><ul><li>zookeeper 是一个分布式协调工具，可以实现注册中心功能</li></ul><blockquote><p>使用 docker 快速创建 zookeeper 容器</p></blockquote><ul><li>关闭 Linux 服务器防火墙后启动 zookeeper 服务器</li></ul><p><strong>CentOS 7 关闭防火墙指令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 查看当前防火墙状态如果防火墙处于开启状态，firewalld.service前面的点是高亮的，Active：active（开启））</span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"></span><br><span class="line">//关闭当前的防火墙（仅对本次开机有效，重启后防火墙会再次启用）</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line">//永久关闭防火墙（重启后防火墙依然关闭）</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line"></span><br><span class="line">// 启动防火墙</span><br><span class="line"> systemctl start firewalld</span><br></pre></td></tr></table></figure><ul><li>zookeeper 服务器取代 Eureka 服务器，zk 作为服务器注册中心</li></ul><h4 id="2-服务提供者"><a href="#2-服务提供者" class="headerlink" title="2.服务提供者"></a>2.服务提供者</h4><blockquote><p>新建 cloud-provider-payment8004</p></blockquote><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment8004<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Zookeeper服务提供者<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringBoot整合Zookeeper客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line"><span class="comment">  # 8004表示注册到zookeeper服务器的支付服务提供者端口号</span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">8004</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line"><span class="comment">    # 服务别名---注册zookeeper到注册中心的名称</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">zookeeper</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">connect-string</span>: <span class="string">116.63.177.72:2181</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8004</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(PaymentMain8004.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/zk&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentzk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with zookeeper:&quot;</span>+serverPort+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>启动 8004 注册进 zookeeper</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010185204.png" alt="image-20201010185203951"></p><p><code>注意</code>：启动后问题存在下面问题</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010185427.png" alt="image-20201010185426339"></p><p><strong>Why：</strong></p><ul><li>解决 zookeeper 版本 jar 包冲突问题：</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010185547.png" alt="image-20201010185547065"></p><ul><li>排出 zk 冲突后的新 POM：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment8004<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Zookeeper服务提供者<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringBoot整合Zookeeper客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--先排除自带的zookeeper3.5.3--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加zookeeper3.4.9版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><ul><li>在 Linux 上查询 和 浏览器上（<a href="http://localhost:8004/payment/zk">http://localhost:8004/payment/zk</a> ）</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010190243.png" alt="image-20201010190241945"></p><ul><li><p>获得 json 串后用在线工具查看试试 （dokcer 容器）</p><p><a href="https://blog.csdn.net/qq_45738810/article/details/109002435">具体详细的操作参考：https://blog.csdn.net/qq_45738810/article/details/109002435</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010190622.png" alt="image-20201010190621628"></p></li></ul><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010190804.png" alt="image-20201010190802924" style="zoom: 67%;" /><p><strong>思考</strong>： 服务节点是临时节点还是持久节点——是<strong>临时节点</strong></p><h4 id="3-服务消费者"><a href="#3-服务消费者" class="headerlink" title="3.服务消费者"></a>3.服务消费者</h4><blockquote><p>新建 cloud-consumerzk-order80</p></blockquote><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumerzk-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringBoot整合Zookeeper客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--先排除自带的zookeeper3.5.3--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加zookeeper3.4.9版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 服务别名</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="comment"># 注册到zookeeper地址</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="string">localhost:2181</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZkMain80</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(OrderZkMain80.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>主业务类</p></blockquote><ul><li>bean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springcloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> OY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> OY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZkController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVOKE_URL = <span class="string">&quot;http://cloud-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/zk&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(INVOKE_URL + <span class="string">&quot;/payment/zk&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>验证测试</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010193246.png" alt="image-20201010193246059"></p><blockquote><p>访问测试地址</p></blockquote><p>​ <a href="http://localhost/consumer/payment/zk">http://localhost/consumer/payment/zk</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201010193353.png" alt="image-20201010193352456"></p><h2 id="三、Consul-服务注册与发现"><a href="#三、Consul-服务注册与发现" class="headerlink" title="三、Consul 服务注册与发现"></a>三、Consul 服务注册与发现</h2><h3 id="①-Consul-简介"><a href="#①-Consul-简介" class="headerlink" title="① Consul 简介"></a>① Consul 简介</h3><h4 id="1-是什么：https-www-consul-io-intro-index-html"><a href="#1-是什么：https-www-consul-io-intro-index-html" class="headerlink" title="1.是什么：https://www.consul.io/intro/index.html"></a>1.是什么：<a href="https://www.consul.io/intro/index.html">https://www.consul.io/intro/index.html</a></h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011204019.png" alt="image-20201011204018659"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011204040.png" alt="image-20201011204039409"></p><h4 id="2-能干嘛："><a href="#2-能干嘛：" class="headerlink" title="2.能干嘛："></a>2.能干嘛：</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011204122.png" alt="image-20201011204121943"></p><ul><li>服务发现： 提供 HTTP 和 DNS 两种发现方式</li><li>健康检查： 支持多种协议，HTTP、TCP、Docker、Shell 脚本定制化</li><li>KV 存储： Key，Value 的存储方式</li><li>多数据中心： Consul 支持多数据中心</li><li>可视化 Web 界面</li></ul><h4 id="3-下载"><a href="#3-下载" class="headerlink" title="3.下载"></a>3.下载</h4><p><a href="https://www.consul.io/downloads.html">https://www.consul.io/downloads.html</a></p><h4 id="4-怎么玩"><a href="#4-怎么玩" class="headerlink" title="4.怎么玩"></a>4.怎么玩</h4><p><a href="https://www.springcloud.cc/spring-cloud-consul.html">https://www.springcloud.cc/spring-cloud-consul.html</a></p><h3 id="②-安装并运行-Consul"><a href="#②-安装并运行-Consul" class="headerlink" title="② 安装并运行 Consul"></a>② 安装并运行 Consul</h3><h4 id="1-官网安装说明"><a href="#1-官网安装说明" class="headerlink" title="1.官网安装说明"></a>1.官网安装说明</h4><p><a href="https://learn.hashicorp.com/consul/getting-started/install.html">https://learn.hashicorp.com/consul/getting-started/install.html</a></p><h4 id="2-下载完成后只有一个-consul-exe-文件，硬盘路径下双击运行，查看版本信息"><a href="#2-下载完成后只有一个-consul-exe-文件，硬盘路径下双击运行，查看版本信息" class="headerlink" title="2.下载完成后只有一个 consul.exe 文件，硬盘路径下双击运行，查看版本信息"></a>2.下载完成后只有一个 consul.exe 文件，硬盘路径下双击运行，查看版本信息</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011205400.png" alt="image-20201011205359901"></p><h4 id="3-使用开发者模式启动"><a href="#3-使用开发者模式启动" class="headerlink" title="3.使用开发者模式启动"></a>3.使用开发者模式启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul agent -dev</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011205619.png" alt="image-20201011205619155"></p><p>通过以下地址可以访问 Consul 的首页：<a href="http://localhost:8500/">http://localhost:8500/</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011205710.png" alt="image-20201011205709239"></p><h3 id="③-服务提供者"><a href="#③-服务提供者" class="headerlink" title="③ 服务提供者"></a>③ 服务提供者</h3><blockquote><p>新 建 Module 支 付 服 务 provider8006</p></blockquote><p>cloud-providerconsul-payment8006</p><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-providerconsul-payment8006<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-consul-discovery --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8006</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(PaymentMain8006.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>主业务类 Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/consul&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentConsul</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SpringCloud with consul:&quot;</span> + serverPort + <span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>验证测试</p></blockquote><p>​ <a href="http://localhost:8006/payment/consul">http://localhost:8006/payment/consul</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011211342.png" alt="image-20201011211341291"></p><h3 id="④-服务消费者"><a href="#④-服务消费者" class="headerlink" title="④ 服务消费者"></a>④ 服务消费者</h3><blockquote><p>新 建 Module 消 费 服 务 order8006</p></blockquote><p>​ cloud-consumerconsul-order80</p><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumerconsul-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-consul-discovery --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-consumer-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConsulMain80</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(OrderConsulMain80.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置 Bean</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">// 负载均衡</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> OY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConsulController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVOME_URL = <span class="string">&quot;http://consul-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/consul&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String result = restTemplate.getForObject(INVOME_URL+<span class="string">&quot;/payment/consul&quot;</span>,String.class );</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>验证测试</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011214859.png" alt="image-20201011214858615"></p><blockquote><p>访问测试地址：<a href="http://localhost/consumer/payment/consul">http://localhost/consumer/payment/consul</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011215016.png" alt="image-20201011215016107"></p><h3 id="⑤-三个注册中心异同点"><a href="#⑤-三个注册中心异同点" class="headerlink" title="⑤ 三个注册中心异同点"></a>⑤ 三个注册中心异同点</h3><h4 id="1-CAP"><a href="#1-CAP" class="headerlink" title="1.CAP"></a>1.CAP</h4><ul><li>C： Consistency (强一致性)</li><li>A: Availability （可用性）</li><li>P: Partition tolerance （分区容错）</li></ul><p><strong>CAP 理论关注粒度是数据， 而不是整体系统设计的策略</strong></p><h4 id="2-经典-CAP-图"><a href="#2-经典-CAP-图" class="headerlink" title="2.经典 CAP 图"></a>2.经典 CAP 图</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011215346.png" alt="image-20201011215345966"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011215809.png" alt="image-20201011215809145"></p><blockquote><p><strong>AP(Eureka)</strong> 架构</p></blockquote><p>当网络分区出现后，为了保证可用性，系统 B<strong>可以返回值</strong>，保证系统的可用性。</p><p><code>结论</code>：违背了一致性 C 的要求，只满足可用性和分区容错，即 AP</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011220141.png" alt="image-20201011220139399"></p><blockquote><p><strong>CP(Zookeeper/Consul) 架构</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011220415.png" alt="image-20201011220325077"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud 服务调用</title>
      <link href="posts/1872245415/"/>
      <url>posts/1872245415/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV18E411x7eT?from=search&seid=4388336378730572330">博客学习参考视频</a></p><h2 id="一、Ribbon-负载均衡服务调用"><a href="#一、Ribbon-负载均衡服务调用" class="headerlink" title="一、Ribbon 负载均衡服务调用"></a>一、Ribbon 负载均衡服务调用</h2><h3 id="①-概述"><a href="#①-概述" class="headerlink" title="① 概述"></a>① 概述</h3><h4 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1.是什么"></a>1.是什么</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011221104.png" alt="image-20201011221103800"></p><h4 id="2-官网资料"><a href="#2-官网资料" class="headerlink" title="2.官网资料"></a>2.官网资料</h4><p>​ <a href="https://github.com/Netflix/ribbon/wiki/Getting-Started">https://github.com/Netflix/ribbon/wiki/Getting-Started</a></p><p><strong>Ribbon 目前也进入维护模式</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011222109.png" alt="image-20201011222107889"></p><p><strong>未来替换方案</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011222225.png" alt="image-20201011222224992"></p><h4 id="3-能干嘛"><a href="#3-能干嘛" class="headerlink" title="3.能干嘛"></a>3.能干嘛</h4><ul><li>LB（负载均衡） ： 集中式 LB、 进程内 LB ，前面我们写过了 80 通过轮询负载访问 8001/8002</li><li><code>一句话： 负载均衡+RestTemplate 调用</code></li></ul><h3 id="②-Ribbon-负载均衡演示"><a href="#②-Ribbon-负载均衡演示" class="headerlink" title="② Ribbon 负载均衡演示"></a>② Ribbon 负载均衡演示</h3><h4 id="1-架构说明"><a href="#1-架构说明" class="headerlink" title="1.架构说明"></a>1.架构说明</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011222520.png" alt="image-20201011222519604"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011223038.png" alt="image-20201011223037582"></p><p><code>总结</code>: Ribbon 其实就是一个软负载均衡的客户端组件，他可以和其他所需请求的客户端结合使用，和 eureka 结合只是其中的一个实例。</p><h4 id="2-POM"><a href="#2-POM" class="headerlink" title="2.POM"></a>2.POM</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011223305.png" alt="image-20201011223304791"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011223320.png" alt="image-20201011223320127"></p><h4 id="3-RestTemplate-的使用"><a href="#3-RestTemplate-的使用" class="headerlink" title="3.RestTemplate 的使用"></a>3.RestTemplate 的使用</h4><p><a href="https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html">官网：https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011223823.png" alt="image-20201011223821711"></p><p><strong>getForObject 方法/getForEntity 方法</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201011223917.png" alt="image-20201011223916541"></p><p><strong>postForObject/postForEntity</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201012214740.png" alt="image-20201012214733664"></p><h3 id="③-Ribbon-核心组件-IRule"><a href="#③-Ribbon-核心组件-IRule" class="headerlink" title="③ Ribbon 核心组件 IRule"></a>③ Ribbon 核心组件 IRule</h3><h4 id="1-IRule"><a href="#1-IRule" class="headerlink" title="1.IRule"></a>1.IRule</h4><p>根据特定算法从服务列表中选取一个要访问的服务</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201012215033.png" alt="image-20201012215033018"></p><ul><li>com.netflix.loadbalancer.RoundRobinRule 轮询</li><li>com.netflix.loadbalancer.RandomRule 随机</li><li>com.netflix.loadbalancer.RetryRule： 先按照 RoundRobinRule 的策略获取服务， 如果获取服务失败则在指定时间内会进行重试</li><li>WeightedResponseTimeRule ： 对 RoundRobinRule 的扩展， 响应速度越快的实例选择权重越大， 越容易被选择</li><li>BestAvailableRule ： 会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务， 然后选择一个并发量最小的服务</li><li>AvailabilityFilteringRule ： 先过滤掉故障实例， 再选择并发较小的实例</li><li>ZoneAvoidanceRule： 默认规则， 复合判断 server 所在区域的性能和 server 的可用性选择服务器</li></ul><h4 id="2-如何替换"><a href="#2-如何替换" class="headerlink" title="2.如何替换"></a>2.如何替换</h4><blockquote><p>修改 cloud-consumer-order80</p></blockquote><p>注意配置细节</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201012220110.png" alt="image-20201012220109661"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201012220121.png" alt="image-20201012220120906"></p><blockquote><p>新建 package： com.oy.myrule</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201012220423.png" alt="image-20201012220421960"></p><blockquote><p>主启动类添加@RibbonClient</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.oy.myrule.MySelfRule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.ribbon.RibbonClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;,configuration = MySelfRule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>​ <a href="http://localhost/consumer/payment/get/1">http://localhost/consumer/payment/get/1</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201012221336.png" alt="image-20201012221336131"></p><h3 id="④-Ribbon-负载均衡算法"><a href="#④-Ribbon-负载均衡算法" class="headerlink" title="④ Ribbon 负载均衡算法"></a>④ Ribbon 负载均衡算法</h3><h4 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201012221500.png" alt="image-20201012221459557"></p><h4 id="2-RoundRobinRule-源码"><a href="#2-RoundRobinRule-源码" class="headerlink" title="2.RoundRobinRule 源码"></a>2.RoundRobinRule 源码</h4><h4 id="3-手写"><a href="#3-手写" class="headerlink" title="3.手写"></a>3.手写</h4><blockquote><p>7001/7002 集群启动</p></blockquote><blockquote><p>8001/8002 微服务改造</p></blockquote><p><strong>Controller:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/lib&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String  <span class="title">getPaymentLB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> serverPort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>80 订单微服务改造</p></blockquote><ul><li><p><strong>ApplicationContextBean 去掉@LoadBalanced</strong></p></li><li><p><strong>LoadBalancer 接口</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud.lb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLB</span> <span class="keyword">implements</span> <span class="title">LoadBalancer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 坐标</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> current;</span><br><span class="line">        <span class="keyword">int</span> next;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            current = <span class="keyword">this</span>.atomicInteger.get();</span><br><span class="line">            next = current &gt;= <span class="number">2147483647</span> ? <span class="number">0</span> : current+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span> (!<span class="keyword">this</span>.atomicInteger.compareAndSet(current,next)); <span class="comment">// 第一个参数是期望值，第二个参数是修改值是</span></span><br><span class="line">        System.out.println(<span class="string">&quot;******第几次访问，次数next:&quot;</span> + next + <span class="string">&quot;,current:&quot;</span>+ current);</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceInstance <span class="title">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span> </span>&#123;<span class="comment">// 得到机器列表</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取服务器的下标位置</span></span><br><span class="line">        <span class="keyword">int</span> index = getAndIncrement() % serviceInstances.size();</span><br><span class="line">        <span class="keyword">return</span> serviceInstances.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201013233513.png" alt="image-20201013233506386"></p><ul><li><strong>OrderController</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> OY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    LoadBalancer loadBalancer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/lb&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPaymentLB</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instances == <span class="keyword">null</span> || instances.size() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ServiceInstance serviceInstance = loadBalancer.instances(instances);</span><br><span class="line">        URI uri = serviceInstance.getUri();</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(uri+<span class="string">&quot;/payment/lb&quot;</span>,String.class);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>测试</strong></p><p><a href="http://localhost/consumer/payment/lb">http://localhost/consumer/payment/lb</a></p></li></ul><p>_效果_：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201013233901.png" alt="image-20201013233900529"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201013233918.png" alt="image-20201013233917559"></p><h2 id="二、OpenFeign-服务接口调用"><a href="#二、OpenFeign-服务接口调用" class="headerlink" title="二、OpenFeign 服务接口调用"></a>二、OpenFeign 服务接口调用</h2><h3 id="①-概述-1"><a href="#①-概述-1" class="headerlink" title="① 概述"></a>① 概述</h3><h4 id="1-OpenFeign-是什么"><a href="#1-OpenFeign-是什么" class="headerlink" title="1.OpenFeign 是什么"></a>1.OpenFeign 是什么</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201015224456.png" alt="image-20201015224448756"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201015224508.png" alt="image-20201015224506884"> Feign 是一个声明式的 web 服务客户端，让编写 web 服务客户端变得非常容易，只需要创建一个接口上添加注解即可</p><p>​ GitHub: <a href="https://github.com/spring-cloud/spring-cloud-openfeign">https://github.com/spring-cloud/spring-cloud-openfeign</a></p><h4 id="2-能干嘛"><a href="#2-能干嘛" class="headerlink" title="2.能干嘛"></a>2.能干嘛</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201015224915.png" alt="image-20201015224914584"></p><h4 id="3-Feign-和-OpenFeign-两者区别"><a href="#3-Feign-和-OpenFeign-两者区别" class="headerlink" title="3.Feign 和 OpenFeign 两者区别"></a>3.Feign 和 OpenFeign 两者区别</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201015225120.png" alt="image-20201015225119181"></p><h3 id="②-OpenFeign-使用步骤"><a href="#②-OpenFeign-使用步骤" class="headerlink" title="② OpenFeign 使用步骤"></a>② OpenFeign 使用步骤</h3><blockquote><p>接口 + 注解： 微服务调用接口 + @FeignClient</p></blockquote><blockquote><p>新建 cloud-consumer-feign-order80</p></blockquote><p><strong>Feign 在消费端使用</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201015225712.png" alt="image-20201015225711299"></p><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-feign-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类 : <strong>@ EnableFeignClients</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignMain80</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(OrderFeignMain80.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类</p></blockquote><ul><li>业务逻辑接口 + @FeignClient 配置调用 provider 服务</li><li>新建 PaymentFeignService 接口并新增注解 @FeignClient</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.getPaymentById(id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><ul><li><p>先启动 2 个 eureka 集群 7001/7002</p></li><li><p>在启动 2 个微服务 8001/8002</p></li><li><p>启动 OpenFeign 启动</p><p><a href="http://localhost/consumer/payment/get/1">http://localhost/consumer/payment/get/1</a></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201015233219.png" alt="image-20201015233219044"></p><blockquote><p>小总结</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201015233352.png" alt="image-20201015233350231"></p><h3 id="③-OpenFeign-超时控制"><a href="#③-OpenFeign-超时控制" class="headerlink" title="③ OpenFeign 超时控制"></a>③ OpenFeign 超时控制</h3><h4 id="1-超时设置，故意设置超时演示出错情况"><a href="#1-超时设置，故意设置超时演示出错情况" class="headerlink" title="1.超时设置，故意设置超时演示出错情况"></a>1.超时设置，故意设置超时演示出错情况</h4><p>​ <strong>服务提供方 8001 故意写暂停程序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/feign/timeout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeOut</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> serverPort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 服务消费方 80 添加超时方法 PaymentFeignService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加超时方法 PaymentFeignService</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/feign/timeout&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeOut</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 服务消费方 80 添加超时方法 OrderFeignController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/consumer/payment/feign/timeout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeOut</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> paymentFeignService.paymentFeignTimeOut();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>测试：</em></p><ul><li>错误页面</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201015235757.png" alt="image-20201015235756416"></p><h4 id="2-OpenFeign-默认等待一秒钟，-超过后报错"><a href="#2-OpenFeign-默认等待一秒钟，-超过后报错" class="headerlink" title="2.OpenFeign 默认等待一秒钟， 超过后报错"></a>2.OpenFeign 默认等待一秒钟， 超过后报错</h4><h4 id="3-是什么"><a href="#3-是什么" class="headerlink" title="3.是什么"></a>3.是什么</h4><p>​ 默认 Feign 客户端等待一秒，但是服务器处理需要超过 1 秒钟，导致 Feign 客户端不想等待了，直接返回报错。为了避免这样的情况，有时候我们需要设置 Feign 客户端的超时控制。</p><p>在 yml 文件中开启配置</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016000803.png" alt="image-20201016000801551"></p><h4 id="4-YML-文件里需要开启-OpenFeign-客户端超时控制"><a href="#4-YML-文件里需要开启-OpenFeign-客户端超时控制" class="headerlink" title="4.YML 文件里需要开启 OpenFeign 客户端超时控制"></a>4.YML 文件里需要开启 OpenFeign 客户端超时控制</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br><span class="line"><span class="comment"># 设置feign客户端超时时间(OpenFeign默认支持ribbon)</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment"># 指的是建立连接所用的时间,适用于网络状态正常的情况下,两端连接所用的时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="comment"># 指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><p>​ <a href="http://localhost/consumer/payment/feign/timeout">http://localhost/consumer/payment/feign/timeout</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016001018.png" alt="image-20201016001017944"></p><h3 id="④-OpenFeign-日志打印功能"><a href="#④-OpenFeign-日志打印功能" class="headerlink" title="④ OpenFeign 日志打印功能"></a>④ OpenFeign 日志打印功能</h3><h4 id="1-日志打印功能"><a href="#1-日志打印功能" class="headerlink" title="1.日志打印功能"></a>1.日志打印功能</h4><h4 id="2-是什么"><a href="#2-是什么" class="headerlink" title="2.是什么"></a>2.是什么</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016001420.png" alt="image-20201016001419333"></p><h4 id="3-日志级别"><a href="#3-日志级别" class="headerlink" title="3.日志级别"></a>3.日志级别</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016001453.png" alt="image-20201016001452126"></p><h4 id="4-配置日志-bean"><a href="#4-配置日志-bean" class="headerlink" title="4.配置日志 bean"></a>4.配置日志 bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> OY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-YML-文件里面需要开启日志的-Feign-客户端"><a href="#5-YML-文件里面需要开启日志的-Feign-客户端" class="headerlink" title="5.YML 文件里面需要开启日志的 Feign 客户端"></a>5.YML 文件里面需要开启日志的 Feign 客户端</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.oy.springcloud.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016002247.png" alt="image-20201016002246618"></p><h4 id="6-后台日志查看"><a href="#6-后台日志查看" class="headerlink" title="6.后台日志查看"></a>6.后台日志查看</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201016002354.png" alt="image-20201016002353716"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与监控管理(Actuator)</title>
      <link href="posts/1175849155/"/>
      <url>posts/1175849155/</url>
      
        <content type="html"><![CDATA[<h2 id="一、监控管理"><a href="#一、监控管理" class="headerlink" title="一、监控管理"></a>一、监控管理</h2><p>​ 通过引入 spring-boot-starter-actuator，可以使用 Spring Boot 为我们提供的准生产环境下的应用监控和管理功能。我们可以通过 HTTP， JMX， SSH 协议来进行操作，自动得到审计、健康及指标信息等 。</p><p><strong>步骤</strong>：</p><ul><li>引入 spring-boot-starter-actuctor</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>通过 http 方式访问监控点端点</p><p>首先在配置文件中把端点暴露出来</p></li></ul><blockquote><p>在 application.properties 中配置端点，</p><p>暴露部分端点</p><p>management.endpoints.web.exposure.<strong>include</strong>=info,health,beans,env</p><p>暴露所有端点</p><p>management.endpoints.web.exposure.<strong>include</strong>=*</p><p>不暴露 beans 端点</p><p>management.endpoints.web.exposure.<strong>exclude</strong>=beans</p></blockquote><p>在上述配置中，首先使用 management.endpoints.web.exposure.include 暴露所有的端点，接着使用 management.endpoints .web.exposure.exclud 排除 en 端点，这样就能够暴露除 env 外的所有 ctuator 端点了。</p><p><a href="http://localhost:8080/actuator/health">http://localhost:8080/actuator/health</a> 访问项目监控需要加前缀 <strong>/actuator</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201006202623.png" alt="image-20201006202615962"></p><p>​ 如果不在配置文件中配置把端口暴露出来，则会出现以下这样的情况。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201006202841.png" alt="image-20201006202840846"></p><p>​ 因为 actuator 默认只支持端点 <strong>/health、/info</strong> 所以访问 /env 会出现 404 页面。</p><p><strong>监控点和管理端点</strong></p><table><thead><tr><th>端点名</th><th>描述</th></tr></thead><tbody><tr><td>autoconfig</td><td>所有自动配置信息</td></tr><tr><td>auditevents</td><td>审计事件</td></tr><tr><td>beans</td><td>所有 Bean 的信息</td></tr><tr><td>configprops</td><td>所有配置属性</td></tr><tr><td>dump</td><td>线程状态信息</td></tr><tr><td>env</td><td>当前环境信息</td></tr><tr><td>health</td><td>应用健康状况</td></tr><tr><td>info</td><td>当前应用信息</td></tr><tr><td>metrics</td><td>应用的各项指标</td></tr><tr><td>mappings</td><td>应用@RequestMapping 映射路径</td></tr><tr><td>shutdown</td><td>关闭当前应用（默认关闭）</td></tr><tr><td>trace</td><td>追踪信息（最新的 http 请求）</td></tr></tbody></table><p><em>示例：</em>访问必须添加前缀<code>/actuator</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201006203102.png" alt="image-20201006203101731"></p><ul><li><p>可进行 shutdown （POST 提交， 此端点默认关闭）</p><p>在配置文件中配置</p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启用shutdown</span></span><br><span class="line"><span class="meta">management.endpoint.shutdown.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201006210405.png" alt="image-20201006210404783"></p><h2 id="二、定制端点"><a href="#二、定制端点" class="headerlink" title="二、定制端点"></a>二、定制端点</h2><blockquote><p># Actuator 管理端口<br>management.server.port=8000</p><p>＃暴露 有端<br>management.endpoints.web.exposure.include ＝女</p><p>＃默认情况下 有端点都不启用，此时需要按需启用端点<br>management.endpoints.enabled-by-default=false</p><p>＃启用端点 info<br>management.endpoint.info.enabled=true</p><p>＃启用端点 beans<br>management.endpoint.beans.enabled=true</p><p>＃启用端点 configprops<br>management.endpoint.configprops.enabled=true</p><p>＃启用端点 env<br>management.endpont.env.enabled=true</p><p>＃启用端点 health<br>management.endpoint.health.enabled=true</p><p>＃启用端点 mappings<br>management.endpont.mappings.enabed=true</p><p>＃启用端点 shutdown<br>management.endpoint.shutdown.enabled=true</p><p>/# Actuator 端点前缀<br>management.endpoints.web.base -path=/manage</p><p>＃将原来的 mappings 端点的请求路径修改为 urlMappings<br>management.endpoints.web.path-mapping.mappings=request_mappings</p><p># Spring MVC 视图解析器配置<br>spring.mvc.view.prefix=/WEB-INF/jsp/<br>spring.mvc.view.suffix=.Jsp</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud 微服务搭建</title>
      <link href="posts/2086819267/"/>
      <url>posts/2086819267/</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客参考学习视频： <a href="https://www.bilibili.com/video/BV18E411x7eT?from=search&amp;seid=4388336378730572330">https://www.bilibili.com/video/BV18E411x7eT?from=search&amp;seid=4388336378730572330</a></p></blockquote><h2 id="一、微服务架构编码构建"><a href="#一、微服务架构编码构建" class="headerlink" title="一、微服务架构编码构建"></a>一、微服务架构编码构建</h2><h3 id="①-约定-gt-配置-gt-编码"><a href="#①-约定-gt-配置-gt-编码" class="headerlink" title="① 约定 &gt; 配置 &gt; 编码"></a>① 约定 &gt; 配置 &gt; 编码</h3><ol><li><p>slave 会从 master 读取 binlog 来进行数据同步</p></li><li><p>三步骤+原理图</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201006220406.png" alt="image-20201006220405125"></p><ul><li>MySQL 复制过程分成三步：<br>1 master 将改变记录到二进制日志（binary log）。这些记录过程叫做二进制日志事件，binary log events；<br>2 slave 将 master 的 binary log events 拷贝到它的中继日志（relay log）；<br>3 slave 重做中继日志中的事件，将改变应用到自己的数据库中。 MySQL 复制是异步的且串行化的</li></ul></li></ol><h3 id="②-IDEA-新建-project-工作空间"><a href="#②-IDEA-新建-project-工作空间" class="headerlink" title="② IDEA 新建 project 工作空间"></a>② IDEA 新建 project 工作空间</h3><h4 id="1-微服务-cloud-整体聚合父工程-Project"><a href="#1-微服务-cloud-整体聚合父工程-Project" class="headerlink" title="1.微服务 cloud 整体聚合父工程 Project"></a>1.微服务 cloud 整体聚合父工程 Project</h4><p>​ <strong>父工程步骤</strong>：</p><p>1） New Project</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007105240.png" alt="image-20201007105232669"></p><p>2）聚合总工程名字和工程名字（idea 2020.2 版本）</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007105536.png" alt="image-20201007105535326"></p><p>3）选择 Maven 版本</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007105657.png" alt="image-20201007105655931"></p><p>4）字符编码</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007110106.png" alt="image-20201007110105043"></p><p>5） 注解生效激活</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007110444.png" alt="image-20201007110442711"></p><p>6）Java 编译版本选择 8</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007110545.png" alt="image-20201007110543699"></p><ol start="7"><li>File Type 过滤</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007110749.png" alt="image-20201007110748680"></p><h4 id="2-父工程"><a href="#2-父工程" class="headerlink" title="2.父工程"></a>2.父工程</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-provider-payment8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.cloud.version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">spring.cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.cloud.alibaba.version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">spring.cloud.alibaba.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子模块继承后,提供作用:锁定版本+子module不用groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--springboot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Spring cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud.alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-Maven-工程落地细节复习"><a href="#3-Maven-工程落地细节复习" class="headerlink" title="3.Maven 工程落地细节复习"></a>3.Maven 工程落地细节复习</h4><p>Maven 中的 dependencyManagement 和 dependencies</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007114602.png" alt="image-20201007114601490"></p><p>maven 中跳过单元测试</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007114649.png" alt="image-20201007114648701"></p><h4 id="4-父工程创建完成执行-mvn-insall-将父工程发布到仓库方便子工程继承"><a href="#4-父工程创建完成执行-mvn-insall-将父工程发布到仓库方便子工程继承" class="headerlink" title="4.父工程创建完成执行 mvn:insall 将父工程发布到仓库方便子工程继承"></a>4.父工程创建完成执行 mvn:insall 将父工程发布到仓库方便子工程继承</h4><h2 id="二、Rest-微服务工程构建"><a href="#二、Rest-微服务工程构建" class="headerlink" title="二、Rest 微服务工程构建"></a>二、Rest 微服务工程构建</h2><h3 id="①-构建步骤"><a href="#①-构建步骤" class="headerlink" title="① 构建步骤"></a>① 构建步骤</h3><h4 id="1-cloud-provider-payment8001-微服务提供者支付-Module-模块"><a href="#1-cloud-provider-payment8001-微服务提供者支付-Module-模块" class="headerlink" title="(1) cloud-provider-payment8001 微服务提供者支付 Module 模块"></a>(1) cloud-provider-payment8001 微服务提供者支付 Module 模块</h4><p>​ <strong>建 cloud-provider-payment8001</strong></p><p>​ 创建完成之后请回到父工程产看 pom 文件的变化</p><pre><code>1. **改POM 文件**</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter</span></span><br><span class="line"><span class="comment">-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter</span></span><br><span class="line"><span class="comment">        -web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter</span></span><br><span class="line"><span class="comment">        -web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter</span></span><br><span class="line"><span class="comment">        -jdbc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtoo</span></span><br><span class="line"><span class="comment">        ls --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter</span></span><br><span class="line"><span class="comment">        -test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>写 YML</strong></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">6090</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.oy.springcloud.entities</span> <span class="comment"># 所有Entity别名类所在包</span></span><br></pre></td></tr></table></figure><p><code>注意</code>：有可能在编译时会出现以下的异常</p><blockquote><p>The server time zone value ‘�й���׼ʱ��’ is unrecogni</p></blockquote><p>需要在配置文件中的 datasource.url 后面添加上 <strong>serverTimezone=UTC</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>主启动类</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(PaymentMain8001.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>业务类</strong></li></ol><ul><li><strong>建表 SQL</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `payment`</span><br><span class="line">(</span><br><span class="line">    `id`     <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `serial` <span class="type">varchar</span>(<span class="number">200</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付流水号&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;支付表&#x27;</span></span><br><span class="line">  ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>emtities</strong></li></ul><p>​ 主实体 Payment</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud.entities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> OY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String serial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Json 封装 CommonResult</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud.entities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> OY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code, String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Dao</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ mybatis 的映射文件为 PaymentMapper.xml, 路径为 <strong>src\main\resources\mapper\ParmentMapper.xml</strong></p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007214215.png" alt="image-20201007214208365" style="zoom:67%;" /><p><strong>PaymentMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.oy.springcloud.dao.PaymentDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--public int create(Payment payment);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;create&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Payment&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into payment(serial) values(#&#123;serial&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--public Payment getPaymentById(@Param(&quot;id&quot;) Long id);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResult&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.oy.springcloud.entitles.Payment&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">property</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPaymentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResult&quot;</span>&gt;</span></span><br><span class="line">        select * from payment where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Service</strong></li></ul><p>​ 接口类 PaymentService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oy.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>; <span class="comment">// 写</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span></span>; <span class="comment">// 读取</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oy.springcloud.dao.PaymentDao;</span><br><span class="line"><span class="keyword">import</span> com.oy.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.oy.springcloud.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span> <span class="comment">// @Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentDao paymentDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.create(payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>controller</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(Payment payment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">&quot;*****插入结果： &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 成功</span></span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">&quot;插入数据库成功&quot;</span>, result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, <span class="string">&quot;插入数据库失败&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        Payment payment = paymentService.getPaymentById(id);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;*****查询结果： &quot;</span> + payment);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 成功</span></span><br><span class="line">        <span class="keyword">if</span> (payment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">&quot;查询成功&quot;</span>, payment);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, <span class="string">&quot;没 有 对 应 记 录 ， 查 询 ID ：&quot;</span>+id, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>测试</strong></p><p><a href="http://localhost:8001/payment/get/1">http://localhost:8001/payment/get/1</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007214452.png" alt="image-20201007214451413"></p><p>postman 模拟 post</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007214841.png" alt="image-20201007214840114"></p><p><strong>通过修改 idea 的 workpace.xml 的方式来快速打开 Run DashBoard 窗口 开启 Run DashBoard(个别版本需要)</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007215210.png" alt="image-20201007215209598"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;configurationTypes&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;SpringBootApplicationConfigurationType&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007215331.png" alt="image-20201007215330956"></p><p><code>注意</code>：部分同学可能由于 idea 版本不同， 需要关闭重启</p><h4 id="2-热部署-Devtools"><a href="#2-热部署-Devtools" class="headerlink" title="(2) 热部署 Devtools"></a>(2) 热部署 Devtools</h4><ol><li><strong>Adding devtools to your project</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>Adding plugin to your pom.xml</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 下面这一段粘贴在父POM.xml中</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.<strong>Enabling automatic build</strong></p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007215951.png" alt="image-20201007215949539" style="zoom:80%;" /><p>4.<strong>Update the value of</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007220139.png" alt="image-20201007220138509"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007220251.png" alt="image-20201007220250444"></p><h4 id="3-cloud-consumer-order80-微服务消费者订单-Module-模块"><a href="#3-cloud-consumer-order80-微服务消费者订单-Module-模块" class="headerlink" title="(3) cloud-consumer-order80 微服务消费者订单 Module 模块"></a>(3) cloud-consumer-order80 微服务消费者订单 Module 模块</h4><p>​ 建 cloud-consumer-order80</p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007230823.png" alt="image-20201007230821048" style="zoom:67%;" /><ol><li><strong>改 POM</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter</span></span><br><span class="line"><span class="comment">        -web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter</span></span><br><span class="line"><span class="comment">        -web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtoo</span></span><br><span class="line"><span class="comment">        ls --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter</span></span><br><span class="line"><span class="comment">        -test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>写 YML</strong></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>主启动</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>业务类</strong></li></ol><blockquote><p>创建 entities(将 cloud-provider-payment8001 工程下的 entities 包下的两个实体复制过来）</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007232337.png" alt="image-20201007232336408"></p><blockquote><p>RestTemplate:</p></blockquote><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201007232444.png" alt="image-20201007232442081"></p><p><strong>官网及使用</strong></p><p>​ 官网地址：<a href="https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html">https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html</a></p><p>​ 使用：使用 restTemplate 访问 restful 接口非常的简单的粗暴无脑。（url, reuestMap, ResponseBean.class）这三个参数分别代表 REST 请求地址、请求参数、HTTP 响应转换成的对象类型。</p><blockquote><p>config 配置类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oy.springcloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>测试</strong></li></ol><ul><li>先启动 cloud-provider-payment8001</li><li>再启动 cloud-consumer-order80</li></ul><p><a href="http://localhost/consumer/payment/get/1">http://localhost/consumer/payment/get/1</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008000739.png" alt="image-20201008000733052"></p><blockquote><p>不要忘记@RequestBody 注解，不然在测试 <a href="http://localhost/consumer/payment/create?serial=&quot;%E5%95%86%E5%BA%97">http://localhost/consumer/payment/create?serial=&quot;商店</a> 003”</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008001001.png" alt="image-20201008001000661"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008001512.png" alt="image-20201008001511416"></p><h4 id="4-工程重构"><a href="#4-工程重构" class="headerlink" title="(4) 工程重构"></a>(4) 工程重构</h4><blockquote><p>观察问题：系统中有重复的部分</p></blockquote><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008110007.png" alt="image-20201008105959818" style="zoom: 50%;" /><blockquote><p>重构</p></blockquote><ul><li><strong>新建 cloud-api-commons</strong></li></ul><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008110314.png" alt="image-20201008110313363" style="zoom:150%;" /><ul><li>POM</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clould<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--https://mvnrepository.com/artifact/cn.hutool/hutool-all --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>在 cloud-api-commons 项目下创建 entities 的 Payment 和 CommonResult 封装类</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008111038.png" alt="image-20201008111037541"></p><ul><li><strong>使用 maven 命名 clean 和 install 命令，把它存储到仓库里，方便其他的项目的复用。</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008111442.png" alt="image-20201008111441609"></p><ul><li><strong>对订单 80 和 支付 8001 分别改造， 删除各自原有的 entities 文件夹, 各自黏贴 POM 内容 80、8001</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>这里根据自己设置来定<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>// com.oy 这是我自己的，不清楚查看一下自己的仓库</span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②-目前项目样图"><a href="#②-目前项目样图" class="headerlink" title="② 目前项目样图"></a>② 目前项目样图</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201008112552.png" alt="image-20201008112551640"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与Dubbo、Zookeeper</title>
      <link href="posts/3991296734/"/>
      <url>posts/3991296734/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><h3 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h3><p>​ ZooKeeper 是一个分布式的，开放源码的分布式应用程序协调服务。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><p>​ Dubbo 是 Alibaba 开源的分布式服务框架，它最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看， Dubbo 采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201003222226.png" alt="image-20201003222225032"></p><h2 id="二、SpringBoot-2-3-整合-Zookeeper、Dubbo"><a href="#二、SpringBoot-2-3-整合-Zookeeper、Dubbo" class="headerlink" title="二、SpringBoot 2.3 整合 Zookeeper、Dubbo"></a>二、SpringBoot 2.3 整合 Zookeeper、Dubbo</h2><h3 id="①-安装-zookeeper-作为注册中心"><a href="#①-安装-zookeeper-作为注册中心" class="headerlink" title="① 安装 zookeeper 作为注册中心"></a>① 安装 zookeeper 作为注册中心</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装镜像</span><br><span class="line">docker pull zookeeper:latest</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 启动镜像</span><br><span class="line">docker run --name zk01 -p 2181:2181 --restart always -d zookeeper:latest</span><br></pre></td></tr></table></figure><p>​ 这里只需要用到 2181 这个端口，只把它暴露，其他的两个端口不需要。</p><p>This image includes <code>EXPOSE 2181 2888 3888 8080</code> (the zookeeper client port, follower port, election port, AdminServer port respectively), so standard container linking will make it automatically available to the linked containers. Since the Zookeeper “fails fast” it’s better to always restart it.</p><h3 id="②-编写服务提供者"><a href="#②-编写服务提供者" class="headerlink" title="② 编写服务提供者"></a>② 编写服务提供者</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201003235037.png" alt="image-20201003235036091"></p><ol><li><em>pom.xml 文件中引入 dubbo 和 zkclient 相关依赖</em></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入zookeeper的客户端工具--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><em>配置 dubbo 的扫描包和注册中心地址</em></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://192.168.64.129:2181</span></span><br><span class="line"></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">provider-ticker</span></span><br><span class="line"></span><br><span class="line"><span class="meta">dubbo.scan.base-packages</span>=<span class="string">com.oy.providerticket.service</span></span><br></pre></td></tr></table></figure><ol start="3"><li><em>使用@Service 发布服务</em></li></ol><p>【TicketService.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【TicketServiceImpl.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 将服务发送出去</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title">TicketService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;《姜子牙》&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加在 Applicaiton 上面@EnableDubbo 注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span> <span class="comment">// 开启Dubbo服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderTickerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ProviderTickerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="③-编写服务消费者"><a href="#③-编写服务消费者" class="headerlink" title="③ 编写服务消费者"></a>③ 编写服务消费者</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004110342.png" alt="image-20201004110334471"></p><p>1.<em>引入依赖‘</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入zookeeper的客户端工具--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.<em>配置 dubbo 的注册中心地址</em></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">consumer-user</span></span><br><span class="line"></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://192.168.64.129:2181</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.<em>引用服务</em></p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201003233919.png" alt="image-20201003233918122" style="zoom: 50%;" /><p>【UserService.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    TicketService ticketService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String ticket = ticketService.getTicket();</span><br><span class="line">        System.out.println(<span class="string">&quot;买到票了：&quot;</span>+ticket);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="④-启动"><a href="#④-启动" class="headerlink" title="④ 启动"></a>④ 启动</h3><ol><li>先启动<strong>provider-ticket</strong>然后再启动<strong>consumer-user</strong></li><li>**consumer-user **中的 ConsumerUserApplicationTests.java 测试</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004110604.png" alt="image-20201004110602386"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsumerUserApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userService.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004110700.png" alt="image-20201004110700014"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与安全(Spring Security)</title>
      <link href="posts/2243339053/"/>
      <url>posts/2243339053/</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客中涉及的源码，下载地址在博客文章底部，有需要的小伙伴自行下载</p></blockquote><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>​ SpringSecurity 是针对 Spring 项目的安全框架，也是 Spring Boot 底层安全模块的技术选项。他可以实现强大的 web 安全控制。对于安全控制，我们需要引入 spring-boot-starter-securiy 模块。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>几个类</strong>：</p><ul><li>WebSecurityConfigurerAdapter: 自定义 Security 策略</li><li>AuthenticationManagerBuilder: 自定义认证的策略</li><li>@EnableWebSecurity: 开启 WebSecurity 模式</li></ul><p><a href="https://spring.io/guides/gs/securing-web/">具体的参考 Spring 官网:https://spring.io/guides/gs/securing-web/</a></p><h2 id="二、功能演示"><a href="#二、功能演示" class="headerlink" title="二、功能演示"></a>二、功能演示</h2><p><strong>配置 thymeleaf 模板依赖</strong>（springboot 2.3 版本）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 其他有可能需要配置以下配置，2.3不需要</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以下都需要配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="①-引入-SpringSecurity"><a href="#①-引入-SpringSecurity" class="headerlink" title="① 引入 SpringSecurity"></a>① 引入 SpringSecurity</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②-编写-SpringSecurity-的配置类"><a href="#②-编写-SpringSecurity-的配置类" class="headerlink" title="② 编写 SpringSecurity 的配置类"></a>② 编写 SpringSecurity 的配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="③-登入"><a href="#③-登入" class="headerlink" title="③ 登入"></a>③ 登入</h3><p><em>控制请求的访问权限：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//super.configure(http);</span></span><br><span class="line">        <span class="comment">// 定制请求的授权规则</span></span><br><span class="line">        http.authorizeRequests().antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;VIP1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;VIP2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;VIP3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>定义认证规则</em></p><p>注意：Security5 与之前的传输密码有部分的不同</p><p><a href="https://blog.csdn.net/qq_45738810/article/details/108912554">参考我这篇博客：https://blog.csdn.net/qq_45738810/article/details/108912554</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//        super.configure(auth);</span></span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder()).withUser(<span class="string">&quot;zhangsan&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;VIP1&quot;</span>, <span class="string">&quot;VIP2&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;lisi&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;VIP2&quot;</span>, <span class="string">&quot;VIP3&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;wangwu&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;VIP1&quot;</span>, <span class="string">&quot;VIP3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>开启自动配置的登录功能</em></p><ul><li>/login 来登录页</li><li>重定项到/login?error 表示登录失败</li><li>默认 post 形式的/login 代表处理登录</li><li>一但定制 loginPage； 那么 loginPage 的 post 请求就是登录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//super.configure(http);</span></span><br><span class="line">    http.authorizeRequests().antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;VIP1&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;VIP2&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;VIP3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启自动登录功能</span></span><br><span class="line">    http.formLogin();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201003185236.png" alt="image-20201003185235756"></p><p><em>定制页面</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin().usernameParameter(<span class="string">&quot;username&quot;</span>).passwordParameter(<span class="string">&quot;password&quot;</span>).loginPage(<span class="string">&quot;/userlogin&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="④-注销"><a href="#④-注销" class="headerlink" title="④ 注销"></a>④ 注销</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注销&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//super.configure(http);</span></span><br><span class="line">    http.authorizeRequests().antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;VIP1&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;VIP2&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;VIP3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启自动登录功能</span></span><br><span class="line">    http.formLogin();</span><br><span class="line">    <span class="comment">// 开启注销功能</span></span><br><span class="line">    http.logout(); <span class="comment">// 注销成功会返回 /login?logout 页面</span></span><br><span class="line">    <span class="comment">// http.logout().logoutSuccessUrl(&quot;/&quot;); 注销成功以后来到首页</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201003195511.png" alt="image-20201003195511248"></p><h3 id="⑤-记住我"><a href="#⑤-记住我" class="headerlink" title="⑤ 记住我"></a>⑤ 记住我</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.rememberMe();</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>登陆成功以后，将 cookie 发给浏览器保存，以后访问页面带上这个 cookie，只要通过检查就可以免登录</p></li><li><p>点击注销会删除 cookie</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201003201115.png" alt="image-20201003201114787"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201003201042.png" alt="image-20201003201041508"></p><p><strong>定制</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/userlogin&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remeber&quot;</span> /&gt;</span> 记住我<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登陆&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    .....跟上面一致，省略了</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记住我</span></span><br><span class="line">        http.rememberMe().rememberMeParameter(<span class="string">&quot;remeber&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201003201656.png" alt="image-20201003201656017"></p><h2 id="三、SpringSecurity-标签"><a href="#三、SpringSecurity-标签" class="headerlink" title="三、SpringSecurity 标签"></a>三、SpringSecurity 标签</h2><ul><li>需要引入 thymeleaf-extras-springsecurity5</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">thymeleaf-extras-springsecurity5.version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf-extras-springsecurity5.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>使用</p><ul><li><p>sec:authentication=“name” 获得当前用户的用户名</p></li><li><p>sec:authorize=“hasRole(‘ADMIN’)” 当前用户必须拥有 ADMIN 权限时才会显示标签内容</p></li><li><p>xmlns:sec=”<a href="http://www.thymeleaf.org/extras/spring-security">http://www.thymeleaf.org/extras/spring-security</a></p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">&lt;html</span><br><span class="line">  xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br><span class="line">  xmlns:sec=&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">  // 不登入显示以下</span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    游客您好，如果想查看武林秘籍 <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/userlogin&#125;&quot;</span>&gt;</span>请登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">  // 登录显示这个</span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>，您好,您的角色有：</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;principal.authorities&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注销&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;VIP1&#x27;)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>普通武功秘籍<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span>罗汉拳<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span>武当长拳<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span>全真剑法<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、官方文档"><a href="#四、官方文档" class="headerlink" title="四、官方文档"></a>四、官方文档</h2><p><a href="https://www.thymeleaf.org/doc/articles/springsecurity.html">https://www.thymeleaf.org/doc/articles/springsecurity.html</a><br><a href="https://github.com/thymeleaf/thymeleaf-extras-springsecurity">https://github.com/thymeleaf/thymeleaf-extras-springsecurity</a><br>该文档介绍了不同版本的 <strong>thymeleaf、 springsecurity 、thymeleaf-extras-springsecurity</strong> 对应使用以及一些使用示例</p><blockquote><p>源码下载：</p><p>链接：<a href="https://pan.baidu.com/s/1oT_Dro3yi4xvSJqccU8D2g">https://pan.baidu.com/s/1oT_Dro3yi4xvSJqccU8D2g</a><br>提取码：ljj7</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot和Spring Cloud</title>
      <link href="posts/2187905911/"/>
      <url>posts/2187905911/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Spring-Cloud"><a href="#一、Spring-Cloud" class="headerlink" title="一、Spring Cloud"></a>一、Spring Cloud</h2><p>​ Spring Cloud 是一个分布式的整体解决方案。 Spring Cloud 为开发者提供了在分布式系统（配<br>置管理，服务发现，熔断，路由，微代理，控制总线，一次性 token，全局琐， leader 选举，分<br>布式 session，集群状态）中快速构建的工具，使用 Spring Cloud 的开发者可以快速的启动服务<br>或构建应用、同时能够快速和云平台资源进行对接。</p><p><strong>SpringCloud 分布式开发五大常用组件</strong></p><ul><li>服务发现——Netflix Eureka</li><li>客服端负载均衡——Netflix Ribbon</li><li>断路器——Netflix Hystrix</li><li>服务网关——Netflix Zuul</li><li>分布式配置——Spring Cloud Config</li></ul><h2 id="二、微服务"><a href="#二、微服务" class="headerlink" title="二、微服务"></a>二、微服务</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004115123.png" alt="image-20201004115122686"></p><p>Martin Fowler 微服务原文 <a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a></p><h2 id="三、Spring-Cloud-入门"><a href="#三、Spring-Cloud-入门" class="headerlink" title="三、Spring Cloud 入门"></a>三、Spring Cloud 入门</h2><p><strong>项目结构：</strong></p><img src= "/img/loading.gif" data-lazy-src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20201004132126588.png" alt="image-20201004132126588" style="zoom:150%;" /><p><strong>先创建一个空项目来存放</strong></p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004115734.png" alt="image-20201004115734102" style="zoom:50%;" /><h3 id="①-编写-EurekaServer-注册中心"><a href="#①-编写-EurekaServer-注册中心" class="headerlink" title="① 编写 EurekaServer 注册中心"></a>① 编写 EurekaServer 注册中心</h3><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004115838.png" alt="image-20201004115837617" style="zoom:50%;" /><h4 id="1-项目结构"><a href="#1-项目结构" class="headerlink" title="1. 项目结构"></a>1. 项目结构</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004120019.png" alt="image-20201004120017699"></p><h4 id="2-配置-Eureka-信息"><a href="#2-配置-Eureka-信息" class="headerlink" title="2.配置 Eureka 信息"></a>2.配置 Eureka 信息</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka-server</span> <span class="comment"># eureka实例的主机名</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#不把自己注册到eureka上</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 不从eureka上获取服务器的注册信息</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><h4 id="3-EnableEurekaServer"><a href="#3-EnableEurekaServer" class="headerlink" title="3.@EnableEurekaServer"></a>3.@EnableEurekaServer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-启动"><a href="#4-启动" class="headerlink" title="4.启动"></a>4.启动</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004120231.png" alt="image-20201004120230435"></p><h3 id="②-编写服务提供者"><a href="#②-编写服务提供者" class="headerlink" title="② 编写服务提供者"></a>② 编写服务提供者</h3><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004123839.png" alt="image-20201004123838302" style="zoom:50%;" /><h4 id="1-项目结构-1"><a href="#1-项目结构-1" class="headerlink" title="1.项目结构"></a>1.项目结构</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004123916.png" alt="image-20201004123915099"></p><h4 id="2-编写-service-层-和-controller-层"><a href="#2-编写-service-层-和-controller-层" class="headerlink" title="2.编写 service 层 和 controller 层"></a>2.编写 service 层 和 controller 层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;8001&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;《姜子牙》&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TicketService ticketService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/ticket&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ticketService.getTicket();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-配置信息"><a href="#3-配置信息" class="headerlink" title="3.配置信息"></a>3.配置信息</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider-ticket</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 注册服务的时候使用服务的ip地址</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><h4 id="4-启动-1"><a href="#4-启动-1" class="headerlink" title="4.启动"></a>4.启动</h4><p>去 Eureka 注册中心查看，<a href="http://localhost:8761/eureka/">http://localhost:8761/eureka/</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004124211.png" alt="image-20201004124211173"></p><h4 id="5-负载均衡"><a href="#5-负载均衡" class="headerlink" title="5.负载均衡"></a>5.负载均衡</h4><p>为了显示效果，使用 Maven 仓库的打包，我复制一份提供者，改一下启动端口吗，防止冲突。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004124635.png" alt="image-20201004124634191"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004124708.png" alt="image-20201004124707626"></p><ul><li><p>把包复制出来存放在文件夹里，并启动</p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004130203.png" alt="image-20201004130202319" style="zoom:67%;" /></li></ul><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004125009.png" alt="image-20201004125008899"  /><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004125817.png" alt="image-20201004125816434"></p><p>​ 8002 一样的方法启动即可</p><ul><li>注册中心显示，都成功注入</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004130103.png" alt="image-20201004130102243"></p><h3 id="③-编写服务消费者"><a href="#③-编写服务消费者" class="headerlink" title="③ 编写服务消费者"></a>③ 编写服务消费者</h3><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004123839.png" alt="image-20201004123838302" style="zoom:50%;" /><h4 id="1-项目结构-2"><a href="#1-项目结构-2" class="headerlink" title="1.项目结构"></a>1.项目结构</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004131305.png" alt="image-20201004131304773"></p><h4 id="2-编写-controller-和-RestTemplate-模板"><a href="#2-编写-controller-和-RestTemplate-模板" class="headerlink" title="2.编写 controller 和 RestTemplate 模板"></a>2.编写 controller 和 RestTemplate 模板</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/buy&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buyTicket</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        String s = restTemplate.getForObject(<span class="string">&quot;http://PROVIDER-TICKET/ticket&quot;</span>,String.class);</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;购买了&quot;</span> + s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@EnableDiscoveryClient</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004131529.png" alt="image-20201004131528408"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 开启发现服务功能</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerUserApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ConsumerUserApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@LoadBalanced</span> <span class="comment">// 使用负载均衡机制</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-配置信息-1"><a href="#3-配置信息-1" class="headerlink" title="3.配置信息"></a>3.配置信息</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-user</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8200</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 注册服务的时候使用服务的ip地址</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><h4 id="4-启动-2"><a href="#4-启动-2" class="headerlink" title="4.启动"></a>4.启动</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004131612.png" alt="image-20201004131611360"></p><ul><li>负载均衡生效</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201004131729.png" alt="image-20201004131728346"></p><p>整合完成！！！</p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与任务</title>
      <link href="posts/315616543/"/>
      <url>posts/315616543/</url>
      
        <content type="html"><![CDATA[<h2 id="一、异步任务"><a href="#一、异步任务" class="headerlink" title="一、异步任务"></a>一、异步任务</h2><p><strong>两个注解：</strong> @EnableAysns、@Aysnc</p><p><strong>代码示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">// 开启异步注解功能</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot04TaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot04TaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【AsyncService.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 告诉spring这是一个异步方法</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理数据中....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【AsyncController.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncService asyncService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        asyncService.hello();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、定时任务"><a href="#二、定时任务" class="headerlink" title="二、定时任务"></a>二、定时任务</h2><p><strong>两个注解：</strong> @EnableScheduling、 @Scheduled</p><p><strong>cron 表达式：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201003104145.png" alt="image-20201003104138889"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201003104150.png" alt="image-20201003104149841"></p><p><strong>开启基于注解的定任务</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">// 开启基于注解的定时任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot04TaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot04TaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【ScheduledService.java】</p><p>second(秒), minute（分）, hour（时）, day of month（日）, month（月）, day of week（周几）</p><p>对应：<code>0 * * * * MON-FR</code></p><blockquote><p>【0 0/5 14,18 * * ?】 每天 14 点整，和 18 点整，每隔 5 分钟执行一次</p><p>【0 15 10 ? * 1-6】 每个月的周一至周六 10:15 分执行一次</p><p>【0 0 2 ? * 6L】每个月的最后一个周六凌晨 2 点执行一次</p><p>【0 0 2 LW * ?】每个月的最后一个工作日凌晨 2 点执行一次</p><p>【0 0 2-4 ? * 1#1】每个月的第一个周一凌晨 2 点到 4 点期间，每个整点都执行一次；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Scheduled(cron = &quot;0 * * * * MON-SAT&quot;) // 整点执行一次</span></span><br><span class="line"><span class="comment">//    @Scheduled(cron = &quot;0,1,2,3,4 * * * * MON-SAT&quot;) // 0,1,2,3,4 各执行一次</span></span><br><span class="line"><span class="comment">//    @Scheduled(cron = &quot;0-4 * * * * MON-SAT&quot;) //0-4执行</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/4 * * * * MON-SAT&quot;)</span> <span class="comment">// 每4秒执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、邮件任务"><a href="#三、邮件任务" class="headerlink" title="三、邮件任务"></a>三、邮件任务</h2><h3 id="①-导入-pom-依赖"><a href="#①-导入-pom-依赖" class="headerlink" title="① 导入 pom 依赖"></a>① 导入 pom 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②-配置-application-properties"><a href="#②-配置-application-properties" class="headerlink" title="② 配置 application.properties"></a>② 配置 application.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">// 自己的邮箱</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.ssl.enable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p><code>spring.mail.password</code> 怎么获取：(以 QQ 邮箱为例)</p><p>登入 QQ 邮箱</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201003111221.png" alt="image-20201003111219977"></p><h3 id="③-测试"><a href="#③-测试" class="headerlink" title="③ 测试"></a>③ 测试</h3><p><em>基本格式：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">JavaMailSenderImpl javaMailSender;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 邮件设置</span></span><br><span class="line">    message.setSubject(<span class="string">&quot;通知-今晚开会&quot;</span>);</span><br><span class="line">    message.setText(<span class="string">&quot;今晚7:30开会&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 邮件接收</span></span><br><span class="line">    message.setTo(<span class="string">&quot;2640379231@qq.com&quot;</span>);</span><br><span class="line">    <span class="comment">// 邮件发送</span></span><br><span class="line">    message.setFrom(<span class="string">&quot;2097291754@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    javaMailSender.send(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201003112704.png" alt="image-20201003112703389"></p><p><em>复杂格式</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">JavaMailSenderImpl javaMailSender;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建一个复杂的消息邮件</span></span><br><span class="line">    MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">    MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 邮件设置</span></span><br><span class="line">    helper.setSubject(<span class="string">&quot;通知-今晚开会&quot;</span>);</span><br><span class="line">    <span class="comment">// 开启html 渲染，默认是false</span></span><br><span class="line">    helper.setText(<span class="string">&quot;&lt;b style=&#x27;color:red&#x27;&gt;今天 7:30 开会&lt;/b&gt;&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    helper.setTo(<span class="string">&quot;2640379231@qq.com&quot;</span>);</span><br><span class="line">    helper.setFrom(<span class="string">&quot;2097291754@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传文件</span></span><br><span class="line">    helper.addAttachment(<span class="string">&quot;1.jpg&quot;</span>,<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\hp\\Desktop\\OY\\图片\\1.jpg&quot;</span>));</span><br><span class="line">    helper.addAttachment(<span class="string">&quot;2.jpg&quot;</span>,<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\hp\\Desktop\\OY\\图片\\2.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">    javaMailSender.send(mimeMessage);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201003113439.png" alt="image-20201003113437850"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与检索(ElasticSearch)</title>
      <link href="posts/4004677012/"/>
      <url>posts/4004677012/</url>
      
        <content type="html"><![CDATA[<h2 id="一、ElasticSearch-安装环境"><a href="#一、ElasticSearch-安装环境" class="headerlink" title="一、ElasticSearch 安装环境"></a>一、ElasticSearch 安装环境</h2><ul><li>Linux CentOS 7</li><li>Docker 容器</li></ul><h2 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h2><h3 id="①-下载-docker-ElasticSearch-容器镜像"><a href="#①-下载-docker-ElasticSearch-容器镜像" class="headerlink" title="① 下载 docker ElasticSearch 容器镜像"></a>① 下载 docker ElasticSearch 容器镜像</h3><p><a href="https://hub.docker.com/">Docker Hub 镜像下载地址：https://hub.docker.com/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:7.6.2</span><br></pre></td></tr></table></figure><h3 id="②-启动镜像映射"><a href="#②-启动镜像映射" class="headerlink" title="② 启动镜像映射"></a>② 启动镜像映射</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot; -d -p 9200:9200 -p 9300:9300 --name ES01 elasticsearch:7.6.2</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：根据自己情况来配置 ==-e ES_JAVA_OPTS=”-Xms256m -Xmx256m”== 不配置的话，启动会占用你的 2G 内存，反之，配置的话，启动则根据你配置的内存来分配。</p><p><strong>异常</strong>：如果启动后，docker 容器自动关闭，且无法访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f id[容器id] // 查看启动日志</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201002130249.png" alt="image-20201002130248299"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 修改 elasticsearch.yml 配置即可解决</span><br><span class="line">// 先查找 elasticsearch.yml</span><br><span class="line">find / -name elasticsearch.yml</span><br><span class="line">vim elasticsearch.yml 路径</span><br><span class="line"></span><br><span class="line">// 在elasticsearch.yml添加下面内容</span><br><span class="line">bootstrap.system_call_filter: false</span><br><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201002130818.png" alt="image-20201002130817493"></p><p><a href="https://blog.csdn.net/qq_45738810/article/details/108901321">解决详细方法，请参考博客</a></p><ul><li>运行下面这条指令，并重新启动容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201002163803.png" alt="image-20201002163802716"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//重新启动容器</span><br><span class="line">docker start 容器[id]</span><br></pre></td></tr></table></figure><h3 id="③-测试"><a href="#③-测试" class="headerlink" title="③ 测试"></a>③ 测试</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201002130855.png" alt="image-20201002130854558"></p><h2 id="三、ElasticSearch-基本语法"><a href="#三、ElasticSearch-基本语法" class="headerlink" title="三、ElasticSearch 基本语法"></a>三、ElasticSearch 基本语法</h2><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_indexing_employee_documents.html">请参考官方文档进行学习</a></p><p><strong>简单示例演示</strong>：使用工具: Postman</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201002174517.png" alt="image-20201002174516786"></p><p>发送成功：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201002174718.png" alt="image-20201002174717317"></p><p><strong>注意</strong>：如果 put 出现 503 错误，需要在配置<strong>elasticsearch.yml</strong>文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.name: node-1</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201002174848.png" alt="image-20201002174847746"></p><p><strong>查询</strong>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201002180420.png" alt="image-20201002180418932"></p><h2 id="四、整合-ElasticSearch"><a href="#四、整合-ElasticSearch" class="headerlink" title="四、整合 ElasticSearch"></a>四、整合 ElasticSearch</h2><blockquote><p>​ springBoot 2.3.0 版本及以后版本不支持 es 查询工具 jestClient 自动注入</p></blockquote><h3 id="①-Jest"><a href="#①-Jest" class="headerlink" title="① Jest"></a>① Jest</h3><h4 id="2-2-版本"><a href="#2-2-版本" class="headerlink" title="2.2 版本"></a>2.2 版本</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201002203736.png" alt="image-20201002203735514"></p><h5 id="1-引入-jest"><a href="#1-引入-jest" class="headerlink" title="1.引入 jest"></a>1.引入 jest</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.searchbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-application-yml-配置"><a href="#2-application-yml-配置" class="headerlink" title="2. application.yml 配置"></a>2. application.yml 配置</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.elasticsearch.jest.uris</span>=<span class="string">http://192.168.64.129:9200</span></span><br></pre></td></tr></table></figure><h5 id="3-创建-bean"><a href="#3-创建-bean" class="headerlink" title="3.创建 bean"></a>3.创建 bean</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JestId</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get、set省略。。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JestClient jestClient;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Article article = <span class="keyword">new</span> Article();</span><br><span class="line">    article.setId(<span class="number">1</span>);</span><br><span class="line">    article.setTitle(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">    article.setAuthor(<span class="string">&quot;罗贯中&quot;</span>);</span><br><span class="line">    article.setContent(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Object source;</span><br><span class="line">    Index index = <span class="keyword">new</span> Index.Builder(article).index(<span class="string">&quot;sanguo&quot;</span>).type(<span class="string">&quot;news&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        jestClient.execute(index);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201002205343.png" alt="image-20201002205342622"></p><h4 id="2-3-版本"><a href="#2-3-版本" class="headerlink" title="2.3 版本"></a>2.3 版本</h4><blockquote><p>由于 springboot 2.3.0 以后版本不支持自动注入 JestClient，如下图我们在 yml 文件中配置 JestClient 时会出现划掉的线提示。我们采取手动配置的方式</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201002210231.png" alt="image-20201002210230272"></p><h5 id="1-引入-jest-1"><a href="#1-引入-jest-1" class="headerlink" title="1.引入 jest"></a>1.引入 jest</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.searchbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-创建-bean"><a href="#2-创建-bean" class="headerlink" title="2.创建 bean"></a>2.创建 bean</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JestId</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get、set省略。。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-手动注入和测试"><a href="#3-手动注入和测试" class="headerlink" title="3.手动注入和测试"></a>3.手动注入和测试</h5><p>【jestClient.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jestClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestClient <span class="title">getJestCline</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JestClientFactory factory = <span class="keyword">new</span> JestClientFactory();</span><br><span class="line">        factory.setHttpClientConfig(<span class="keyword">new</span> HttpClientConfig</span><br><span class="line">                .Builder(<span class="string">&quot;http://192.168.64.129:9200&quot;</span>)</span><br><span class="line">                .multiThreaded(<span class="keyword">true</span>)</span><br><span class="line">                .build());</span><br><span class="line">        <span class="keyword">return</span>  factory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Article article = <span class="keyword">new</span> Article();</span><br><span class="line">    article.setId(<span class="number">1</span>);</span><br><span class="line">    article.setTitle(<span class="string">&quot;西游记&quot;</span>);</span><br><span class="line">    article.setAuthor(<span class="string">&quot;吴承恩&quot;</span>);</span><br><span class="line">    article.setContent(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    Index index = <span class="keyword">new</span> Index.Builder(article).index(<span class="string">&quot;xiyou&quot;</span>).type(<span class="string">&quot;news&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        jestClient.getJestCline().execute(index);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201002211339.png" alt="image-20201002211338268"></p><h5 id="4-表达式测试搜索-2-2-和-2-3"><a href="#4-表达式测试搜索-2-2-和-2-3" class="headerlink" title="4.表达式测试搜索(2.2 和 2.3)"></a>4.表达式测试搜索(2.2 和 2.3)</h5><p><em>更多操作：<a href="https://github.com/searchbox-io/Jest/tree/master/jest">https://github.com/searchbox-io/Jest/tree/master/jest</a></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试搜索</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 查询表达式</span></span><br><span class="line">    String json =<span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;    \&quot;query\&quot; : &#123;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;        \&quot;match\&quot; : &#123;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;            \&quot;content\&quot; : \&quot;hello\&quot;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    <span class="comment">// 构建搜索功能</span></span><br><span class="line">    Search search = <span class="keyword">new</span> Search.Builder(json).addIndex(<span class="string">&quot;xiyou&quot;</span>).addType(<span class="string">&quot;news&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 2.2 版本： SearchResult result = jestClient.execute(search);</span></span><br><span class="line">        <span class="comment">// 以下是2.3版本</span></span><br><span class="line">        SearchResult result = jestClient.getJestCline().execute(search);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201002211956.png" alt="image-20201002211956011"></p><h3 id="②-springDataElasticSearch"><a href="#②-springDataElasticSearch" class="headerlink" title="② springDataElasticSearch"></a>② springDataElasticSearch</h3><h4 id="2-2-版本-1"><a href="#2-2-版本-1" class="headerlink" title="2.2 版本"></a>2.2 版本</h4><h5 id="1-application-yml-配置"><a href="#1-application-yml-配置" class="headerlink" title="1.application.yml 配置"></a>1.application.yml 配置</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.data.elasticsearch.cluster-name</span>=<span class="string">elasticsearch</span></span><br><span class="line"><span class="meta">spring.data.elasticsearch.cluster-nodes</span>=<span class="string">118.24.44.169:9301</span></span><br></pre></td></tr></table></figure><p>其他的不过多的赘述了，不在向上面分版本，其他的参考 2.3 版本，可自行百度。</p><h4 id="2-3-版本-1"><a href="#2-3-版本-1" class="headerlink" title="2.3 版本"></a>2.3 版本</h4><h5 id="1-引入-spring-boot-starter-data-elasticsearch"><a href="#1-引入-spring-boot-starter-data-elasticsearch" class="headerlink" title="1.引入 spring-boot-starter-data-elasticsearch"></a>1.引入 spring-boot-starter-data-elasticsearch</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-安装-Spring-Data-对应版本的-ElasticSearch"><a href="#2-安装-Spring-Data-对应版本的-ElasticSearch" class="headerlink" title="2.安装 Spring Data 对应版本的 ElasticSearch"></a>2.安装 Spring Data 对应版本的 ElasticSearch</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201002213500.png" alt="image-20201002213459314"></p><p><strong>版本适配说明</strong>：<a href="https://github.com/spring-projects/spring-data-elasticsearch">https://github.com/spring-projects/spring-data-elasticsearch</a></p><p><strong>如果版本不适配：</strong></p><p><em>1）、升级 SpringBoot 版本</em></p><p><em>2）、安装对应版本的 ES</em></p><h5 id="3-手动配置-Client"><a href="#3-手动配置-Client" class="headerlink" title="3.手动配置 Client"></a>3.手动配置 Client</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201002213832.png" alt="image-20201002213831795"></p><blockquote><p>现在 spring 官方推荐我们用<code>High Level REST Client</code>来配置</p></blockquote><p>手动配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchConfig</span> <span class="keyword">extends</span> <span class="title">AbstractElasticsearchConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">elasticsearchClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClientConfiguration configuration = ClientConfiguration.builder(</span><br><span class="line">        )</span><br><span class="line">                .connectedTo(<span class="string">&quot;192.168.64.129:9200&quot;</span>)</span><br><span class="line">                <span class="comment">//.withConnectTimeout(Duration.ofSeconds(5))</span></span><br><span class="line">                <span class="comment">//.withSocketTimeout(Duration.ofSeconds(3))</span></span><br><span class="line">                <span class="comment">//.useSsl()</span></span><br><span class="line">                <span class="comment">//.withDefaultHeaders(defaultHeaders)</span></span><br><span class="line">                <span class="comment">//.withBasicAuth(username, password)</span></span><br><span class="line">                <span class="comment">// ... other options</span></span><br><span class="line">                .build();</span><br><span class="line">        RestHighLevelClient client = RestClients.create(configuration).rest();</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-创建-bean"><a href="#4-创建-bean" class="headerlink" title="4.创建 bean"></a>4.创建 bean</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//6.0版本后，一个index只有一个type了,这里type也被移除。ES默认type为“_doc”</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;at&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String bookname;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//get set 构造函数，toString的得写上，这里太长就删了先</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-操作-ES-有两大类"><a href="#5-操作-ES-有两大类" class="headerlink" title="5.操作 ES 有两大类"></a>5.操作 ES 有两大类</h5><ol><li>Elasticsearch Repositories</li><li>Elasticsearch Operations</li></ol><p><strong>Elasticsearch Repositories</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200823163332144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2NjMyMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>先用<code>Elasticsearch Repositories</code>，注意<strong>接口与接口的关系是 extends</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Bookrepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Book</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//ElasticsearchCrudRepository 已经过时</span></span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">findBookById</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Elasticsearch Repositories</code>提供了许多关键字，来帮助我们实现方法。我们只需要写抽象方法即可，<code>Elasticsearch Repositories</code>会根据方法名自动我们为我们实现，比如上面<code>find</code>和<code>By</code>就是关键字。我们需要在 springboot 主配置类上加上注解<code>@EnableElasticsearchRepositories</code>可以使用 Elasticsearch 提供的的关键字（方法）列表,常用关键字如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200728203140842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2NjMyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>然后测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Bookrepository bookrepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book=<span class="keyword">new</span> Book(<span class="number">1</span>,<span class="string">&quot;西游记&quot;</span>,<span class="string">&quot;吴承恩&quot;</span>);</span><br><span class="line">        bookrepository.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testRepositories</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">        <span class="comment">//Elasticsearch Repositories提供and,by等一大堆关键字来连接JAVABEAN属性，我们写接口，他自动变成为实现类。</span></span><br><span class="line">        List&lt;Book&gt; bookById = bookrepository.findBookById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(bookById.get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200728203335259.png" alt="在这里插入图片描述"></p><p><strong>Elasticsearch Operations</strong></p><p>ElasticsearchTemplate 是基于<code>Transport client</code>的,<code>Transport client</code>将会再 ES8.0 中被弃用,用谁不用我多说了吧。<br>使用 Elasticsearch Operations 我们需要修改上面的配置类，需要继承<code>AbstractElasticsearchConfiguration</code>，因为基类<code>AbstractElasticsearchConfiguration</code>已经提供了<code>ElasticsearchRestTemplate</code>这个<code>bean</code><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200823163624247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2NjMyMg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestClientConfig</span> <span class="keyword">extends</span> <span class="title">AbstractElasticsearchConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">elasticsearchClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClientConfiguration configuration = ClientConfiguration.builder(</span><br><span class="line">        )</span><br><span class="line">                .connectedTo(<span class="string">&quot;192.168.100.126:9200&quot;</span>)<span class="comment">//9300会报错</span></span><br><span class="line">                <span class="comment">//.withConnectTimeout(Duration.ofSeconds(5))</span></span><br><span class="line">                <span class="comment">//.withSocketTimeout(Duration.ofSeconds(3))</span></span><br><span class="line">                <span class="comment">//.useSsl()</span></span><br><span class="line">                <span class="comment">//.withDefaultHeaders(defaultHeaders)</span></span><br><span class="line">                <span class="comment">//.withBasicAuth(username, password)</span></span><br><span class="line">                <span class="comment">// ... other options</span></span><br><span class="line">                .build();</span><br><span class="line">        RestHighLevelClient client = RestClients.create(configuration).rest();</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ElasticsearchOperations elasticsearchOperations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSaveByOperations</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Book book=<span class="keyword">new</span> Book(<span class="number">2</span>,<span class="string">&quot;西游记2&quot;</span>,<span class="string">&quot;吴承恩二世&quot;</span>);</span><br><span class="line">        IndexQuery indexQuery= <span class="keyword">new</span> IndexQueryBuilder()</span><br><span class="line">                .withId(book.getId().toString())</span><br><span class="line">                .withObject(book)</span><br><span class="line">                .build();</span><br><span class="line">        String documentId = elasticsearchOperations.index(indexQuery, IndexCoordinates.of(<span class="string">&quot;at&quot;</span>));<span class="comment">//返回_id(并非javabean中的ID，而是hits中的)</span></span><br><span class="line">        System.out.println(documentId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testFindByOperations</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Book book = elasticsearchOperations.get(<span class="string">&quot;2&quot;</span>,Book.class,IndexCoordinates.of(<span class="string">&quot;at&quot;</span>));<span class="comment">//IndexCoordinates的参数为Index</span></span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200728204141676.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与消息</title>
      <link href="posts/1634411798/"/>
      <url>posts/1634411798/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ol><li><p>消息服务中两个中重要的概念：<strong>消息代理</strong> 和 <strong>目的地</strong></p></li><li><p>消息队列主要由两种形式的目的地</p><ul><li>队列： 点对点消息通信</li><li>主题： 发布/订阅 消息通信</li></ul></li></ol><p><strong>异步处理</strong>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001103039.png" alt="image-20201001103032175"></p><p><strong>应用解耦</strong>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001103057.png" alt="image-20201001103056701"></p><p><strong>流量削峰：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001103138.png" alt="image-20201001103136215"></p><ol start="3"><li><strong>点对点式：</strong></li></ol><ul><li><p>消息发送者发送消息，消息代理将其放入一个队列中，消息接收者从队列中获取消息内容，消息读取后被移出队列 。</p></li><li><p>消息只有唯一的发送者和接受者，但并不是说只能有一个接收者</p></li></ul><ol start="4"><li><strong>发布订阅式：</strong></li></ol><ul><li>发送者（发布者）发送消息到主题，多个接受者（订阅者）监听（订阅） 这个主题，那么就会发布到达同时收到消息。</li></ul><ol start="5"><li><strong>JMS (Java Message Service ) JAVA 消息服务</strong></li></ol><ul><li>基于 JVM 消息代理的规范。 ActiveMQ、 HornetMQ 是 JMS 实现</li></ul><ol start="6"><li><strong>AMQP（Advanced Message Queuing Protocol）</strong></li></ol><ul><li>高级消息队列协议，也是一个消息代理的规范，兼容 JMS</li><li>RabbitMQ 是 AMQP 的实现</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001103915.png" alt="image-20201001103914893"></p><ol start="7"><li><strong>Spring 支持</strong><ul><li>spring-jms 提供了对 JMS 的支持</li><li>spring-rabbit 提供了对 AMQP 的支持</li><li>需要 ConnectionFactory 的实现来连接消息代理</li><li>提供 JmsTemplate、RebbitTemplate 来发送消息</li><li>@JmsListener（JMS）、 @RabbitListener（AMQP）注解在方法上监听消息代理发<br>布的消息</li><li>@EnableJms、@EnableRebbit 开启支持</li></ul></li><li><strong>SpringBoot 自动配置</strong><ul><li>JmsAutoConfiguration</li><li>RabbitAutoConfiguration</li></ul></li></ol><h2 id="二、RabbitMQ-简介"><a href="#二、RabbitMQ-简介" class="headerlink" title="二、RabbitMQ 简介"></a>二、RabbitMQ 简介</h2><table><thead><tr><th>核心概念</th><th></th></tr></thead><tbody><tr><td>Message</td><td>消息</td></tr><tr><td>Publisher</td><td>消息的生产者，也是一个向交换器发布消息的客户端应用程序。</td></tr><tr><td>Exchange</td><td>交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。</td></tr><tr><td>Queue</td><td>消息队列，用来保存消息直到发送给消费者。</td></tr><tr><td>Binding</td><td>绑定，用于消息队列和交换器之间的关联。</td></tr><tr><td>Connection</td><td>网络连接，比如一个 TCP 连接。</td></tr><tr><td>Channel</td><td>信道，多路复用连接中的一条独立的双向数据流通道。</td></tr><tr><td>Consumer</td><td>消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。</td></tr><tr><td>Virtual Host</td><td>虚拟主机，表示一批交换器、消息队列和相关对象。</td></tr><tr><td>Broker</td><td>表示消息队列服务器实体</td></tr></tbody></table><p><strong>图示</strong>:</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001105420.png" alt="image-20201001105419593"></p><h2 id="三、RabbitMQ-运行机制"><a href="#三、RabbitMQ-运行机制" class="headerlink" title="三、RabbitMQ 运行机制"></a>三、RabbitMQ 运行机制</h2><h3 id="①-AMQP-中的消息路由"><a href="#①-AMQP-中的消息路由" class="headerlink" title="① AMQP 中的消息路由"></a>① AMQP 中的消息路由</h3><p>AMQP 中消息的路由过程和 Java 开发者熟悉的 JMS 存在一些差别， AMQP 中增加了<strong>Exchange</strong> 和 <strong>Binding</strong> 的角色。生产者把消息发布到 Exchange 上，消息最终到达队列并被消费者接收，而 Binding 决定交换器的消息应该发送到那个队列。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001110230.png" alt="image-20201001110229868"></p><h3 id="②-Exchange-类型"><a href="#②-Exchange-类型" class="headerlink" title="② Exchange 类型"></a>② Exchange 类型</h3><p>Exchange 分发消息时根据类型的不同分发策略有区别，目前共四种类型：direct、 fanout、 topic、 headers 。 headers 匹配 AMQP 消息的 header 而不是路由键， headers 交换器和 direct 交换器完全一致，但性能差很多，目前几乎用不到了，所以直接看另外三种类型：</p><ul><li><strong>Direct Exchange</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001110343.png" alt="image-20201001110342589"></p><p>消息中的路由键（routing key）如果和 Binding 中的 binding key 一致， 交换器就将消息发到对应的队列中。路由键与队列名完全匹配，如果一个队列绑定到交换机要求路由键为“dog”，则只转发 routing key 标记为“dog”的消息，不会发“dog.puppy”，也不会转发“dog.guard”等等。它是完全匹配、单播的模式。</p><ul><li><strong>Fanout Exchange</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001110512.png" alt="image-20201001110511087"></p><p>每个发到 fanout 类型交换器的消息都会分到所有绑定的队列上去。 fanout 交换器不处理路由键，只是简单的将队列绑定到交换器上，每个发送到交换器的消息都会被转发到与该交换器绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。 fanout 类型转发消息是最快的 。</p><ul><li><strong>Topic Echange</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001110719.png" alt="image-20201001110718169"></p><p>topic 交换器通过模式匹配分配消息的路由键属性，将路由键和某个模式进行匹配，此时队列需要绑定到一个模式上。它将路由键和绑定键的字符串切分成单词，这些单词之间用点隔开。它同样也会识别两个通配符：符号“#”和符号“*” 。 #匹配 0 个或多个单词， *匹配一个单词。</p><h2 id="四、RabbitMQ-安装启动"><a href="#四、RabbitMQ-安装启动" class="headerlink" title="四、RabbitMQ 安装启动"></a>四、RabbitMQ 安装启动</h2><h3 id="①-环境准备"><a href="#①-环境准备" class="headerlink" title="① 环境准备"></a>① 环境准备</h3><ul><li>Linux CentOS7</li><li>docker 容器</li></ul><h3 id="②-安装步骤"><a href="#②-安装步骤" class="headerlink" title="② 安装步骤"></a>② 安装步骤</h3><ol><li><strong>在 docker hub 中找到 rebbitMQ 镜像</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001111825.png" alt="image-20201001111824920"></p><ol start="2"><li><strong>下载镜像，docker 安装</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 选择3-mansgement 带web管理界面</span><br><span class="line">docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001112327.png" alt="image-20201001112326680"></p><ol start="3"><li><strong>启动 rebbitMQ 容器</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 --name mybebbitmq rabbitmq:3-management</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001112850.png" alt="image-20201001112849245"></p><ol start="4"><li><p><strong>访问</strong></p><p>前提：保证 linux 防火墙暂时关闭，才能给外网访问。</p><p>初始用户和密码： <strong>guest</strong></p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001113622.png" alt="image-20201001113621615"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001113833.png" alt="image-20201001113832487"></p><h2 id="五、RabbitMQ-整合"><a href="#五、RabbitMQ-整合" class="headerlink" title="五、RabbitMQ 整合"></a>五、RabbitMQ 整合</h2><p><strong>idea 创建工程</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001221346.png" alt="image-20201001221338906"></p><h3 id="①-引入-spring-boot-starter-amqp"><a href="#①-引入-spring-boot-starter-amqp" class="headerlink" title="① 引入 spring-boot-starter-amqp"></a>① 引入 spring-boot-starter-amqp</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②-application-yml-配置"><a href="#②-application-yml-配置" class="headerlink" title="② application.yml 配置"></a>② application.yml 配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.rabbitmq.host</span>=<span class="string">192.168.64.129</span></span><br><span class="line"><span class="meta">spring.rabbitmq.username</span>=<span class="string">guest</span></span><br><span class="line"><span class="meta">spring.rabbitmq.password</span>=<span class="string">guest</span></span><br></pre></td></tr></table></figure><h3 id="③-测试-RabbitMQ"><a href="#③-测试-RabbitMQ" class="headerlink" title="③ 测试 RabbitMQ"></a>③ 测试 RabbitMQ</h3><h4 id="1-AmqpAdmin：管理组件"><a href="#1-AmqpAdmin：管理组件" class="headerlink" title="1. AmqpAdmin：管理组件"></a>1. AmqpAdmin：管理组件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AmqpAdmin amqpAdmin;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//        创建exchange</span></span><br><span class="line">    amqpAdmin.declareExchange(<span class="keyword">new</span> DirectExchange(<span class="string">&quot;amqpadmin.exchange&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;创建完成&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建Queue</span></span><br><span class="line">    amqpAdmin.declareQueue(<span class="keyword">new</span> Queue(<span class="string">&quot;amqpadmin.queue&quot;</span>, <span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建绑定规则</span></span><br><span class="line">    amqpAdmin.declareBinding(<span class="keyword">new</span> Binding(<span class="string">&quot;amqpadmin.queue&quot;</span>, Binding.DestinationType.QUEUE, <span class="string">&quot;amqpadmin.exchange&quot;</span>, <span class="string">&quot;amqpadmin.queue&quot;</span>, <span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001230222.png" alt="image-20201001230221670"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001230305.png" alt="image-20201001230304363"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001230359.png" alt="image-20201001230357584"></p><h4 id="2-RabbitTemplate-消息发送处理文件"><a href="#2-RabbitTemplate-消息发送处理文件" class="headerlink" title="2.RabbitTemplate: 消息发送处理文件"></a>2.RabbitTemplate: 消息发送处理文件</h4><h5 id="点对点"><a href="#点对点" class="headerlink" title="点对点"></a>点对点</h5><p><strong>发送</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// Message 需要自己构建一个；定义消息体内容和消息头</span></span><br><span class="line"><span class="comment">//        rabbitTemplate.send(exchange,routeKey, message);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// object默认当成消息体，只需要传入要发送的消息，自动序列化发送给rabbitmq;</span></span><br><span class="line"><span class="comment">//        rabbitTemplate.convertAndSend(exchange, object);</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;amqpadmin.exchange&quot;</span>,<span class="string">&quot;amqpadmin.queue&quot;</span>,<span class="string">&quot;测试:test.msg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001230854.png" alt="image-20201001230853774"></p><p><strong>接收</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Object o = rabbitTemplate.receiveAndConvert(<span class="string">&quot;amqpadmin.queue&quot;</span>);</span><br><span class="line">    System.out.println(o.getClass());</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001231417.png" alt="image-20201001231416983"></p><p><strong>第二种发送，以 Json 方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二种发送，以Json方式</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 以Json 数据格式发送</span></span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;这是第一条消息&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;data&quot;</span>,Arrays.asList(<span class="string">&quot;helloworld&quot;</span>,<span class="number">123</span>,<span class="keyword">true</span>));</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;amqpadmin.exchange&quot;</span>,<span class="string">&quot;amqpadmin.queue&quot;</span>, map);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  rabbitTemplate.convertAndSend(&quot;amqpadmin.exchange&quot;,&quot;amqpadmin.queue&quot;,new Book(&quot;西游记&quot;,&quot;吴承恩&quot;));</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001232013.png" alt="image-20201001232012247"></p><p>发送的 Json 数据被序列化，没有显示正常的 json 数据格式，<strong>解决方式</strong>：自定义序列方式采用 JSON</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义序列的为Json 格式</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">messageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001233057.png" alt="image-20201001233056772"></p><h5 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先创建Exchange</span></span><br><span class="line">amqpAdmin.declareExchange(<span class="keyword">new</span> FanoutExchange(<span class="string">&quot;amqpadmin.fanout&quot;</span>));</span><br><span class="line"><span class="comment">// 绑定</span></span><br><span class="line">Binding.DestinationType.QUEUE,<span class="string">&quot;amqpadmin.fanout&quot;</span>,<span class="string">&quot;amqpadmin.queue&quot;</span>,<span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;amqpadmin.fanout&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="keyword">new</span> Book(<span class="string">&quot;红楼梦&quot;</span>,<span class="string">&quot;曹雪芹&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20201001235831.png" alt="image-20201001235830780"></p><h5 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;amqpadmin.queue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Book book)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到消息:&quot;</span> + book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;amqpadmin.queue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">        System.out.println(message.getBody());</span><br><span class="line">        System.out.println(message.getMessageProperties());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LayUI快速入门</title>
      <link href="posts/3956353174/"/>
      <url>posts/3956353174/</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200917210106.png" alt="image-20200917210104791"></p><p>[TOC]</p><h2 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><blockquote><p>官网：<a href="https://www.layui.com/">https://www.layui.com/</a></p><p>在官网首页，可以很方便的下载 LayUI</p></blockquote><h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><h3 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h3><blockquote><p>在官网下载即可完成</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200917182417.png" alt="image-20200917182414275"></p><blockquote><p>下载的 LayUI 解压后，将其中的 layUI 目录导入项目中</p></blockquote><ul><li>将 layui 目录放到 webapp 目录下</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200917182650.png" alt="image-20200917182649716"></p><ul><li>在 JSP 中导入 layui 依赖</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;$&#123;pageContext.servletContext.contextPath&#125;/layui/css/layui.css&quot;</span>&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;pageContext.servletContext.contextPath&#125;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/layui/css/layui.css&quot;</span>&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/layui/layui.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200917183438.png" alt="image-20200917183437464"></p><h2 id="三、页面元素"><a href="#三、页面元素" class="headerlink" title="三、页面元素"></a>三、页面元素</h2><h3 id="3-1-布局"><a href="#3-1-布局" class="headerlink" title="3.1 布局"></a>3.1 布局</h3><blockquote><p>响应式栅格布局，每行分 12 等分</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--layui-container居中显示有固定的尺寸： layui-fiuid 占满行宽--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div class=&quot;layui-container&quot;&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-fluid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-col-md9 layui-col-lg6 layui-bg-orange&quot;</span>&gt;</span>你的内容 9/12<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-col-md3 layui-col-lg6 layui-bg-gray&quot;</span>&gt;</span>你的内容 3/12<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &lt;%--移动设备、平板、桌面端的不同表现：--%&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-col-xs6 layui-col-sm6 layui-col-md4 layui-col-lg3&quot;</span>&gt;</span></span><br><span class="line">      移动：6/12 | 平板：6/12 | 桌面：4/12;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-col-xs6 layui-col-sm6 layui-col-md4 layui-col-lg3&quot;</span>&gt;</span></span><br><span class="line">      移动：6/12 | 平板：6/12 | 桌面：4/12;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-col-xs4 layui-col-sm12 layui-col-md4 layui-col-lg3&quot;</span>&gt;</span></span><br><span class="line">      移动：4/12 | 平板：12/12 | 桌面：4/12;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-col-xs4 layui-col-sm7 layui-col-md8 layui-col-lg3&quot;</span>&gt;</span></span><br><span class="line">      移动：4/12 | 平板：7/12 | 桌面：8/12;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-col-xs4 layui-col-sm5 layui-col-md4 layui-col-lg3&quot;</span>&gt;</span></span><br><span class="line">      移动：4/12 | 平板：5/12 | 桌面：4/12;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-字体图标"><a href="#3-2-字体图标" class="headerlink" title="3.2 字体图标"></a>3.2 字体图标</h3><blockquote><p>class=”layui-icon 具体的图标样式”</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;layui-icon layui-icon-heart-fill&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">&lt;i</span><br><span class="line">  class=&quot;layui-icon layui-icon-light&quot;</span><br><span class="line">  style=&quot;font-size: 30px; color: #1E9FFF;&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-按钮"><a href="#3-3-按钮" class="headerlink" title="3.3 按钮"></a>3.3 按钮</h3><blockquote><p>class=”layui-btn 主题 样式”</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span>&gt;</span>标准的按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.layui.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span>&gt;</span>可跳转的按钮<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.layui.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-primary&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span>主题的按钮&lt;/a</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.layui.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-primary layui-btn-sm&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span>主题的按钮&lt;/a</span><br><span class="line">&gt;</span><br><span class="line">&lt;a</span><br><span class="line">  href=&quot;http://www.layui.com&quot;</span><br><span class="line">  class=&quot;layui-btn layui-btn-primary layui-btn-radius &quot;</span><br><span class="line">  &gt;圆角的按钮&lt;/a</span><br><span class="line">&gt;</span><br><span class="line">&lt;a</span><br><span class="line">  href=&quot;http://www.layui.com&quot;</span><br><span class="line">  class=&quot;layui-btn layui-btn-primary layui-btn-sm  layui-btn-radius &quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;i</span><br><span class="line">    class=&quot;layui-icon layui-icon-heart-fill&quot;</span><br><span class="line">    style=&quot;font-size: 30px; color: #1E9FFF;&quot;</span><br><span class="line">  &gt;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  带图标的按钮</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-表单"><a href="#3-4-表单" class="headerlink" title="3.4 表单"></a>3.4 表单</h3><blockquote><p>class=”layui-from”</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;layui-form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>输入框<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">      &lt;input</span><br><span class="line">        type=&quot;text&quot;</span><br><span class="line">        name=&quot;title&quot;</span><br><span class="line">        required</span><br><span class="line">        lay-verify=&quot;required&quot;</span><br><span class="line">        placeholder=&quot;请输入标题&quot;</span><br><span class="line">        autocomplete=&quot;off&quot;</span><br><span class="line">        class=&quot;layui-input&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>密码框<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">      &lt;input</span><br><span class="line">        type=&quot;password&quot;</span><br><span class="line">        name=&quot;password&quot;</span><br><span class="line">        required</span><br><span class="line">        lay-verify=&quot;required&quot;</span><br><span class="line">        placeholder=&quot;请输入密码&quot;</span><br><span class="line">        autocomplete=&quot;off&quot;</span><br><span class="line">        class=&quot;layui-input&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-mid layui-word-aux&quot;</span>&gt;</span>辅助文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>选择框<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">lay-verify</span>=<span class="string">&quot;required&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择城市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>复选框<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like[write]&quot;</span> <span class="attr">title</span>=<span class="string">&quot;写作&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like[read]&quot;</span> <span class="attr">title</span>=<span class="string">&quot;阅读&quot;</span> <span class="attr">checked</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like[dai]&quot;</span> <span class="attr">title</span>=<span class="string">&quot;发呆&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>开关<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;switch&quot;</span> <span class="attr">lay-skin</span>=<span class="string">&quot;switch&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>单选框<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">title</span>=<span class="string">&quot;男&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">title</span>=<span class="string">&quot;女&quot;</span> <span class="attr">checked</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item layui-form-text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>文本域<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">      &lt;textarea</span><br><span class="line">        name=&quot;desc&quot;</span><br><span class="line">        placeholder=&quot;请输入内容&quot;</span><br><span class="line">        class=&quot;layui-textarea&quot;</span><br><span class="line">      &gt;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-lg&quot;</span> <span class="attr">lay-submit</span> <span class="attr">lay-filter</span>=<span class="string">&quot;formDemo&quot;</span>&gt;</span></span><br><span class="line">        立即提交</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;layui-icon&quot;</span>&gt;</span><span class="symbol">&amp;#xe67c;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>上传图片</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 必须要导入form模块，才能保证表单正常渲染</span></span></span><br><span class="line"><span class="javascript">  layui.use(<span class="string">&quot;form&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> form = layui.form;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//监听提交</span></span></span><br><span class="line"><span class="javascript">    form.on(<span class="string">&quot;submit(formDemo)&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// data就是表单中的所有数据</span></span></span><br><span class="line"><span class="javascript">      layer.msg(<span class="built_in">JSON</span>.stringify(data.field));</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-数据表格"><a href="#3-5-数据表格" class="headerlink" title="3.5 数据表格"></a>3.5 数据表格</h3><h4 id="3-5-1-动态表格"><a href="#3-5-1-动态表格" class="headerlink" title="3.5.1 动态表格"></a>3.5.1 动态表格</h4><blockquote><p>动态表格</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 必须要导入 table模块 layui.use(&#x27;table&#x27;,...)</span></span></span><br><span class="line"><span class="javascript">  layui.use(<span class="string">&quot;table&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> table = layui.table;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 为表格填充数据</span></span></span><br><span class="line">    table.render(&#123;</span><br><span class="line"><span class="javascript">      elem: <span class="string">&quot;#demo&quot;</span>,</span></span><br><span class="line">      height: 312,</span><br><span class="line"><span class="javascript">      url: <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/data.jsp&quot;</span>, <span class="comment">//获取数据</span></span></span><br><span class="line"><span class="javascript">      page: <span class="literal">true</span>, <span class="comment">// 开启分页</span></span></span><br><span class="line">      cols: [</span><br><span class="line">        [</span><br><span class="line"><span class="javascript">          <span class="comment">//表头</span></span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">field</span>: <span class="string">&quot;id&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;ID&quot;</span>, <span class="attr">sort</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">field</span>: <span class="string">&quot;username&quot;</span>, <span class="attr">width</span>: <span class="number">80</span>, <span class="attr">title</span>: <span class="string">&quot;用户名&quot;</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">field</span>: <span class="string">&quot;sex&quot;</span>, <span class="attr">width</span>: <span class="number">80</span>, <span class="attr">title</span>: <span class="string">&quot;性别&quot;</span>, <span class="attr">sort</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">field</span>: <span class="string">&quot;city&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;城市&quot;</span> &#125;, <span class="comment">//没定义宽度则占满剩余所有宽度，都不定义则所有列均分</span></span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">field</span>: <span class="string">&quot;score&quot;</span>, <span class="attr">width</span>: <span class="number">80</span>, <span class="attr">title</span>: <span class="string">&quot;评分&quot;</span>, <span class="attr">sort</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">field</span>: <span class="string">&quot;right&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;操作&quot;</span>, <span class="attr">toolbar</span>: <span class="string">&quot;#barDemo&quot;</span> &#125;,</span></span><br><span class="line">        ],</span><br><span class="line">      ],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>数据格式如下：</p><ul><li>code: 0 代表查询成功， 为 1 是， 会显示 msg 中的内容</li><li>count 是为了分页准备的，共有多少条数据</li></ul></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式如下：</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;no data&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;shine1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;保定&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;score&quot;</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;shine2&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;sex&quot;</span>: <span class="string">&quot;女&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;石家庄&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;score&quot;</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;id&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;shine3&quot;</span>, <span class="attr">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>, <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;邢台&quot;</span>, <span class="attr">&quot;score&quot;</span>: <span class="number">100</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;count&quot;</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-2-分页参数"><a href="#3-5-2-分页参数" class="headerlink" title="3.5.2 分页参数"></a>3.5.2 分页参数</h4><blockquote><p>分页条细节定制</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 必须要导入 table模块 layui.use(&#x27;table&#x27;,...)</span></span></span><br><span class="line"><span class="javascript">  layui.use(<span class="string">&#x27;table&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> table = layui.table;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 为表格填充数据</span></span></span><br><span class="line">      table.render(&#123;</span><br><span class="line"><span class="javascript">          elem: <span class="string">&#x27;#demo&#x27;</span></span></span><br><span class="line">          ,height: 312</span><br><span class="line"><span class="javascript">          ,<span class="attr">url</span>: <span class="string">&#x27;$&#123;pageContext.request.contextPath&#125;/data.jsp&#x27;</span> <span class="comment">//获取数据</span></span></span><br><span class="line"><span class="javascript">          ,<span class="attr">page</span>: &#123;<span class="attr">limit</span>:<span class="number">1</span><span class="comment">//每页显示1条</span></span></span><br><span class="line"><span class="javascript">                  ,<span class="attr">limits</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="comment">//可选每页条数</span></span></span><br><span class="line"><span class="javascript">                  ,<span class="attr">first</span>: <span class="string">&#x27;首页&#x27;</span> <span class="comment">//首页显示文字，默认显示页号</span></span></span><br><span class="line"><span class="javascript">                  ,<span class="attr">last</span>: <span class="string">&#x27;尾页&#x27;</span></span></span><br><span class="line"><span class="javascript">                  ,<span class="attr">prev</span>: <span class="string">&#x27;&lt;em&gt;←&lt;/em&gt;&#x27;</span> <span class="comment">//上一页显示内容，默认显示 &gt; &lt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  ,next: &#x27;<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;layui-icon layui-icon-next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="javascript">                  ,<span class="attr">layout</span>:[<span class="string">&#x27;prev&#x27;</span>, <span class="string">&#x27;page&#x27;</span>, <span class="string">&#x27;next&#x27;</span>,<span class="string">&#x27;count&#x27;</span>,<span class="string">&#x27;limit&#x27;</span>,<span class="string">&#x27;skip&#x27;</span>,<span class="string">&#x27;refresh&#x27;</span>] <span class="comment">//自定义分页布局</span></span></span><br><span class="line"><span class="javascript">                 &#125; <span class="comment">//开启分页</span></span></span><br><span class="line">          ,cols: [[.....]]</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-5-3-显示工具栏"><a href="#3-5-3-显示工具栏" class="headerlink" title="3.5.3 显示工具栏"></a>3.5.3 显示工具栏</h4><blockquote><p>右上角工具按钮 toolbar:true</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 必须要导入 table模块 layui.use(&#x27;table&#x27;,...)</span></span></span><br><span class="line"><span class="javascript">  layui.use(<span class="string">&#x27;table&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> table = layui.table;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 为表格填充数据</span></span></span><br><span class="line">      table.render(&#123;</span><br><span class="line"><span class="javascript">          elem: <span class="string">&#x27;#demo&#x27;</span></span></span><br><span class="line">          ,height: 312</span><br><span class="line"><span class="javascript">          ,<span class="attr">toolbar</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">          ,<span class="attr">url</span>: <span class="string">&#x27;$&#123;pageContext.request.contextPath&#125;/data.jsp&#x27;</span> <span class="comment">//获取数据</span></span></span><br><span class="line"><span class="javascript">          ,<span class="attr">page</span>: &#123;...&#125; <span class="comment">//开启分页</span></span></span><br><span class="line">          ,cols: [[...]]</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-5-4-操作按钮"><a href="#3-5-4-操作按钮" class="headerlink" title="3.5.4 操作按钮"></a>3.5.4 操作按钮</h4><blockquote><p>为每行增加操作按钮</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 必须要导入 table模块 layui.use(&#x27;table&#x27;,...)</span></span></span><br><span class="line"><span class="javascript">  layui.use(<span class="string">&quot;table&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> table = layui.table;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 为表格填充数据</span></span></span><br><span class="line">    table.render(&#123;</span><br><span class="line"><span class="javascript">      elem: <span class="string">&quot;#demo&quot;</span>,</span></span><br><span class="line">      height: 312,</span><br><span class="line"><span class="javascript">      toolbar: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      url: <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/data.jsp&quot;</span>, <span class="comment">//获取数据</span></span></span><br><span class="line">      cols: [</span><br><span class="line">        [</span><br><span class="line"><span class="javascript">          <span class="comment">//表头</span></span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">field</span>: <span class="string">&quot;id&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;ID&quot;</span>, <span class="attr">sort</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">field</span>: <span class="string">&quot;username&quot;</span>, <span class="attr">width</span>: <span class="number">80</span>, <span class="attr">title</span>: <span class="string">&quot;用户名&quot;</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">field</span>: <span class="string">&quot;sex&quot;</span>, <span class="attr">width</span>: <span class="number">80</span>, <span class="attr">title</span>: <span class="string">&quot;性别&quot;</span>, <span class="attr">sort</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">field</span>: <span class="string">&quot;city&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;城市&quot;</span> &#125;, <span class="comment">//没定义宽度则占满剩余所有宽度，都不定义则所有列均分</span></span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">field</span>: <span class="string">&quot;score&quot;</span>, <span class="attr">width</span>: <span class="number">80</span>, <span class="attr">title</span>: <span class="string">&quot;评分&quot;</span>, <span class="attr">sort</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">field</span>: <span class="string">&quot;right&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;操作&quot;</span>, <span class="attr">toolbar</span>: <span class="string">&quot;#barDemo&quot;</span> &#125;,</span></span><br><span class="line">        ],</span><br><span class="line">      ],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如下script可以定义在页面的任何位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;barDemo&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-btn layui-btn-xs&quot;</span> lay-event=<span class="string">&quot;edit&quot;</span>&gt;编辑&lt;/a&gt;</span></span><br><span class="line"><span class="javascript">  &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-btn layui-btn-danger layui-btn-xs&quot;</span> lay-event=<span class="string">&quot;del&quot;</span>&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-5-5-操作按钮回调"><a href="#3-5-5-操作按钮回调" class="headerlink" title="3.5.5 操作按钮回调"></a>3.5.5 操作按钮回调</h4><blockquote><p>按钮的单击事件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件注册</span></span><br><span class="line">table.on(<span class="string">&quot;tool(test)&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = obj.data; <span class="comment">//获得当前行数据</span></span><br><span class="line">  <span class="comment">//获得 lay-event 对应的值（也可以是表头的 event 参数对应的值）</span></span><br><span class="line">  <span class="keyword">var</span> layEvent = obj.event;</span><br><span class="line">  <span class="keyword">var</span> tr = obj.tr; <span class="comment">//获得当前行 tr 的 DOM 对象（如果有的话）</span></span><br><span class="line">  <span class="keyword">if</span> (layEvent === <span class="string">&quot;del&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    layer.confirm(<span class="string">&quot;真的删除行么&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 向服务端发送删除请求</span></span><br><span class="line">      <span class="comment">// 此处可以发送ajax</span></span><br><span class="line">      obj.del(); <span class="comment">//删除对应行（tr）的DOM结构</span></span><br><span class="line">      layer.close(index);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (layEvent === <span class="string">&quot;edit&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">//编辑</span></span><br><span class="line">    <span class="comment">// 向服务端发送更新请求</span></span><br><span class="line">    <span class="comment">// 同步更新缓存对应的值</span></span><br><span class="line">    obj.update(&#123;</span><br><span class="line">      username: <span class="string">&quot;shine001&quot;</span>,</span><br><span class="line">      city: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">      sex: <span class="string">&quot;女&quot;</span>,</span><br><span class="line">      score: <span class="number">99</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-6-导航"><a href="#3-6-导航" class="headerlink" title="3.6 导航"></a>3.6 导航</h3><blockquote><p>导航条</p><ul><li>class = “layui-nav” 水平导航条</li><li>class=”layui-nav layui-tree” 垂直导航条</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>最新活动<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-item layui-this&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>大数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>解决方案<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-child&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 二级菜单 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>移动模块<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>后台模版<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>电商平台<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>社区<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//注意：导航 依赖 element 模块，否则无法进行功能性操作</span></span></span><br><span class="line"><span class="javascript">  layui.use(<span class="string">&quot;element&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-7-动画"><a href="#3-7-动画" class="headerlink" title="3.7 动画"></a>3.7 动画</h3><blockquote><p>LayUI 提供动画支持</p></blockquote><table><thead><tr><th>样式表</th><th>描述</th></tr></thead><tbody><tr><td>layui-anim-up</td><td>从最底层往上滑入</td></tr><tr><td>layui-anim-upbit</td><td>微微往上滑入</td></tr><tr><td>layui-anim-scale</td><td>平滑放大</td></tr><tr><td>layui-anim-scaleSpring</td><td>弹簧式放大</td></tr><tr><td>layui-anim-fadein</td><td>渐现</td></tr><tr><td>layui-anim-fadeout</td><td>渐隐</td></tr><tr><td>layui-anim-rotate</td><td>360 度旋转</td></tr><tr><td>追加：layui-anim-loop</td><td>循环动画</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 整个div会在页面显示时，以特定动画显示出来 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-anim layui-anim-up&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px&quot;</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 额外添加样式类：layui-anim-loop 使得动画循环运行 --&gt;</span></span><br><span class="line">&lt;div</span><br><span class="line">  class=&quot;layui-anim layui-anim-rotate layui-anim-loop&quot;</span><br><span class="line">  style=&quot;text-align:center;line-height: 100px;margin-left:50px;height: 100px;width:100px&quot;</span><br><span class="line">&gt;</span><br><span class="line">  bb</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、内置模块"><a href="#四、内置模块" class="headerlink" title="四、内置模块"></a>四、内置模块</h2><h3 id="4-1-layer"><a href="#4-1-layer" class="headerlink" title="4.1 layer"></a>4.1 layer</h3><h4 id="4-1-1-弹窗方法"><a href="#4-1-1-弹窗方法" class="headerlink" title="4.1.1 弹窗方法"></a>4.1.1 弹窗方法</h4><blockquote><p>弹窗 msg()、alert()、confirm()</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 导入 layer模块</span></span></span><br><span class="line"><span class="javascript">  layui.use([<span class="string">&quot;layer&quot;</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> layer = layui.layer;</span></span><br><span class="line"><span class="javascript">      layer.msg(<span class="string">&quot;hello world!!&quot;</span>);</span></span><br><span class="line"><span class="javascript">      layer.msg(<span class="string">&quot;确定吗？&quot;</span>,&#123;<span class="attr">btn</span>:[<span class="string">&quot;确定！&quot;</span>,<span class="string">&quot;放弃！&quot;</span>],</span></span><br><span class="line"><span class="javascript">                        yes:<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;layer.close(i);layer.msg(<span class="string">&quot;yes!!!&quot;</span>)&#125;,</span></span><br><span class="line"><span class="javascript">                        btn2:<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;layer.close(i);layer.msg(<span class="string">&quot;no!!!&quot;</span>)&#125;&#125;</span></span><br><span class="line">               );</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">// 导入 layer模块</span></span><br><span class="line">        layui.use([<span class="string">&quot;layer&quot;</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> layer = layui.layer;</span><br><span class="line">            <span class="comment">//0-6 7种图标  0:warning  1:success  2:error  3:question  4:lock  5:哭脸  6：笑脸</span></span><br><span class="line">            layer.alert(<span class="string">&quot;alert弹框蓝&quot;</span>,</span><br><span class="line">                &#123;<span class="attr">title</span>:<span class="string">&#x27;alert&#x27;</span>,<span class="attr">icon</span>:<span class="number">6</span> &#125;,</span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//点击“确定”按钮时的回调</span></span><br><span class="line">                    layer.msg(<span class="string">&quot;好滴&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 导入 layer模块</span></span></span><br><span class="line"><span class="javascript">  layui.use([<span class="string">&quot;layer&quot;</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> layer = layui.layer;</span></span><br><span class="line"><span class="javascript">  layer.confirm(<span class="string">&quot;你确定要删除吗?&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#123;<span class="attr">shade</span>:<span class="literal">false</span>,<span class="attr">icon</span>:<span class="number">3</span>,<span class="attr">btn</span>:[<span class="string">&quot;好滴&quot;</span>,<span class="string">&quot;不行&quot;</span>]&#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;layer.msg(<span class="string">&quot;好滴！&quot;</span>);&#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;layer.msg(<span class="string">&quot;不行！&quot;</span>)&#125;</span></span><br><span class="line">   );</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-1-2-弹窗属性"><a href="#4-1-2-弹窗属性" class="headerlink" title="4.1.2 弹窗属性"></a>4.1.2 弹窗属性</h4><blockquote><ul><li>type 弹窗类型，可选值 0-4</li><li>title 弹窗标题， 可选值 text/array</li><li>content 弹窗内容， 可选值 text/html/dom</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 导入 layer模块</span></span></span><br><span class="line"><span class="javascript">  layui.use([<span class="string">&quot;layer&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> layer = layui.layer;</span></span><br><span class="line">    layer.open(&#123;</span><br><span class="line"><span class="javascript">      type: <span class="number">1</span>, <span class="comment">// 消息框，没有确定按钮</span></span></span><br><span class="line"><span class="javascript">      title: [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;padding-left:5px&quot;</span>], <span class="comment">// 标题，及标题样式</span></span></span><br><span class="line"><span class="javascript">      content: layui.$(<span class="string">&quot;#testmain&quot;</span>), <span class="comment">// dom格式</span></span></span><br><span class="line"><span class="javascript">      offset: <span class="string">&quot;rb&quot;</span>, <span class="comment">//可以在右下角显示</span></span></span><br><span class="line"><span class="javascript">      shade: <span class="literal">false</span>, <span class="comment">//是否遮罩</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    layer.open(&#123;</span><br><span class="line"><span class="javascript">      type: <span class="number">2</span>, <span class="comment">// iframe加载，需要一个url</span></span></span><br><span class="line"><span class="javascript">      content: <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/XX&quot;</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;div</span><br><span class="line">  id=&quot;testmain&quot;</span><br><span class="line">  style=&quot;display:none;padding:10px; height: 173px; width: 275px;&quot;</span><br><span class="line">&gt;</span><br><span class="line">  hello world!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-layDate"><a href="#4-2-layDate" class="headerlink" title="4.2 layDate"></a>4.2 layDate</h3><blockquote><p>日期框</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;layui-form layui-form-pane&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- layui-form-item 一个输入项--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>生日<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- layui-input-block 输入框会占满除文字外的整行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">      &lt;input</span><br><span class="line">        readonly</span><br><span class="line">        id=&quot;birth&quot;</span><br><span class="line">        type=&quot;text&quot;</span><br><span class="line">        name=&quot;birth&quot;</span><br><span class="line">        placeholder=&quot;请选择生日日期&quot;</span><br><span class="line">        autocomplete=&quot;off&quot;</span><br><span class="line">        class=&quot;layui-input&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  layui.use([<span class="string">&quot;laydate&quot;</span>, <span class="string">&quot;form&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> laydate = layui.laydate;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> upload = layui.upload;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> layer = layui.layer;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//执行一个laydate实例</span></span></span><br><span class="line">    laydate.render(&#123;</span><br><span class="line"><span class="javascript">      elem: <span class="string">&quot;#birth&quot;</span>, <span class="comment">//指定元素</span></span></span><br><span class="line"><span class="javascript">      format: <span class="string">&quot;yyyy/MM/dd&quot;</span>,</span></span><br><span class="line"><span class="javascript">      value: <span class="string">&quot;2012/12/12&quot;</span>, <span class="comment">//默认值</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// value:new Date() //默认值</span></span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-upload"><a href="#4-3-upload" class="headerlink" title="4.3 upload"></a>4.3 upload</h3><blockquote><p>上传按钮</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;layui-form layui-form-pane&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-lg&quot;</span> <span class="attr">lay-submit</span> <span class="attr">lay-filter</span>=<span class="string">&quot;formDemo&quot;</span>&gt;</span></span><br><span class="line">        立即提交</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;layui-icon&quot;</span>&gt;</span><span class="symbol">&amp;#xe67c;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>上传图片</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  layui.use([<span class="string">&quot;upload&quot;</span>, <span class="string">&quot;layer&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> upload = layui.upload;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> layer = layui.layer;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//执行一个laydate实例</span></span></span><br><span class="line">    laydate.render(&#123;</span><br><span class="line"><span class="javascript">      elem: <span class="string">&quot;#birth&quot;</span>, <span class="comment">//指定元素</span></span></span><br><span class="line"><span class="javascript">      format: <span class="string">&quot;yyyy/MM/dd&quot;</span>,</span></span><br><span class="line"><span class="javascript">      value: <span class="string">&quot;2012/12/12&quot;</span>, <span class="comment">//默认值</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// value:new Date() //默认值</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="comment">//执行实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> uploadInst = upload.render(&#123;</span></span><br><span class="line"><span class="javascript">      elem: <span class="string">&quot;#test1&quot;</span>, <span class="comment">//绑定元素</span></span></span><br><span class="line"><span class="javascript">      url: <span class="string">&quot;/data.jsp&quot;</span>, <span class="comment">//上传接口</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//,accept:&#x27;images&#x27; // file代表所有文件，默认是images代表图片</span></span></span><br><span class="line"><span class="javascript">      size: <span class="number">100</span>, <span class="comment">// 文件最大100kb</span></span></span><br><span class="line"><span class="javascript">      done: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//上传完毕回调</span></span></span><br><span class="line"><span class="javascript">        layer.msg(<span class="string">&quot;ok&quot;</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//请求异常回调</span></span></span><br><span class="line"><span class="javascript">        layer.msg(<span class="string">&quot;error&quot;</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-carousel"><a href="#4-4-carousel" class="headerlink" title="4.4 carousel"></a>4.4 carousel</h3><blockquote><p>轮播图</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-carousel&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">carousel-item</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;line-height: 280px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>条目1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>条目2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>条目3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>条目4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>条目5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  layui.use([<span class="string">&quot;carousel&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> carousel = layui.carousel;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//建造实例</span></span></span><br><span class="line">    carousel.render(&#123;</span><br><span class="line"><span class="javascript">      elem: <span class="string">&quot;#test1&quot;</span>,</span></span><br><span class="line"><span class="javascript">      width: <span class="string">&quot;100%&quot;</span>, <span class="comment">//设置容器宽度</span></span></span><br><span class="line"><span class="javascript">      arrow: <span class="string">&quot;always&quot;</span>, <span class="comment">//始终显示箭头</span></span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.layui.com/doc/">其他的请参考官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> layui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 启动配置原理</title>
      <link href="posts/2781775372/"/>
      <url>posts/2781775372/</url>
      
        <content type="html"><![CDATA[<h2 id="springBoot-启动配置原理"><a href="#springBoot-启动配置原理" class="headerlink" title="springBoot 启动配置原理"></a>springBoot 启动配置原理</h2><ul><li>springBoot 几个重要的事件回调机制<ul><li>配置在 META_INF/spring.factories<ul><li><strong>ApplicationContextInitializer</strong></li><li><strong>SpringApplicationRunListener</strong></li></ul></li><li>只需要放在 ioc 容器中<ul><li><strong>ApplicationRunner</strong></li><li><strong>CommanLineRunner</strong></li></ul></li></ul></li></ul><p><strong>启动流程</strong>：</p><h3 id="一、-创建-SpringApplication-对象（1-x-版本）"><a href="#一、-创建-SpringApplication-对象（1-x-版本）" class="headerlink" title="一、 创建 SpringApplication 对象（1.x 版本）"></a>一、 创建 SpringApplication 对象（1.x 版本）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">initialize(sources);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Object[] sources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 保存主配置类</span></span><br><span class="line"><span class="keyword">if</span> (sources != <span class="keyword">null</span> &amp;&amp; sources.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.sources.addAll(Arrays.asList(sources));</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 判断当前是否一个web应用</span></span><br><span class="line"><span class="keyword">this</span>.webEnvironment = deduceWebEnvironment();</span><br><span class="line">    <span class="comment">// 从类的路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer；然后保存起来</span></span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">    <span class="comment">// 从类路径下找到META-INF/spring.factories配置的所有ApplicationListener</span></span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="comment">// 从多个配置类中找到有main方法的主配置类</span></span><br><span class="line"><span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200915112941.png" alt="image-20200915112939801"></p><h3 id="二、-运行-run-方法-1-x-和-2-x"><a href="#二、-运行-run-方法-1-x-和-2-x" class="headerlink" title="二、 运行 run 方法(1.x 和 2.x)"></a>二、 运行 run 方法(1.x 和 2.x)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">    stopWatch.start();</span><br><span class="line">    ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">this</span>.configureHeadlessProperty();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取SpringApplicationRunListeners; 从类路径下META-INF/spring.factories</span></span><br><span class="line">    SpringApplicationRunListeners listeners = <span class="keyword">this</span>.getRunListeners(args);</span><br><span class="line">    <span class="comment">// 回调所有的获取SpringApplicationApplicationRunListener.starting()方法</span></span><br><span class="line">    listeners.starting();</span><br><span class="line"></span><br><span class="line">    Collection exceptionReporters;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//封装命令行参数</span></span><br><span class="line">        ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">        <span class="comment">// 准备环境</span></span><br><span class="line">        ConfigurableEnvironment environment = <span class="keyword">this</span>.prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">        <span class="keyword">this</span>.configureIgnoreBeanInfo(environment);</span><br><span class="line">        <span class="comment">// 创建环境完成后回调SpringApplicationRunListener.environmentPrepared();表示环境准备完成</span></span><br><span class="line">        Banner printedBanner = <span class="keyword">this</span>.printBanner(environment);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ApplicationContext; 决定创建web的ioc还是普通的ioc</span></span><br><span class="line">        context = <span class="keyword">this</span>.createApplicationContext();</span><br><span class="line">        exceptionReporters = <span class="keyword">this</span>.getSpringFactoriesInstances(SpringBootExceptionReporter.class, <span class="keyword">new</span> Class[]&#123;ConfigurableApplicationContext.class&#125;, context);</span><br><span class="line">        <span class="comment">// 准备上下文环境；将environment保存到ioc中；而且applyInitalizers();</span></span><br><span class="line">        <span class="comment">// applyInitalizers(): 回调之前保存的所有的ApplicationContextInitalizer的initze的方法</span></span><br><span class="line">        <span class="comment">// 回调所有的SpringApplicationRunListener的contextPrepared()</span></span><br><span class="line">        <span class="keyword">this</span>.prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">        <span class="comment">// propareContext运行完成之后回调所有的SpringApplicationRunLitsener的contextLocaded();</span></span><br><span class="line">        <span class="comment">// 刷新容器； ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）;</span></span><br><span class="line">        <span class="comment">// 扫描,创建,加载所有组件的地方</span></span><br><span class="line">        <span class="keyword">this</span>.refreshContext(context);</span><br><span class="line">        <span class="comment">// 从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调</span></span><br><span class="line">        <span class="comment">// 所有的Application先回调，CommandLineRunner在回调</span></span><br><span class="line">        <span class="keyword">this</span>.afterRefresh(context, applicationArguments);</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">            (<span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)).logStarted(<span class="keyword">this</span>.getApplicationLog(), stopWatch);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 所有的SpringApplicationRunListener回调started方法</span></span><br><span class="line">        listeners.started(context);</span><br><span class="line">        <span class="keyword">this</span>.callRunners(context, applicationArguments);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var10) &#123;</span><br><span class="line">        <span class="keyword">this</span>.handleRunFailure(context, var10, exceptionReporters, listeners);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(var10);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        listeners.running(context);</span><br><span class="line">        <span class="comment">// 整个SpringBoot应用启动完成以后返回启动的ioc容器</span></span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var9) &#123;</span><br><span class="line">        <span class="keyword">this</span>.handleRunFailure(context, var9, exceptionReporters, (SpringApplicationRunListeners)<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(var9);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、事件监听机制"><a href="#三、事件监听机制" class="headerlink" title="三、事件监听机制"></a>三、事件监听机制</h3><p><em>配置在 META-INF/spring.factories</em></p><p><strong>ApplicationContextInitalizer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext configurableApplicationContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ApplicationContextInitializer...initialize...&quot;</span>+configurableApplicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringApplicationRunListener</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须要有构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloSpringApplicationRunListener</span><span class="params">(SpringApplication application, String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">        Object o = environment.getSystemProperties().get(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;SpringApplicationRunListener...environmentPrepared..&quot;</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SpringApplicationRunListener...contextPrepared...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SpringApplicationRunListener...contextLoaded...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SpringApplicationRunListener...starting...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SpringApplicationRunListener...finished...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置（META-INFO/spring.factories）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.oy.springboot.listener.HelloApplicationContextInitializer</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.boot.SpringApplicationRunListener</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.oy.springboot.listener.HelloSpringApplicationRunListener</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200915152914.png" alt="image-20200915152907559"></p><p><em>只需要放在 ioc 容器中</em></p><p><strong>ApplicationRunner</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ApplicationRunner...run....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CommandLineRunner</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CommandLineRunner...run...&quot;</span>+ Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200915153220.png" alt="image-20200915153219630"></p><h2 id="自定义-starter"><a href="#自定义-starter" class="headerlink" title="自定义 starter"></a>自定义 starter</h2><p>starter:</p><p>​ 1.编写自动配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//指定这个类是一个配置类</span></span><br><span class="line"><span class="meta">@ConditionalOnXXX</span> <span class="comment">//在指定条件成立的情况下自动配置类生效</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span> <span class="comment">// 指定自动配置类的顺序</span></span><br><span class="line"><span class="meta">@Bean</span> <span class="comment">// 给容器中添加组件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationPropertie</span> <span class="comment">// 结合相关xxxProperties类来绑定相关的配置</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span> <span class="comment">// 让xxxProperties生效加入到容器中</span></span><br><span class="line"></span><br><span class="line">自动配置类要能加载</span><br><span class="line">将需要启动就能加载的自动配置类，配置在META-INF/spring.factories</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br></pre></td></tr></table></figure><ol start="2"><li>模式：</li></ol><ul><li><p>启动器只用来做依赖导入：</p></li><li><p>专门来写一个自动配置模块；</p></li><li><p>启动器依赖自动配置；别人只需要引入启动器（starter）</p><p>eg: mybatis-spring-boot-starter; <strong>自定义启动器名-spring-boot-starter</strong></p></li></ul><p><strong>演示步骤</strong>（参考）：</p><ol><li>项目结构</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200915170748.png" alt="image-20200915170747588"></p><ol start="2"><li><p>先创建一个空项目，然后 oy-spring-boot-starter（用 maven 创建）和 oy-spring-boot-starter-autoconfigurer（spring Initializr 创建）</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200915171033.png" alt="image-20200915171032614"></p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200915171121.png" alt="image-20200915171120316"></p><p>【oy-spring-boot-starter】 pom.xml 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>oy-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【oy-spring-boot-starter-autoconfigurer】 pom.xml 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>oy-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>oy-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【HelloProperties】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;oy.hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【HelloService】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloProperties <span class="title">getHelloProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloProperties = helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHellAtguigu</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties.getPrefix()+<span class="string">&quot;-&quot;</span> +name + helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>【HelloServiceAutoConfiguration】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">// Web应用才生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HelloProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HelloService service = <span class="keyword">new</span> HelloService();</span><br><span class="line">        service.setHelloProperties(helloProperties);</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【spring.factories】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.oy.starter.HelloServiceAutoConfiguration</span><br></pre></td></tr></table></figure><p><strong>测试</strong>：</p><ul><li>**spring-boot-08-starter-test **项目结构</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200915173151.png" alt="image-20200915173150186"></p><p>【pom.xml】</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.oy.stater&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;oy-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>【HelloController.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.sayHellAtguigu(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200915173526.png" alt="image-20200915173525543"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与缓存</title>
      <link href="posts/3830795892/"/>
      <url>posts/3830795892/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-与缓存"><a href="#Spring-Boot-与缓存" class="headerlink" title="Spring Boot 与缓存"></a>Spring Boot 与缓存</h1><p><strong>创建项目结构</strong></p><ul><li>集成开发工具 IDEA 2020.2 ， 使用 spring 项目搭建向导创建</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200915232141.png" alt="image-20200915232140321"></p><h2 id="一、搭建基本环境"><a href="#一、搭建基本环境" class="headerlink" title="一、搭建基本环境"></a>一、搭建基本环境</h2><ol><li>导入数据库文件，创建出<strong>department</strong> 和 <strong>employee</strong>表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database springboot_cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `department` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `departmentName` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `employee` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `lastName` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gender` <span class="type">int</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `d_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建 javaBean 封装数据</li></ol><p>【Department.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String departmentName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">(Integer id, String departmentName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.departmentName = departmentName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDepartmentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> departmentName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDepartmentName</span><span class="params">(String departmentName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.departmentName = departmentName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Department [id=&quot;</span> + id + <span class="string">&quot;, departmentName=&quot;</span> + departmentName + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【Employee.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String lastName;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"><span class="keyword">private</span> Integer gender; <span class="comment">//性别 1男  0女</span></span><br><span class="line"><span class="keyword">private</span> Integer dId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(Integer id, String lastName, String email, Integer gender, Integer dId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.lastName = lastName;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line"><span class="keyword">this</span>.gender = gender;</span><br><span class="line"><span class="keyword">this</span>.dId = dId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Integer gender)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getdId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setdId</span><span class="params">(Integer dId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dId = dId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Employee [id=&quot;</span> + id + <span class="string">&quot;, lastName=&quot;</span> + lastName + <span class="string">&quot;, email=&quot;</span> + email + <span class="string">&quot;, gender=&quot;</span> + gender + <span class="string">&quot;, dId=&quot;</span></span><br><span class="line">+ dId + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>整合 MyBatis 操作数据库</p><p>1）、配置数据源信息</p></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/springboot_cache?serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">1234</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置mybatis驼峰命名法规则</span></span><br><span class="line"><span class="meta">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开启缓存</span></span><br><span class="line"><span class="meta">logging.level.com.oy.springboot.mapper</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure><p>​ 2)、使用注解版的 Mybatis:</p><ul><li>@MapperScan 指定需要扫描的 mapper 接口所在的包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.oy.springboot.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot01CacheApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot01CacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、快速体验缓存"><a href="#二、快速体验缓存" class="headerlink" title="二、快速体验缓存"></a>二、快速体验缓存</h2><p>==步骤：==</p><h3 id="①-开启基于注解的缓存-EnableCaching"><a href="#①-开启基于注解的缓存-EnableCaching" class="headerlink" title="① 开启基于注解的缓存 @EnableCaching"></a>① 开启基于注解的缓存 @EnableCaching</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.oy.springboot.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span> <span class="comment">// 开启注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot01CacheApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot01CacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②-标注缓存注解即可"><a href="#②-标注缓存注解即可" class="headerlink" title="② 标注缓存注解即可"></a>② 标注缓存注解即可</h3><ul><li>@Cacheable</li><li>@CacheEvict</li><li>@CachePut</li></ul><p>【EmployeeMapper】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from employee where id =#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update employee set lastName=#&#123;lastName&#125;,email=#&#123;email&#125;, gender=#&#123;gender&#125;, d_id=#&#123;dId&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from employee where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into employee(lastName, email, gender, d_id) values(#&#123;lastName&#125;, #&#123;email&#125;, #&#123;gender&#125;,#&#123;dId&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">insertEmployee</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【EmployeeService】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cacheable(value = &#123;&quot;emp&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmp</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询&quot;</span>+id + <span class="string">&quot;号员工&quot;</span>);</span><br><span class="line">        Employee emp = employeeMapper.getEmpById(id);</span><br><span class="line">        <span class="keyword">return</span> emp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【EmployeeController】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;emp/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        Employee emp = employeeService.getEmp(id);</span><br><span class="line">        <span class="keyword">return</span> emp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong>：</p><ul><li>第一次发送请求：</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200916214004.png" alt="image-20200916213957466"></p><ul><li>控制台输出</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200916214043.png" alt="image-20200916214042086"></p><ul><li>发送第二次请求，查看控制台没有发生改变（说明<strong>缓存生效</strong>）</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200916214143.png" alt="image-20200916214142708"></p><h2 id="三、缓存原理"><a href="#三、缓存原理" class="headerlink" title="三、缓存原理"></a>三、缓存原理</h2><h3 id="①-重要的概念-amp-缓存注解"><a href="#①-重要的概念-amp-缓存注解" class="headerlink" title="① 重要的概念&amp;缓存注解"></a>① 重要的概念&amp;缓存注解</h3><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>Cache</td><td>缓存接口，定义缓存的操作。实现有：RedisCache、EhCacheCache、ConcurrentMapCache 等</td></tr><tr><td>CacheManager</td><td>缓存管理器，管理各种缓存（Cache ）组件</td></tr><tr><td>@Cacheable</td><td>主要针对方法配置，能根据方法的请求参数对其结果进行缓存</td></tr><tr><td>@CacheEvict</td><td>清空缓存</td></tr><tr><td>@CachePut</td><td>保证方法被调用，又希望结构别缓存</td></tr><tr><td>@EnableCaching</td><td>开启基于注解的缓存</td></tr><tr><td>keyGenerator</td><td>缓存数据时 key 生成策略</td></tr><tr><td>serialize</td><td>缓存数据时 value 序列化策略</td></tr></tbody></table><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200916215058.png" alt="image-20200916215057300"></p><h3 id="②-CacheManager"><a href="#②-CacheManager" class="headerlink" title="② CacheManager"></a>② CacheManager</h3><blockquote><p>将方法的运行结果进行缓存：以后再要相同的数据，直接从缓存中获取，不在调用方法：</p><p>CacheManager 管理多个 Cache 组件的，对缓存的真正 CRUD(增删查改)操作在 Cache 组件中，每一个缓存组件有自己的唯一一个名字。</p></blockquote><p><strong>原理</strong>：</p><ol><li>自动配置类：CacheAutoConfiguration</li><li>缓存的配置类：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.JCacheCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.EhCacheCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.HazelcastCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.InfinispanCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CouchbaseCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CaffeineCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.GuavaCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration【默认】</span><br><span class="line">org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200916222129.png" alt="image-20200916222128361"></p><ol start="3"><li>SimpleCacheConfiguration 配置类默认生效</li></ol><p>在【application.properties】配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">debug</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p><em>控制台输出日志：</em></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200916221921.png" alt="image-20200916221920721"></p><ol start="4"><li>给容器中注册一个 CacheManager: ConcurrentMaCacheManager: 可以获取和创建 ConcurrentMapCache 类型的缓存组件；它的作用将数据保存砸 ConcurrentMap 中。</li></ol><h3 id="③-Cacheble"><a href="#③-Cacheble" class="headerlink" title="③ @Cacheble"></a>③ @Cacheble</h3><p><strong>运行流程</strong>：</p><ol><li><p> 方法运行之前，先去查看 Cache（缓存组件），按照 cacheName 指定的名字获取;(CacheManager 先获取相对应的缓存)，第一次获取缓存如果没有 Cache 组件会自动创建。</p></li><li><p>去 Cache 中查找缓存的内容，使用一个 key，默认一个 key，默认就是方法的参数；</p><p> key 是按照某种策略生成的，默认是使用 keyGenerator 生成的 key：</p><p> SimpleKeyGenerator 生成 key 的默认策略：</p><p> ​ 如果没有参数； key=new SimpleKey()</p><p> ​ 如果一个参数： key=参数的值</p><p> ​ 如果有多个参数： key=new SimpleKey(params);</p></li><li><p> 没有查到缓存就调用目标方法：</p></li><li><p> 将目标方法返回的结果，放进缓存中</p></li></ol><blockquote><p>@Cacheable 标注的方法执行之前先来检查缓存中有没有这个数据，默认按照参数的值作为 key 去查询缓存，如果没有就运行方法并将结果放入缓存；以后再来调用就可以直接使用缓存中的数据。</p></blockquote><p><strong>核心</strong>：</p><ul><li>使用 CacheManager【ConcurrentMapCacheManager】按照名字得到 Cache【ConcurrentMapCache】组件</li><li>key 使用 keyGenerator 生成的，默认是 SimpleKeyGenerator</li></ul><p><strong>属性</strong>：</p><ul><li><strong>CacheNames/value</strong>: 指定缓存组件的名字；将方法的返回结果放在哪个缓冲区，是数组的方式，可以指定多个缓存：</li><li><strong>key</strong>: 缓存数据使用 key： 可以用它来指定，默认是使用方法参数 1-方法的返回值<ul><li>编写 SqEL: #id; 参数 id 的值 #a0 #p0 #root.args[0] getEmp[2]</li></ul></li><li><strong>keyGenerator</strong>: key 的生成器：可以自己指定 key 的生成器的组件 id<ul><li>key / keyGenerator: 二选一使用</li></ul></li><li><strong>cacheManager</strong>: 指定的缓存管理器： 或者 cacheResolver 指定获取解析器</li><li><strong>condition</strong>: 指定符号条件的情况下才缓存：<ul><li>eg: condition = “#a0 &gt;1” : 第一个参数的值 &gt; 1 的时候才会被缓存； 可以获取到结果进行判断</li></ul></li><li><strong>unless</strong>: 否定缓存： 当 unless 指定的条件为 true， 方法的返回值就不会被缓存；可以获取到结果进行判断<ul><li>unless = “#result == null”</li><li>unless = “#a0 ==2”: 如果第一个参数的值为 2，结果不缓存；</li></ul></li><li><strong>sync</strong>: 是否使用异步模式</li></ul><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value = &#123;&quot;emp&quot;&#125;,keyGenerator = &quot;myKeyGenerator&quot;,condition = &quot;#a0&gt;1&quot;,unless = &quot;#a0==2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmp</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;查询&quot;</span>+id+<span class="string">&quot;号员工&quot;</span>);</span><br><span class="line">    Employee emp = employeeMapper.getEmpById(id);</span><br><span class="line">    <span class="keyword">return</span> emp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意使用<strong>keyGenerator</strong>需要自行配置（参考）：</p><p>【keyGenerator】以 getEmp[2] 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCacheConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;myKeyGenerator&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyGenerator()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object o, Method method, Object... objects)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 拼接getEmp[2] 作为keyGenerator</span></span><br><span class="line">                <span class="keyword">return</span> method.getName() + <span class="string">&quot;[&quot;</span>+ Arrays.asList(objects).toString()+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="④-CachePut"><a href="#④-CachePut" class="headerlink" title="④ @CachePut"></a>④ @CachePut</h3><blockquote><p>即调用目标的方法，有更新缓存数据；同步更新缓存</p><p>修改了数据库的某个数据，同时更新缓存；</p></blockquote><p><strong>运行机制</strong>：</p><ol><li>先调用目标方法</li><li>将目标方法的结果缓存起来</li></ol><p><strong>测试步骤</strong>：</p><ol><li>查询 1 号员工： 查到的结果会放在缓存中：</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200917170440.png" alt="image-20200917170433351"></p><ol start="2"><li>更新 1 号员工：【lastName: AAA; gender:0】</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200917170749.png" alt="image-20200917170748355"></p><ol start="3"><li>在次查询 1 号员工（缓存没有更新）</li></ol><p><img src= "/img/loading.gif" data-lazy-src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20200917170832851.png" alt="image-20200917170832851"></p><p><strong>解决方式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CachePut(value = &quot;emp&quot;, key = &quot;#result.id&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">updateEmp</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;updateEmp:&quot;</span>+ employee);</span><br><span class="line">    employeeMapper.updateEmp(employee);</span><br><span class="line">    <span class="keyword">return</span> employee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可设置参数约束条件：</p><ul><li><p>key : 传入的 employee 对象 值： 返回的 employee 对象</p><ul><li>key = “#employee.id”: 使用返回后的 id</li><li>key =”#result.id”: 使用返回后的 id</li></ul><p>==<strong>注意：@Cacheable 的 key 是不能用#result</strong>==</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200917172057.png" alt="image-20200917172056851"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200917172115.png" alt="image-20200917172114215"></p><h3 id="⑤-CacheEvict"><a href="#⑤-CacheEvict" class="headerlink" title="⑤ @CacheEvict"></a>⑤ @CacheEvict</h3><blockquote><p>缓存清除</p></blockquote><p><strong>key</strong>: 指定要清除的数据</p><p><strong>beforeInvocaion = false</strong>: 缓存的清除是否在方法之前执行</p><p>​ 默认代表缓存清除的操作是在方法执行之后；如果出现异常缓存就不会清除</p><p><strong>beforeInvocation = true</strong>: 代表清除缓存操作在方法运行之前执行，无论方法是否出现异常，缓存都要清除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(value = &quot;emp&quot;, key = &quot;#id&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmp</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;deleteEmp:&quot;</span> + id);</span><br><span class="line">    <span class="comment">//employeeMapper.deleteEmp(id);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟异常</span></span><br><span class="line">    <span class="comment">//int i = 10/0;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⑥-Caching"><a href="#⑥-Caching" class="headerlink" title="⑥ @Caching"></a>⑥ @Caching</h3><blockquote><p>定义复杂的缓存规则</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Caching(</span></span><br><span class="line"><span class="meta">    cacheable = &#123;</span></span><br><span class="line"><span class="meta">        @Cacheable(/*value=&quot;emp&quot;,*/key = &quot;#lastName&quot;)</span></span><br><span class="line"><span class="meta">    &#125;,</span></span><br><span class="line"><span class="meta">    put = &#123;</span></span><br><span class="line"><span class="meta">        @CachePut(/*value=&quot;emp&quot;,*/key = &quot;#result.id&quot;),</span></span><br><span class="line"><span class="meta">        @CachePut(/*value=&quot;emp&quot;,*/key = &quot;#result.email&quot;)</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByLastName</span><span class="params">(String lastName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> employeeMapper.getEmpByLastName(lastName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⑦-CacheConfig"><a href="#⑦-CacheConfig" class="headerlink" title="⑦ CacheConfig"></a>⑦ CacheConfig</h3><blockquote><p>抽取缓存的公共配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheConfig(cacheNames=&quot;emp&quot;/*,cacheManager = &quot;employeeCacheManager&quot;*/)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeService</span> </span>&#123;</span><br></pre></td></tr></table></figure><h2 id="四、整合-Redis-作为缓存"><a href="#四、整合-Redis-作为缓存" class="headerlink" title="四、整合 Redis 作为缓存"></a>四、整合 Redis 作为缓存</h2><blockquote><p>Redis 是一个开源（BSD 许可）的，内存中的数据结构存储系统，它可以作数据库、缓存和消息中间件。</p></blockquote><ol><li><strong>安装 redis: 使用 Docker</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>引入 redis 的 starter</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 6379:6379 --name myredis redis</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>配置 redis</strong> (下载软件 RedisDesktopManager)</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200922223135.png" alt="image-20200922222619413"></p><p>4、<strong>Redis 常见 的五大数据类型</strong></p><ul><li>String（字符串）、List(列表)、Set(集合)、Hash(散列)、Zset（有序集合）</li><li>stringRedisTemplate.opsForList()[List（列表）]</li><li>stringRedisTemplate.opsForSet()[Set（集合）]</li><li>stringRedisTemplate.opsForHash()[Hash（散列）]</li><li>stringRedisTemplate.opsForZSet()[ZSet（有序集合）]</li></ul><p>5、<strong>测试缓存</strong></p><blockquote><p>原理：CacheManager === Cache 缓存组件来实际缓存中存取数据</p></blockquote><p>① 引入 redis 的 starter，容器中保存的是 RedisCacheManager；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​ 在配置文件中配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">192.168.64.129</span></span><br></pre></td></tr></table></figure><p>② RedisCacheManager 帮我们创建 RedisCache 来作为缓存组件；RedisCache 通过操作 redis 缓存数据的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">StringRedisTemplate stringRedisTemplate; <span class="comment">// 操作k-v都是字符串的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedisTemplate redisTemplate;<span class="comment">// k-v都是对象的</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 给redis中保存数据</span></span><br><span class="line">    stringRedisTemplate.opsForValue().append(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    String msg = stringRedisTemplate.opsForValue().get(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">    System.out.println(msg);</span><br><span class="line"></span><br><span class="line">    stringRedisTemplate.opsForList().leftPush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    stringRedisTemplate.opsForList().leftPush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③ 默认保存数据 k-v 都是 Object; 利用序列化保存；</p><p>​ 1）引入了 redis 的 starter， cacheManager 变为 RedisChacheManager;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​ 2) 默认创建的 RedisCacheManager 操作 redis 的时候使用的是 RedisTemplate&lt;Object, Object&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">StringRedisTemplate stringRedisTemplate; <span class="comment">// 操作k-v都是字符串的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedisTemplate redisTemplate;<span class="comment">// k-v都是对象的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试保存对象</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Employee empById = employeeMapper.getEmpById(<span class="number">1</span>);</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;emp-01&quot;</span>,empById);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200923221658.png" alt="image-20200923221650809"></p><p>​ 3) RedisTemplate&lt;Object, Object&gt; 是默认使用 jdk 的序列化机制</p><p>【MyRedisTemplateConfig】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedisTemplateConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Employee&gt; <span class="title">employeeRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Employee&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Employee&gt; ser = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Employee.class);</span><br><span class="line">        template.setDefaultSerializer(ser);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">RedisTemplate&lt;Object, Employee&gt; employeeRedisTemplate;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Employee empById = employeeMapper.getEmpById(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 1.将数据以 JSON的方式保存</span></span><br><span class="line">    <span class="comment">// 2. redisTemplate默认的序列化规则，改变默认的序列化规则</span></span><br><span class="line">    employeeRedisTemplate.opsForValue().set(<span class="string">&quot;emp-01&quot;</span>,empById);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200923223135.png" alt="image-20200923223134494"></p><h3 id="①-自定义-CacheManager"><a href="#①-自定义-CacheManager" class="headerlink" title="① 自定义 CacheManager"></a>① 自定义 CacheManager</h3><h4 id="1、-SpringBoot-1-x-版本的-RedisCacheManager-配置"><a href="#1、-SpringBoot-1-x-版本的-RedisCacheManager-配置" class="headerlink" title="1、 SpringBoot 1.x 版本的 RedisCacheManager 配置"></a>1、 SpringBoot 1.x 版本的 RedisCacheManager 配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义CacheManager</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">empCacheManager</span><span class="params">(RedisTemplate&lt;Object, Employee&gt; empRedisTemplate)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将我们自定义的RedisTemplate作为参数，Spring会自动为我们注入</span></span><br><span class="line"></span><br><span class="line">        RedisCacheManager cacheManager = <span class="keyword">new</span> RedisCacheManager(empRedisTemplate);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用前缀，默认会将CacheName作为key的前缀，最好设置为true，因为缓存可能有很多类</span></span><br><span class="line">        cacheManager.setUsePrefix(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果我们仅仅自定义这一个 CacheManager 则只能操作 Employee 这一种类型的数据，因为这个 CacheMananger 只实现了 Employee 的泛型，操作其他类型就会报错(可以正常缓存其他类型的数据，但是从缓存中查询出的数据在反序列化时会报错)。这时我们就需要自定义多个 CacheManager，比如增加一个可以缓存 Department 类型的 CacheMananger：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">deptCacheManager</span><span class="params">(RedisTemplate&lt;Object, Department&gt; deptRedisTemplate)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       RedisCacheManager cacheManager = <span class="keyword">new</span> RedisCacheManager(deptRedisTemplate);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//使用前缀，默认会将CacheName作为key的前缀</span></span><br><span class="line"></span><br><span class="line">       cacheManager.setUsePrefix(<span class="keyword">true</span>);</span><br><span class="line">       <span class="keyword">return</span> cacheManager;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>当容器中有多个 RedisCacheManager 的时候，需要使用@Primary 指定一个默认的</p><h4 id="2、SpringBoot-2-x-版本的-RedisCacheManager-配置"><a href="#2、SpringBoot-2-x-版本的-RedisCacheManager-配置" class="headerlink" title="2、SpringBoot 2.x 版本的 RedisCacheManager 配置"></a>2、SpringBoot 2.x 版本的 RedisCacheManager 配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">    RedisCacheConfiguration cacheConfiguration =</span><br><span class="line">            RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                    <span class="comment">// 设置缓存过期时间为一天</span></span><br><span class="line">                    .entryTtl(Duration.ofDays(<span class="number">1</span>))</span><br><span class="line">                    .disableCachingNullValues()     <span class="comment">// 禁用缓存空值，不缓存null校验</span></span><br><span class="line">                    .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span></span><br><span class="line">                            GenericJackson2JsonRedisSerializer()));<span class="comment">// 设置CacheManager的值序列化方式为json序列化，可加入@Class属性</span></span><br><span class="line">    <span class="comment">// 设置默认的cache组件</span></span><br><span class="line">    <span class="keyword">return</span> RedisCacheManager.builder(redisConnectionFactory).cacheDefaults(cacheConfiguration).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames = &quot;dept&quot;,cacheManager =&quot;cacheManager&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Department <span class="title">getDeptById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;查询部门：&quot;</span> + id);</span><br><span class="line">    Department department = deptMapper.getDeptById(id);</span><br><span class="line">    <span class="keyword">return</span> department;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200930233434.png" alt="image-20200930233427526"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200930233536.png" alt="image-20200930233535741"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与数据访问</title>
      <link href="posts/2130149512/"/>
      <url>posts/2130149512/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot-与数据访问"><a href="#SpringBoot-与数据访问" class="headerlink" title="SpringBoot 与数据访问"></a>SpringBoot 与数据访问</h2><h3 id="一、JDBC"><a href="#一、JDBC" class="headerlink" title="一、JDBC"></a>一、JDBC</h3><ul><li>使用 Idea 集成开发工具搭建</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200914092837.png" alt="image-20200914092829685"></p><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用 yml 配置文件进行配置</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">1234</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://192.168.64.129:3307/jdbc?characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="comment">    #如果使用mysql 8.0.20及以上需要指定时区 使用com.mysql.cj.jdbc.Driver，低版本的只需要把cj去掉即可</span></span><br><span class="line">    <span class="meta">driver-class-name</span>: <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">    #指定使用哪个数据源,结合自己的情况而定</span></span><br><span class="line"><span class="comment">    #type: com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure><p><strong>效果</strong>：</p><p>​ 1. 默认使用 com.zaxxer.hikari.HikariDataSource 作为数据源(<strong>springBoot 的版本为：2.3.3</strong>)；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看DataSourceAutoConfiguration中的方法</span></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@Conditional(PooledDataSourceCondition.class)</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(&#123; DataSource.class, XADataSource.class &#125;)</span></span><br><span class="line">    <span class="meta">@Import(&#123; DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,</span></span><br><span class="line"><span class="meta">            DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.Generic.class,</span></span><br><span class="line"><span class="meta">            DataSourceJmxConfiguration.class &#125;)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PooledDataSourceConfiguration</span> </span>&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>springboot 1.5.10</strong>版本 默认是使用 org.apache.tomcat.jdbc.pool.DataSource 作为数据源；</p><p>配置源的相关配置都在 DataSourceProperties 里面；</p><p>自动配置原理：</p><p>org.springframework.boot.autoconfigure.jdbc ;</p><ol><li>参考 DataSurceConfiguration，根据配置创建数据源，默认使用 Tomcat 连接池；可以使用 spring.datasource.type 指定自定义的数据源类型‘</li></ol><p>2）SpringBoot 默认可以支持：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.tomcat.jdbc.pool.DataSource、HikariDataSource、BasicDataSource</span><br></pre></td></tr></table></figure><ol start="3"><li>自定义数据源类型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Generic DataSource configuration.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(DataSource.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;)</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class="line"><span class="comment">//使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性</span></span><br><span class="line"><span class="keyword">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4） <strong>DataSourceInitialzer</strong>： <strong>ApplicationListener</strong>：</p><p>作用 ：</p><p>​ ① runSchemaScripts(); 运行建表语句；</p><p>​ ② runDataScripts()：运行插入的 sql 语句；</p><p>默认只需要将文件命名为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">schema-*.sql、data-*.sql</span></span><br><span class="line"><span class="meta">默认规则：</span> <span class="string">schema.sql , schema-all.sql</span></span><br><span class="line"><span class="attr">可是使用</span></span><br><span class="line"><span class="attr">schema：</span></span><br><span class="line"> <span class="meta">-</span> <span class="string">classpath:department.sql</span></span><br><span class="line"> <span class="attr">指定位置</span></span><br></pre></td></tr></table></figure><p><strong>==注意：SpringBoot 2.x 及以需要配置==</strong></p><p><a href="https://blog.csdn.net/qq_45738810/article/details/108576190">具体的参考我这篇博客详细介绍了</a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.initialization-mode</span>=<span class="string">always</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>否则不会自动创建 sql 语句</p><p>5）操作数据库：自动配置 jdbcTemplate 操作数据库</p></li></ol><h3 id="二、整合-Driuid-数据源"><a href="#二、整合-Driuid-数据源" class="headerlink" title="二、整合 Driuid 数据源"></a>二、整合 Driuid 数据源</h3><p>​ pom.xml 导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="①-添加基本配置"><a href="#①-添加基本配置" class="headerlink" title="① 添加基本配置"></a>① 添加基本配置</h4><p>​ 不使用默认的配置，使用自己的配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">initialSize</span>: <span class="string">5</span></span><br><span class="line"> <span class="attr">minIdle</span>: <span class="string">5</span></span><br><span class="line"> <span class="attr">maxActive</span>: <span class="string">20</span></span><br><span class="line"> <span class="attr">maxWait</span>: <span class="string">60000</span></span><br><span class="line"> <span class="attr">timeBetweenEvictionRunsMillis</span>: <span class="string">60000</span></span><br><span class="line"> <span class="attr">minEvictableIdleTimeMillis</span>: <span class="string">300000</span></span><br><span class="line"> <span class="attr">validationQuery</span>: <span class="string">SELECT 1 FROM DUAL</span></span><br><span class="line"> <span class="attr">testWhileIdle</span>: <span class="string">true</span></span><br><span class="line"> <span class="attr">testOnBorrow</span>: <span class="string">false</span></span><br><span class="line"> <span class="attr">testOnReturn</span>: <span class="string">false</span></span><br><span class="line"> <span class="attr">poolPreparedStatements</span>: <span class="string">true</span></span><br><span class="line"><span class="comment"> #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，&#x27;wall&#x27;用于防火墙</span></span><br><span class="line"> <span class="attr">filters</span>: <span class="string">stat,wall,log4j</span></span><br><span class="line"> <span class="attr">maxPoolPreparedStatementPerConnectionSize</span>: <span class="string">20</span></span><br><span class="line"> <span class="attr">useGlobalDataSourceStat</span>: <span class="string">true</span></span><br><span class="line"> <span class="attr">connectionProperties</span>:     <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><p>【DruidConfig.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用在测试类中启动 DegBug 启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot06DateJdbcApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*********************&quot;</span>);</span><br><span class="line">        Connection conn = dataSource.getConnection();</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启动</strong>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200914152442.png" alt="image-20200914152433864"></p><p>​ Debug 启动出现异常，原因分析：应该在运行中缺少 log4j 的依赖，导致无法启动。</p><p><strong>解决方法</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 在pom.xml 文件中导入log4j的依赖</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>启动配置生效</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200914152953.png" alt="image-20200914152951350"></p><h4 id="②-整合-Druid-数据源"><a href="#②-整合-Druid-数据源" class="headerlink" title="② 整合 Druid 数据源"></a>② 整合 Druid 数据源</h4><p>【DruidConfig.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置Druid的监控</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、 配置一个管理后台的Servlet</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">staViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">    Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    initParams.put(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    initParams.put(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;12345&quot;</span>);</span><br><span class="line">    <span class="comment">// 默认就是允许所有的访问</span></span><br><span class="line">    initParams.put(<span class="string">&quot;allow&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    initParams.put(<span class="string">&quot;deny&quot;</span>,<span class="string">&quot;192.168.64.129&quot;</span>);</span><br><span class="line"></span><br><span class="line">    bean.setInitParameters(initParams);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置一个web监控的filter</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStratFilert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    initParams.put(<span class="string">&quot;exclusions&quot;</span>,<span class="string">&quot;*.js, *.css, /druid/*&quot;</span>);</span><br><span class="line">    bean.setInitParameters(initParams);</span><br><span class="line">    bean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【HelloController.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/query&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">map</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = jdbcTemplate.queryForList(<span class="string">&quot;select * FROM department&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200914160530.png" alt="image-20200914160529461"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200914160648.png" alt="image-20200914160647526"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200914160846.png" alt="image-20200914160845585"></p><h3 id="三、-整合-Mybatis"><a href="#三、-整合-Mybatis" class="headerlink" title="三、 整合 Mybatis"></a>三、 整合 Mybatis</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200914163634.png" alt="image-20200914163633256"></p><p><strong>准备步骤</strong>：</p><ol><li>配置数据源相关属性</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#   数据源基本配置</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">6090</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.64.129:3307/mybatis</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment">#   数据源其他配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，&#x27;wall&#x27;用于防火墙</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line">    <span class="comment"># 配置自动执行sql语句</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>给数据库建表</p><p>在 yml 配置文件中添加</p></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">schema</span>:<span class="string"></span></span><br><span class="line">  <span class="meta">-</span> <span class="string">classpath:sql/department.sql</span></span><br><span class="line">  <span class="meta">-</span> <span class="string">classpath:sql/employee.sql</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200914170005.png" alt="image-20200914165759599"></p><ol start="3"><li>创建 javabean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">    <span class="keyword">private</span> String  email;</span><br><span class="line">    <span class="keyword">private</span> Integer dId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成相应的get、set方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String departmenName;</span><br><span class="line">    <span class="comment">// 生成相应的get、set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="①-注解版"><a href="#①-注解版" class="headerlink" title="① 注解版"></a>① 注解版</h4><p>【DepartmentMapper.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from department where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from department where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert department(department_name) values(#&#123;departmentName&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update departments set department_name=#&#123;departmentName&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【DeptController.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DepartmentMapper departmentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/dept/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getdepartment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentMapper.getDeptById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/dept&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">insertDept</span><span class="params">(Department department)</span></span>&#123;</span><br><span class="line">        departmentMapper.insertDept(department);</span><br><span class="line">        <span class="keyword">return</span> department;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200914174356.png" alt="image-20200914174351188"></p><p>​ 出现异常，获取值不完整，原因分析 departmentName 这个属性名跟数据库的字段不一致，可以自定义<strong>增加驼峰命名</strong>来解决这个问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  自定义配置驼峰命名规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(org.apache.ibatis.session.Configuration configuration)</span> </span>&#123;</span><br><span class="line">               configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200914175210.png" alt="image-20200914175207784"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200914203033.png" alt="image-20200914203032279"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200914203056.png" alt="image-20200914203054898"></p><p><strong>补充</strong>：使用 MapperScan 批量扫描所有的 Mapper 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(value = &quot;com.oy.springboot06.Mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot06DataMybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot06DataMybatisApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②-配置文件版"><a href="#②-配置文件版" class="headerlink" title="② 配置文件版"></a>② 配置文件版</h4><ul><li>在配置 yml 文件中配置</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis</span>:<span class="string"></span></span><br><span class="line">  <span class="meta">config-location</span>: <span class="string">classpath:mybatis/mybatis-config.xml 指定全局配置文件的位置</span></span><br><span class="line">  <span class="meta">mapper-locations</span>: <span class="string">classpath:mybatis/mapper/*.xml 指定sql映射文件位置</span></span><br></pre></td></tr></table></figure><p>【EmployeeMapper.class】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【DeptController.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/emp/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmp</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeMapper.getEmpById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结构图</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200914210245.png" alt="image-20200914210243433"></p><p>【mybatis-config.xml】配置驼峰命名规则</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200914210431.png" alt="image-20200914210430916"></p><p><a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">更多使用参照：http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p><h3 id="四、整合-SpringData-JPA"><a href="#四、整合-SpringData-JPA" class="headerlink" title="四、整合 SpringData JPA"></a>四、整合 SpringData JPA</h3><h4 id="①-SpringData-简介"><a href="#①-SpringData-简介" class="headerlink" title="① SpringData 简介"></a>① SpringData 简介</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200915093038.png" alt="image-20200915093030170"></p><h4 id="②-整合-SpringData-JPA"><a href="#②-整合-SpringData-JPA" class="headerlink" title="② 整合 SpringData JPA"></a>② 整合 SpringData JPA</h4><blockquote><p>JPA ： ORM（Object Relational Mapping）</p></blockquote><ol><li>编写一个实体类(bean)和数据表进行映射，并且配置好映射关系；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Description</span> 使用JPA注解配置映射关系</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Author</span> OY</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Date</span> 2020/9/15</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Time</span> 9:55</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">// 告诉JPA这是一个实体类(和数据表映射的类)</span></span><br><span class="line"><span class="meta">@Table(name = &quot;tbl_user&quot;)</span> <span class="comment">//@Table来指定和那个数据表对应；如果省略默认表民就是user</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">// 这是一个主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><span class="comment">// 自增主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;last_name&quot;, length = 50)</span> <span class="comment">// 这是和数据表对应的一个列</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span> <span class="comment">// 省略默认的列名就是属性名</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略get.set方法。。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>编写一个 Dao 接口来操作实体类对应的数据表（Repository）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Description</span> 继承JpaRepository来完成对数据库的操作</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Author</span> OY</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Date</span> 2020/9/15</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Time</span> 10:12</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>基本配置 JpaProperties(yml 中)</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.64.129:3307/jpa</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="comment"># 更新或者创建数据表结构</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="comment"># 控制台显示SQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>4.测试</p><p>【UserController.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        Example&lt;User&gt; example = Example.of(user);</span><br><span class="line">        Optional&lt;User&gt; one = userRepository.findOne(example);</span><br><span class="line">        <span class="keyword">return</span> one.get();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insertUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        User save = userRepository.save(user);</span><br><span class="line">        <span class="keyword">return</span> save;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; all = userRepository.findAll();</span><br><span class="line">        <span class="keyword">return</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200915105837.png" alt="image-20200915105830491"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200915105906.png" alt="image-20200915105905849"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200915105954.png" alt="image-20200915105953515"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之Docker</title>
      <link href="posts/658751968/"/>
      <url>posts/658751968/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><strong>Docker</strong> 是一个开源的应用容器引擎；是一个轻量级容器技术；</p><p>Docker 支持将软件编译成一个镜像；然后砸镜像中各种软件做好配置，将镜像发布出去，其实使用者可以直接使用这个镜像；</p><p>运行中的这个镜像称为容器，容器启动是非常快速的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200910152354.png" alt="image-20200910152353689"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200910152405.png" alt="image-20200910152404564"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200910152415.png" alt="image-20200910152414157"></p><h2 id="二、核心概念"><a href="#二、核心概念" class="headerlink" title="二、核心概念"></a>二、核心概念</h2><p>docker 主机(Host): 安装了 Docker 程序的机器（Docker 直接安装在操作系统之上）；</p><p>docker 客户端（Client）: 连接 docker 主机进行操作；</p><p>docker 仓库（Registry）: 用来保存各种打包好的软件镜像；</p><p>docker 镜像(Images): 软件打包好的镜像；放在 docker 仓库中；</p><p>docker 容器（Container）: 镜像启动后的实例就是一个容器；容器是独立的运行的一个或一组应用</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200910153053.png" alt="image-20200910153052625"></p><p>使用 Docker 的步骤：</p><ol><li>安装 Docker</li><li>去 Docker 仓库找到这个软件找到这个软件对应的镜像；</li><li>使用 Docker 运行这个镜像，这个镜像就会生成一个 Docker 容器；</li><li>对容器的启动停止就是对软件的启动停止；</li></ol><h2 id="三、安装-Docker"><a href="#三、安装-Docker" class="headerlink" title="三、安装 Docker"></a>三、安装 Docker</h2><h3 id="①-安装-Linux-虚拟机"><a href="#①-安装-Linux-虚拟机" class="headerlink" title="① 安装 Linux 虚拟机"></a>① 安装 Linux 虚拟机</h3><p>​ 百度搜索关键字：安装<strong>linux CentOS 7</strong> 结合 <strong>xshell</strong> 软件使用</p><h3 id="②-在-Linux-虚拟机上安装-docker"><a href="#②-在-Linux-虚拟机上安装-docker" class="headerlink" title="② 在 Linux 虚拟机上安装 docker"></a>② 在 Linux 虚拟机上安装 docker</h3><p>==<strong>步骤</strong>：==</p><ol><li><strong>检查内核版本，必须是 3.10 及以上</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200910155142.png" alt="image-20200910155141896"></p><ol start="2"><li><strong>安装 docker</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>输入 y 确定安装</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200910155419.png" alt="image-20200910155418970"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200910160132.png" alt="image-20200910160130727"></p><ol start="4"><li><strong>启动 docker</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl start docker</span><br><span class="line">[root@localhost ~]# docker -v</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200910155709.png" alt="image-20200910155708943"></p><ol start="5"><li><strong>开机启动 docker</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl enable docker</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200910160005.png" alt="image-20200910160005187"></p><ol start="6"><li><strong>停止 docker</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl stop docke</span><br></pre></td></tr></table></figure><h3 id="③-Docker-常用命令-amp-操作"><a href="#③-Docker-常用命令-amp-操作" class="headerlink" title="③ Docker 常用命令&amp;操作"></a>③ Docker 常用命令&amp;操作</h3><h4 id="1、镜像操作"><a href="#1、镜像操作" class="headerlink" title="1、镜像操作"></a>1、镜像操作</h4><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>检索</td><td>docker search 关键字 <br>eg: docker search mysql</td><td>我们经常去 docker hub 上检索镜像的详细信息，如镜像的 TAG</td></tr><tr><td>拉取</td><td>docker pull 镜像名:tag</td><td>:tag 是可选的，tag 表示标签，多为软件的版本，默认是 lastest</td></tr><tr><td>列表</td><td>docker images</td><td>查看所有的本地镜像</td></tr><tr><td>删除</td><td>docker rmi image-id</td><td>删除指定的本地镜像</td></tr></tbody></table><h4 id="2、容器操作"><a href="#2、容器操作" class="headerlink" title="2、容器操作"></a>2、容器操作</h4><p>软件镜像(QQ 安装程序) – 运行镜像 – 产生一个容器（正在运行的软件，运行的 QQ）</p><p><strong>步骤（Tomcat 示例）</strong>：</p><ol><li>搜索镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20200912165133264.png" alt="image-20200912165133264"></p><ol start="2"><li>拉取镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200912165559.png" alt="image-20200912165558619"></p><ol start="3"><li>根据镜像启动容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mytomcat -d tomcat:latest</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200912170020.png" alt="image-20200912170019506"></p><ol start="4"><li>查看运行中的容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200912170153.png" alt="image-20200912170152528"></p><ol start="5"><li>停止运行中的容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器的id</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200912170913.png" alt="image-20200912170911709"></p><ol start="6"><li>查看所有容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200912170936.png" alt="image-20200912170935439"></p><ol start="7"><li>启动容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id</span><br></pre></td></tr></table></figure><ol start="8"><li>删除一个容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id</span><br></pre></td></tr></table></figure><ol start="9"><li>启动一个做了端口映射的 tomcat</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run ‐d ‐p 8888:8080 tomcat</span><br><span class="line">[root@localhost ~]# docker run --name tomcat01 ‐d ‐p 8888:8080 tomcat:tags</span><br></pre></td></tr></table></figure><ul><li>-d: 后台运行</li><li>-p : 将主机的端口映射到容器的一个端口 主机端口：容器内部的端口</li></ul><blockquote><p>docker run ‐d ‐p 映射端口:主机端口 tomcat</p></blockquote><p>如果成功映射之后无法访问，<a href="https://blog.csdn.net/qq_45738810/article/details/108552823">请参考这篇博客</a></p><ol start="10"><li>必须关闭 Linux 的防火墙</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service firewalld status； 查看防护墙状态</span><br><span class="line">service firewalld stop: 关闭防火墙</span><br></pre></td></tr></table></figure><ol start="11"><li>查看容器的日志</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker logs container-name/container-id</span><br><span class="line">eg: docker logs 30a1b4a13697</span><br></pre></td></tr></table></figure><p>更多命令参看 <a href="https://docs.docker.com/engine/reference/commandline/docker/">https://docs.docker.com/engine/reference/commandline/docker/ </a>可以参考每一个镜像的文档</p><h4 id="3、安装-MySQL-示例"><a href="#3、安装-MySQL-示例" class="headerlink" title="3、安装 MySQL 示例"></a>3、安装 MySQL 示例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><p><strong>启动</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200913194625.png" alt="image-20200913194617718"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200913195100.png" alt="image-20200913195059325"></p><p><strong>做端口映射</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3309:3306 --name mysql03 -e MYSQL_ROOT_PASSWORD=1234 -d mysql</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200913213358.png" alt="image-20200913213356674"></p><p><strong>其他的高级操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ‐‐name mysql03 ‐v /conf/mysql:/etc/mysql/conf.d ‐e MYSQL_ROOT_PASSWORD=my‐secret‐pw ‐d mysql:tag</span><br></pre></td></tr></table></figure><p>​ 把主机的/conf/mysql 文件夹挂载到 mysqldocker 容器的 /etc/mysql/conf.d 文件夹里面，改 mysql 文件的配置文件就只需要把 mysql 配置文件放在自定义的文件夹下（/conf/mysql）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run ‐‐name some‐mysql ‐e MYSQL_ROOT_PASSWORD=my‐secret‐pw ‐d mysql:tag ‐‐character‐set‐</span><br><span class="line">server=utf8mb4 ‐‐collation‐server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><p>​ 指定 mysql 的一些配置参数</p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之Web开发</title>
      <link href="posts/4226784210/"/>
      <url>posts/4226784210/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Web-开发"><a href="#一、Web-开发" class="headerlink" title="一、Web 开发"></a>一、Web 开发</h1><p><strong>自动配置原理：</strong></p><blockquote><p>xxxAutoConfiguration: 帮助我们给容器中自动配置组件；</p><p>xxxProperyties: 配置类来</p></blockquote><h3 id="1、-SpringBoot-对静态资源的映射规则"><a href="#1、-SpringBoot-对静态资源的映射规则" class="headerlink" title="1、 SpringBoot 对静态资源的映射规则"></a>1、 SpringBoot 对静态资源的映射规则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line"><span class="comment">// 可是设置和静态资源有关的参数，缓存时间等</span></span><br><span class="line">WebMvcAuotConfiguration：</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    Integer cachePeriod = <span class="keyword">this</span>.resourceProperties.getCachePeriod();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">    customizeResourceHandlerRegistration(</span><br><span class="line">registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(</span><br><span class="line"><span class="string">&quot;classpath:/META‐INF/resources/webjars/&quot;</span>)</span><br><span class="line">                .setCachePeriod(cachePeriod));</span><br><span class="line">&#125;</span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="comment">// 静态资源文件夹的映射</span></span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">customizeResourceHandlerRegistration(</span><br><span class="line">        registry.addResourceHandler(staticPathPattern)</span><br><span class="line">.addResourceLocations(</span><br><span class="line"><span class="keyword">this</span>.resourceProperties.getStaticLocations())</span><br><span class="line">.setCachePeriod(cachePeriod));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 配置欢迎页映射</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),</span><br><span class="line"><span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 配置喜欢的图标</span></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(value = &quot;spring.mvc.favicon.enabled&quot;, matchIfMissing = true)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FaviconConfiguration</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FaviconConfiguration</span><span class="params">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleUrlHandlerMapping <span class="title">faviconHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SimpleUrlHandlerMapping mapping = <span class="keyword">new</span> SimpleUrlHandlerMapping();</span><br><span class="line">        mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//所有 **/favicon.ico</span></span><br><span class="line">mapping.setUrlMap(Collections.singletonMap(<span class="string">&quot;**/favicon.ico&quot;</span>,</span><br><span class="line">faviconRequestHandler()));</span><br><span class="line"><span class="keyword">return</span> mapping;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResourceHttpRequestHandler <span class="title">faviconRequestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ResourceHttpRequestHandler requestHandler = <span class="keyword">new</span></span><br><span class="line">ResourceHttpRequestHandler();</span><br><span class="line">requestHandler</span><br><span class="line">.setLocations(<span class="keyword">this</span>.resourceProperties.getFaviconLocations());</span><br><span class="line"><span class="keyword">return</span> requestHandler;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>==<strong>所有的/webjars/**,都去 classpath:/META-INF/resources/web/找资源</strong>==</p><p>webjars ：以 jar 包的方式引入静态资源；<a href="http://www.webjars.org/">http://www.webjars.org/</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200830150038.png" alt="image-20200830150014962"></p><p><strong>导入依赖：</strong></p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入jquery-webjar 访问的时候只需要写webjars下面的资源名称即可--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars.bower<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试：</strong>localhost:8080/webjars/jquery/3.3.1/dist/jquery.js</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200830152224.png" alt="image-20200830152223097"></p><ol start="2"><li>==”<strong>/**</strong>“ <strong>访问当前项目的任何资源，都去(静态资源的文件夹)找映射。</strong>==</li></ol><ul><li>“classpath:/META-INF/resources/“</li><li>“classpath:/resources/“</li><li>“classpath:/static/“</li><li>“classpath:/public/“</li><li>“/“:当前项目</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200830153302.png" alt="image-20200830153301812"></p><p>例如： localhost:8080/abc == 去静态资源文件夹里面找 abc</p><ol start="3"><li><p><strong>==欢迎页： 静态资源文件下的所有 index.html 页面；被”/**“映射==</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200830153626.png" alt="image-20200830153625605"></p></li><li><p>==<strong>所有的 **/favicaon.ico 都是在静态资源文件下找</strong>==</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200830160732.png" alt="image-20200830160731509"></p><h3 id="2、引擎模板"><a href="#2、引擎模板" class="headerlink" title="2、引擎模板"></a>2、引擎模板</h3><blockquote><p>jsp、velocity、Freemarker、Thymeleaf</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200830154047.png" alt="image-20200830154046099"></p><p>SpringBoot 推荐的 Tymeleaf，语法更简单，功能更强大；</p><h4 id="①-引入-thymeleaf"><a href="#①-引入-thymeleaf" class="headerlink" title="① 引入 thymeleaf"></a>① 引入 thymeleaf</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/success&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200830164605.png" alt="image-20200830164605070"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200830164631.png" alt="image-20200830164630710"></p><p><strong>切换 thymeleaf 版本</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==启动报错==：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">An attempt was made to call a method that does not exist. The attempt was made from the following location:</span><br><span class="line"></span><br><span class="line">    org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafDefaultConfiguration.templateEngine(ThymeleafAutoConfiguration.java:142)</span><br><span class="line"></span><br><span class="line">The following method did not exist:</span><br></pre></td></tr></table></figure><p>==解决方案==：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springboot-thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">springboot-thymeleaf.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>原因分析</strong>：</p><p>​ 这里用的 org.springframework.boot 下的 spring-boot-starter-thymeleaf,使用&lt;thymeleaf.version&gt;做标签时的可能与 org.thymeleaf 头冲突，导致包获取不正确。</p><h4 id="②-Thymeleaf-使用"><a href="#②-Thymeleaf-使用" class="headerlink" title="② Thymeleaf 使用"></a>② Thymeleaf 使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(</span></span><br><span class="line"><span class="meta">    prefix = &quot;spring.thymeleaf&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> String prefix = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String suffix = <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String mode = <span class="string">&quot;HTML&quot;</span>;</span><br><span class="line">    <span class="comment">//</span></span><br></pre></td></tr></table></figure><p>​ 只要我们把 HTML 页面的放在 classpath:/templates/, thymeleaf 就能自动渲染。</p><p><strong>使用</strong>：</p><ol><li>导入 thymeleaf 的名称空间</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用 thymeleaf 语法</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>success 测试成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;hello&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="③-语法规则"><a href="#③-语法规则" class="headerlink" title="③ 语法规则"></a>③ 语法规则</h4><ol><li><p>th:text： 改变当前元素里面的内容。</p><p> th: 任意 html 属性；来替换原生的值。</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200830214303.png" alt="image-20200830214256448"></p><ol start="2"><li>表达式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">Simple expression: (表达式语法)</span><br><span class="line">Variable Expressions:$&#123;...&#125;: 获取变量值; OGNL;</span><br><span class="line"><span class="number">1</span>)、获取对象的属性、调用方法</span><br><span class="line">                <span class="number">2</span>)、使用内置的基本对象：</span><br><span class="line">                    # ctx: the context object.</span><br><span class="line">                    #vars: the context variables.</span><br><span class="line">#locale : the context locale.</span><br><span class="line">#request : (only in Web Contexts) the HttpServletRequest object.</span><br><span class="line">#response : (only in Web Contexts) the HttpServletResponse object.</span><br><span class="line">#session : (only in Web Contexts) the HttpSession object.</span><br><span class="line">#servletContext : (only in Web Contexts) the ServletContext object.</span><br><span class="line">                 $&#123;session.foo&#125;</span><br><span class="line"><span class="number">3</span>)、内置的一些工具对象</span><br><span class="line">     #execInfo : information about the template being processed.</span><br><span class="line">#messages : methods for obtaining externalized messages inside variables expressions, in the</span><br><span class="line">same way as they would be obtained using #&#123;…&#125; syntax.</span><br><span class="line">    #uris : methods for escaping parts of URLs/URIs</span><br><span class="line">#conversions : methods for executing the configured conversion service (if any).</span><br><span class="line">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><br><span class="line">#calendars : analogous to #dates , but for java.util.Calendar objects.</span><br><span class="line">#numbers : methods for formatting numeric objects.</span><br><span class="line">#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><br><span class="line">#objects : methods for objects in general.</span><br><span class="line">#bools : methods for boolean evaluation.</span><br><span class="line">#arrays : methods for arrays.</span><br><span class="line">#lists : methods for lists.</span><br><span class="line">    #sets : methods for sets.</span><br><span class="line">#maps : methods for maps.</span><br><span class="line">#aggregates : methods for creating aggregates on arrays or collections.</span><br><span class="line">#ids : methods for dealing with id attributes that might be repeated (for example, as a</span><br><span class="line">result of an iteration).</span><br><span class="line"></span><br><span class="line">    Selection Variable Expressions: *&#123;.....&#125;： 选择表达式：和$&#123;&#125;在功能上是一样;</span><br><span class="line">补充: 配合 th:object=<span class="string">&quot;$&#123;session.user&#125;&quot;</span></span><br><span class="line">    &lt;div th:object=<span class="string">&quot;$&#123;session.user&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;Name: &lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Surname: &lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Nationality: &lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    Message Expressions: #&#123;...&#125;: 获取国际化内容</span><br><span class="line">    Link URL Expressions: @&#123;....&#125;: 定义URL;</span><br><span class="line">@&#123;/order/process(execId=$&#123;execId&#125;,execType=<span class="string">&#x27;FAST&#x27;</span>)&#125;</span><br><span class="line">Fragment Expressions: ~&#123;...&#125;：片段引用表达式</span><br><span class="line">&lt;div th:insert=&quot;~&#123;commons :: main&#125;&quot;&gt;...&lt;/div&gt;</span><br><span class="line">Literals(字面量)</span><br><span class="line">    Text literals: <span class="string">&#x27;one text&#x27;</span> , <span class="string">&#x27;Another one!</span></span><br><span class="line"><span class="string">Number literals: 0 , 34 , 3.0 , 12.3 ,…</span></span><br><span class="line"><span class="string">Boolean literals: true , false</span></span><br><span class="line"><span class="string">Null literal: null</span></span><br><span class="line"><span class="string">Literal tokens: one , sometext , main ,…</span></span><br><span class="line"><span class="string">Text operations:（文本操作）</span></span><br><span class="line"><span class="string">String concatenation: +</span></span><br><span class="line"><span class="string">Literal substitutions: |The name is $&#123;name&#125;|</span></span><br><span class="line"><span class="string">Arithmetic operations:（数学运算）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Binary operators: + , ‐ , * , / , %</span></span><br><span class="line"><span class="string">Minus sign (unary operator): ‐</span></span><br><span class="line"><span class="string">Boolean operations:（布尔运算）</span></span><br><span class="line"><span class="string">    Binary operators: and , or</span></span><br><span class="line"><span class="string">Boolean negation (unary operator): ! , not</span></span><br><span class="line"><span class="string">Comparisons and equality:（比较运算）</span></span><br><span class="line"><span class="string">Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span></span><br><span class="line"><span class="string">Equality operators: == , != ( eq , ne )</span></span><br><span class="line"><span class="string">Conditional operators:条件运算（三元运算符）</span></span><br><span class="line"><span class="string">If‐then: (if) ? (then)</span></span><br><span class="line"><span class="string">If‐then‐else: (if) ? (then) : (else)</span></span><br><span class="line"><span class="string">Default: (value) ?: (defaultvalue)</span></span><br><span class="line"><span class="string">Special tokens:</span></span><br><span class="line"><span class="string">No‐Operation: _</span></span><br></pre></td></tr></table></figure><h3 id="3、SpringMVC-自动配置"><a href="#3、SpringMVC-自动配置" class="headerlink" title="3、SpringMVC 自动配置"></a>3、SpringMVC 自动配置</h3><p>​ 可以参考文档：<a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developingweb-applications">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developingweb-applications</a></p><h4 id="①-Spring-MVC-auto-configuration"><a href="#①-Spring-MVC-auto-configuration" class="headerlink" title="① Spring MVC auto-configuration"></a>① Spring MVC auto-configuration</h4><p>Spring Boot 自动配置好了 SpringMVC</p><p>以下是 SpringBoot 对 SpringMVC 的默认配置：==（WebMvcAutoConfiguration）==</p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><ul><li>自动配置 ViewResource(视图解析器：根据方法的返回值得视图对象的（View）, 视图对象决定如何渲染（转发？重定向？）)</li><li>ContextNegotiatingViewResolver: 组合所有的视图解析器的；</li><li>==如何定制：我们可以给自己容器中添加一个视图解析器；自动的将其组合进来；==</li></ul></li><li><p>Support for serving static resources, including support for WebJars (see below). 静态资源文件夹路径，webjars</p></li><li><p>Static <code>index.html</code> support。静态首页的访问</p></li><li><p>Custom <code> Favicon</code> support (see below). favicon.ico</p></li><li><p>自动注册 of <code>Converter</code> , <code>GenericConverter</code>, <code> Formatter</code> bean</p><ul><li>Converter: 转换器；public String hello(User user): 类型转换使用 Converter</li><li>Formatter 格式化器： 2020.8.29 == Date；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;date‐format&quot;)</span><span class="comment">//在文件中配置日期格</span></span><br><span class="line">式化的规则</span><br><span class="line"><span class="function"><span class="keyword">public</span> Formatter&lt;Date&gt; <span class="title">dateFormatter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DateFormatter(<span class="keyword">this</span>.mvcProperties.getDateFormat());<span class="comment">//日期格式化组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==自己添加的格式化器转换器，我们只需要放在容器中即可==</p><ul><li><p>Support for HttpMessageConverters (see below)</p><ul><li><p>HttpMessageConverter: SpringMVC 用来转换 Http 请求和响应的 ：User—json；</p></li><li><p>HttpMessageConverter<strong>s</strong> 是从容器中确定；获取所有的 HttpMessageConverter;</p><p><strong>给自己的容器中添加 HttpMessageConverter,只需要将自己的组件注册容器中（@Bean, @Component）</strong></p></li></ul></li><li><p>Automatic registration of <code>MessageCodesResolver</code> (see below). 定义错误的代码生成规则</p></li><li><p>Automatic use of a ConfigurableWebBindingInitializer bean (see below).</p><p>==我们可以配置一个 ConfigurableWebBindingInitialzer 来替换默认的：（添加到容器）==</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初始化WebDataBinder；</span><br><span class="line">请求数据=====JavaBean；</span><br></pre></td></tr></table></figure><p><strong>org.springframework.boot.autoconfigure.web 的所有的自动场景；</strong></p><p>If you want to keep Spring Boot MVC features, and you just want to add additional ==MVC configuration==(interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type<code> WebMvcConfigurerAdapter</code> , but <strong>without</strong> <code>@EnableWebMvc</code> . If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code> , <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc </code>.</p><h4 id="②-扩展-SpringMVC"><a href="#②-扩展-SpringMVC" class="headerlink" title="② 扩展 SpringMVC"></a>② 扩展 SpringMVC</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:view-controller path=<span class="string">&quot;/hello&quot;</span> view-name=<span class="string">&quot;success&quot;</span>/&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;mvc:mapping path=<span class="string">&quot;/hello&quot;</span>/&gt;</span><br><span class="line">        &lt;bean&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><p>==编写一个配置类（@Configuration）,是 WebMvcConfigAdapter 类型；不能标注@EnableWebMVC==</p><p>既保留所有的自动配置，也能用我们扩展的配置；</p><p>注：<strong>WebMvcConfigurerAdapter</strong>该方法在 spring boot 2.0，Spring 5.0 之后，已经被废弃</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用WebMvcConfigurer可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">// 浏览器发送 /oy 请求到 success</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/oy&quot;</span>).setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200901195303.png" alt="image-20200901195255859"></p><p><strong>原理：</strong></p><pre><code>1. WebMvcAutoConfiguration是SpringMVC的自动配置类</code></pre><ol start="2"><li>在做其他的自动配置时会导入：@Import（<strong>EnableWebMvcConfiguration</strong>.class）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"><span class="comment">// 从容器中获取所有的WebmvcConfigurer</span></span><br><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line"><span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line"><span class="comment">//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">// public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">// for (WebMvcConfigurer delegate : this.delegates) &#123;</span></span><br><span class="line"><span class="comment">// delegate.addViewControllers(registry);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>容器中所有的 WebMvcConfigurer 都会一起起作用</p></li><li><p>我们的配置类也会被调用；</p><p>效果：SpringMVC 的自动配置和我们的扩展配置都会起作用；</p></li></ol><h4 id="③、全面接管-SpringMVC；"><a href="#③、全面接管-SpringMVC；" class="headerlink" title="③、全面接管 SpringMVC；"></a>③、全面接管 SpringMVC；</h4><p>SpringBoot 对 SpringMVC 的自动配置不需要了，所有都是我们自己配置；所有的 SpringMVC 的自动配置都失效了</p><p><strong>我们需要在配置类中添加@EnableWebMvc 即可；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用WebMvcConfigurer可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       <span class="comment">/* super.addViewControllers(registry);*/</span></span><br><span class="line">        <span class="comment">// 浏览器 /oy 请求来到 success</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/oy&quot;</span>).setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原理：</strong>（为什么@EnableWebMvc 自动配置就失效了）</p><ol><li>@EnableWebMvc 的核心</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(DelegatingWebMvcConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class,WebMvcConfigurerAdapter.class &#125;)</span></span><br><span class="line"><span class="comment">//容器中没有这个组件的时候，这个自动配置类才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class,ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure><ol start="4"><li>@EnableWebMvc 将 WebMvcConfiguationSupport 组件导入进来</li><li>导入的 WebMvcConfiguration 只是 SpringMVC 最基本功能；</li></ol><h3 id="5、如何修改-SpringBoot-的默认设置"><a href="#5、如何修改-SpringBoot-的默认设置" class="headerlink" title="5、如何修改 SpringBoot 的默认设置"></a>5、如何修改 SpringBoot 的默认设置</h3><p>模式：</p><ol><li>SpringBoot 在自动配置很多组件的时候，先看容器中有没有自己配置的（@Bean、@Component）如果有就用户自己配置，如果没有，才自动配置和自己默认组合起来；</li><li>在 SpringBoot 中国会有非常多的 xxxConfigurer 帮助我们进行扩展配置</li><li>在 SpringBoot 中会有很多的 xxxCustomize 帮助我们进行定制配置</li></ol><h3 id="6、RestfulCRUD"><a href="#6、RestfulCRUD" class="headerlink" title="6、RestfulCRUD"></a>6、RestfulCRUD</h3><p><strong>配置 pom 配置文件</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">springboot-thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">springboot-thymeleaf.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置thymeleaf模板--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="①-默认访问首页"><a href="#①-默认访问首页" class="headerlink" title="① 默认访问首页"></a>① 默认访问首页</h4><p>​ <strong>方式一</strong>：(不推荐)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Controller中配置</span></span><br><span class="line"><span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index.html&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​ <strong>方式二</strong>：(推荐)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用WebConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="comment">// 使用@EnableWebMvc 不要接管SpringMVC</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送得 /oy 请求来到 success</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/oy&quot;</span>).setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有的webMvcConfigAdapter组件都会一起起作用</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 将组件注册在容器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyMvcConfig <span class="title">MyMvcConfig1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyMvcConfig config = <span class="keyword">new</span> MyMvcConfig()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">                registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【application.properties】</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/curd</span></span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200901225545.png" alt="image-20200901225537832"></p><p><strong>提前在 POM.xml 文件中引入 bootstrap 依赖（后面需要）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入bootstrap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②-国际化"><a href="#②-国际化" class="headerlink" title="② 国际化"></a>② 国际化</h4><ol><li><p><strong>编写国际化配置文件：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200901232341.png" alt="image-20200901232340132"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200902212554.png" alt="image-20200902212547250"></p></li><li><p><strong>SpringBoot 自动配置好了管理国际化资源文件的组件（2.x 版本）：</strong></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConfigurationProperties(</span></span><br><span class="line"><span class="meta">       prefix = &quot;spring.messages&quot;</span></span><br><span class="line"><span class="meta">   )</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> MessageSourceProperties <span class="title">messageSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> MessageSourceProperties();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">(MessageSourceProperties properties)</span> </span>&#123;</span><br><span class="line">       ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">       <span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">          <span class="comment">// 设置国际化资源文件的基础名（去掉语言国家代码的） messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">           messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());</span><br><span class="line">       Duration cacheDuration = properties.getCacheDuration();</span><br><span class="line">       <span class="keyword">if</span> (cacheDuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">           messageSource.setCacheMillis(cacheDuration.toMillis());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());</span><br><span class="line">       messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());</span><br><span class="line">       <span class="keyword">return</span> messageSource;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>1.x 版本：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.messages&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Comma‐separated list of basenames (essentially a fully‐qualified classpath</span></span><br><span class="line"><span class="comment">    * location), each following the ResourceBundle convention with relaxed support for</span></span><br><span class="line"><span class="comment">    * slash based locations. If it doesn&#x27;t contain a package qualifier (such as</span></span><br><span class="line"><span class="comment">    * &quot;org.mypackage&quot;), it will be resolved from the classpath root.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String basename = <span class="string">&quot;messages&quot;</span>;</span><br><span class="line"><span class="comment">//我们的配置文件可以直接放在类路径下叫messages.properties；</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.basename)) &#123;</span><br><span class="line"><span class="comment">//设置国际化资源文件的基础名（去掉语言国家代码的）</span></span><br><span class="line">messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(</span><br><span class="line">StringUtils.trimAllWhitespace(<span class="keyword">this</span>.basename)));</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.encoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">messageSource.setDefaultEncoding(<span class="keyword">this</span>.encoding.name());</span><br><span class="line">&#125;</span><br><span class="line">   messageSource.setFallbackToSystemLocale(<span class="keyword">this</span>.fallbackToSystemLocale);</span><br><span class="line">messageSource.setCacheSeconds(<span class="keyword">this</span>.cacheSeconds);</span><br><span class="line">messageSource.setAlwaysUseMessageFormat(<span class="keyword">this</span>.alwaysUseMessageFormat);</span><br><span class="line"><span class="keyword">return</span> messageSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在<strong>application.properties</strong> 文件中配置：</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定管理国际化资源文件</span></span><br><span class="line"><span class="meta">spring.messages.basename</span>=<span class="string">i18n.login</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>去页面获取的国际化的值</strong>、</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    &lt;meta</span><br><span class="line">      name=&quot;viewport&quot;</span><br><span class="line">      content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line">    &lt;link</span><br><span class="line">      href=&quot;asserts/css/bootstrap.min.css&quot;</span><br><span class="line">      th:href=&quot;@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;&quot;</span><br><span class="line">      rel=&quot;stylesheet&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    <span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line">    &lt;link</span><br><span class="line">      href=&quot;asserts/css/signin.css&quot;</span><br><span class="line">      th:href=&quot;@&#123;/asserts/css/signin.css&#125;&quot;</span><br><span class="line">      rel=&quot;stylesheet&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-signin&quot;</span> <span class="attr">action</span>=<span class="string">&quot;dashboard.html&quot;</span>&gt;</span></span><br><span class="line">      &lt;img</span><br><span class="line">        class=&quot;mb-4&quot;</span><br><span class="line">        src=&quot;asserts/img/bootstrap-solid.svg&quot;</span><br><span class="line">        th:src=&quot;@&#123;/asserts/img/bootstrap-solid.svg&#125;&quot;</span><br><span class="line">        alt=&quot;&quot;</span><br><span class="line">        width=&quot;72&quot;</span><br><span class="line">        height=&quot;72&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;h3 mb-3 font-weight-normal&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span></span><br><span class="line">        Please sign in</span><br><span class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.username&#125;&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      &lt;input</span><br><span class="line">        type=&quot;text&quot;</span><br><span class="line">        class=&quot;form-control&quot;</span><br><span class="line">        placeholder=&quot;Username&quot;</span><br><span class="line">        th:placeholder=&quot;#&#123;login.username&#125;&quot;</span><br><span class="line">        required=&quot;&quot;</span><br><span class="line">        autofocus=&quot;&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.password&#125;&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      &lt;input</span><br><span class="line">        type=&quot;password&quot;</span><br><span class="line">        class=&quot;form-control&quot;</span><br><span class="line">        placeholder=&quot;Password&quot;</span><br><span class="line">        th:placeholder=&quot;#&#123;login.password&#125;&quot;</span><br><span class="line">        required=&quot;&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox mb-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;remember-me&quot;</span> /&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      &lt;button</span><br><span class="line">        class=&quot;btn btn-lg btn-primary btn-block&quot;</span><br><span class="line">        type=&quot;submit&quot;</span><br><span class="line">        th:text=&quot;#&#123;login.btn&#125;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        Sign in</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong>：（更改浏览器语言）</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200902214354.png" alt="image-20200902214353619"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200902214456.png" alt="image-20200902214455966"></p><p><strong>原理：</strong></p><p>国际化 Locale（区域信息对象）； LocaleResolver（获取区域信息对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties</span><br><span class="line">.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">&#125;</span><br><span class="line">    AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line"><span class="keyword">return</span> localeResolver;</span><br><span class="line">&#125;</span><br><span class="line">默认的就是根据请求头带来的区域信息Localhost进行国际化</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>点击切换国际化</strong></li></ol><p>【MyLocaleResolver.calss】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以在连接上携带区域的信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">        String l = httpServletRequest.getParameter(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(<span class="string">&quot;_&quot;</span>))&#123;</span><br><span class="line">            String[] split = l.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【MyMvcConfig.class】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【login.html】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="③-登录"><a href="#③-登录" class="headerlink" title="③ 登录"></a>③ 登录</h4><p>开发期间模板的引擎页面修改以后，要实时生效</p><ol><li>禁用模板引擎的缓存</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用缓存</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><ol start="2"><li>页面修改完成完成以后 ctrl +f9 : 重新编译；</li></ol><p>【MyLocaleResolver.class】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">        String l = httpServletRequest.getParameter(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(l))&#123;</span><br><span class="line">            String[] split = l.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【LonginController.class】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LonginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/user/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String passsword, Map&lt;String , Object&gt; map, HttpSession session)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(username) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(passsword))&#123;</span><br><span class="line">            <span class="comment">// 登陆成功，防止表单重复提交，可以重定向到主页</span></span><br><span class="line">            session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,username);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/main.html&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 登录失败</span></span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【MyMvcConfig.class】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> MyMvcConfig <span class="title">MyMvcConfig1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       MyMvcConfig config = <span class="keyword">new</span> MyMvcConfig()&#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">               registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">               registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">               registry.addViewController(<span class="string">&quot;/main.html&quot;</span>).setViewName(<span class="string">&quot;dashboard&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="keyword">return</span> config;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>登录错误提示消息</p><p>【login.html】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200903092850.png" alt="image-20200903092842867"></p><h4 id="④-拦截器进行登陆检查"><a href="#④-拦截器进行登陆检查" class="headerlink" title="④ 拦截器进行登陆检查"></a>④ 拦截器进行登陆检查</h4><p><strong>拦截器</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Description</span> 登录检查</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Author</span> OY</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Date</span> 2020/9/3</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Time</span> 16:07</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 未登入，返回登录界面</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;没有权限请先登陆&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/index.html&quot;</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 以登录,放行请求</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注册拦截器</strong>：【MyMvcConfig.class】</p><p><em>注: 拦截器必须配置不拦截 css 样式，不然页面的 css 样式会失效</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的webMvcConfig组件都会一起起作用</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 将组件注册在容器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyMvcConfig <span class="title">MyMvcConfig1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyMvcConfig config = <span class="keyword">new</span> MyMvcConfig()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">                registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">                registry.addViewController(<span class="string">&quot;/main.html&quot;</span>).setViewName(<span class="string">&quot;dashboard&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注册拦截器</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 静态资源： *.css , *.js</span></span><br><span class="line">                <span class="comment">// SpringBoot已经做好了静态资源映射</span></span><br><span class="line"><span class="comment">/*                registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns(&quot;/&quot;)</span></span><br><span class="line"><span class="comment">                            .excludePathPatterns(&quot;/index.html&quot;,&quot;/&quot;,&quot;/user/login&quot;,&quot;/asset/**&quot;,&quot;/webjars/**&quot;);*/</span></span><br><span class="line"></span><br><span class="line">                registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                        .excludePathPatterns(<span class="string">&quot;/index.html&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;/user/login&quot;</span>,<span class="string">&quot;/static/**&quot;</span>, <span class="string">&quot;/webjars/**&quot;</span>);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="⑤-CRUD-员工列表"><a href="#⑤-CRUD-员工列表" class="headerlink" title="⑤ CRUD-员工列表"></a>⑤ CRUD-员工列表</h4><p><strong>实验要求：</strong></p><ol><li><strong>RestfulCURD: CURD 满足 Rest 风格</strong>；</li></ol><p><strong>URL</strong>：/ 资源名称 / 资源标识 HTTP 请求的方式区分对资源 CRUD 操作</p><table><thead><tr><th></th><th>普通 CURD(uri 来区分操作)</th><th>RestfulCRUD</th></tr></thead><tbody><tr><td>查询</td><td>getEmp</td><td>emp—GET</td></tr><tr><td>添加</td><td>addEmp?xxx</td><td>emp—POST</td></tr><tr><td>修改</td><td>updateEmp?id=xxx&amp;xxx=xx</td><td>emp/{id}—PUT</td></tr><tr><td>删除</td><td>deleteEmp?id=1</td><td>emp/{id}—DELETE</td></tr></tbody></table><ol start="2"><li><strong>实验的请求架构</strong>：</li></ol><table><thead><tr><th>实验功能</th><th>请求 URL</th><th>请求方式</th></tr></thead><tbody><tr><td>查询所有员工</td><td>emps</td><td>GET</td></tr><tr><td>查询某个员工(来到修改页面)</td><td>emp/1</td><td>GET</td></tr><tr><td>来到添加页面</td><td>emp</td><td>GET</td></tr><tr><td>添加员工</td><td>emps</td><td>POST</td></tr><tr><td>来到修改页面（查出员工进行信息回显）</td><td>emp/1</td><td>GET</td></tr><tr><td>修改员工</td><td>emp</td><td>PUT</td></tr><tr><td>删除员工</td><td>emp/1</td><td>DELETE</td></tr></tbody></table><ol start="3"><li><strong>员工列表</strong></li></ol><p><strong>thymeleaf 公共页面元素的抽取</strong></p><blockquote><p>1、抽取公共片段</p><p>&lt;div th:fragment=”copy”&gt;<br>&copy; 2011 The Good Thymes Virtual Grocery<br>&lt;/div&gt;</p><p>2、引入公共片段</p><p>&lt;div th:insert=”~{footer:: copy}”&gt;</div></p><p>~{templatename :: selector} : 模板名 :: 选择器</p><p>~{templatename :: fragmentname} : 模板名 :: 片段名</p><p>3、默认效果</p><p>insert 的公共片段在 div 标签中</p><p>如果使用 th:insert 等属性进行引入，可以不用写~{}；</p><p>行内写法可加上 ：[[<del>{}]]; [[</del>{}]]</p></blockquote><p>三种引入片段的 th 属性：</p><p><strong>th: insert:</strong> 将公共整个片段插入到声明引入的元素中</p><p><strong>th:replace：</strong> 将声明引入的元素换为公共的片段</p><p><strong>th:include</strong>: 将被引入的片段的内容包含进这个标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">引入方式</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">效果</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>抽取出公共的页面【bar.html】：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!--topbar--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0&quot;</span> <span class="attr">th:fragment</span>=<span class="string">&quot;topbar&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand col-sm-3 col-md-2 mr-0&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://getbootstrap.com/docs/4.0/examples/dashboard/#&quot;</span>&gt;</span>[[$&#123;session.loginUser&#125;]]<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control form-control-dark w-100&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Search&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;navbar-nav px-3&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item text-nowrap&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://getbootstrap.com/docs/4.0/examples/dashboard/#&quot;</span>&gt;</span>Sign out<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 d-none d-md-block bg-light sidebar&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-sticky&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav flex-column&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/main.html&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">th:class</span>=<span class="string">&quot;$&#123;activeUri==&#x27;main.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">class</span>=<span class="string">&quot;feather feather-home&quot;</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;9 22 9 12 15 12 15 22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                       Dashboard <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://getbootstrap.com/docs/4.0/examples/dashboard/#&quot;</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">class</span>=<span class="string">&quot;feather feather-file&quot;</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;13 2 13 9 20 9&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                       Orders</span><br><span class="line">                   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://getbootstrap.com/docs/4.0/examples/dashboard/#&quot;</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">class</span>=<span class="string">&quot;feather feather-shopping-cart&quot;</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;9&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;21&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;20&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;21&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                       Products</span><br><span class="line">                   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/emps&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">th:class</span>=<span class="string">&quot;$&#123;activeUri==&#x27;emps&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">class</span>=<span class="string">&quot;feather feather-users&quot;</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;9&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;7&quot;</span> <span class="attr">r</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M23 21v-2a4 4 0 0 0-3-3.87&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M16 3.13a4 4 0 0 1 0 7.75&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                       员工管理</span><br><span class="line">                   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">               .........</span><br><span class="line">       <span class="tag">&lt;/<span class="name">nva</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入(选择高亮)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入抽取的topbar--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--模板名: 会使用thymeleaf的前后缀的配置规则进行解析--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;commons/bar :: topbar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入sidebar--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;commons/bar :: #sidebar(activeUri=&#x27;main.html&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200905091228.png" alt="image-20200905091143294"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200905091423.png" alt="image-20200905091422715"></p><p>【EmployeeController.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">EmployeeDao employeeDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有的员工列列表页面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/emps&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line">    Collection&lt;Employee&gt; employees = employeeDao.getAll();</span><br><span class="line">    <span class="comment">//放在请求域中</span></span><br><span class="line">    map.put(<span class="string">&quot;emps&quot;</span>, employees);</span><br><span class="line">    <span class="comment">// thymeleaf 默认就会拼串</span></span><br><span class="line">    <span class="comment">// classpath:/templates/xxxx.html</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;emp/list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 thymeleaf 模板列出所有的员工信息【list.html】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 修改这个两处地方</span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>department<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>birth<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;emp:$&#123;emps&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.department.departmentName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(emp.birth, &#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑥-CRUD-员工添加"><a href="#⑥-CRUD-员工添加" class="headerlink" title="⑥ CRUD-员工添加"></a>⑥ CRUD-员工添加</h4><p>将【list.html】替换为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">替换前：</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Section title<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">替换后：</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-success&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/emp&#125;&quot;</span>&gt;</span>员工添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【EmployeeController.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> DepartmentDao departmentDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/emp&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAddPage</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 来到添加页面，查出所有的部门</span></span><br><span class="line">    Collection&lt;Department&gt; departments = departmentDao.getDepartments();</span><br><span class="line">    map.put(<span class="string">&quot;depts&quot;</span>,departments);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;emp/add&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在 templates/emp 新建页面【add.html】</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">// 复制list.html 进行细微的修改,删除原</span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">  标签中的元素替换为以下的内容</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span> <span class="attr">role</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9 ml-sm-auto col-lg-10 pt-3 px-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/emp&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        &lt;input</span><br><span class="line">          name=&quot;lastName&quot;</span><br><span class="line">          type=&quot;text&quot;</span><br><span class="line">          class=&quot;form-control&quot;</span><br><span class="line">          placeholder=&quot;zhangsan&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        &lt;input</span><br><span class="line">          name=&quot;email&quot;</span><br><span class="line">          type=&quot;email&quot;</span><br><span class="line">          class=&quot;form-control&quot;</span><br><span class="line">          placeholder=&quot;zhangsan@atguigu.com&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">          &lt;input</span><br><span class="line">            class=&quot;form-check-input&quot;</span><br><span class="line">            type=&quot;radio&quot;</span><br><span class="line">            name=&quot;gender&quot;</span><br><span class="line">            value=&quot;1&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">          &lt;input</span><br><span class="line">            class=&quot;form-check-input&quot;</span><br><span class="line">            type=&quot;radio&quot;</span><br><span class="line">            name=&quot;gender&quot;</span><br><span class="line">            value=&quot;0&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--提交的是部门的id--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;department.id&quot;</span>&gt;</span></span><br><span class="line">          &lt;option</span><br><span class="line">            th:value=&quot;$&#123;dept.id&#125;&quot;</span><br><span class="line">            th:each=&quot;dept:$&#123;depts&#125;&quot;</span><br><span class="line">            th:text=&quot;$&#123;dept.departmentName&#125;&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            1</span><br><span class="line">          <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        &lt;input</span><br><span class="line">          type=&quot;text&quot;</span><br><span class="line">          name=&quot;birth&quot;</span><br><span class="line">          class=&quot;form-control&quot;</span><br><span class="line">          placeholder=&quot;zhangsan&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【application.properties】</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式化时间</span></span><br><span class="line"><span class="meta">spring.mvc.format.date</span>=<span class="string">yyyy-MM-dd</span></span><br></pre></td></tr></table></figure><p>日期的格式化： SpringMVC 将页面的提交的值需要转换为指定的类型；</p><p>例如：2017-12-12—-Date； 类型转换，格式化；</p><p>默认日期的按照/的方式</p><p>【EmployeeController.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取添加页面的信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/emp&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addEmp</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;保存到员工信息:&quot;</span> + employee);</span><br><span class="line">    <span class="comment">// 保存员工信息</span></span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="comment">// redirect: 重定向一个到地址 / 代表当前项目的路径</span></span><br><span class="line">    <span class="comment">// forward: 表示转发一个地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/emps&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改【list.html】中的 gender</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.gender&#125;==0?&#x27;女&#x27;:&#x27;男&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200905113416.png" alt="image-20200905113415190"></p><p><strong>效果</strong>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200905113508.png" alt="image-20200905113507392"></p><h4 id="⑦-员工修改"><a href="#⑦-员工修改" class="headerlink" title="⑦ 员工修改"></a>⑦ 员工修改</h4><p>先通过 id 查询修改员工的信息【EmployeeController.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 来到修改页面，查询员工信息，回显</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/emp/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toEditPage</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line">    Employee employee = employeeDao.get(id);</span><br><span class="line">    map.put(<span class="string">&quot;emp&quot;</span>,employee);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 页面要显示所有部门的信息</span></span><br><span class="line">    Collection&lt;Department&gt; departments = departmentDao.getDepartments();</span><br><span class="line">    map.put(<span class="string">&quot;depts&quot;</span>,departments);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;emp/add&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改添加二合一表单【list.html】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入抽取的topbar--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--模板名: 会使用thymeleaf的前后缀的配置规则进行解析--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;commons/bar::topbar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入sidebar--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;commons/bar::#sidebar(activeUri=&#x27;emps&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span> <span class="attr">role</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9 ml-sm-auto col-lg-10 pt-3 px-4&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--需要区分是员工修改还是添加；--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/emp&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--发送put请求修改员工数据--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1.SpringMVC中配置HiddenHttpMethodFiler;(SpringBoot自动配置好的)</span></span><br><span class="line"><span class="comment">2.页面创建一个post表单</span></span><br><span class="line"><span class="comment">3.创建input项,name=&quot;_method&quot;;值就是我们指定的请求方式</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;emp!=null&#125;&quot;</span> /&gt;</span></span><br><span class="line">        &lt;input</span><br><span class="line">          type=&quot;hidden&quot;</span><br><span class="line">          name=&quot;id&quot;</span><br><span class="line">          th:value=&quot;$&#123;emp.id&#125;&quot;</span><br><span class="line">          th:if=&quot;$&#123;emp != null&#125;&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          &lt;input</span><br><span class="line">            name=&quot;lastName&quot;</span><br><span class="line">            type=&quot;text&quot;</span><br><span class="line">            class=&quot;form-control&quot;</span><br><span class="line">            placeholder=&quot;zhangsan&quot;</span><br><span class="line">            th:value=&quot;$&#123;emp!= null&#125;?$&#123;emp.lastName&#125;&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          &lt;input</span><br><span class="line">            name=&quot;email&quot;</span><br><span class="line">            type=&quot;email&quot;</span><br><span class="line">            class=&quot;form-control&quot;</span><br><span class="line">            placeholder=&quot;zhangsan@atguigu.com&quot;</span><br><span class="line">            th:value=&quot;$&#123;emp!=null&#125;?$&#123;emp.email&#125;&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">            &lt;input</span><br><span class="line">              class=&quot;form-check-input&quot;</span><br><span class="line">              type=&quot;radio&quot;</span><br><span class="line">              name=&quot;gender&quot;</span><br><span class="line">              value=&quot;1&quot;</span><br><span class="line">              th:checked=&quot;$&#123;emp!=null&#125;?$&#123;emp.gender==1&#125;&quot;</span><br><span class="line">            /&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">            &lt;input</span><br><span class="line">              class=&quot;form-check-input&quot;</span><br><span class="line">              type=&quot;radio&quot;</span><br><span class="line">              name=&quot;gender&quot;</span><br><span class="line">              value=&quot;0&quot;</span><br><span class="line">              th:checked=&quot;$&#123;emp!= null&#125;?$&#123;emp.gender==0&#125;&quot;</span><br><span class="line">            /&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--提交的是部门的id--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;department.id&quot;</span>&gt;</span></span><br><span class="line">            &lt;option</span><br><span class="line">              th:selected=&quot;$&#123;emp!=null&#125;?$&#123;dept.id==emp.department.id&#125;&quot;</span><br><span class="line">              th:value=&quot;$&#123;dept.id&#125;&quot;</span><br><span class="line">              th:each=&quot;dept:$&#123;depts&#125;&quot;</span><br><span class="line">              th:text=&quot;$&#123;dept.departmentName&#125;&quot;</span><br><span class="line">            &gt;</span><br><span class="line">              1</span><br><span class="line">            <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          &lt;input</span><br><span class="line">            type=&quot;text&quot;</span><br><span class="line">            name=&quot;birth&quot;</span><br><span class="line">            class=&quot;form-control&quot;</span><br><span class="line">            placeholder=&quot;zhangsan&quot;</span><br><span class="line">            th:value=&quot;$&#123;emp!= null&#125;?$&#123;#dates.format(emp.birth, &#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &lt;button</span><br><span class="line">          type=&quot;submit&quot;</span><br><span class="line">          class=&quot;btn btn-primary&quot;</span><br><span class="line">          th:text=&quot;$&#123;emp!=null&#125;?&#x27;修改&#x27;:&#x27;添加&#x27;&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          添加</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取修改的数据，后台进行处理【EmployeeController.class】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改员工的信息，需要提交员工的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PutMapping(value = &quot;/emp&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateEmployees</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;员工修改信息为:&quot;</span>+employee);</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/emps&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑧-员工删除"><a href="#⑧-员工删除" class="headerlink" title="⑧ 员工删除"></a>⑧ 员工删除</h4><p>【EmployeeController.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/emp/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;需要删除员工的Id为:&quot;</span>+ id);</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/emps&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【list.html】</p><ol><li>修改 button 添加属性</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;button</span><br><span class="line">  th:attr=&quot;del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span><br><span class="line">  class=&quot;btn btn-sm btn-danger deleteBtn&quot;</span><br><span class="line">&gt;</span><br><span class="line">  删除</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>添加 form 表单</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;deleteEmpForm&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200905170637.png" alt="image-20200905170616196"></p><ol start="3"><li>用 jquery 来处理用户删除</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 添加th:src 防止js、bootstrat等无法获取资源</span><br><span class="line">&lt;script</span><br><span class="line">  type=&quot;text/javascript&quot;</span><br><span class="line">  src=&quot;asserts/js/jquery-3.2.1.slim.min.js&quot;</span><br><span class="line">  th:src=&quot;@&#123;/webjars/jquery/3.2.1/dist/jquery.js&#125;&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;script</span><br><span class="line">  type=&quot;text/javascript&quot;</span><br><span class="line">  src=&quot;asserts/js/popper.min.js&quot;</span><br><span class="line">  th:src=&quot;@&#123;/webjars/popper.js/1.11.1/dist/popper.js&#125;&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;script</span><br><span class="line">  type=&quot;text/javascript&quot;</span><br><span class="line">  src=&quot;asserts/js/bootstrap.min.js&quot;</span><br><span class="line">  th:src=&quot;@&#123;/webjars/bootstrap/4.0.0/js/bootstrap.js&#125;&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Icons --&gt;</span></span><br><span class="line">&lt;script</span><br><span class="line">  type=&quot;text/javascript&quot;</span><br><span class="line">  src=&quot;asserts/js/feather.min.js&quot;</span><br><span class="line">  th:src=&quot;@&#123;/asserts/js/feather.min.js&#125;&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">&quot;.deleteBtn&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $tr = $(<span class="built_in">this</span>).parent().parent();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> name = $tr.children(<span class="string">&quot;:first&quot;</span>).html();</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 删除员工,并进行友好提示</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (confirm(<span class="string">&quot;确定要用户ID为【&quot;</span> + name + <span class="string">&quot;】删除吗？&quot;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">&quot;#deleteEmpForm&quot;</span>).attr(<span class="string">&quot;action&quot;</span>, $(<span class="built_in">this</span>).attr(<span class="string">&quot;del_uri&quot;</span>)).submit();</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 取消元素的默认行为</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>异常处理（delete 请求被拦截）</li></ol><blockquote><p>There was an unexpected error (type=Method Not Allowed, status=405)</p></blockquote><p>解决方法：在 SpringBoot 配置文件中【application.properties】中配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取消delete请求拦截</span></span><br><span class="line"><span class="meta">spring.mvc.hiddenmethod.filter.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h3 id="7、错误处理机制"><a href="#7、错误处理机制" class="headerlink" title="7、错误处理机制"></a>7、错误处理机制</h3><h4 id="①-SpringBoot-默认的错误处理机制"><a href="#①-SpringBoot-默认的错误处理机制" class="headerlink" title="① SpringBoot 默认的错误处理机制"></a>① SpringBoot 默认的错误处理机制</h4><p><strong>默认效果</strong>：</p><ol><li>浏览器，返回一个默认的错误页面</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200906090702.png" alt="image-20200906090655396"></p><p>浏览器发送的请求的请求头：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200906090838.png" alt="image-20200906090837590"></p><ol start="2"><li>如果是其他客户端，默认响应一个 josn 数据</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200906090951.png" alt="image-20200906090945326"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200906091609.png" alt="image-20200906091608432"></p><p>原理：可以参照 ErrorMvcAutoConfiguration； 错误处理的自动配置；</p><p>给容器中添加一下组件</p><ol><li>. DefaultErrorAttributes;</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">帮助我们在页面共享信息;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes,<span class="keyword">boolean</span> includeStackTrace)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;String, Object&gt;();</span><br><span class="line">errorAttributes.put(<span class="string">&quot;timestamp&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">addStatus(errorAttributes, requestAttributes);</span><br><span class="line">addErrorDetails(errorAttributes, requestAttributes,includeStackTrace);</span><br><span class="line">addPath(errorAttributes, requestAttributes);</span><br><span class="line"><span class="keyword">return</span> errorAttributes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>.BasicErrorController: 处理默认的/error 请求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping(produces = &quot;text/html&quot;)</span><span class="comment">// 产生html类型的数据；浏览器发送的请求来到这个方法处理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">HttpStatus status = getStatus(request);</span><br><span class="line">Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class="line">request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">response.setStatus(status.value());</span><br><span class="line"><span class="comment">//去哪个页面作为错误页面；包含页面地址和页面内容</span></span><br><span class="line">ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line"><span class="keyword">return</span> (modelAndView == <span class="keyword">null</span> ? <span class="keyword">new</span> ModelAndView(<span class="string">&quot;error&quot;</span>, model) : modelAndView);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@ResponseBody</span> <span class="comment">// 产生json数据，其他客户端来这个方法处理</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class="line">isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">HttpStatus status = getStatus(request);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）.ErrorPageCustomizer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;error.path:/error&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String path = <span class="string">&quot;/error&quot;</span>; 系统出现错误以后来到error请求进行处理；(web.xml注册的错误页面规则)</span><br></pre></td></tr></table></figure><p>4）. DefaultErroViewResolver：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status,Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">ModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class="line"><span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp;SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line"><span class="comment">//默认的SpringBoot可以去找到一个页面  error/404</span></span><br><span class="line">String errorViewName = <span class="string">&quot;error/&quot;</span> + viewName;</span><br><span class="line"><span class="comment">//模板引擎可以解析这个页面地址就用模板引擎解析</span></span><br><span class="line">TemplateAvailabilityProvider provider =<span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName, <span class="keyword">this</span>.applicationContext);</span><br><span class="line"><span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//模模板引擎可用的情况下返回errorViewName指定的试图地址</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//模板引擎不可用，就在静态资源文件只夹下找errorView对应的页面 error/404.html</span></span><br><span class="line"><span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>步骤</strong>：一旦系统出现 4xx 或者 5xx 之类的错误；ErrorPageCustmizer 就会生效（定制错误的响应规则）；就会来到/error 请求；就会<strong>BasicErrorController</strong>处理；</p><ol><li>响应页面；去哪个页面的 DefaultErrorViewResolver 解析得到的；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line"><span class="comment">//所有的ErrorViewResolver得到ModelAndView</span></span><br><span class="line"><span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">ModelAndView modelAndView = resolver.resolveErrorView(request,status, model);</span><br><span class="line"><span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②-如果定制错误响应"><a href="#②-如果定制错误响应" class="headerlink" title="② 如果定制错误响应:"></a>② 如果定制错误响应:</h4><p>1). <strong>如何定制错误的页面</strong></p><p>​ 1. <strong>有模板引擎的情况下：error/状态码</strong>;【将错误页面命名为 错误状态码.html 放在模板引擎文件夹里面的 error 文件下】，发生此状态码的错误就会来到对应的页面；</p><p>​ 我们可以使用 4xx 和 5xx 作为错误的文件名来匹配这种类型的所有的错误，精确优先（优先寻找精确的状态码.html）;</p><p><strong>页面能获取的信息</strong>：</p><ul><li>timestamp： 时间戳</li><li>staus: 状态码</li><li>error： 错误提示</li><li>exception: 异常对象</li><li>mesage: 异常消息</li><li>errors: JSR303 数据校验的错误都在这里</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">role</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9 ml-sm-auto col-lg-10 pt-3 px-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>timestamp:[[$&#123;timestamp&#125;]]<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>status:[[$&#123;status&#125;]]<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>error:[[$&#123;error&#125;]]<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200906101942.png" alt="image-20200906101941055"></p><ol start="2"><li><p>没有模板引擎（模板引擎找不到这个错误的页面），静态资源文件夹下找；</p></li><li><p>以上都都没有错误页面，就是默认来到 SpringBoot 默认的错误提示页面；</p></li></ol><p>2).<strong>如何定制错误的 json 数据</strong>；</p><ol><li>自定义异常处理&amp;返回定制的 json 数据；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@ExceptionHandler(UserNotExistException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">handleException</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;user.notexist&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;message&quot;</span>,e.getMessage());</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 没有自适应效果</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200906104533.png" alt="image-20200906104531138"></p><ol start="2"><li>转到到/error 进行自适应想响应的效果处理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handException</span><span class="params">(Exception e, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 传入我们自己的错误状态码 4xx 5xx，否则就不会进入定制错误页面的解析流程</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;javax.servlet.error.status_code&quot;</span>,<span class="number">500</span>);</span><br><span class="line">    map.put(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;user.notexist&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;message&quot;</span>,e.getMessage());</span><br><span class="line">    <span class="comment">// 转发到/error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/error&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）.<strong>将我们的定制数据携带出去</strong>；</p><p>​ 出现错误以后，会来到/error 请求，会被 BasicErrorController 处理，响应出去可以获取的数据是由 getErrorAttributes 得到的（是 AbstractErrorController(ErrorController)规定的方法）；</p><ol><li>完全来编写一个 ErrorController 的实现类【或者编写 AbstractErrorController 的子类】，放在容器中；</li><li>页面上能用的数据，或者是 Json 返回的能用的数据都是通过 errAttributes.getErrorAttributes 得到，容器中 DefaultErrorAttrutes.getErrorAttributes()；默认进行数据处理的；</li></ol><p><strong>自定义 ErrorAttributes</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给容器中加入我们自己的定义的ErrorAttributes</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回值的map就是页面和json能获取的所有字段</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(webRequest, includeStackTrace);</span><br><span class="line">        map.put(<span class="string">&quot;company&quot;</span>,<span class="string">&quot;oy&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终效果：响应是自适应的，可以通过定制 ErrorAttributes 改变需要返回的内容，</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200906112456.png" alt="image-20200906112455330"></p><h3 id="8、配置嵌入式-Servle-容器"><a href="#8、配置嵌入式-Servle-容器" class="headerlink" title="8、配置嵌入式 Servle 容器"></a>8、配置嵌入式 Servle 容器</h3><p>SpringBoot 默认使用 Tomcat 作为嵌入式的 Servlet 容器；</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200906112934.png" alt="image-20200906112933381"></p><h4 id="①-定制和修改-Servlet-容器的相关配置；"><a href="#①-定制和修改-Servlet-容器的相关配置；" class="headerlink" title="① 定制和修改 Servlet 容器的相关配置；"></a>① 定制和修改 Servlet 容器的相关配置；</h4><ol><li>修改和 Servlet 有关的配置（ServletProperties【也是 EmbeddedServletContainerCustomizer】）;</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="meta">server.context-path</span>=<span class="string">/curd</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.tomcat.uri-encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">//</span> <span class="string">通用的Servlet容器设置</span></span><br><span class="line"><span class="attr">server.xxx</span></span><br><span class="line"><span class="meta">//</span> <span class="string">Tomcat的设置</span></span><br><span class="line"><span class="attr">server.tomcat</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编写一个 EmbeddedServerContainerCustomizer(2.x 以上已经不支持)，使用<strong>ConfigurableServletWebServerFactory</strong>：嵌入式的 Servlet 容器的定制器；来修改 Servlet 容器的配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySeverConfig</span>  </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 一定要将这个定制器加入到容器中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurableServletWebServerFactory <span class="title">webServerFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TomcatServletWebServerFactory factory = <span class="keyword">new</span> TomcatServletWebServerFactory();</span><br><span class="line">        factory.setPort(<span class="number">8083</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200906144749.png" alt="image-20200906144742758"></p><h4 id="②-注册-Servlet-三大组件【Servlet、Filter、Listener】"><a href="#②-注册-Servlet-三大组件【Servlet、Filter、Listener】" class="headerlink" title="② 注册 Servlet 三大组件【Servlet、Filter、Listener】"></a>② 注册 Servlet 三大组件【Servlet、Filter、Listener】</h4><p>​ 由于 SpringBoot 默认是以 jar 包的的方式启动嵌入式的 Servlet 容器来启动 SpringBoot 的 web 应用，没有 web.xml 文件</p><p><strong>注册三大组件用以下的方式</strong></p><ul><li>ServletRegistrationBean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> MyServlet(),<span class="string">&quot;/myServlet&quot;</span>);</span><br><span class="line">registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>FilterRegistrationBean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">registrationBean.setFilter(<span class="keyword">new</span> MyFilter());</span><br><span class="line">registrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/hello&quot;</span>,<span class="string">&quot;/myServlet&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ServletListenerRegistrationBean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">mylistener</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletListenerRegistrationBean registrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean(<span class="keyword">new</span> MyListener());</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot 帮我们自动 SpringMVC 的时候，自动注册 SpringMVC 的前端控制器；DispartcherServlet;</p><p>DispatcherServletAutoConfiguration 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(value = DispatcherServlet.class, name =</span></span><br><span class="line"><span class="meta">DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">dispatcherServletRegistration</span><span class="params">(DispatcherServlet dispatcherServlet)</span> </span>&#123;</span><br><span class="line">ServletRegistrationBean registration = <span class="keyword">new</span> ServletRegistrationBean(dispatcherServlet, <span class="keyword">this</span>.serverProperties.getServletMapping());</span><br><span class="line"><span class="comment">//默认拦截： / 所有请求；包静态资源，但是不拦截jsp请求； /*会拦截jsp</span></span><br><span class="line"><span class="comment">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span></span><br><span class="line">registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class="line">registration.setLoadOnStartup(<span class="keyword">this</span>.webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.multipartConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">registration.setMultipartConfig(<span class="keyword">this</span>.multipartConfig);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③-替换为其他嵌入式-Servlet-容器"><a href="#③-替换为其他嵌入式-Servlet-容器" class="headerlink" title="③ 替换为其他嵌入式 Servlet 容器"></a>③ 替换为其他嵌入式 Servlet 容器</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200906231835.png" alt="image-20200906231828811"></p><p><strong>默认支持</strong>：</p><p>==Tomcat==（默认使用）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    引入web模块就是使用嵌入式的Tomcat作为Server容器</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==Jetty==</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入web模块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200906235335.png" alt="image-20200906235334201"></p><p>==Undertow==</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入web模块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200906235510.png" alt="image-20200906235509492"></p><h4 id="④-嵌入式-Servlet-容器自动配置原理-1-x-版本"><a href="#④-嵌入式-Servlet-容器自动配置原理-1-x-版本" class="headerlink" title="④ 嵌入式 Servlet 容器自动配置原理(1.x 版本)"></a>④ 嵌入式 Servlet 容器自动配置原理(1.x 版本)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@Import(BeanPostProcessorsRegistrar.class)</span></span><br><span class="line"><span class="comment">// 导入BeanPostProcessorsRegister : 给容器中导入一些主件</span></span><br><span class="line"><span class="comment">// 导入了EmbeddedServletContainnerCustomizerBeanPostcessor:</span></span><br><span class="line"><span class="comment">// 后置处理器：Bean初始化后（创建完对象，还没赋值)执行初始化工作</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, Tomcat.class &#125;)</span><span class="comment">//判断当前是否引入了Tomcat依赖</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search =</span></span><br><span class="line"><span class="meta">SearchStrategy.CURRENT)</span><span class="comment">// 判断当前容器没有用户自定定义EmbedddServerContainerFactory: 嵌入式的Server容器工厂； 作用： 创建嵌入式的Server容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedTomcat</span> </span>&#123;</span><br><span class="line">       <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TomcatEmbeddedServletContainerFactory <span class="title">tomcatEmbeddedServletContainerFactory</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* Nested configuration if Jetty is being used.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, Server.class, Loader.class,WebAppContext.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class,searchSearchStrategy.CURRENT)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedJetty</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JettyEmbeddedServletContainerFactory <span class="title">jettyEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JettyEmbeddedServletContainerFactory();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; 、</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Nested configuration if Undertow is being used.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, Undertow.class, SslClientAuthMode.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search =</span></span><br><span class="line"><span class="meta">SearchStrategy.CURRENT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedUndertow</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UndertowEmbeddedServletContainerFactory <span class="title">undertowEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UndertowEmbeddedServletContainerFactory();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>EmbeddedServletContainerFactory（嵌入式 Servlet 容器工厂）</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取嵌入式的Servlet容器</span></span><br><span class="line"><span class="function">EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ServletContextInitializer... initializers)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200909221006.png" alt="image-20200909220918034"></p><ol start="2"><li><strong>EmbeddedServerContainer:(嵌入式的 Servlet 容器)</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200909222723.png" alt="image-20200909222722658"></p><ol start="3"><li><strong>以 TomcatEmbeddedServletContainerFactory 为例</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个Tomcat</span></span><br><span class="line">        Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">        <span class="comment">//配置Tomcat的基本环节</span></span><br><span class="line">        File baseDir = (<span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span> ? <span class="keyword">this</span>.baseDirectory: createTempDir(<span class="string">&quot;tomcat&quot;</span>));</span><br><span class="line">        tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class="line">        Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</span><br><span class="line">        tomcat.getService().addConnector(connector);</span><br><span class="line">        customizeConnector(connector);</span><br><span class="line">        tomcat.setConnector(connector);</span><br><span class="line">        tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line">        configureEngine(tomcat.getEngine());</span><br><span class="line">        <span class="keyword">for</span> (Connector additionalConnector : <span class="keyword">this</span>.additionalTomcatConnectors) &#123;</span><br><span class="line">        tomcat.getService().addConnector(additionalConnector);</span><br><span class="line">&#125;</span><br><span class="line">prepareContext(tomcat.getHost(), initializers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将配置好的Tomcat传入进入，返回一个EmbeddedServerContainer;并启动Tomcat服务器</span></span><br><span class="line"><span class="keyword">return</span> getTomcatEmbeddedServletContainer(tomcat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>我们对嵌入式容器的配置修改是怎么生效的</strong></li></ol><blockquote><p>ServerProperties、EmbeddedServleContainerCustomizer</p></blockquote><p>5.<strong>容器中导入了 EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化之前</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="comment">//如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件</span></span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ConfigurableEmbeddedServletContainer) &#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postProcessBeforeInitialization</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ConfigurableEmbeddedServletContainer bean)</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；</span></span><br><span class="line"><span class="keyword">for</span> (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;</span><br><span class="line">customizer.customize(bean);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postProcessBeforeInitialization</span><span class="params">(ConfigurableEmbeddedServletContainer bean)</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；</span></span><br><span class="line"><span class="keyword">for</span> (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;</span><br><span class="line">customizer.customize(bean);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> Collection&lt;EmbeddedServletContainerCustomizer&gt; <span class="title">getCustomizers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.customizers == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Look up does not include the parent context</span></span><br><span class="line"><span class="keyword">this</span>.customizers = <span class="keyword">new</span> ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(</span><br><span class="line">            <span class="keyword">this</span>.beanFactory</span><br><span class="line"><span class="comment">//从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer</span></span><br><span class="line"><span class="comment">//定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span></span><br><span class="line">.getBeansOfType(EmbeddedServletContainerCustomizer.class,<span class="keyword">false</span>, <span class="keyword">false</span>).values());</span><br><span class="line">Collections.sort(<span class="keyword">this</span>.customizers, AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line"><span class="keyword">this</span>.customizers = Collections.unmodifiableList(<span class="keyword">this</span>.customizers);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.customizers;</span><br><span class="line">&#125;</span><br><span class="line">ServerProperties 也是定制器</span><br></pre></td></tr></table></figure><p><strong>步骤</strong>：</p><ol><li><p>SpringBoot 根据导入的依赖情况，给容器中添加相应的</p><p>EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactroy】</p></li><li><p>容器中某个组件要创建对象就会惊动后置处理器；</p><p>EmbeddedServletContainCustomizerBeanPostProcessor;</p><p>只要是嵌入式的 Servlet 容器工厂，后置处理器就工作；</p></li><li><p>后置处理器，从容中获取所有的 EmbeddedServletContainerCustomizer，调用定制器的定制方法</p></li></ol><h3 id="9、-嵌入式-Servlet-容器启动原理"><a href="#9、-嵌入式-Servlet-容器启动原理" class="headerlink" title="9、 嵌入式 Servlet 容器启动原理"></a>9、 嵌入式 Servlet 容器启动原理</h3><p>获取嵌入式的 Servlet 容器工厂：</p><pre><code>1. SpringBoot应用启动运行run方法</code></pre><ol start="2"><li>refreshContext(context);SpringBoot 刷新 IOC 容器【创建 IOC 容器，并初始化容器，创建容器中的每一个组件】；如果是 web 应用创建<strong>AnnotainConfigEmbedderWebApplicationContext</strong>;否则；AnnotaionConfigApplicationContext</li><li>refresh(context); <strong>刷新刚才创建的 ioc 容器</strong>；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"><span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"><span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Allows post‐processing of the bean factory in context subclasses.</span></span><br><span class="line">        postProcessBeanFactory(beanFactory);</span><br><span class="line">        <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">        invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">        <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">        registerBeanPostProcessors(beanFactory);</span><br><span class="line">        <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">        initMessageSource();</span><br><span class="line">        <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">        initApplicationEventMulticaster();</span><br><span class="line">        <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">        onRefresh();</span><br><span class="line">        <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">        registerListeners();</span><br><span class="line">        <span class="comment">// Instantiate all remaining (non‐lazy‐init) singletons.</span></span><br><span class="line">        finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">        <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">        finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="string">&quot;Exception encountered during context initialization ‐ &quot;</span> +<span class="string">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">destroyBeans();</span><br><span class="line"><span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"><span class="comment">// Propagate exception to caller.</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line"><span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>onRefrsh(); web 的 ioc 容器重写 onRefresh 方法</p></li><li><p>webioc 容器会创建嵌入式的 Servlet 容器； createEmbeddedServletContainer();</p></li><li><p><strong>获取嵌入式的 Servlet 容器工厂</strong></p><p>EmbeddedServletContionerFactory containerFactory = getEmbeddedServletContianFactory();</p><p>从容器中获取 EmbeddedServletContian 组件；TomcatEmbeddedServletContainerFactory 创建对象，后置处理器一看是这个对象，就能获取所有定制器来定制 Servlet 容器的相关配置；</p></li><li><p><strong>使用容器工厂获取嵌入式的 Server 容器</strong>:</p></li></ol><p>​ this.embeddedServletContainer = containerFactory.getEmbeddedServletContainer(getSelfInitializer());</p><ol start="8"><li><p>嵌入式的 Servlet 容器创建对象并启动 Server 容器；</p><p><strong>先启动嵌入式 Servlet 容器，再将 ioc 容器下没有创建出的对象获取出来；</strong></p><p>IOC 容器启动创建嵌入式的 Servlet 容器</p></li></ol><h3 id="10、使用外置的-Servlet-容器"><a href="#10、使用外置的-Servlet-容器" class="headerlink" title="10、使用外置的 Servlet 容器"></a>10、使用外置的 Servlet 容器</h3><p>嵌入式 Servle 容器: 应用打成可执行的 jar</p><p><strong>优点</strong>：简单、便携</p><p><strong>缺点</strong>：默认不支持 JSP、优先定制比较复杂（使用定制器【ServerProperties、自定义 EmbeddesdServletContianCustizer】, 自己编写嵌入式 Servlet 容器的创建工厂【EmbeddedServletContainerFactory 】）</p><p>外置 Servlet 容器：外面安装 Tomcat – 应用 war 包的方式打开；</p><p><strong>步骤：</strong></p><ol><li><p>必须创建一个 web 项目；</p><p><a href="https://blog.csdn.net/qq_45738810/article/details/108509314">参考博客：https://blog.csdn.net/qq_45738810/article/details/108509314</a></p></li><li><p>建入嵌入式的 Tomcat 指定的 provided;</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>必须编写一个 SpringBootServletInitiallzer 的子类，并调用 configure 方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(SpringBoot06WebServletApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>启动服务器就可以使用；</li></ol><p>==<strong>原理</strong>：==</p><p><strong>jar 包</strong>： 执行 SpringBoot 主类的 main 方法，启动 ioc 容器，创建嵌入式的 Servlet 容器；</p><p><strong>war 包：</strong> 启动服务器，服务器启动 SpringBoot 应用【SpringBootServletInitializer】,启动 ioc 容器；</p><p><strong>规则</strong>：</p><ol><li><p>服务器启动(web 应用启动)会创建当前 web 应用里面每一个 jar 包里面 ServerContainnerInitializer 实例：</p></li><li><p>ServletContainerInitializer 的实现放在 jar 包的 META-INF/servies 文件下，有一个名为 java</p></li><li><p>还可以使用@HandlesTypes,在应用启动的时候加载配置的类</p></li></ol><p><strong>流程</strong>：</p><ol><li><p> 启动 Tomcat</p></li><li><p>D:\RepMaven\org\springframework\spring-web\5.2.8.RELEASE\spring-web-5.2.8.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer:</p><p> Spring 的 web 模块里面的这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p></li><li><p> SpringServletContainerInitializer 将@HandlesTypes(WebApplicationInitializer.class )标注的所有这个类型的类都传入 onStratup 方法的 Setup 方法的&lt;Set&gt;; 为这些 WebApplicationInitializer 类型的类创建实例：</p></li><li><p> 每一个 WebApplicaionInitialzer 都调用自己的 onStarup；</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200910130346.png" alt="image-20200910130339581"></p><ol start="5"><li>相当于我们的 SpringBootServletInitalizer 的创建对象，并执行 onStarup 方法</li><li>SpringBootServletInitializer 实例执行 onStartup 的时候会 createRootApplicationContext；创建容器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1、创建SpringApplicationBuilder</span></span><br><span class="line">SpringApplicationBuilder builder = createSpringApplicationBuilder();</span><br><span class="line">StandardServletEnvironment environment = <span class="keyword">new</span> StandardServletEnvironment();</span><br><span class="line">environment.initPropertySources(servletContext, <span class="keyword">null</span>);</span><br><span class="line">builder.environment(environment);</span><br><span class="line">builder.main(getClass());</span><br><span class="line">ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);</span><br><span class="line"><span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.info(<span class="string">&quot;Root context already created (using as parent).&quot;</span>);</span><br><span class="line">servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">null</span>);</span><br><span class="line">builder.initializers(<span class="keyword">new</span> ParentContextApplicationContextInitializer(parent));</span><br><span class="line">&#125;</span><br><span class="line">    builder.initializers(<span class="keyword">new</span> ServletContextApplicationContextInitializer(servletContext));</span><br><span class="line">builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);</span><br><span class="line"><span class="comment">//调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来</span></span><br><span class="line">builder = configure(builder);</span><br><span class="line"><span class="comment">//使用builder创建一个Spring应用</span></span><br><span class="line">SpringApplication application = builder.build();</span><br><span class="line"><span class="keyword">if</span> (application.getSources().isEmpty() &amp;&amp; AnnotationUtils.findAnnotation(getClass(), Configuration.class) != <span class="keyword">null</span>) &#123;</span><br><span class="line">application.getSources().add(getClass());</span><br><span class="line">&#125;</span><br><span class="line">    Assert.state(!application.getSources().isEmpty(),</span><br><span class="line"><span class="string">&quot;No SpringApplication sources have been defined. Either override the &quot;</span></span><br><span class="line">+ <span class="string">&quot;configure method or add an @Configuration annotation&quot;</span>);</span><br><span class="line"><span class="comment">// Ensure error pages are registered</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.registerErrorPageFilter) &#123;</span><br><span class="line">application.getSources().add(ErrorPageFilterConfiguration.class);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//启动Spring应用</span></span><br><span class="line"><span class="keyword">return</span> run(application);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>Spring 的应用就启动并且创建 IOC 容器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start();</span><br><span class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">configureHeadlessProperty();</span><br><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">listeners.starting();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners,applicationArguments);</span><br><span class="line">Banner printedBanner = printBanner(environment);</span><br><span class="line">context = createApplicationContext();</span><br><span class="line">analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments,printedBanner);</span><br><span class="line"><span class="comment">//刷新IOC容器</span></span><br><span class="line">refreshContext(context);</span><br><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line">listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">stopWatch.stop();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line"><span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>==启动 Servlet 容器，再启动 SpringBoot 应用==</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之基本配置</title>
      <link href="posts/3862476156/"/>
      <url>posts/3862476156/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_45738810/article/details/108254491">SpringBoot 之基本配置知识总结</a>（由于网页解析存在问题，无法上传笔记）</p><h2 id="一、日志"><a href="#一、日志" class="headerlink" title="一、日志"></a>一、日志</h2><h3 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h3><p><strong>市面上的日志框架</strong>：JUL、JCL、Jbooss-loggin、logback、log4j、log4j2、slf4j….</p><table><thead><tr><th>日志门面（日志的抽象层）</th><th>日志实现</th></tr></thead><tbody><tr><td><del>JCL(jakarta Commons Loggin)</del> SLF4j(Simple Loggin Facade For Java) <strong><del>jboss loggin</del></strong></td><td>Log4j JUL（java.util.logging） Log4j2 <strong>Logback</strong></td></tr></tbody></table><p>左边选一个门面（抽象层）、右边来选一个实现；</p><ul><li>日志门面： SLF4J；</li><li>日志实现：Logback</li></ul><p>SpringBoot: 底层是 Spring 框架，Spring 框架默认是用<strong>JCL</strong>;</p><p>==<strong>SpringBoot 选用 SLF4j 和 Logback;</strong>==</p><h3 id="2、使用-SLF4j-使用"><a href="#2、使用-SLF4j-使用" class="headerlink" title="2、使用 SLF4j 使用"></a>2、使用 SLF4j 使用</h3><h4 id="①-如何在系统中使用-SLF4j-https-www-slf4j-org"><a href="#①-如何在系统中使用-SLF4j-https-www-slf4j-org" class="headerlink" title="① 如何在系统中使用 SLF4j https://www.slf4j.org"></a>① 如何在系统中使用 SLF4j <a href="https://www.slf4j.org/">https://www.slf4j.org</a></h4><p>​ 以后开发时候，日志记录方法调用，不应该来直接调用日志实现类，而是调用日志抽象层里面的方法；</p><p>​ 给系统里面导入 slf4j 的 jar 和 logback 的实现 jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">logger.info(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>图示</strong>:</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200827114343.png" alt="image-20200827114336528"></p><p>每一个日志的实现框架都有自己的配置文件。使用 slf4j 以后，配置文件还是做成日志实现框架自己本身的配置文件；</p><h4 id="②-遗留问题"><a href="#②-遗留问题" class="headerlink" title="② 遗留问题"></a>② 遗留问题</h4><p>a(slf4j + logback): Spring(commons-loggin)、Hibernate(Jboss-logging)、Mybatis…..</p><p>统一日志记录，即使是别的框架和我一起使用 slf4j 进行输出：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200827115306.png" alt="image-20200827115306076"></p><p>==<strong>让系统中所有的日志都统一到 slf4j：</strong>==</p><ol><li>将系统中的其他日志框架先排除出去；</li><li>用中间包啦替换原有的日志框架</li><li>导入 slf4j 其他的实现</li></ol><h3 id="3、SpringBoot-日志关系"><a href="#3、SpringBoot-日志关系" class="headerlink" title="3、SpringBoot 日志关系"></a>3、SpringBoot 日志关系</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>SpringBoot 使用它来做日志功能</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>底层依赖关系</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200827121845.png" alt="image-20200827121844114"></p><p><strong>总结</strong>：</p><pre><code>1. SpringBoot底层也是使用slf4j+ logback的方式进行日志记录；</code></pre><ol start="2"><li>SpringBoot 也是其他的日志都替换成 slf4j；</li><li>中间替换包</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = <span class="string">&quot;http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> LogFactory logFactory = <span class="keyword">new</span> SLF4JLogFactory();</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200827122735.png" alt="image-20200827122734567"></p><ol start="4"><li><p>如果我们引入其他框架，一定要把这个框架的默认日志依赖移除掉</p><p>Spring 框架用的是 commons-logging;</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons‐logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons‐logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>==SpringBoot 能自动依赖所有的日志，而且底层使用 slf4j + logback 的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可;==</strong></p><h3 id="4、日志的使用"><a href="#4、日志的使用" class="headerlink" title="4、日志的使用"></a>4、日志的使用</h3><h4 id="①-SpringBoot-默认帮我们配置好了日志"><a href="#①-SpringBoot-默认帮我们配置好了日志" class="headerlink" title="① SpringBoot 默认帮我们配置好了日志"></a>① SpringBoot 默认帮我们配置好了日志</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录器</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志级别</span></span><br><span class="line">    <span class="comment">// 由低到高 trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line">    <span class="comment">// 可以调整输出日志的级别；日志的只会在这个级别</span></span><br><span class="line">    logger.trace(<span class="string">&quot;这是trace日志.....&quot;</span>);</span><br><span class="line">    logger.debug(<span class="string">&quot;这是debug日志.....&quot;</span>);</span><br><span class="line">    <span class="comment">// springBoot默认给我们使用的是info基本的，没有用指定级别就用SpringBoot莫人规定的级别是; root级别</span></span><br><span class="line">    logger.info(<span class="string">&quot;这是info日志.......&quot;</span>);</span><br><span class="line">    logger.warn(<span class="string">&quot;这里warn日志.......&quot;</span>);</span><br><span class="line">    logger.error(<span class="string">&quot;这里error日志.....&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">日志输出格式：</span><br><span class="line">%d表示日期时间，</span><br><span class="line">%thread表示线程名，</span><br><span class="line">%‐5level：级别从左显示5个字符宽度</span><br><span class="line">%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。</span><br><span class="line">%msg：日志消息，</span><br><span class="line">%n是换行符</span><br><span class="line">‐‐&gt;</span><br><span class="line">%d&#123;yyyy‐MM‐dd HH:mm:ss.SSS&#125; [%thread] %‐5level %logger&#123;50&#125; ‐ %msg%n</span><br></pre></td></tr></table></figure><p><strong>SpringBoot 修改日志的默认配置</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">logging.level.com.oy</span>=<span class="string">trace</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#loggin.path=</span></span><br><span class="line"><span class="comment"># 不指定；路径在当前项目下生成spring.log日志</span></span><br><span class="line"><span class="comment"># 可以指定完整的路径</span></span><br><span class="line"><span class="comment">#loggin.file=E:/springboot.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在当前磁盘的根路径上创建spring文件夹里面log文件；使用 spring.log作为默文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">logging.path</span>=<span class="string">/springboot.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在控制台输出的日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy‐MM‐dd&#125; [%thread] %‐5level %logger&#123;50&#125; ‐ %msg%n</span></span><br><span class="line"><span class="comment"># 指定文件日志输出的格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy‐MM‐dd&#125; === [%thread] === %‐5level === %logger&#123;50&#125; ==== %msg%n</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>logging.file</th><th>logging.path</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>(none)</td><td>(none)</td><td>只在控制台输出</td><td></td></tr><tr><td>指定文件名</td><td>(none)</td><td>my.log</td><td>输出日志到 my.log 文件</td></tr><tr><td>(none)</td><td>指定目录</td><td>/var/log</td><td>输出到指定目录的 spring.log <strong>文件中</strong></td></tr></tbody></table><h4 id="②-指定配置"><a href="#②-指定配置" class="headerlink" title="② 指定配置"></a>② 指定配置</h4><p>​ 给类路径下放上每个日志框架自己的配置文件即可；SpringBoot 就不使用其他默认的配置了。</p><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><strong>logback-spring.xml</strong> , <strong>logback-spring.groovy</strong> , <strong>logback.xml</strong> or <strong>logback.groovy</strong></td></tr><tr><td>Log4j2</td><td><strong>log4j2-spring.xml</strong> or <strong>log4j2.xml</strong></td></tr><tr><td>JDK (Java Util Logging)</td><td><strong>logging.properties</strong></td></tr></tbody></table><p>​ lohback.xml： 直接就被日志框架识别了；</p><p>​ <strong>logback-spring.xml</strong>: 日志框架就不直接加载日志的配置项，由 SpringBoot 解析日志配置，可以使用 SpringBoot 的高级 Profile 功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;staging&quot;</span>&gt;</span></span><br><span class="line">&lt;!‐‐ configuration to be enabled when the &quot;staging&quot; profile is active ‐‐&gt;</span><br><span class="line">可以指定某段配置只在某个环境下生效</span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;stdout&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">&lt;!‐‐</span><br><span class="line">日志输出格式：</span><br><span class="line">%d表示日期时间，</span><br><span class="line">%thread表示线程名，</span><br><span class="line">%‐5level：级别从左显示5个字符宽度</span><br><span class="line">%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。</span><br><span class="line">%msg：日志消息，</span><br><span class="line">%n是换行符</span><br><span class="line">‐‐&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy‐MM‐dd HH:mm:ss.SSS&#125; ‐‐‐‐&gt; [%thread] ‐‐‐&gt; %‐5level</span><br><span class="line">%logger&#123;50&#125; ‐ %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;!dev&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy‐MM‐dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %‐5level</span><br><span class="line">%logger&#123;50&#125; ‐ %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==如果使用 logback.xml 作为日志配置文件，还要使用 profile 功能，会有以下错误==</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200827174357.png" alt="image-20200827174350351"></p><h3 id="5、切换日志框架"><a href="#5、切换日志框架" class="headerlink" title="5、切换日志框架"></a>5、切换日志框架</h3><p>可以按照 slf4j 的日志适配图，进行相关的切换；</p><p><strong>slf4j+log4j 的方式</strong>；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback‐classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j‐over‐slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j‐log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>切换为 log4j2</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础总结</title>
      <link href="posts/865268903/"/>
      <url>posts/865268903/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Redis-的-五大数据类型"><a href="#一、Redis-的-五大数据类型" class="headerlink" title="一、Redis 的 五大数据类型"></a>一、Redis 的 五大数据类型</h2><h3 id="1、key"><a href="#1、key" class="headerlink" title="1、key"></a>1、key</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><strong>keys</strong> *</td><td>查看当前库的所有键</td></tr><tr><td><strong>exists</strong>&lt;key&gt;</td><td>判断某个键是否存在</td></tr><tr><td><strong>type</strong>&lt;key&gt;</td><td>查看键的类型</td></tr><tr><td><strong>del</strong>&lt;key&gt;</td><td>删除某个键</td></tr><tr><td><strong>expire</strong>&lt;key&gt;&lt;seconds&gt;</td><td>为键设置过期的时间，单位秒</td></tr><tr><td><strong>ttl</strong>&lt;key&gt;</td><td>查看还有多久过期，-1 表示永不过期，-2 表示已过期</td></tr><tr><td><strong>dbsize</strong></td><td>查看当前数据库中的 key 的数量</td></tr><tr><td><strong>flushdb</strong></td><td>清空当前库</td></tr><tr><td><strong>Flushall</strong></td><td>通杀全部库</td></tr></tbody></table><h3 id="2、String"><a href="#2、String" class="headerlink" title="2、String"></a>2、String</h3><ol><li>String 是 Redis 最基本的类型。</li><li>String 类型是二进制安全的。意味着 Redis 的 string 可以包含任何数据。比如 jpg 图片或者序列化的对象。</li><li>String 类型是 Redis 最基本的数据类型，一个 Redis 中字符串 value 最多可以是 512M</li><li>常用操作</li></ol><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><strong>get</strong>&lt;key&gt;</td><td>查询对应的键值</td></tr><tr><td><strong>set</strong> &lt;key&gt;&lt;value&gt;</td><td>添加键值对</td></tr><tr><td><strong>append</strong>&lt;key&gt;&lt;value&gt;</td><td>将给定的&lt;value&gt; 追加到原值的末尾</td></tr><tr><td><strong>strlen</strong>&lt;key&gt;</td><td>获取值的长度</td></tr><tr><td><strong>setnx</strong>&lt;key&gt;&lt;value&gt;</td><td>只有在 Key 不存在时设置 key 的值</td></tr><tr><td><strong>incr</strong>&lt;key&gt;</td><td>将 key 中存储的数字值增 1， 只能对数字值的操作，如果为空，新增值为 1。</td></tr><tr><td><strong>decr</strong>&lt;key&gt;</td><td>将 key 中存储的数字值减 1，只能对数字值操作，如果为空，新增值为-1</td></tr><tr><td><strong>incrby/ decrby</strong> &lt;key&gt;&lt;步长&gt;</td><td>将 key 中存储的数字值增减。自定义步长。</td></tr><tr><td><strong>mset</strong>&lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt;</td><td>同时设置一个或多个 key-value 对</td></tr><tr><td><strong>mget</strong>&lt;key1&gt;&lt;key2&gt;&lt;key3&gt;</td><td>同时获取一个或多个 key-value 对</td></tr><tr><td><strong>msetnx</strong>&lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt;</td><td>同时设置一个或多个 key-value 对，当且仅当所有给定的 key 都不存在</td></tr><tr><td><strong>getrange</strong>&lt;key&gt;&lt;起始位置&gt;&lt;结束位置&gt;</td><td>获取值的范围,类似 java 中的 substring</td></tr><tr><td><strong>setrange</strong>&lt;key&gt; &lt;起始位置&gt; &lt;value&gt;</td><td>用&lt;vakue&gt;覆盖&lt;key&gt;所存储的字符串值，从&lt;起始位置&gt;开始</td></tr><tr><td><strong>setex</strong>&lt;key&gt;&lt;过期时间&gt;&lt;value&gt;</td><td>设置键值的同时，设置过去的时间，单位秒</td></tr><tr><td><strong>getset</strong>&lt;key&gt;&lt;value&gt;</td><td>以新换旧，设置了新值的同时获取旧值</td></tr></tbody></table><ol start="5"><li>incr key 操作的原子性</li></ol><ul><li>所谓的原子是指不会被线程的调度机制打断的操作：这种操作一旦开始，就一直运行到结束，中间不会有任何的 context switch (切换到另一个线程)。</li><li>在单线程中，能够在单条指令中完成的操作都可以认为是”原子操作”,因为中断只能发生在于指令之间。</li><li>在多线程中，不能被其他的进程（线程）打断的操作就叫原子操作。</li><li>Redis 单命令的原子性主要得益于 Redis 的单线程</li></ul><h3 id="3、List"><a href="#3、List" class="headerlink" title="3、List"></a>3、List</h3><ol><li><p>单键多值</p></li><li><p>Redis ；列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素列表的头部(左边) 或者尾部 (右边)。</p></li><li><p>它的底层实际是一个双向链表，对两端的操作行选性能很高，通过索引下标的操作中间的节点性能会差</p></li><li><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200818112034.png" alt="image-20200818112027055"></p></li><li><p>常用操作</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><strong>lpush/rpush</strong>&lt;key&gt;&lt;value1&gt;&lt;value2&gt;</td><td>从左边/右边插入一个值或多个值</td></tr><tr><td><strong>lpoy/rpop</strong> &lt;key&gt;</td><td>从左边/右边吐出一个值。<br>值在键在，值光键亡。</td></tr><tr><td><strong>rpoplush</strong>&lt;key1&gt;&lt;key2&gt;</td><td>从&lt;key1&gt;列表边吐出一个值，插到&lt;key2&gt;列表的左边</td></tr><tr><td><strong>lrange</strong>&lt;key&gt;&lt;start&gt;&lt;stop&gt;</td><td>按照索引下标获取元素(从左到右)</td></tr><tr><td><strong>lindex</strong>&lt;key&gt;&lt;index&gt;</td><td>按照索引下标获取的元素(从左到右)</td></tr><tr><td><strong>llen</strong>&lt;key&gt;</td><td>获得列表长度</td></tr><tr><td><strong>linsert</strong>&lt;key&gt; <strong>before</strong>&lt;value&gt; &lt;newvalue&gt;</td><td>在&lt;value&gt;的后面的插入&lt;newvalue&gt; 插入值</td></tr><tr><td><strong>lrem</strong>&lt;key&gt;&lt;n&gt;&lt;vakue&gt;</td><td>从左边删除 n 个 value(从左到右)</td></tr></tbody></table></li></ol><h3 id="4、Set"><a href="#4、Set" class="headerlink" title="4、Set"></a>4、Set</h3><ol><li>Redis set 对外提供的功能与 list 类似是一个列表功能，特殊之处在于 set 是可以自动排重的，当你需要存储一个列表数据，又不希望出现一个重复的数据时，set 是一个很好的选择，并且 set 提供了判断某个成员是否存在一个 set 集合内的重要接口，这个也是 list 所不能提供的。</li><li>Rdis 的 set 是 String 类型的无序集合。它底层其实是一个 value 为 null 的 hash 表，所以添加，删除，查找的复杂度都是 O(1)。</li><li>常用操作</li></ol><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>setadd</strong>&lt;key&gt;&lt;value1&gt;&lt;value2&gt;…</td><td>将一个或多个 menber 元素加入到集合 key 当中，<br>已经存于集合的 menber 元素将忽略</td></tr><tr><td><strong>smembers</strong>&lt;key&gt;</td><td>取出该集合的所有值。</td></tr><tr><td><strong>sismember</strong>&lt;key&gt;&lt;value&gt;</td><td>判断一个集合&lt;key&gt;是否含有该&lt;value&gt;值，有返回值 1，没有返回 0</td></tr><tr><td><strong>scard</strong> &lt;key&gt;</td><td>返回该集合的元素个数</td></tr><tr><td><strong>srem</strong>&lt;key&gt;&lt;value1&gt;&lt;value2&gt;…</td><td>删除集合中的某个元素</td></tr><tr><td><strong>spop</strong>&lt;key&gt;</td><td>随机从该集合中吐出一个值</td></tr><tr><td><strong>srandmenber</strong>&lt;key&gt;&lt;n&gt;</td><td>随机从该集合中取出 n 个值。不会从集合中删除</td></tr><tr><td><strong>sinter</strong>&lt;key1&gt;&lt;key2&gt;</td><td>返回两个集合的交集元素</td></tr><tr><td><strong>sunion</strong>&lt;key1&gt;&lt;key2&gt;</td><td>返回两个集合的并集元素</td></tr><tr><td><strong>sdiff</strong>&lt;key1&gt;&lt;key2&gt;</td><td>返回两个集合的差集元素</td></tr></tbody></table><h3 id="5、Hash"><a href="#5、Hash" class="headerlink" title="5、Hash"></a>5、Hash</h3><ol><li><p>Redis hash 是一键值对集合</p></li><li><p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特点适用用于存储对象。</p></li><li><p>类似 java 里面的 Map&lt;String，Object&gt;</p></li><li><p>分析一个问题：现有一个 JavaBean 对象，在 Redis 中如何存？</p></li></ol><ul><li>第一种方案：用户 ID 为 key,VALUE 为 JavaBean 序列化后的字符串</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200819000054.png" alt="image-20200819000047898"></p><p>​ 缺点：每次修改的用户的某个属性需要，先反序列化改好后在序列化回去。开销较大</p><ul><li>第二种方案：用户 ID+属性名作为 key 属性值作为 Value.</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200819000258.png" alt="image-20200819000257790"></p><p>​ 缺点：用户 ID 数据冗余</p><ul><li>第三种方案：通过 key(用户 ID) + filed(属性标签) 就可以操作对应的属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200819000528.png" alt="image-20200819000527451"></p><ol start="5"><li>常用操作</li></ol><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>hset</strong>&lt;key&gt; &lt;field&gt;&lt;value&gt;</td><td>给&lt;key&gt;集合中的&lt;field&gt;键赋值&lt;value&gt;</td></tr><tr><td><strong>hmset</strong>&lt;key1&gt;&lt;field&gt;</td><td>从&lt;key1&gt;集合&lt;field&gt; 取出 value</td></tr><tr><td><strong>hmset</strong>&lt;key1&gt;&lt;field1&gt;&lt;value1&gt; &lt;field2&gt; &lt;value2&gt;…</td><td>批量设置 hash 的值</td></tr><tr><td><strong>hexists key</strong> &lt;field&gt;</td><td>查看哈希表 key 中，给定域 field 是否存在</td></tr><tr><td><strong>hkeys</strong>&lt;key&gt;</td><td>列出该 hash 集合的所有的 field</td></tr><tr><td><strong>hvals</strong>&lt;key&gt;</td><td>列出该 hash 集合的所有 value</td></tr><tr><td><strong>hincrby</strong>&lt;key&gt;&lt;field&gt;&lt;increment&gt;</td><td>为哈希表 key 中的域 field 的值加上增量 increment</td></tr><tr><td><strong>hsetnx</strong> &lt;key&gt; &lt;field&gt;&lt;value&gt;</td><td>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在</td></tr></tbody></table><h3 id="6、zset-sorted-ser"><a href="#6、zset-sorted-ser" class="headerlink" title="6、zset(sorted ser)"></a>6、zset(sorted ser)</h3><ol><li>Redis 有序集合 zset 与 普通的 set 非常相似，是一个没有重复元素的字符串集合。不同之处是有序集合的每个成员都关联一个评分(sroce), 这个评分(score) 被用来按照从最低的分到最高的方式排序集合中的成员。集合中的成员是唯一的，但是评分可以是重复了。</li><li>因为元素是有序的，所以你也可以很快的根据评分（score) 或者次序（position）来获取一个范围的元素。访问有序集合的中间元素也是非常快的，因此你能够使用有序集合作为一个没有重复的成员的智能列表。</li><li>常用操作</li></ol><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>zadd</strong> &lt;key&gt; &lt;score1&gt; &lt;value1&gt; &lt;score2&gt; &lt;value2&gt;…</td><td>将一个或多个 member 元素及其 score 值加入到有序集合 key 当中</td></tr><tr><td><strong>zrange</strong>&lt;key&gt; &lt;start&gt;&lt;stop&gt;[WINHSCORES]</td><td>返回有序集 key 中，下标在&lt;start&gt;&lt;stop&gt;之间的元素带 WITHSCORES,可以让分数一起和值返回到结果集。</td></tr><tr><td><strong>zrangebyscore key min max</strong> [withscores] [limit offset count]</td><td>返回有序集合 key 中， 所有 score 值介于 min 和 max 之间(包括等于 min 或 max) 的成员。有序集合按 score 值递增（从小到大）次序排列。</td></tr><tr><td><strong>zrevrangebyscore key max min</strong> [withscores] [limit offset count]</td><td>同上，改为从大到小排列。</td></tr><tr><td><strong>zincrby</strong> &lt;key&gt; &lt;increment&gt; &lt;value&gt;</td><td>为元素的 score 加上增量</td></tr><tr><td><strong>zrem</strong>&lt;key&gt;&lt;value&gt;</td><td>删除集合下，指定值的元素</td></tr><tr><td><strong>zcount</strong>&lt;key&gt;&lt;min&gt;&lt;max&gt;</td><td>统计该集合，分数区间内的元素个数</td></tr><tr><td><strong>zran</strong>&lt;key&gt; &lt;value&gt;</td><td>返回该值在集合中排名，从 0 开始。</td></tr></tbody></table><h2 id="二、Redis-的相关配置"><a href="#二、Redis-的相关配置" class="headerlink" title="二、Redis 的相关配置"></a>二、Redis 的相关配置</h2><ol><li><p>计量单位说明,大小写不敏感</p></li><li><p><strong>include</strong></p><p>类似 jsp 中的 include，多实例的情况可以把公用的配置文件提取出来</p></li><li><p><strong>ip 地址的绑定 bind</strong></p></li></ol><ul><li>默认情况 bind=127.0.0.1 只能接受本机的访问请求</li><li>不写的情况下，无限制接受任何 ip 地址的访问</li><li>生产环境肯定要写你应用服务器的地址</li><li>如果开启了 <strong>protected-mode</strong>，那么在没有设定 bind ip 且没有设密码的情况下， Redis 只允许接受本机的相应</li></ul><ol start="4"><li><strong>tcp-backlog</strong></li></ol><ul><li>可以理解是一个请求到达后至到接受进程处理前的队列</li><li>backlog 队列总和=未完成三次握手队列 + 已经完成三次握手队列</li><li>高并发环境 tcp-backlog 设置值跟超时时限内的 Redis 吞吐量决定</li></ul><ol start="5"><li><p><strong>timeout</strong></p><p>一个空闲的客户端维持多少秒会关闭， 0 为永不关闭。</p></li><li><p><strong>tcp keepalive</strong></p><p>对访问客户端的一种心跳检测，每个 n 秒检测一次，官方推荐设置为 60 秒</p></li><li><p><strong>daemonize</strong></p><p>是否为后台进程</p></li><li><p><strong>pidfile</strong></p><p>存放 pid 文件的位置，每个实例会产生一个不同的 pid 文件</p></li><li><p><strong>log level</strong></p><p>四个级别根据使用阶段来选择，生产环境选择 notice 或者 warning</p></li><li><p><strong>log level</strong></p><p>日志文件名称</p></li><li><p><strong>syslog</strong></p><p>是否将 Redis 日志输送到 linux 系统日志服务中</p></li><li><p><strong>syslog-ident</strong></p><p>日志的标志</p></li><li><p><strong>syslog-facility</strong></p><p>输出日志的设备</p></li><li><p><strong>database</strong></p><p>设定库的数量 默认 16</p></li><li><p><strong>security</strong></p><p>在命令行中设置密码</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200819112547.png" alt="image-20200819112540042"></p><ol start="16"><li><p><strong>maxclient</strong></p><p>最大客户端连接数</p></li><li><p><strong>maxmemory</strong></p><p>设置 Redis 可以使用的内存量。一旦到达内存使用上限， Redis 将会试图移除内部数据，移除规则可以通过 maxmemory-policy 来指定。如果 Redis 无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，那么 Redis 则会针对那些需要申请内存的指令返回错误信息，比如 SET、 LPUSH 等。</p></li><li><p><strong>Maxmemory-policy</strong></p></li></ol><ul><li>volatile-lru: 使用 LRU 算法移除 key, 只对设置了过期时间的键</li><li>allkeys-lru：使用 LRU 算法移除 key</li><li>volatile-random：在过期集合中移除随机的 key，只对设置了过期时间的键</li><li>allkeys-random：移除随机的 key</li><li>volatile-ttl：移除那些 TTL 值最小的 key，即那些最近要过期的 key</li><li>noeviction：不进行移除。针对写操作，只是返回错误信息</li></ul><ol start="19"><li><p><strong>Maxmemory-samples</strong></p><p>设置样本数量， LRU 算法和最小 TTL 算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小。一般设置 3 到 7 的数字，数值越小样本越不准确，但是性能消耗也越小。</p></li></ol><h2 id="三、Redis-的-Java-客户端-Jedis"><a href="#三、Redis-的-Java-客户端-Jedis" class="headerlink" title="三、Redis 的 Java 客户端 Jedis"></a>三、Redis 的 Java 客户端 Jedis</h2><p>1、Jedis 所需要的 jar 包，可以通过 Maven 的依赖引入</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200819115939.png" alt="image-20200819115938971"></p><ol start="2"><li>使用 Windows 环境下 Idea 连接虚拟机中的 Redis 注意事项</li></ol><ul><li>禁用 Linux 的防火墙： Linux(CentOS7)里执行命令 ： <strong>systemctl stop firewalld.service</strong></li><li>redis.conf 中注释掉 bind 127.0.0.1 ,然后 protect-mode no。</li></ul><ol start="3"><li>Jedis 测试连通性 :</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 连接本地 Redis 服务</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.64.129&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看服务是否运行，打出pong 表示OK</span></span><br><span class="line">        System.out.println(<span class="string">&quot;connection is OK =====&gt;:&quot;</span> + jedis.ping());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、-Redis-事务"><a href="#四、-Redis-事务" class="headerlink" title="四、 Redis 事务"></a>四、 Redis 事务</h2><h3 id="1、Redis-中的事务的定义"><a href="#1、Redis-中的事务的定义" class="headerlink" title="1、Redis 中的事务的定义"></a>1、Redis 中的事务的定义</h3><p>​ Redis 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。Redis 事务的主要作用就是串联多个命令防止别的命令插队。</p><h3 id="2、multi、exec、discard"><a href="#2、multi、exec、discard" class="headerlink" title="2、multi、exec、discard"></a>2、multi、exec、discard</h3><ol><li>从输入 Multi 命令开始，输入的命令都会依次进入执行命令列中，单不会执行，至到输入 Exec 后，Redis 会将之前的命令依次执行。</li><li>组队的过程中可以通过 discard 来放弃组队。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200819121457.png" alt="image-20200819121456277"></p><h3 id="3、事务中的错误处理"><a href="#3、事务中的错误处理" class="headerlink" title="3、事务中的错误处理"></a>3、事务中的错误处理</h3><ol><li>组队中的某个命令出现了报告错误，执行时整个的所有队列都会别取消。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200819121948.png" alt="image-20200819121947767"></p><ol start="2"><li>如果执行阶段某个命令出现了错误，则只有报错的命令不会被执行，而其他的命令会执行，不会回滚。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200819122152.png" alt="image-20200819122151455"></p><h3 id="4、通过事务解决问题"><a href="#4、通过事务解决问题" class="headerlink" title="4、通过事务解决问题"></a>4、通过事务解决问题</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200819122320.png" alt="image-20200819122319571"></p><ul><li>悲观锁(Pessimistic Lock) ，顾名思义，就是很悲观，每次去拿数据的时候都被认为别人会修改，所以每次在那数据的时候都会上锁，这样别人想拿这个数据就会 block 直接它拿到锁。传统的关系型数据库里边就用到了很多这样的机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</li><li>乐观锁(Optimistic Lock) ,顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下再此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量。Redis 就是利用这种 check-and-set 机制实现的事务。</li></ul><h3 id="5、Redis-事务的使用"><a href="#5、Redis-事务的使用" class="headerlink" title="5、Redis 事务的使用"></a>5、Redis 事务的使用</h3><ol><li><p><strong>WACH key[key….]</strong></p><p>在执行 multi 之前， 先执行 watch key1[key2], 可以监视一个(或多个)key，如果在事务执行之前这个(或这些)Key 被其他命令所改动，那么事务将被打断。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200819222536.png" alt="image-20200819222529600"></p></li><li><p><strong>unwatch</strong></p></li></ol><p>取消 WATCH 命令对所有 key 监视。如果执行 WATCH 命令之后，EXEC 命令或 DISCAED 命令先被执行了的话，那么就不需要在执行 UNWINAH 了。</p><ol start="3"><li><strong>三特性</strong></li></ol><ul><li><p>单独的隔离操作</p><p>事务中的所有命令都会被序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发来的命令请求所打断。</p></li><li><p>没有隔离级别的概念</p><p>队列中的命令没有被提交之前都不会实际的被执行，因为事务提交前的任何指令都不会被实际执行，也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”</p></li><li><p>不保证原子性</p><p>Redis 同一个事务中如果有一条命令执行失败，其后的命令仍会被执行，没有回滚</p></li></ul><h2 id="五、Redis-持久化"><a href="#五、Redis-持久化" class="headerlink" title="五、Redis 持久化"></a>五、Redis 持久化</h2><p>Redis 提供 2 个不用形式的持久化方式 RDB 和 AOF</p><h3 id="1、RDB"><a href="#1、RDB" class="headerlink" title="1、RDB"></a>1、RDB</h3><ol><li><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的 Snapshot 快照，它恢复时是将快照文件直接读到内存里。</p></li><li><p>备份的执行：Redis 会单独创建（fork）一个子进程来进行持久化，会将数据写入到一个临时文件中，待持久化进程都结束，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何的 IO 操作的，这就是确保了极高的性能如果需要进行大规模的数据恢复，且对数据恢复的完整性不是非常敏感,那 RDB 方式要比 AOF 方式更加的高效。RDB 的缺点是最后一次持久化后的数据可能丢失。</p></li><li><p>fork： 在 Linux 程序中，fork() 会产生一个和父进程完全相同的子进程，但子进程在此后多会 exec 系统调用，出于效率考虑，Linux 中引入”写时复制技术“，一般情况父进程和子进程会共同一段物理内存，只有进程空间的各段的内容要发生变化时，才会父进程的内容复制一份个子进程。</p></li><li><p>RDB 保存的文件</p><p>在 redis.conf 中的配置文件，默认为 dump. rdb</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200823230104.png" alt="image-20200823230057660"></p></li><li><p>RDB 文件的保存路径</p><p>默认为 Redis 启动时命令所在的目录下，也可以修改</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200823230202.png" alt="image-20200823230202013"></p></li><li><p>RDB 的保存策略</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200823230234.png" alt="image-20200823230233294"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200823230245.png" alt="image-20200823230244497"></p><ol start="7"><li><p>手动保存快照</p><p>save：只管保存，其他不管，全部阻塞</p><p>bgsave: 按照保存策略的自动保存</p></li><li><p>RDB 的相关配置</p></li></ol><ul><li><p>stop-writes-on-bgsave-error yes</p><p>当 Redis 无法写入磁盘的话，直接关闭 Redis 的写入操作。</p></li><li><p>rdbcompression yes</p><p>进行 rdb 保存时，将文件压缩</p></li><li><p>rdbchecksum yes</p><p>在存储的快照后，还可以让 Redis 使用 CRC64 算法来进行数据校验，但是这样做会增加大约 10% 的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</p></li></ul><ol start="9"><li>RDB 的备份 与恢复</li></ol><ul><li>备份:先通过 config get dir 查询 rdb 文件的目录 , 将*.rdb 的文件拷贝到别的地方</li><li>恢复: 关闭 Redis，把备份的文件拷贝到工作目录下,启动 redis,备份数据会直接加载。</li></ul><ol start="10"><li>RDB 的优缺点</li></ol><ul><li><p>优点: 节省磁盘空间,恢复速度快.</p></li><li><p>缺点：虽然 Redis 在 fork 时使用了写时拷贝技术，但是如果数据庞大时还是比较消耗性能。在备份周期在一定的间隔时间做一次备份，所有如果 Redis 意外 down 掉的话，就会失去最后一个快照后的所有修改。</p></li></ul><h3 id="2、AOF"><a href="#2、AOF" class="headerlink" title="2、AOF"></a>2、AOF</h3><ol><li>以日志的形式来记录每个写的操作，将 Redis 执行的过程的所有写的指令记录下来（读操作不记录），只许追加文件但不可以改写文件，Redis 启动之初会读取该文件重新构建数据，换言之，Redis 重启的话就根据日志文件的内容将写的指令从前到后执行一次以完成数据的恢复工作。</li><li>AOF 默认不开启，需要手动在配置文件中配置。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200824001845.png" alt="image-20200824001844578"></p><ol start="3"><li>可以在 redis.conf 中配置文件名称，默认为 <strong>appendonly.aof</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200824002020.png" alt="image-20200824002020277"></p><p>​ AOF 文件的保存路径，同 RDB 的路径一致</p><ol start="4"><li> AOF 文件故障备份</li></ol><p>AOF 的备份机制和性能虽然和 RDB 不同，但是备份和恢复的操作 RDB 一样，都是拷贝文件，需要恢复时再拷贝到 Redis 工作目录下，启动系统即加载</p><ol start="5"><li><p>AOF 文件故障恢复</p><p>如遇到 AOF 文件损坏，可通过 <strong>redis-check-aof –fix appendonly.aof</strong> 进行恢复</p></li><li><p>AOF 同步频率设置</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200824002455.png" alt="image-20200824002454305"></p></li></ol><ul><li>始终同步，每次 Redis 的写入都会立刻记入日志 。</li><li>每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</li><li>把不主动进行同步，把同步时机交给操作系统。</li></ul><ol start="7"><li>Rewrite</li></ol><ul><li><p>AOF 采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制,当 AOF 文件的大小超过所设定的阈值时， Redis 就会启动 AOF 文件的内容压缩，只保留可以恢复数据的最小指令集.可以使用命令 bgrewriteaof。</p></li><li><p>Redis 实现重写：AOF 文件持续增长而过大时，会 fork 出一条新进程来将 3 文件重写（也是先写临时文件最后写 rename）,遍历新进程的内存中的数据，每条记录有一条的 Set 语句。重写的 aof 文件的操作，并没有读取旧的 aof 文件，而是将整个内存中的数据库名内容用命令的方式重写了一个新的 aof 文件，这点和快照有点类似。</p></li><li><p>何时重写: 重写虽然可以节省大量的磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定 Redis 要满足一定条件才会进行重写。</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200826180554.png" alt="image-20200826180552030"></p><p>系统载入时或者上次重写完毕时，Redis 会记录此时的 AOF 大写，设为 base_size,如果 Redisde AOF 当前大小 &gt;= base_size + base_size*100%(默认)且当前大小&gt;=64mb(默认)的情况下，Redis 会对 AOF 进行重写。</p><ol start="8"><li> AOF 的优缺点</li></ol><ul><li><p>优点：</p><p>备份机制更稳点，丢失数据概率更低。</p><p>可读的日志文本，通过操作 AOF 稳健，可以处理误操作。</p></li><li><p>缺点：</p><p>比起 RDB 占用更多的磁盘空间</p><p>恢复备份速度要慢</p><p>每次读写都同步的话，有一定的性能压力。</p></li></ul><h3 id="3、RDB-和-AOF-用哪个好"><a href="#3、RDB-和-AOF-用哪个好" class="headerlink" title="3、RDB 和 AOF 用哪个好"></a>3、RDB 和 AOF 用哪个好</h3><ul><li>官方推荐两个都启用。</li><li>如果对数据不敏感，可以选单独用 RDB</li><li>不建议单独使用 AOF， 因为可能会出现 Bug。</li><li>如果只是做内存缓存，可以都不用</li></ul><h2 id="六、Redis-主从复制"><a href="#六、Redis-主从复制" class="headerlink" title="六、Redis 主从复制"></a>六、Redis 主从复制</h2><p>​ 主从复制，就是主机数据更新后根据配置和策略，自动同步到备用的 master/slaver 机制。 Master 以写为主， Slave 以读为主。</p><h3 id="1、主从复制的目的"><a href="#1、主从复制的目的" class="headerlink" title="1、主从复制的目的"></a>1、主从复制的目的</h3><ol><li>读写分离，性能扩展</li><li>容灾快速恢复</li><li><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200826182817.png" alt="image-20200826182816601"></li></ol><h3 id="2、主从配置"><a href="#2、主从配置" class="headerlink" title="2、主从配置"></a>2、主从配置</h3><ol><li>原则：配从不配主</li><li>步骤: 准备三个 Redis 实例，一主两从</li></ol><ul><li>拷贝多个 redis.conf 文件 include</li><li>开启 daemonize yes</li><li>pid 文件名字 pidfile</li><li>指定端口 port</li><li>Log 文件名字</li><li>Dump.rdb 名字 dbfilename</li><li>Appendonly 关闭或换掉名字</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">include /opt/myRedis/redis.conf</span><br><span class="line">pidfile /var/run/redis6381.pid</span><br><span class="line">port 6381</span><br><span class="line">dbfilename dump6381.rdb</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200826190304.png" alt="image-20200826190303821"></p><ol start="3"><li>info replication 打印主从复制的相关信息</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200826191303.png" alt="image-20200826191302789"></p><ol start="4"><li> salveof &lt;ip&gt; &lt;port&gt; 成为主从复制的相关信息</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200826191613.png" alt="image-20200826191612719"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200826191657.png" alt="image-20200826191656108"></p><h3 id="3、一主二从模式"><a href="#3、一主二从模式" class="headerlink" title="3、一主二从模式"></a>3、一主二从模式</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200827212555.png" alt="image-20200827212554136"></p><p><strong>复制原理：</strong></p><ul><li>每次从机联通之后，都会给主机发送 sync 指令</li><li>主机立即进行存盘操作，发送 RDB 文件，给从机</li><li>从机收到 RDB 文件后，进行全盘加载</li><li>之后每次主机的写操作，都会立刻发送给从机，从机执行相同的命令</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200827213426.png" alt="image-20200827213425469"></p><h3 id="4、薪火相传模式演示"><a href="#4、薪火相传模式演示" class="headerlink" title="4、薪火相传模式演示"></a>4、薪火相传模式演示</h3><ol><li><p>上一个 slave 可以是下一个 slave 的 Master，slave 同样可以接收其他的 slaves 的接收和同步请求，那么该 slave 作为链条中下一个的 master, 可以有效减轻 master 的写压力，去同步化降低风险。</p><p>中途变更转向：会清除之前的数据，重新建立拷贝最新的</p><p>风险是一旦某个 slave 宕机，后面的 slave 都没法备份</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200827214202.png" alt="image-20200827214201477"></p></li><li><p>反客为主（小弟上位）</p></li></ol><p>当一个 master 宕机后，后面的 slave 可以立即升为 master， 其后面的 slave 不用做任何修改。用 <strong>slave no one</strong> 将从机边为主机。</p><ol start="3"><li><p>哨兵模式 sentine（推荐大哥）</p><p>反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200827215231.png" alt="image-20200827215230763"></p></li></ol><p><strong>配置哨兵</strong></p><ul><li><p>调整为一主二从模式</p></li><li><p>自定义的/myRedis 目录下新建 sentine.conf 文件</p></li><li><p>在配置文件中填写内容</p><p>==<strong>sentinel monitor mymaster 127.0.0.1 6379 1</strong>==</p><p>其中 mymaster 为监控对象起的服务器名称(随意起)， 1 为 至少有多少个哨兵同意迁移的数量。</p></li><li><p>启动哨兵</p><p>执行 <strong>redis-sentinel /myRedis/sentinel.conf</strong></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200827221459.png" alt="image-20200827221458376"></p><h3 id="5、故障恢复"><a href="#5、故障恢复" class="headerlink" title="5、故障恢复"></a>5、故障恢复</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200827221618.png" alt="image-20200827221617689"></p><h2 id="七、Redis-集群"><a href="#七、Redis-集群" class="headerlink" title="七、Redis 集群"></a>七、Redis 集群</h2><h3 id="1、集群"><a href="#1、集群" class="headerlink" title="1、集群"></a>1、集群</h3><ol><li>Redis 集群 实现了对 Redis 的水平扩容，即启动 N 个 redis 节点，将整个数据库分布式存储在这个 N 个节点中， 每个节点存储总数据的 1/N。</li><li>Redis 集群通过分区(partiton）来提供一定程度的可用性（availability ）： 即使集群中有部分节点失效或者无法进行通信，集群也可以继续处理命令请求。</li></ol><h3 id="2、安装-ruby-环境"><a href="#2、安装-ruby-环境" class="headerlink" title="2、安装 ruby 环境"></a>2、安装 ruby 环境</h3><p>① <strong>能上网</strong></p><ul><li>执行<strong>yum install ruby</strong></li><li>执行 <strong>yum install rubygems</strong></li></ul><p>② <strong>不能上网</strong></p><ul><li><p>cd /run/media/root/CentOS 7 x86_64/Packages 获取如下 rpm 包</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200828004706.png" alt="image-20200828004705295"></p><p>==<strong>注意</strong>==：</p><p>因为 redis 集群需要使用 2.3.0 及以上版本，而 Linux 系统自带的是 2.0.0,需要更新一下，才能启动</p><p><strong>方法：换 yum 源安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yum install centos-release-scl-rh　　　　//会在/etc/yum.repos.d/目录下多出一个CentOS-SCLo-scl-rh.repo源</span><br><span class="line"></span><br><span class="line">yum install rh-ruby23  -y　　　　//直接yum安装即可　　</span><br><span class="line"></span><br><span class="line">scl  enable  rh-ruby23 bash　　　　//必要一步</span><br><span class="line"></span><br><span class="line">ruby -v　　　　//查看安装版本</span><br></pre></td></tr></table></figure><p>使用：<strong>gem install redis</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200828083321.png" alt="image-20200828083315016"></p></li></ul><h3 id="3、准备-6-个-Redis-实例"><a href="#3、准备-6-个-Redis-实例" class="headerlink" title="3、准备 6 个 Redis 实例"></a>3、准备 6 个 Redis 实例</h3><ol><li>准备 6 个实例 6379,6380,6381,6389,6390,6391</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200827231244.png" alt="image-20200827231243148"></p><blockquote><p>拷贝多个 redis.conf 文件<br>开启 daemonize yes<br>Pid 文件名字<br>指定端口<br>Log 文件名字<br>Dump.rdb 名字<br>Appendonly 关掉或者换名字</p></blockquote><blockquote><p>再加入如下配置<br>cluster-enabled yes 打开集群模式<br>cluster-config-file nodes-端口号.conf 设定节点配置文件名<br>cluster-node-timeout 15000 设定节点失联时间，超过该时间（毫秒），集群自动进行<br>主从切换</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">include /opt/myRedis/redis.conf</span><br><span class="line">pidfile /var/run/redis6379.pid</span><br><span class="line">port 6379</span><br><span class="line">dbfilename dump6379.rdb</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6379.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><h3 id="4、合体"><a href="#4、合体" class="headerlink" title="4、合体"></a>4、合体</h3><ol><li>将 6 个实例全部启动， nodes-端口号.conf 文件都生成正常</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200828084415.png" alt="image-20200828084415002"></p><p>2.合体</p><ul><li>进入到 cd /opt/redis-3.2.5/src</li><li>执行</li></ul><blockquote><p>./redis-trib.rb create –replicas 1 192.168.64.129:6379 192.168.64.129:6380 192.168.64.129:6381 192.168.64.129:6389 192.168.64.129:6390 192.168.64.129:6391</p></blockquote><p>==注意: IP 地址修改为当前服务器的地址，端口号为每个 Redis 实例对应的端口号==</p><h3 id="5、集群操作"><a href="#5、集群操作" class="headerlink" title="5、集群操作"></a>5、集群操作</h3><ol><li>以集群的方式进入客户端</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -c -p 端口号</span><br></pre></td></tr></table></figure><ol start="2"><li>通过 <strong>cluster nodes</strong> 命令查看集群信息</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200828085022.png" alt="image-20200828085022150"></p><ol start="3"><li><p><strong>redis cluster</strong> 如何分配这六个节点。一个集群至少要有三个主节点。选项 –replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。分配原则尽量保证每个主数据库运行在不同的 IP 地址，每个从库和主库不在一个 IP 地址上。</p></li><li><p><strong>slots</strong> ：一个 Redis 集群包含 16384 个插槽（ hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个， 集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。</p></li></ol><ul><li>集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点，<br>其中：<ul><li>节点 A 负责处理 0 号至 5500 号插槽。</li><li>节点 B 负责处理 5501 号至 11000 号插槽。</li><li>节点 C 负责处理 11001 号至 16383 号插槽</li></ul></li></ul><ol start="5"><li>在集群中录入值</li></ol><ul><li>在 redis-cli 每次录入、查询键值， redis 都会计算出该 key 应该送往的插槽，如果不是该客户端对应服务器的插槽， redis 会报错，并告知应前往的 redis 实例地址和端口.</li><li>redis-cli 客户端提供了 – c 参数实现自动重定向。如 redis-cli -c – p 6379 登入后，再录入、查询键值对可以自动重定向。</li><li>不在一个 slot 下的键值，是不能使用 mget,mset 等多键操作。</li><li>可以通过{}来定义组的概念，从而使 key 中{}内相同内容的键值对放到一个 slot 中去 。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200828102135.jpg" alt="Snipaste_2020-08-28_09-54-39"></p><ul><li>不在一个 slot 下的键值，是不能使用 mget,mset 等多键操作。</li><li>可以通过{}来定义组的概念，从而使 key 中{}内相同内容的键值对放到一个 slot 中去 。</li></ul><ol start="6"><li>查询集群中的值</li></ol><ul><li>CLUSTER KEYSLOT &lt;key&gt; 计算键 key 应该被放置在哪个槽上。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200828102147.jpg" alt="Snipaste_2020-08-28_09-54-49"></p><ul><li>CLUSTER COUNTKEYSINSLOT &lt;slot&gt; 返回槽 slot 目前包含的键值对数量</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200828102154.jpg" alt="Snipaste_2020-08-28_09-55-10"></p><ul><li>CLUSTER GETKEYSINSLOT &lt;slot&gt; &lt;count&gt; 返回 count 个 slot 槽中的键</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200828102201.jpg" alt="Snipaste_2020-08-28_09-55-38"></p><h3 id="6、集群的-Jedis-开发"><a href="#6、集群的-Jedis-开发" class="headerlink" title="6、集群的 Jedis 开发"></a>6、集群的 Jedis 开发</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisClusterTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Set&lt;HostAndPort&gt; set =<span class="keyword">new</span> HashSet&lt;HostAndPort&gt;();</span><br><span class="line">set.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;192.168.64.129&quot;</span>,<span class="number">6379</span>));</span><br><span class="line">JedisCluster jedisCluster=<span class="keyword">new</span> JedisCluster(set);</span><br><span class="line">jedisCluster.set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">System.out.println(jedisCluster.get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、Redis-集群的优缺点"><a href="#7、Redis-集群的优缺点" class="headerlink" title="7、Redis 集群的优缺点"></a>7、Redis 集群的优缺点</h3><ul><li><strong>优点</strong></li></ul><ol><li>实现扩容</li><li>分摊压力</li><li>无中心配置相对简单</li></ol><ul><li><strong>缺点</strong></li></ul><ol><li>多键操作是不被支持的</li><li>多键的 Redis 事务是不被支持的。 lua 脚本不被支持。</li><li>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片 的方案想要迁移至 redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本使用</title>
      <link href="posts/771027640/"/>
      <url>posts/771027640/</url>
      
        <content type="html"><![CDATA[<h2 id="一、git-基本指令"><a href="#一、git-基本指令" class="headerlink" title="一、git 基本指令"></a>一、git 基本指令</h2><p><a href="https://blog.csdn.net/qq_45738810/article/details/108016195">git 安装案例</a></p><h3 id="1、创建版本库"><a href="#1、创建版本库" class="headerlink" title="1、创建版本库"></a>1、创建版本库</h3><ul><li>在项目文件夹内， 执行： <strong>git init</strong></li></ul><h3 id="2、提交文件"><a href="#2、提交文件" class="headerlink" title="2、提交文件"></a>2、提交文件</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>git status</td><td>进行查看文件状态</td></tr><tr><td>git add 文件名</td><td>将文件添加到暂存区</td></tr><tr><td>git commit</td><td>提交文件到本地库</td></tr><tr><td>git commit -m “注释内容”</td><td>编写注释，完成提交</td></tr></tbody></table><h3 id="3、查看文件提交记录"><a href="#3、查看文件提交记录" class="headerlink" title="3、查看文件提交记录"></a>3、查看文件提交记录</h3><ul><li>执行 <strong>git log</strong> 文件名 进行查看历史记录</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200815003430.png" alt="image-20200815003430227"></p><ul><li><strong>git log –pretty=oneline</strong> 文件名 （简易信息查看）</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200815003347.png" alt="image-20200815003346667"></p><h3 id="4、回退历史"><a href="#4、回退历史" class="headerlink" title="4、回退历史"></a>4、回退历史</h3><ul><li><strong>git reset –hard HEAD^</strong> 回到上一次提交</li><li><strong>git rest – hard HEAD~n</strong> 回退 n 次操作（回退 2 次版本以上，就建议使用此指令）</li></ul><h3 id="5、版本穿越"><a href="#5、版本穿越" class="headerlink" title="5、版本穿越"></a>5、版本穿越</h3><ul><li>进行查看历史记录的版本号，执行 <strong>git reflog 文件名</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200815104457.png" alt="image-20200815104450491"></p><ul><li>执行<strong>git reset –hard 版本号</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200815104517.png" alt="image-20200815104516177"></p><h3 id="6、还原文件"><a href="#6、还原文件" class="headerlink" title="6、还原文件"></a>6、还原文件</h3><ul><li><strong>git checkout</strong> – 文件名</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200815104740.png" alt="image-20200815104738820"></p><h3 id="7、删除某个文件"><a href="#7、删除某个文件" class="headerlink" title="7、删除某个文件"></a>7、删除某个文件</h3><ul><li>先删除文件，在<strong>git add 提交</strong></li></ul><h3 id="8、git-结构"><a href="#8、git-结构" class="headerlink" title="8、git 结构"></a>8、git 结构</h3><p><img src= "/img/loading.gif" data-lazy-src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20200815105512715.png" alt="image-20200815105512715"></p><ul><li>工作区：就是电脑的本地的磁盘目录</li><li>本地库：工作区有个掩藏目录.git，它就是 Git 的本地版本库</li><li>暂存区：一般存放在”git 目录”下的 index 文件(.git/index)中，所以我们把暂存区有时也叫索引区(index)。</li></ul><h3 id="9、创建分支"><a href="#9、创建分支" class="headerlink" title="9、创建分支"></a>9、创建分支</h3><ul><li><strong>git branch</strong> &lt;分支名&gt;</li><li><strong>git branch -v</strong> 查看分支</li></ul><h3 id="10、切换分支"><a href="#10、切换分支" class="headerlink" title="10、切换分支"></a>10、切换分支</h3><ul><li><strong>git checkout</strong> &lt;分支名&gt;</li><li>一步完成： <strong>git checkout -b</strong> &lt;分支名&gt;</li></ul><h3 id="11、合并分支"><a href="#11、合并分支" class="headerlink" title="11、合并分支"></a>11、合并分支</h3><ul><li>先切换到主干 <strong>git checkout master</strong></li><li><strong>git merge &lt;分支名&gt;</strong></li></ul><h3 id="12、冲突"><a href="#12、冲突" class="headerlink" title="12、冲突"></a>12、冲突</h3><p>​ 冲突一般是指同一个文件同一位置的代码，在两个版本合并的时版本管理软件无法判断到底应该保留那个版本，因此会提示该文件发生冲突，需要手工判断解决冲突。</p><p><strong>合并时冲突</strong></p><p>​ 程序合并时发生冲突系统会提示<strong>CONFLICT</strong>关键字，命令行后缀会进入<strong>MERGING</strong>状态，表示此时是解决冲突的状态。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200815112008.png" alt="image-20200815112008105"></p><p><strong>解决冲突：</strong></p><ul><li>此时通过 git diff 可隐找到发生冲突的文件及冲突的内容。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200815112801.png" alt="image-20200815112800702"></p><ul><li>然后修改冲突文件的内容，再次<strong>git add&lt;file&gt;</strong> 和 <strong>git commit</strong> 提交后，后缀<strong>MERGING</strong>消失，说明冲突解决完成。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200815113040.png" alt="image-20200815113039881"></p><h2 id="二、git-与-github"><a href="#二、git-与-github" class="headerlink" title="二、git 与 github"></a>二、git 与 github</h2><p><strong>图示：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200815153128.png" alt="image-20200815153127132"></p><h3 id="1、增加远程地址"><a href="#1、增加远程地址" class="headerlink" title="1、增加远程地址"></a>1、增加远程地址</h3><ul><li><p><strong>git remote add &lt;远端代号&gt; &lt;远端地址&gt;</strong></p><p>&lt;远端代号&gt; 是指远程链接的代号，一般直接用 origin 做为代号，也可以自定义。</p><p>&lt;远端地址&gt;默认远程链接的 url</p><p><strong>例如</strong>：git remote add origin <a href="https://github.com/user111/Helloworld.git">https://github.com/user111/Helloworld.git</a></p></li></ul><h3 id="2、推送到远程库"><a href="#2、推送到远程库" class="headerlink" title="2、推送到远程库"></a>2、推送到远程库</h3><ul><li><p><strong>git push &lt;远端代号&gt; &lt;本地分支的名称&gt;</strong></p><p>&lt;远端代号&gt; 是指远程链接的代号</p><p>&lt;分支名称&gt; 是指要提交的分支名字，比如 master。</p><p><strong>例如</strong>：git push origin master</p></li></ul><h3 id="3、从-GitHub-上克隆一个项目"><a href="#3、从-GitHub-上克隆一个项目" class="headerlink" title="3、从 GitHub 上克隆一个项目"></a>3、从 GitHub 上克隆一个项目</h3><ul><li><p><strong>git clone &lt;远端地址&gt;&lt;新项目目录名&gt;</strong></p><p>&lt;远端地址&gt; 是指远程链接的地址</p><p>&lt;项目目录名&gt; 是指为克隆的项目在本地新建的目录名称，可以不填，默认是 Github 的项目名。</p><p>命令执行完成后，会自动为这个远端地址建一个名为 origin 的代号。</p><p><strong>例如：</strong> git clone <a href="https://github.com/user111/Helloworld.git">https://github.com/user111/Helloworld.git</a> hello_world</p></li></ul><h3 id="4、从-gitHub-更新项目"><a href="#4、从-gitHub-更新项目" class="headerlink" title="4、从 gitHub 更新项目"></a>4、从 gitHub 更新项目</h3><ul><li><p>git pull &lt;远端代号&gt;&lt;远端分支名&gt;</p><p>&lt;远端代号&gt; 是指远程链接的代号</p><p>&lt;远端分支名&gt; 是指远端的分支名称，如 master.</p><p><strong>例如：</strong>git pull origin master</p></li></ul><h3 id="5、协作冲突"><a href="#5、协作冲突" class="headerlink" title="5、协作冲突"></a>5、协作冲突</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200815154702.png" alt="image-20200815154701509"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200816120252.png" alt="image-20200816120251135"></p><h2 id="三、https-VS-ssh"><a href="#三、https-VS-ssh" class="headerlink" title="三、https VS ssh"></a>三、https VS ssh</h2><p>​ ssh 模式与 https 模式的一个重要的好处就是，每次 push、pull、fetch 等操作时，不用重复填写用户名密码。（前提是你必须是这个项目的拥有者或合作者，且配置好了 ssh key）。</p><h3 id="1、配置-SSH-key"><a href="#1、配置-SSH-key" class="headerlink" title="1、配置 SSH key"></a>1、配置 SSH key</h3><ul><li><strong>步骤 1</strong>：检查电脑上是否已经生成 SSH Key 在 git bash 下执行如下命令</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200816112742.png" alt="image-20200816112735836"></p><ul><li><strong>步骤 2</strong>：创建 SSH Key: <strong>ssh-keygen -t rsa -C <a href="mailto:&#x58;&#x58;&#x58;&#x58;&#88;&#88;&#64;&#104;&#x61;&#x69;&#110;&#x61;&#x6e;&#x2e;&#110;&#101;&#x74;">&#x58;&#x58;&#x58;&#x58;&#88;&#88;&#64;&#104;&#x61;&#x69;&#110;&#x61;&#x6e;&#x2e;&#110;&#101;&#x74;</a></strong> 成功的话在~/下生成.shh 文件夹，进去，打开 id_rsa.pub, 复制里面的 Key。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200816113319.png" alt="image-20200816113318204"></p><ul><li><strong>步骤 3</strong>：进入.sshwe 文件包，打印 id_rsa.pub 的内容，复制全部内容</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200816113553.png" alt="image-20200816113553081"></p><ul><li><strong>步骤 4</strong>：登入 GitHub 后，右上角点击 setting</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200816113743.png" alt="image-20200816113742813"></p><ul><li><strong>步骤 5</strong>：在左侧菜单中选择 SSH and GPG keys</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200816115006.png" alt="image-20200816115006081"></p><ul><li><strong>步骤 6</strong>：Title 随便写，Key 把之前 id_rsa.pub 的内容复制进去，点击 Add SSH Key，设置 shh key 完成。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200816115247.png" alt="image-20200816115246668"></p><ul><li><strong>测试连通性</strong>：找到一个项目，要改用 ssh 连接</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200816115628.png" alt="image-20200816115627221"></p><ul><li><p><strong>要建立新的远程代号</strong></p><p><a href="mailto:&#103;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#103;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;</a>:yuebuqun3333/jianfa.git(参考上面)</p></li></ul><blockquote><p>git remote add originssh <a href="mailto:&#103;&#105;&#116;&#64;&#103;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#x6d;">&#103;&#105;&#116;&#64;&#103;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#x6d;</a>:yuebuqun3333/jianfa.git</p></blockquote><p>​ 以后再提交代码的时候就不用输入密码（第一次使用会要求输入个人 yes）</p><blockquote><p>git push originssh master</p></blockquote><h2 id="四、Git-工作流"><a href="#四、Git-工作流" class="headerlink" title="四、Git 工作流"></a>四、Git 工作流</h2><h3 id="1、Git-工作流"><a href="#1、Git-工作流" class="headerlink" title="1、Git 工作流"></a>1、Git 工作流</h3><p>​ 简单来说就是，一个项目的成员们在工作中统一使用 Git 的方式。</p><h3 id="2、集中式工作流"><a href="#2、集中式工作流" class="headerlink" title="2、集中式工作流"></a>2、集中式工作流</h3><ul><li>像 SVN 一样，集中式工作流以中央仓库为项目所修改的单店=点实体。所有的修改都是提交到 Master 这个分支上。</li><li>这种方式与 SVN 的主要区别就是开发人员有本地库，Git 很多特性并没有用到</li></ul><p><img src= "/img/loading.gif" data-lazy-src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20200816120924144.png" alt="image-20200816120924144"></p><h3 id="3、GitFlow-工作流"><a href="#3、GitFlow-工作流" class="headerlink" title="3、GitFlow 工作流"></a>3、GitFlow 工作流</h3><ul><li>Gitflow 工作流通过为功能开发、发布准备和维护设立独立的分支，让发布迭代的过程更流畅。严格的分支模型也为大型项目提供了一些非常必要的结构。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200816121152.png" alt="image-20200816121151089"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200816121214.png" alt="image-20200816121213530"></p><h3 id="4、分支种类"><a href="#4、分支种类" class="headerlink" title="4、分支种类"></a>4、分支种类</h3><ol><li><p><strong>主干分支 master</strong></p><p>主要负责管理正在运行的生产环境代码。永远保持与正在运行的生产环境完全一致。</p></li><li><p><strong>开发分支 develop</strong></p><p>主要负责管理正在开发过程的代码。一般情况下应该是最新的代码。</p></li><li><p><strong>bug 修理分支 hotfix</strong></p><p>主要负责管理生产环境下出现的紧急修复代码。从主干分支分出，修理完毕并测试上线后，并回主干分支。并回后，视情况可以删除该分支。</p></li><li><p><strong>发布版本分支 release</strong></p><p>较大的版本上线前，会从<strong>开发分支</strong>中分出<strong>发布版本分支</strong>，进行最后阶段的集成测试。该版本上线后，会合并到主干分支。生产环境运行一段阶段较稳定后可以视情况删除。</p></li><li><p><strong>功能分支</strong> <strong>feature</strong></p><p>为了不影响较短周期的开发工作，一般把中长期开发模块，会从<strong>开发分支</strong>中独立出来。 开发完成后会合并到<strong>开发分支</strong>。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven基本知识</title>
      <link href="posts/3554798849/"/>
      <url>posts/3554798849/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Maven-基本"><a href="#一、Maven-基本" class="headerlink" title="一、Maven 基本"></a>一、Maven 基本</h2><h3 id="1、自动化构建"><a href="#1、自动化构建" class="headerlink" title="1、自动化构建"></a>1、自动化构建</h3><p>​ 简单来说就是它可以自动的从建构过程的起点一直执行到终点：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200814100958.png" alt="image-20200814100951271"></p><h3 id="2、Maven-核心概念"><a href="#2、Maven-核心概念" class="headerlink" title="2、Maven 核心概念"></a>2、Maven 核心概念</h3><ol><li>POM</li><li>约定的目录结构</li><li>坐标</li><li>依赖管理</li><li>仓库管理</li><li>生命周期</li><li>插件和目标</li><li>继承</li><li>聚合</li></ol><h3 id="3、安装使用"><a href="#3、安装使用" class="headerlink" title="3、安装使用"></a>3、安装使用</h3><p>① <strong>检查 JAVA_HOME 环境变量</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200814101633.png" alt="image-20200814101632316"></p><p>② <strong>解压 Maven 的核心程序</strong></p><p>​ 将 apache-maven-3.5.0-bin.zip 解压到一个非中文无空格的目录下。 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Server\apache-maven-3.5.0</span><br></pre></td></tr></table></figure><p>③ <strong>配置环境变量</strong></p><p><strong>M2_HOME</strong>：D:\Server\ apache-maven-3.5.0（以自己安装路径的为准）</p><p><strong>path</strong>：%M2_HOME%\bin 或 D:\Server\ apache-maven-3.5.0\bin</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200814102117.png" alt="image-20200814102115989"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200814102234.png" alt="image-20200814102232133"></p><p>④ <strong>查看 Maven 版本信息验证安装是否正确</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200814102352.png" alt="image-20200814102350685"></p><p>⑤ <strong>配置本地仓库</strong></p><ol><li>Maven 默认的本地仓库： ~.m2\repository 目录 。Tips： ~表示当前用户的家目录。</li><li>Maven 的核心配置文件位置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解压目录\ D:\Server\ apache-maven-3.5.0\conf\settings.xml</span><br></pre></td></tr></table></figure><ol start="3"><li>设置方式</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>以及准备好的仓库位置<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/RepMaven<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200814103210.png" alt="image-20200814103208846"></p><ol start="4"><li>配置镜像源</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200814103322.png" alt="image-20200814103321838"></p><ol start="5"><li>配置使用的 JDK 版本</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200814103502.png" alt="image-20200814103501320"></p><h2 id="二、Maven-结构"><a href="#二、Maven-结构" class="headerlink" title="二、Maven 结构"></a>二、Maven 结构</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200814102728.png" alt="image-20200814102727162"></p><ul><li>main: 目录用于存放主程序</li><li>test: 目录用于存放测试的程序</li><li>java: 目录用于存放源码的文件。</li><li>resources: 目录用于存放配置文件和资源文件</li></ul><h3 id="1、Maven-约定的目录结构-（cmd-中使用）"><a href="#1、Maven-约定的目录结构-（cmd-中使用）" class="headerlink" title="1、Maven 约定的目录结构 （cmd 中使用）"></a>1、Maven 约定的目录结构 （cmd 中使用）</h3><p><strong>注意：运行 Maven 命令时一定要进入 pom.xml 文件所在的目录！</strong></p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>mvn compile</td><td>编译源代码</td></tr><tr><td>mvn test-compile</td><td>编译测试代码</td></tr><tr><td>mvn test</td><td>运行应用程序中的单元测试</td></tr><tr><td>mvn clean</td><td>清除目标目录中的生成结果</td></tr><tr><td>mvn site</td><td>生成项目相关信息的网站</td></tr><tr><td>mvn package</td><td>依据项目生成 jar 文件</td></tr><tr><td>mvn install</td><td>在本地 Repository 中安装 jar</td></tr><tr><td>mvn idea:idea</td><td>生成 idea 项目</td></tr><tr><td>mvn archetype:create</td><td>创建 Maven 项目</td></tr><tr><td>mvn eclipse:eclipse</td><td>生成 eclipse 项目</td></tr><tr><td>mvn source:jar</td><td>单独打包源码</td></tr></tbody></table><p><strong>补充：</strong></p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>mvn clean package</td><td></td></tr><tr><td>mvn clean compile</td><td>清理编译</td></tr><tr><td>mvn clean test</td><td></td></tr></tbody></table><h2 id="三、POM"><a href="#三、POM" class="headerlink" title="三、POM"></a>三、POM</h2><p>Project Object Model：项目对象模型。 将 Java 工程的相关信息封装为对象作为便于操作和管理的模型。<br>Maven 工程的核心配置。 可以说学习 Maven 就是学习 pom.xml 文件中的配置。</p><h2 id="四、坐标"><a href="#四、坐标" class="headerlink" title="四、坐标"></a>四、坐标</h2><h3 id="1、Maven-的坐标"><a href="#1、Maven-的坐标" class="headerlink" title="1、Maven 的坐标"></a>1、Maven 的坐标</h3><blockquote><p>&lt;groupId&gt;com.oy.maven&lt;/groupId&gt;</p><p>&lt;artifactId&gt;Hello&lt;/artifactId&gt;</p><p>&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</p></blockquote><ul><li>groupId：公司或组织的域名倒序+当前项目名称</li><li>artifactId： 当前项目的模块名称</li><li>version：当前模块的版本</li></ul><h3 id="2、通过坐标到仓库中查找-jar-包"><a href="#2、通过坐标到仓库中查找-jar-包" class="headerlink" title="2、通过坐标到仓库中查找 jar 包"></a>2、通过坐标到仓库中查找 jar 包</h3><ol><li>将 gav 三个向量连起来</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.oy.maven+Hello+0.0.1-SNAPSHOT</span><br></pre></td></tr></table></figure><ol start="2"><li>以连起来的字符串作为目录结构到仓库中查找</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com&#x2F;oy&#x2F;maven&#x2F;Hello&#x2F;0.0.1-SNAPSHOT&#x2F;Hello-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：我们自己的 Maven 工程必须执行安装操作才会进入仓库。 <strong>安装</strong>的命令是： <strong>mvn install</strong></p><h2 id="五、依赖管理"><a href="#五、依赖管理" class="headerlink" title="五、依赖管理"></a>五、依赖管理</h2><h3 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h3><p>当 A jar 包需要用到 B jar 包中的类时，我们就说 A 对 B 有依赖。例如： commons-fileupload-1.3.jar 依赖于 commons-io-2.0.1.jar。通过第二个 Maven 工程我们已经看到， 当前工程会到本地仓库中根据坐标查找它所依赖的 jar 包。配置的基本形式是使用 dependency 标签指定目标 jar 包的坐标。 例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&lt;!—坐标 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 依赖的范围 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、接依赖和间接依赖"><a href="#2、接依赖和间接依赖" class="headerlink" title="2、接依赖和间接依赖"></a>2、接依赖和间接依赖</h3><p>如果 A 依赖 B， B 依赖 C， 那么 A→B 和 B→C 都是直接依赖，而 A→C 是间接依赖。</p><h3 id="3、依赖的范围"><a href="#3、依赖的范围" class="headerlink" title="3、依赖的范围"></a>3、依赖的范围</h3><p><strong>① compile</strong></p><ol><li><p>main 目录下的 Java 代码<strong>可以</strong>访问这个范围的依赖</p></li><li><p>test 目录下的 Java 代码<strong>可以</strong>访问这个范围的依赖</p></li><li><p>部署到 Tomcat 服务器上运行时<strong>要</strong>放在 WEB-INF 的 lib 目录下</p></li></ol><p>​ 例如： 对 Hello 的依赖。主程序、测试程序和服务器运行时都需要用到。</p><p><strong>② test</strong></p><ol><li>main 目录下的 Java 代码<strong>不能</strong>访问这个范围的依赖</li><li>test 目录下的 Java 代码<strong>可以</strong>访问这个范围的依赖</li><li>]部署到 Tomcat 服务器上运行时<strong>不会</strong>放在 WEB-INF 的 lib 目录下</li></ol><p>​ 例如：对 junit 的依赖。仅仅是测试程序部分需要。</p><p><strong>③ provided</strong></p><ol><li><p>main 目录下的 Java 代码<strong>可以</strong>访问这个范围的依赖</p></li><li><p>test 目录下的 Java 代码<strong>可以</strong>访问这个范围的依赖</p></li><li><p>部署到 Tomcat 服务器上运行时<strong>不会</strong>放在 WEB-INF 的 lib 目录下</p><p>例如： servlet-api 在服务器上运行时， Servlet 容器会提供相关 API，所以部署的时候不需要。</p></li></ol><h3 id="4、依赖的传递性"><a href="#4、依赖的传递性" class="headerlink" title="4、依赖的传递性"></a>4、依赖的传递性</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200814111133.png" alt="image-20200814111132056"></p><h3 id="5、依赖的原则：-解决-jar-包冲突"><a href="#5、依赖的原则：-解决-jar-包冲突" class="headerlink" title="5、依赖的原则： 解决 jar 包冲突"></a>5、依赖的原则： 解决 jar 包冲突</h3><p>① 路径最短者优先</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200814111225.png" alt="image-20200814111224221"></p><p>② 路径相同时先声明者优先</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200814111256.png" alt="image-20200814111255314"></p><p>​ 这里“声明”的先后顺序指的是 dependency 标签配置的先后顺序。</p><h3 id="6、依赖的排除"><a href="#6、依赖的排除" class="headerlink" title="6、依赖的排除"></a>6、依赖的排除</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Survey160225_4_Environment<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 依赖排除 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7、统一管理目标-jar-包的版本"><a href="#7、统一管理目标-jar-包的版本" class="headerlink" title="7、统一管理目标 jar 包的版本"></a>7、统一管理目标 jar 包的版本</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.1.1.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">....</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、生命周期"><a href="#六、生命周期" class="headerlink" title="六、生命周期"></a>六、生命周期</h2><h3 id="1、Maven-的生命周期"><a href="#1、Maven-的生命周期" class="headerlink" title="1、Maven 的生命周期"></a>1、Maven 的生命周期</h3><p>Maven 有三套相互独立的生命周期， 分别是：</p><ul><li><strong>Clean Lifecycle</strong> 在进行真正的构建之前进行一些清理工作。</li><li><strong>Default Lifecycle</strong> 构建的核心部分，编译，测试，打包，安装，部署等等。</li><li><strong>Site Lifecycle</strong> 生成项目报告，站点，发布站点。</li></ul><p>再次强调一下它们是相互独立的，你可以仅仅调用 clean 来清理工作目录，仅仅调用 site 来生成站点。当然你也可以直接运行 <strong>mvn clean install site</strong> 运行所有这三套生命周期。</p><h3 id="2、clean-生命周期"><a href="#2、clean-生命周期" class="headerlink" title="2、clean 生命周期"></a>2、clean 生命周期</h3><p>Clean 生命周期一共包含了三个阶段：</p><ol><li>pre-clean 执行一些需要在 clean 之前完成的工作</li><li>clean 移除所有上一次构建生成的文件</li><li>post-clean 执行一些需要在 clean 之后立刻完成的工作</li></ol><h3 id="3、Site-生命周期"><a href="#3、Site-生命周期" class="headerlink" title="3、Site 生命周期"></a>3、Site 生命周期</h3><ol><li>pre-site 执行一些需要在生成站点文档之前完成的工作</li><li>site 生成项目的站点文档</li><li>post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</li><li>site-deploy 将生成的站点文档部署到特定的服务器上</li><li>这里经常用到的是 site 阶段和 site-deploy 阶段，用以生成和发布 Maven 站点，这可是 Maven 相当强大的功能， Manager 比较喜欢，文档及统计数据自动生成，很好看。</li></ol><h2 id="七、继承"><a href="#七、继承" class="headerlink" title="七、继承"></a>七、继承</h2><p>​ 此时如果项目需要将各个模块的 junit 版本统一为 4.9， 那么到各个工程中手动修改无疑是非常不可取的。 使用继承机制就可以将这样的依赖信息统一提取到父工程模块中进行统一管理。</p><h3 id="1、创建父工程"><a href="#1、创建父工程" class="headerlink" title="1、创建父工程"></a>1、创建父工程</h3><p>​ 创建父工程和创建一般的 Java 工程操作一致，唯一需要注意的是： <strong>打包方式处要设置为 pom</strong>。</p><h3 id="2、在子工程中引用父工程"><a href="#2、在子工程中引用父工程" class="headerlink" title="2、在子工程中引用父工程"></a>2、在子工程中引用父工程</h3><blockquote><parent>    <!-- 父工程坐标 -->    <groupId>...</groupId>    <artifactId>...</artifactId>    <version>...</version>    <relativePath>从当前目录到父项目的 pom.xml 文件的相对路径</relativePath></parent></blockquote><p><strong>代码示例：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oy.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定从当前子工程的 pom.xml 文件出发，查找父工程的 pom.xml 的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../Parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时如果子工程的 groupId 和 version 如果和父工程重复则可以删除。</p><h3 id="3、在父工程中管理依赖"><a href="#3、在父工程中管理依赖" class="headerlink" title="3、在父工程中管理依赖"></a>3、在父工程中管理依赖</h3><p>将 Parent 项目中的 dependencies 标签，用 dependencyManagement 标签括起来</p><blockquote><dependencyManagement>    <dependencies>        <dependency>            <groupId>junit</groupId>            <artifactId>junit</artifactId>            <version>4.9</version>            <scope>test</scope>        </dependency>    </dependencies></dependencyManagement></blockquote><p>在子项目中重新指定需要的依赖，删除范围和版本号</p><blockquote><dependencies><p>​ <dependency></p><p>​ <groupId>junit</groupId></p><p>​ <artifactId>junit</artifactId></p><p>​ </dependency></p></dependencies></blockquote><h2 id="八、聚合"><a href="#八、聚合" class="headerlink" title="八、聚合"></a>八、聚合</h2><p>​ 将多个工程拆分为模块后， 需要手动逐个安装到仓库后依赖才能够生效。 修改源码后也需要逐个手动进行 clean 操作。 而使用了聚合之后就可以批量进行 Maven 工程的安装、清理工作。</p><h3 id="1、配置聚合"><a href="#1、配置聚合" class="headerlink" title="1、配置聚合"></a>1、配置聚合</h3><p>​ 在总的聚合工程中使用 modules/module 标签组合， 指定模块工程的相对路径即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>../Hello<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>../HelloFriend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>../MakeFriends<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis基础</title>
      <link href="posts/3661501281/"/>
      <url>posts/3661501281/</url>
      
        <content type="html"><![CDATA[<h2 id="mybatis-generator-core-1-3-2-jar-一、Mybatis-入门案例"><a href="#mybatis-generator-core-1-3-2-jar-一、Mybatis-入门案例" class="headerlink" title="mybatis-generator-core-1.3.2.jar 一、Mybatis 入门案例"></a>mybatis-generator-core-1.3.2.jar 一、Mybatis 入门案例</h2><h3 id="1、开发环境准备（Idea）"><a href="#1、开发环境准备（Idea）" class="headerlink" title="1、开发环境准备（Idea）"></a>1、开发环境准备（Idea）</h3><ol><li>导入 MyBatis 框架的 jar 包、 MySQL 驱动包、log4j 的 jar 包</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200806230151.png" alt="image-20200806230144591"></p><ol start="2"><li>导入 log4j 的配置文件（复制粘贴即可）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">log4j</span>:configuration <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span> // 注意这里，自己使用的工具</span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m  (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">log4j</span>:configuration <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的 <strong>&lt;log4j:configuration xmlns:log4j=”<a href="http://jakarta.apache.org/log4j/&quot;&gt;">http://jakarta.apache.org/log4j/&quot;&gt;</a> 在 Idea 中会报错</strong></p><p><strong>解决办法：</strong></p><p>改为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">log4j</span>:configuration <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>最终版：</strong>（Idea）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">log4j</span>:configuration <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m  (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、创建测试表"><a href="#2、创建测试表" class="headerlink" title="2、创建测试表"></a>2、创建测试表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE test_mybatis;</span><br><span class="line"><span class="comment">-- 使用库</span></span><br><span class="line">USE test_mybatis;</span><br><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user(</span><br><span class="line">    uid <span class="type">INT</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    sex <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3、创建-javaBean"><a href="#3、创建-javaBean" class="headerlink" title="3、创建 javaBean"></a>3、创建 javaBean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">....生成构造器，以及get、set、toString方法。</span><br></pre></td></tr></table></figure><h3 id="4、Mapper-接口"><a href="#4、Mapper-接口" class="headerlink" title="4、Mapper 接口"></a>4、Mapper 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">getUserByUid</span><span class="params">(String uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、创建-MyBatis-的全局配置文件"><a href="#5、创建-MyBatis-的全局配置文件" class="headerlink" title="5、创建 MyBatis 的全局配置文件"></a>5、创建 MyBatis 的全局配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接环境的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test_mybatis&quot;</span>/&gt;</span> // 根据自己的配置</span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span> // 根据自己的配置</span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入SQL映射文件,Mapper映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserMapper.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6、创建-Mybatis-的-sql-映射文件"><a href="#6、创建-Mybatis-的-sql-映射文件" class="headerlink" title="6、创建 Mybatis 的 sql 映射文件"></a>6、创建 Mybatis 的 sql 映射文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.oy.online.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;select&gt;: 定义查询语句</span></span><br><span class="line"><span class="comment">        id : 设置SQL语句的唯一标识</span></span><br><span class="line"><span class="comment">        resultType: 结果类型，即实体类的全限定名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.oy.online.bean.User&quot;</span>&gt;</span></span><br><span class="line">        select uid, username, password, age, sex from tb_user where uid = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7、测试"><a href="#7、测试" class="headerlink" title="7、测试"></a>7、测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// getMapper():会通过动态代理动态生成UserMapper的代理实现类</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User userByUid = userMapper.getUserByUid(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        System.out.println(userByUid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200807004101.png" alt="image-20200807004100829"></p><h2 id="二、MyBatis-全局配置文件"><a href="#二、MyBatis-全局配置文件" class="headerlink" title="二、MyBatis 全局配置文件"></a>二、MyBatis 全局配置文件</h2><h3 id="1、MyBatis-全局配置文件简介"><a href="#1、MyBatis-全局配置文件简介" class="headerlink" title="1、MyBatis 全局配置文件简介"></a>1、MyBatis 全局配置文件简介</h3><p><strong>文件结构如下：</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200807104951.png" alt="image-20200807104943035"></p><h3 id="2、properties-属性"><a href="#2、properties-属性" class="headerlink" title="2、properties 属性"></a>2、properties 属性</h3><ol><li>创建一个资源文件，名为<strong>jdbc.properties</strong> 的文件,将四个连接字符串的数据在资源文件中通过键值 对(key=value)的方式放置 。</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/test_mybatis</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      &lt;properties &gt;: 设置或引入资源文件</span></span><br><span class="line"><span class="comment">      resource: 在类路径下访问资源文件</span></span><br><span class="line"><span class="comment">      url: 在网络路径或磁盘路径下访问资源文件</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在 environment 元素的 dataSource 元素中为其动态设置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span><span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span><span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、settings-属性"><a href="#3、settings-属性" class="headerlink" title="3、settings 属性"></a>3、settings 属性</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将下划线映射成驼峰，user_name映射为userName --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启延迟加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否查询所有数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、typeAliases-别名处理"><a href="#4、typeAliases-别名处理" class="headerlink" title="4、typeAliases 别名处理"></a>4、typeAliases 别名处理</h3><ol><li>类型别名是为 Java 类型设置一个短的名字，可以方便我们引用某个类。 （typeAlias）</li><li>类很多的情况下，可以批量设置别名这个包下的每一个类创建一个默认的别名，就是简单类名小写 。(package)</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            为类型设置类型别名</span></span><br><span class="line"><span class="comment">            type: Java 类型， 若只设置type, 默认的别名就是类型，且不区分大小写</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.oy.online.bean.User&quot; alias=&quot;user&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.oy.online.bean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>MyBatis 已经取好的别名</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200807112543.png" alt="image-20200807112542487"></p><h3 id="5、environments-环境配置"><a href="#5、environments-环境配置" class="headerlink" title="5、environments 环境配置"></a>5、environments 环境配置</h3><ol><li>每种环境使用一个 evironments 标签进行匹配并指定唯一标识符</li><li>可以通过 environments 标签中的 defaul 属性指定一个环境的标识符来快速的切换环境。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;environments&gt;:设置连接数据库的环境</span></span><br><span class="line"><span class="comment">default:设置默认使用的数据库环境</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">    .....</span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p><strong>environment</strong> 指定具体环境</p><p>id：指定当前环境的唯一标识</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200807114225.png" alt="image-20200807114224347"></p><ol start="4"><li><strong>transactionManager</strong></li></ol><ul><li>type: JDBC | MANAGED | 自定义<ul><li>JDBC : 使用了 JDBC 的提交和回滚设置，依赖于从数据源的到的连接来管理事务范围。(JdbcTransactionFactory)</li><li>MANAGED: 不提交或回滚一个连接、让容器管理事务的整个生命周期（比如 JEE 应用服务器的上下文。ManagedTransactionFactory ）</li><li>自定义： 实现 TransationFactory 接口，type = 全类名/别名</li></ul></li></ul><p>5、<strong>dataSource</strong></p><ul><li>type: UNPOOLED | POOLED | JNDI | 自定义</li><li>UNPOOLED: 不使用连接池，UnpooledDataSourceFactory</li><li>POOLED： 使用连接池， PooledDataSourceFactory</li><li>JNDI： 在 EJB 或应用服务器这类容器中查找执行的数据源</li><li>自定义：实现 DataSourceFactory 接口 ，定义数据源的获取方式</li></ul><p><strong>提醒：</strong> 实际开发中我们使用 Spring 管理数据源，并进行事务控制的配置来覆盖上述的配置。</p><h3 id="6、mappers-映射器"><a href="#6、mappers-映射器" class="headerlink" title="6、mappers 映射器"></a>6、mappers 映射器</h3><ul><li>mapper 逐个注册 SQL 映射文件<ul><li>resource : 引入类路径下的文件</li><li>url : 引入网络路径或者是磁盘路径下的文件</li><li>class : 引入 Mapper 接口。有 SQL 映射文件，要求 Mapper 接口与 SQL 映射文件同名同位置，没有 SQL 映射文件，使用注解在接口的方法上写 SQL 语句。</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;EmployeeMapper.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.OY.mybatis.dao.EmployeeMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.OY.mybatis.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用批量注册，这种方式要求 SQL 映射文件名必须和接口名相同并且在同一目录下 &lt;package&gt;</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.oy.online.Mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、Mybatis-映射文件（CRUD）"><a href="#三、Mybatis-映射文件（CRUD）" class="headerlink" title="三、Mybatis 映射文件（CRUD）"></a>三、Mybatis 映射文件（CRUD）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; namespace: 根据自己的接口来确定</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.oy.online.Mapper.UserMapper&quot;&gt;</span><br><span class="line">....</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><ul><li>SQL 映射文件有很少的几个顶级元素<ul><li>cache – 给定命名空间的缓存配置。</li><li>cache-ref – 其他命名空间缓存配置的引用。</li><li>resultMap – 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。</li><li>sql – 可被其他语句引用的可重用语句块。</li><li>insert – 映射插入语句</li><li>update – 映射更新语句</li><li>delete – 映射删除语句</li><li>select – 映射查询语</li></ul></li></ul><h3 id="1、select"><a href="#1、select" class="headerlink" title="1、select"></a>1、select</h3><p><em>Mapper 接口方法</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据eid 查询一个员工的信息</span></span><br><span class="line"><span class="function">Emp <span class="title">getEmpByEid</span><span class="params">(String eid)</span></span>;</span><br></pre></td></tr></table></figure><p><em>Mapper 映射文件</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByEid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.oy.online.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">select eid, ename, age, sex, did from emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、insert"><a href="#2、insert" class="headerlink" title="2、insert"></a>2、insert</h3><p><em>Mapper 接口方法</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加员工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEmp</span><span class="params">(Emp emp)</span></span>;</span><br></pre></td></tr></table></figure><p><em>Mapper 映射文件</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmp&quot;</span> &gt;</span></span><br><span class="line">  insert into emp values(null, #&#123;ename&#125;, #&#123;age&#125;, #&#123;sex&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、update"><a href="#3、update" class="headerlink" title="3、update"></a>3、update</h3><p><em>Mapper 接口方法</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改员工信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateEmp</span><span class="params">(Emp emp)</span></span>;</span><br></pre></td></tr></table></figure><p><em>Mapper 映射文件</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--void updateEmp(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmp&quot;</span>&gt;</span></span><br><span class="line">update emp set ename = #&#123;ename&#125;, age = #&#123;age&#125;, sex =#&#123;sex&#125; where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、delete"><a href="#4、delete" class="headerlink" title="4、delete"></a>4、delete</h3><p><em>Mapper 接口方法</em></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete id=<span class="string">&quot;deleteEmp&quot;</span>&gt;</span><br><span class="line">delete from emp where eid = #&#123;eid&#125;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><p><em>Mapper 映射文件</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 删除员工信息</span><br><span class="line">Boolean deleteEmp(String eid);</span><br></pre></td></tr></table></figure><h2 id="四、Mybatis-映射文件（参数传递）"><a href="#四、Mybatis-映射文件（参数传递）" class="headerlink" title="四、Mybatis 映射文件（参数传递）"></a>四、Mybatis 映射文件（参数传递）</h2><h3 id="1、主键生成方式、获取主键值"><a href="#1、主键生成方式、获取主键值" class="headerlink" title="1、主键生成方式、获取主键值"></a>1、主键生成方式、获取主键值</h3><ul><li><p>主键生成方式</p><ul><li>支持主键自增，例如 MySQL 数据库</li><li>不支持主键自增，例如 Oracle 数据库</li></ul></li><li><p>获取主键值</p><ul><li>若数据库支持自动生成主键的字段（比如 MySQL 和 SQL Server），则可以设置<strong>useGeneratedKeys=”true”</strong>，然后再把 <strong>keyProperty</strong> 设置到目标属性上。</li></ul><p><em>Mapper 接口方法</em></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加员工信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertEmp</span><span class="params">(Emp emp)</span></span>;</span><br></pre></td></tr></table></figure><p><em>Mapper 映射文件</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    useGeneratedKeys: 可以使用自动生成的主键</span></span><br><span class="line"><span class="comment">    keyProperty： 将自动生成的主键赋值给传递过来的参数的哪一个属性</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmp&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;eid&quot;</span>&gt;</span></span><br><span class="line">    insert into emp values(null, &#x27;$&#123;ename&#125;&#x27;, $&#123;age&#125;, &#x27;$&#123;sex&#125;&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>测试：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tes1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>); <span class="comment">//自动处理事务</span></span><br><span class="line">ParaMpper mapper = sqlSession.getMapper(ParaMpper.class);</span><br><span class="line">Emp emp = <span class="keyword">new</span> Emp(<span class="keyword">null</span>, <span class="string">&quot;小沫沫&quot;</span>, <span class="number">12</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line">mapper.insertEmp(emp);</span><br><span class="line">System.out.println(emp.getEid());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200807140723.png" alt="image-20200807140722754"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200807140742.png" alt="image-20200807140742212"></p><h3 id="2、-参数的传递"><a href="#2、-参数的传递" class="headerlink" title="2、 参数的传递"></a>2、 参数的传递</h3><p><strong>mybatis 获取参数值的两种方式：</strong></p><ul><li>${}: insert into emp values(null, admit, 23, 男)</li></ul><p>Statement: 必须使用字符串拼接的方式操作 SQL，一定要注意单引号问题</p><ul><li>#{}：insert into emp values(null, ?,?,?)</li></ul><p>PrepardStratement: 可以使通配符操作 SQL，因为在为 String 赋值时</p><p>使用建议：建议使用#{}，在特殊情况下，需要使用${},例如模糊查询和分页查询</p><p><strong>参数传递的方式：</strong></p><ol><li><strong>当传递参数为单个 String 或基本数据类型和其他包装类</strong></li></ol><ul><li>#{} ：可以以任意的名字获取参数值</li><li>${} :   只能以${value} 或 ${_parameter} 获取</li></ul><ol start="2"><li><strong>当传输的参数为 JavaBean 时</strong></li></ol><ul><li>#{} 和 ${} 都可以通过属性名直接获取属性值，但是要*<em>注意${}的单引号问题。\</em>*</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into emp values(null, &#x27;$&#123;ename&#125;&#x27;, $&#123;age&#125;, &#x27;$&#123;sex&#125;&#x27;)</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>当传递多个参数时，mybatis 会默认将这些参数放在 map 集合中</strong></li></ol><ul><li>两种方式：<ul><li>键为 0,1,2,3…N-1, 以参数为值</li><li>键为 param1, param2,param3….paramN, 以参数为值</li></ul></li><li>#{}：#{0}，#{1}；#{param1}、#{param2}</li><li>${}: ${param1}、${param2},  但是要注意${}的单引号问题</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByEidAndEname&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select eid, ename, age, sex from emp where eid = #&#123;0&#125; and ename = #&#123;1&#125;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- select eid, ename, age, sex from emp where eid = #&#123;param1&#125; and ename = #&#123;param2&#125;--&gt;</span></span><br><span class="line">    select eid, ename, age, sex from emp where eid = &#x27;$&#123;param1&#125;&#x27; and ename = &#x27;$&#123;param2&#125;&#x27;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>命名参数</strong></li></ol><ul><li>为参数使用@Param 起一个名字，Mybatis 就会将这些参数封进 map 中， key 就是我们自己指的名字</li></ul><p><em>Mapper 接口</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Emp <span class="title">getEmpByEidAndEnameByParam</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> String eid, <span class="meta">@Param(&quot;ename&quot;)</span> String ename)</span></span>;</span><br></pre></td></tr></table></figure><p><em>Mapper 映射文件</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Emp getEmpByEidAndEnameByParam(@Param(&quot;eid&quot;) String eid, @Param(&quot;ename&quot;) String ename)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByEidAndEnameByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">     select eid, ename, age, sex from emp where eid = #&#123;eid&#125; and ename = #&#123;ename&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>Map 我们也可以封装多个参数为 Map，直接传递</strong></li></ol><p><em>Mapper 映射文件</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Emp getEmpByMap(Map&lt;String, Object&gt; map)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">     select eid, ename, age, sex from emp where eid = $&#123;eid&#125; and ename = &#x27;$&#123;ename&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>_测试_：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    ParaMpper mapper = sqlSession.getMapper(ParaMpper.class);</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;eid&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;ename&quot;</span>, <span class="string">&quot;小明&quot;</span>);</span><br><span class="line">    Emp empByMap = mapper.getEmpByMap(map);</span><br><span class="line">    System.out.println(empByMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200807235255.png" alt="image-20200807235248189"></p><ol start="6"><li><strong>Collection/Array</strong></li></ol><ul><li>会被 MyBatis 封装成一个 map 传入, Collection 对应的 key 是 collection,Array 对应的 key 是 array. 如果确定是 List 集合， key 还可以是 list.</li></ul><h3 id="3、参数处理"><a href="#3、参数处理" class="headerlink" title="3、参数处理"></a>3、参数处理</h3><ol><li><strong>参数位置支持的属性</strong></li></ol><blockquote><p>javaType、 jdbcType、 mode、 numericScale、 resultMap、 typeHandler、 jdbcTypeName、expression</p></blockquote><ol start="2"><li>实际上通常被设置的是：可能为空的列名指定 jdbcType ,例如:</li></ol><blockquote><p>insert into orcl_employee(id,last_name,email,gender) values(employee_seq.nextval,#{<strong>lastName,jdbcType=NULL</strong> },#{email},#{gen der})</p></blockquote><h3 id="4、参数的获取方式"><a href="#4、参数的获取方式" class="headerlink" title="4、参数的获取方式"></a>4、参数的获取方式</h3><ol><li>#{key}: 获取参数的值，预编译到 SQL 中。安全。</li><li>${key}: 获取参数的值，拼接到 SQL 中。有 SQL 注入问题。</li></ol><h3 id="5、select-查询的几种情况"><a href="#5、select-查询的几种情况" class="headerlink" title="5、select 查询的几种情况"></a>5、select 查询的几种情况</h3><ol><li>查询单行数据返回单个对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Emp <span class="title">getEmpByEid</span><span class="params">(String eid)</span></span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>查询数据表中的数量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Integer <span class="title">getCount</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>查询多行数据返回对象的集合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getAllEmps</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>查询单行数据返回 Map 集合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getEmpMapByEid</span><span class="params">(String eid)</span></span>;</span><br></pre></td></tr></table></figure><ol start="5"><li>查询多行数据返回 Map 集合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapKey(&quot;eid&quot;)</span> <span class="comment">// 设置map的键，因为在查询时传出所有的员工信息，可以把员工信息作为值，但是必须设置键</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getAllEmpMap</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="6、resultMap-自定义映射"><a href="#6、resultMap-自定义映射" class="headerlink" title="6、resultMap 自定义映射"></a>6、resultMap 自定义映射</h3><ol><li>自定义 resultMap, 实现高级结果集映射。</li><li>id：用于完成主键值的映射。</li><li>result：用于完成普通列的映射。</li><li>association: 一个复杂的类型关联；许多的结果将包装成这种类型</li><li>collection： 复杂的类型集</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span>&gt;</span>：自定义映射，处理复杂的表关系</span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>：设置主键的映射关系，column设置字段名，property设置属性名</span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span>&gt;</span>：设置非主键的映射关系，column设置字段名，property设置属性名</span><br></pre></td></tr></table></figure><h4 id="①-id-amp-result"><a href="#①-id-amp-result" class="headerlink" title="① id&amp;result"></a>① id&amp;result</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200808104449.png" alt="image-20200808104440754"></p><p><strong>代码示例：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmployeeById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;myEmp&quot;</span>&gt;</span></span><br><span class="line">select id, last_name,email, gender from tbl_employee where id =#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.oy.mybatis.beans.Employee&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myEmp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②-association-多对一"><a href="#②-association-多对一" class="headerlink" title="② association (多对一)"></a>② association (多对一)</h4><ol><li>POJO 中的属性可能会是一个对象,我们可以使用联合查询，并以级联属性的方式封装对象.使用 association 标签定义对象的封装规则 。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer did;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">...省略set、get方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer eid;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">...省略set、get方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用级联的方式</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--级联的方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.did&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.dname&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empMap&quot;</span>&gt;</span></span><br><span class="line">   select e.eid, e.ename, e.age, e.sex, e.did, d.dname from emp e left  join  dept d on e.did = d.did</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Association</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span> //javaType:&quot;com.oy.online.bean.Dept&quot;</span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empMap&quot;</span>&gt;</span></span><br><span class="line">     select e.eid, e.ename, e.age, e.sex, e.did, d.dname from emp e left  join  dept d on e.did = d.did</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="③-association-分布查询"><a href="#③-association-分布查询" class="headerlink" title="③ association 分布查询"></a>③ association 分布查询</h4><p>在世界开发中，对于每个实体类对都应该由具体的增删改查的方法，也就是 DAO 层，因此对于查询员工信息并将对应的部门信息也查询出来的需求，就可以通过分布的方式完成查询。</p><ol><li>先通过员工的 id 查询员工的信息</li><li>在通过查询出来的员工信息的外键（部门 id） 查询对应的部门信息。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.oy.online.Mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- Dept getDeptByDid(String did);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptByDid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        select did, dname from dept where did = #&#123;did&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empMapStep&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            select: 分布查询的SQL的id,即接口的全限定名、方法名或namespace.SQL的id</span></span><br><span class="line"><span class="comment">            column: 分布查询的条件，注意:此条件必须是数据库查询过得</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.oy.online.Mapper.DeptMapper.getDeptByDid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Emp getEmpStep(String eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpStep&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empMapStep&quot;</span>&gt;</span></span><br><span class="line">     select eid, ename, age, sex, did from emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>测试：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">EmpDeptMapper mapper = sqlSession.getMapper(EmpDeptMapper.class);</span><br><span class="line">Emp empStep = mapper.getEmpStep(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">System.out.println(empStep);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200808113859.png" alt="image-20200808113858489"></p><h4 id="④-association-分步查询使用延迟加载"><a href="#④-association-分步查询使用延迟加载" class="headerlink" title="④ association 分步查询使用延迟加载"></a>④ association 分步查询使用延迟加载</h4><p>​ 在分布查询的基础上，可以使用延迟加载来提升查询的效率，只需要在全局的 Settings 中进行如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启延迟加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置加载的数据是按需还是全部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑤-collection-多对一或多对多"><a href="#⑤-collection-多对一或多对多" class="headerlink" title="⑤ collection (多对一或多对多)"></a>⑤ collection (多对一或多对多)</h4><ol><li>POJO 中的属性可能会是一个集合对象,我们可以使用联合查询，并以级联属性的方式封装对象.使用 collection 标签定义对象的封装规则 。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer did;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Emp&gt; emps;</span><br><span class="line">...省略set、get方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Collection</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            &lt;collection&gt;: 处理一对多和多对多的关系</span></span><br><span class="line"><span class="comment">            ofType: 指集合中的类型，不需要指定javaType</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Dept getDeptEmpsByDid(String did)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptEmpsByDid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptMap&quot;</span> &gt;</span></span><br><span class="line"> select d.did, d.dname, e.eid, e.ename, e.age, e.sex from dept d left join emp e on d.did = e.did where d.did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑥-collection-分步查询"><a href="#⑥-collection-分步查询" class="headerlink" title="⑥ collection 分步查询"></a>⑥ collection 分步查询</h4><p>​ 实际的开发中，对于每个实体类都应该有具体的增删改查方法，也就是 DAO 层， 因此对于查询部门信息并且将对应的所有的员工信息也查询出来的需求，就可以通过分步的方式完成查询。</p><ol><li>先通过部门的 id 查询部门信息</li><li>再通过部门 id 作为员工的外键查询对应的部门信息</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--List&lt;Emp&gt; getEmpListByDid(String did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByDid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select eid, ename, age, sex from emp where did= #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deprStep&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.oy.online.Mapper.EmpDeptMapper.getEmpListByDid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getOnlyDeptByDid(String did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getOnlyDeptByDid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deprStep&quot;</span>&gt;</span></span><br><span class="line">  select did, dname from dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>测试：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">EmpDeptMapper mapper = sqlSession.getMapper(EmpDeptMapper.class);</span><br><span class="line">Dept onlyDeptByDid = mapper.getOnlyDeptByDid(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">System.out.println(onlyDeptByDid);</span><br><span class="line">System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line">System.out.println(onlyDeptByDid.getDname());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200808121635.png" alt="image-20200808121633664"></p><h4 id="⑦-collection-分步查询使用延迟加载"><a href="#⑦-collection-分步查询使用延迟加载" class="headerlink" title="⑦ collection 分步查询使用延迟加载"></a>⑦ collection 分步查询使用延迟加载</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启延迟加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置加载的数据是按需还是全部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑧-扩展-分步查询多列值的传递"><a href="#⑧-扩展-分步查询多列值的传递" class="headerlink" title="⑧ 扩展: 分步查询多列值的传递"></a>⑧ 扩展: 分步查询多列值的传递</h4><ol><li>如果分步查询时，需要传递给调用的查询中多个参数，则需要将多个参数封装成 Map 来进行传递，语法如下: {k1=v1, k2=v2….}</li><li>在所调用的查询方，取值时就要参考 Map 的取值方式，需要严格的按照封装 map 时所用的 key 来取值.</li></ol><blockquote><p>&lt;collection property=”emps” select=”com.oy.online.Mapper.EmpDeptMapper.getEmpListByDid” column=”**{did=did}**”&lt;/collection&gt;</p></blockquote><h4 id="⑨-扩展-association-或-collection-的-fetchType-属性"><a href="#⑨-扩展-association-或-collection-的-fetchType-属性" class="headerlink" title="⑨ 扩展: association 或 collection 的 fetchType 属性"></a>⑨ 扩展: association 或 collection 的 fetchType 属性</h4><ol><li>在&lt;association&gt; 和&lt;collection&gt;标签中都可以设置 fetchType，指定本次查询是否要使用延迟加载。默认为 <strong>fetchType=”lazy”</strong> ,如果本次的查询不想使用延迟加载，则可设置为 <strong>fetchType=”eager”</strong>.</li><li>fetchType 可以灵活的设置查询是否需要使用延迟加载，而不需要因为某个查询不想使用延迟加载将全局的延迟加载设置关闭.</li></ol><blockquote><p>&lt;collection property=”emps” select=”com.oy.online.Mapper.EmpDeptMapper.getEmpListByDid” column=”did” **fetchType=”eager”** &lt;/collection&gt;</p></blockquote><h2 id="五、Mybatis-动态-SQL"><a href="#五、Mybatis-动态-SQL" class="headerlink" title="五、Mybatis 动态 SQL"></a>五、Mybatis 动态 SQL</h2><h3 id="1、Mybatis-动态-SQL-简介"><a href="#1、Mybatis-动态-SQL-简介" class="headerlink" title="1、Mybatis 动态 SQL 简介"></a>1、Mybatis 动态 SQL 简介</h3><ol><li>动态的 SQL 是 Mybatis 强大的特征之一。极大的简化我们拼装 SQL 的操作</li><li>动态 SQL 元素和使用 JSTL 或其类似基于 XML 的文本处理器相似</li><li>Mybatis 采用功能强大的基于 OGNL 的表达式来简化</li></ol><ul><li>if</li><li>choose(when , otherwise)</li><li>trim(where, set)</li><li>foreach</li></ul><ol start="4"><li>OGNL（ Object Graph Navigation Language ）对象图导航语言，这是一种强大的 表达式语言，通过它可以非常方便的来作对象属性。 类似于我们的 EL， SpEL 等。</li></ol><table><thead><tr><th>描述</th><th>属性</th></tr></thead><tbody><tr><td>访问对象属性：</td><td>person.name</td></tr><tr><td>调用方法：</td><td>person.getName()</td></tr><tr><td>调用静态属性/方法：</td><td>@java.lang.Math@PI<br>@java.util.UUID@randomUUID()</td></tr><tr><td>调用构造方法：</td><td>new com.oy.bean.Person(‘admin’).name</td></tr><tr><td>运算符：</td><td>+,-*,/,%</td></tr><tr><td>逻辑运算符：</td><td>in,not in,&gt;,&gt;=,&lt;,&lt;=,==,!=</td></tr></tbody></table><p><strong>注意：xml 中的特殊符号如：“&gt;”,“&lt;”等这些都需要使用转义字符 。</strong></p><h3 id="2、if-where"><a href="#2、if-where" class="headerlink" title="2、if where"></a>2、if where</h3><ol><li>if 用于简单的判断</li><li>Where 用于解决 SQL 语句中的 where 关键字以及条件中第一个 and 或者 or 的问题。(去掉多余的 and)</li></ol><p><em>Mapper 接口</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据eid,ename, age, sex,多条件查询员工的信息</span></span><br><span class="line"><span class="function">List&lt;Emp&gt; <span class="title">getEmpListByMultiter</span><span class="params">(Emp emp)</span></span>;</span><br></pre></td></tr></table></figure><p><em>Mapper 映射</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByMultiter&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select eid, ename, age, sex from emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;eid != null&quot;</span>&gt;</span></span><br><span class="line">            and eid = #&#123;eid&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != null and ename != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and ename = #&#123;ename&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">            and age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex == 1 or sex == 2&quot;</span>&gt;</span></span><br><span class="line">            and sex = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、trim"><a href="#3、trim" class="headerlink" title="3、trim"></a>3、trim</h3><ol><li>Trim 可以在条件判断完的 SQL 语句前后添加 或者去掉指定的字符</li></ol><ul><li>prefix: 添加前缀（在操作的 SQL 语句前加入某些内容）</li><li>prefixOverrides: 去掉前缀（把操作的 SQL 语句前的某些内容去掉）</li><li>suffix: 添加后缀（在操作的 SQL 语句后加入某些内容）</li><li>suffixOverrides: 去掉后缀 (把操作的 SQL 语句后的某些内容去掉)</li></ul><p><em>Mapper 映射</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByMultiter&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select eid, ename, age, sex from emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;eid != null&quot;</span>&gt;</span></span><br><span class="line">            eid = #&#123;eid&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != null and ename != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            ename = #&#123;ename&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age !=null&quot;</span>&gt;</span></span><br><span class="line">            age = #&#123;age&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex == 1 or sex == 0&quot;</span>&gt;</span></span><br><span class="line">            sex = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>Mapper 接口</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据eid,ename, age, sex,多条件查询员工的信息</span></span><br><span class="line"><span class="function">List&lt;Emp&gt; <span class="title">getEmpListByMultiter</span><span class="params">(Emp emp)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="4、set"><a href="#4、set" class="headerlink" title="4、set"></a>4、set</h3><ul><li>set 主要用于解决修改操作中 SQL 语句中可能多出的逗号的问题</li></ul><p><em>Mapper 映射</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmpByConditionSet&quot;</span>&gt;</span></span><br><span class="line">        update emp</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != null and ename != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                ename = #&#123;ename&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">                age = #&#123;age&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex == 1 or sex == 2&quot;</span>&gt;</span></span><br><span class="line">                sex = #&#123;sex&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>Mapper 接口</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateEmpByConditionSet</span><span class="params">(Emp emp)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="5、Choose-when、otherwise"><a href="#5、Choose-when、otherwise" class="headerlink" title="5、Choose(when、otherwise)"></a>5、Choose(when、otherwise)</h3><p>choose 主要是用于分支判断，类似于 java 中的 switch case, 只会满足所有分支中的一个。</p><p><em>Mapper 映射</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select eid, ename, age, sex from emp</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;eid != null&quot;</span>&gt;</span></span><br><span class="line">            eid = #&#123;eid&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;ename != null and ename = &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            ename = #&#123;ename&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">            age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            sex = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>Mapper 接口</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据eid ,eanem, age, sex中的其中一个查询一个员工信息</span></span><br><span class="line"><span class="function">List&lt;Emp&gt; <span class="title">getEmpListByChoose</span><span class="params">(Emp emp)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="6、foreach"><a href="#6、foreach" class="headerlink" title="6、foreach"></a>6、foreach</h3><ul><li>foreach 主要用于循环迭代<ul><li>collection: 指定要遍历的集合或数组</li><li>item: 设置别名</li><li>close: 设置循环体开始内容</li><li>open: 设置循环体开始内容</li><li>separator: 设置每一次循环之间的分隔符</li><li>index: 若遍历的是 list, index 代表下标： 若遍历的是 map, index 代表键</li></ul></li></ul><h4 id="①-批量删除"><a href="#①-批量删除" class="headerlink" title="① 批量删除"></a>① 批量删除</h4><p><em>Mapper 接口</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过list集合实现批量删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteMoreByList</span><span class="params">(<span class="meta">@Param(&quot;eids&quot;)</span>List&lt;Integer&gt; eids)</span></span>;</span><br></pre></td></tr></table></figure><p><em>Mapper 映射</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">delete from emp where eid in ();</span></span><br><span class="line"><span class="comment">delete from emp where eid = 1 or eid = 2 or eid = 3</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByList&quot;</span>&gt;</span></span><br><span class="line">      delete from emp where</span><br><span class="line">      <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        eid = #&#123;eid&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByList&quot;</span>&gt;</span></span><br><span class="line">      delete from emp where eid in</span><br><span class="line">      <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">          #&#123;eid&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②-批量查询"><a href="#②-批量查询" class="headerlink" title="② 批量查询"></a>② 批量查询</h4><p><em>Mapper 接口</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Emp&gt; <span class="title">SelectMoreByList</span><span class="params">(<span class="meta">@Param(&quot;eids&quot;)</span>List&lt;Emp&gt; eids)</span></span>;</span><br></pre></td></tr></table></figure><p><em>Mapper 映射</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;SelectMoreByList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select  eid , ename, age, sex from emp where</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span> &gt;</span></span><br><span class="line">       eid = #&#123;eid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;SelectMoreByList1&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select  eid , ename, age, sex from emp where eid in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;eid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="③-批量添加"><a href="#③-批量添加" class="headerlink" title="③ 批量添加"></a>③ 批量添加</h4><p><em>Mapper 接口</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertMoreByArray</span><span class="params">(<span class="meta">@Param(&quot;emps&quot;)</span>Emp[] emps)</span></span>;</span><br></pre></td></tr></table></figure><p><em>Mapper 映射</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreByArray&quot;</span>&gt;</span></span><br><span class="line">    insert into emp values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        (null, #&#123;emp.ename&#125;, #&#123;emp.age&#125;, #&#123;emp.sex&#125;,1)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>测试</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    Emp emp = <span class="keyword">new</span> Emp(<span class="keyword">null</span>, <span class="string">&quot;小小&quot;</span>,<span class="number">12</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line">    Emp emp1 = <span class="keyword">new</span> Emp(<span class="keyword">null</span>, <span class="string">&quot;小名&quot;</span>,<span class="number">14</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line">    Emp emp2 = <span class="keyword">new</span> Emp(<span class="keyword">null</span>, <span class="string">&quot;小正&quot;</span>,<span class="number">17</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    Emp emp3 = <span class="keyword">new</span> Emp(<span class="keyword">null</span>, <span class="string">&quot;小莫&quot;</span>,<span class="number">12</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    Emp[] emps = &#123;emp, emp1, emp2, emp3, emp3&#125;;</span><br><span class="line">    mapper.insertMoreByArray(emps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③-批量修改"><a href="#③-批量修改" class="headerlink" title="③ 批量修改"></a>③ 批量修改</h4><p><strong>注意：</strong>执行之前需要在 jdbc.properties 配置文件中的 url 最后配置 “**?allowMultiQueries=true**”</p><blockquote><p>jdbc.url=jdbc:mysql://localhost:3306/test_mybatis**?allowMultiQueries=true**</p></blockquote><p><em>Mapper 接口</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateMoreByArray</span><span class="params">(<span class="meta">@Param(&quot;emps&quot;)</span>List&lt;Emp&gt; emps)</span></span>;</span><br></pre></td></tr></table></figure><p><em>Mapper 映射</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateMoreByArray&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> &gt;</span></span><br><span class="line">      update emp set ename = #&#123;emp.ename&#125;, age = #&#123;emp.age&#125;,sex = #&#123;emp.sex&#125; where eid = #&#123;emp.eid&#125;;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>测试：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    Emp emp = <span class="keyword">new</span> Emp(<span class="number">14</span>, <span class="string">&quot;小小&quot;</span>,<span class="number">12</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line">    Emp emp1 = <span class="keyword">new</span> Emp(<span class="number">15</span>, <span class="string">&quot;小明&quot;</span>,<span class="number">14</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    Emp emp2 = <span class="keyword">new</span> Emp(<span class="number">16</span>, <span class="string">&quot;小正&quot;</span>,<span class="number">17</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    Emp emp3 = <span class="keyword">new</span> Emp(<span class="number">17</span>, <span class="string">&quot;小莫&quot;</span>,<span class="number">12</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(emp);</span><br><span class="line">    list.add(emp1);</span><br><span class="line">    list.add(emp2);</span><br><span class="line">    list.add(emp3);</span><br><span class="line">    mapper.updateMoreByArray(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、sql"><a href="#7、sql" class="headerlink" title="7、sql"></a>7、sql</h3><ol><li>sql 标签是用于抽取可重复的 sql 片段，将相同的，使用频繁的 SQL 片段抽取出来，单独定义，方便多次引用</li><li>抽取 SQL</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectSQL&quot;</span>&gt;</span></span><br><span class="line">select eid, ename, age, sex from emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>引用 SQL：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectSQL&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、Mybatis-缓存机制"><a href="#六、Mybatis-缓存机制" class="headerlink" title="六、Mybatis 缓存机制"></a>六、Mybatis 缓存机制</h2><h3 id="1、缓存机制"><a href="#1、缓存机制" class="headerlink" title="1、缓存机制"></a>1、缓存机制</h3><ol><li>Mybatis 包含一个非常强大的查询的缓存特征，它可以非常方便地搭配配置和定制。缓存可以极大的提升查询效率</li><li>Mybatis 系统中的默认定义了两极缓存。<ul><li>一级缓存</li><li>二级缓存</li></ul></li><li>默认情况下，只有一级缓存（Sqlsession 级别的缓存，也称为本地缓存）开启。</li><li>二级缓存需要手动开启配置，它是基于 namespace 级别的缓存（映射）。</li><li>为了提高扩展性。Mybatis 定义了缓存接口 Cache.我们可以通过实现 Cache 接口来自定义二级缓存。</li></ol><h3 id="2、一级缓存的使用"><a href="#2、一级缓存的使用" class="headerlink" title="2、一级缓存的使用"></a>2、一级缓存的使用</h3><p><em>Mapper 接口</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据eid 来查询员工信息</span></span><br><span class="line"><span class="function">Emp <span class="title">getEmpByEid</span><span class="params">(String eid)</span></span>;</span><br></pre></td></tr></table></figure><p><em>Mapper 映射</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectSQL&quot;</span>&gt;</span></span><br><span class="line">    select eid, ename, age, sex from emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpByEid(String eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByEid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectSQL&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> where  eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>测试</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    Emp empByEid = mapper.getEmpByEid(<span class="string">&quot;14&quot;</span>);</span><br><span class="line">    System.out.println(empByEid);</span><br><span class="line">    System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">    Emp empByEid1 = mapper.getEmpByEid(<span class="string">&quot;14&quot;</span>);</span><br><span class="line">    System.out.println(empByEid1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：clearCache() 来清空本地缓存</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200809235308.png" alt="image-20200809235307374"></p><h3 id="3、一级缓存失效的几种情况"><a href="#3、一级缓存失效的几种情况" class="headerlink" title="3、一级缓存失效的几种情况"></a>3、一级缓存失效的几种情况</h3><ol><li>不同的 SqlSession 对应不同的一级缓存</li><li>同一个 SqlSession 但是查询条件不同</li><li>同一个 SqlSession 两次查询期间执行了任意一次增删改操作</li><li>同一个 SqlSession 两次查询期间手动清空了缓存</li></ol><h3 id="4、二级缓存的使用"><a href="#4、二级缓存的使用" class="headerlink" title="4、二级缓存的使用"></a>4、二级缓存的使用</h3><ol><li><p>二级缓存(second level cache)，全局作用域缓存</p></li><li><p>二级缓存默认不开启，需要手动配置</p></li><li><p>Mybatis 提供二级缓存的接口以及实现，缓存实现要求 POJO 实现 Serializable 接口</p></li><li><p>二级缓存在 SqlSession 关闭或提交之后才会生效</p></li><li><p>二级缓存使用步骤：</p><ul><li>全局配置文件中开启二级缓存<strong>&lt;setting name=”cacheEnabled” value=”true”/&gt;</strong></li><li>需要使用二级缓存的映射文件处使用 cache 配置缓存<strong>&lt;cache /&gt;</strong></li><li>注意：POJO 需要实现 Serializable 接口</li></ul></li></ol><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">       SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">       <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">       SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">       EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">       Emp empByEid = mapper.getEmpByEid(<span class="string">&quot;14&quot;</span>);</span><br><span class="line">       System.out.println(empByEid);</span><br><span class="line">       sqlSession.commit();</span><br><span class="line">       System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">       Emp empByEid1 = mapper.getEmpByEid(<span class="string">&quot;14&quot;</span>);</span><br><span class="line">       System.out.println(empByEid1);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200810002353.png" alt="image-20200810002352718"></p><ol start="6"><li>二级缓存相关的属性</li></ol><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>eviction=“FIFO”</td><td>缓存回收策略：<br>LRU – 最近最少使用的：移除最长时间不被使用的对象。<br/>FIFO – 先进先出：按对象进入缓存的顺序来移除它们。<br/>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。<br/>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。<br/>默认的是 LRU</td></tr><tr><td>flushInterval</td><td>刷新间隔，单位毫秒<br>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</td></tr><tr><td>size</td><td>引用数目，正整数<br/>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</td></tr><tr><td>readOnly</td><td>只读， true/false<br/>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。<br/>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false。</td></tr></tbody></table><h3 id="5、缓存的相关属性设置"><a href="#5、缓存的相关属性设置" class="headerlink" title="5、缓存的相关属性设置"></a>5、缓存的相关属性设置</h3><ol><li><p>全局 setting 的 cacheEnable:</p><p>配置二级缓存的开关，一级缓存一直打开的。</p></li><li><p>select 标签的 userCache 属性：<br>配置这个 select 是否使用二级缓存。一级缓存一直使用的</p></li><li><p>sql 标签的 flushCache 属性：</p><p>增删改默认 flushCache =true. sql 执行以后，会同时清空一级和二级缓存。</p><p>查询默认 flushCache = false。</p></li><li><p>sqlSession.clearCache(): 只是用来清除一级缓存。</p></li></ol><h3 id="6、整合第三方缓存"><a href="#6、整合第三方缓存" class="headerlink" title="6、整合第三方缓存"></a>6、整合第三方缓存</h3><ol><li><p>为了提高扩展性。myBatis 定义了 缓存接口 Cache。我们可以通过实现 Cache 接口来自定义二级缓存</p></li><li><p>整合 E 和 Cache 缓存步骤：</p><p>① 导入 echcache 包，以及整合包，日志包</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200810111939.png" alt="image-20200810111932438"></p><p>​ ② 编写 ehcache,xml 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\atguigu\ehcache&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"> &lt;defaultCache</span><br><span class="line">   maxElementsInMemory=&quot;1000&quot;</span><br><span class="line">   maxElementsOnDisk=&quot;10000000&quot;</span><br><span class="line">   eternal=&quot;false&quot;</span><br><span class="line">   overflowToDisk=&quot;true&quot;</span><br><span class="line">   timeToIdleSeconds=&quot;120&quot;</span><br><span class="line">   timeToLiveSeconds=&quot;120&quot;</span><br><span class="line">   diskExpiryThreadIntervalSeconds=&quot;120&quot;</span><br><span class="line">   memoryStoreEvictionPolicy=&quot;LRU&quot;&gt;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">属性说明：</span></span><br><span class="line"><span class="comment">l diskStore：指定数据在磁盘中的存储位置。</span></span><br><span class="line"><span class="comment">l defaultCache：当借助CacheManager.add(&quot;demoCache&quot;)创建Cache时，EhCache便会采用&lt;defalutCache/&gt;指定的的管理策略</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">以下属性是必须的：</span></span><br><span class="line"><span class="comment">l maxElementsInMemory - 在内存中缓存的element的最大数目</span></span><br><span class="line"><span class="comment">l maxElementsOnDisk - 在磁盘上缓存的element的最大数目，若是0表示无穷大</span></span><br><span class="line"><span class="comment">l eternal - 设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断</span></span><br><span class="line"><span class="comment">l overflowToDisk - 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">以下属性是可选的：</span></span><br><span class="line"><span class="comment">l timeToIdleSeconds - 当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时，这些数据便会删除，默认值是0,也就是可闲置时间无穷大</span></span><br><span class="line"><span class="comment">l timeToLiveSeconds - 缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</span></span><br><span class="line"><span class="comment"> diskSpoolBufferSizeMB 这个参数设置DiskStore(磁盘缓存)的缓存区大小.默认是30MB.每个Cache都应该有自己的一个缓冲区.</span></span><br><span class="line"><span class="comment">l diskPersistent - 在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。</span></span><br><span class="line"><span class="comment">l diskExpiryThreadIntervalSeconds - 磁盘缓存的清理线程运行间隔，默认是120秒。每个120s，相应的线程会进行一次EhCache中数据的清理工作</span></span><br><span class="line"><span class="comment">l memoryStoreEvictionPolicy - 当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出）</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：IDEA 中新建 ehcache.xml 文件报错</p><ul><li>报错语句</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>解决办法</li></ul><ol><li>打开 settings - languages&amp;frameworks - schemas and dtds ,添加地址 <a href="http://ehcache.org/ehcache.xsd">http://ehcache.org/ehcache.xsd</a></li><li>将 “ ../config/ehcache.xsd ” 改成 “ <a href="http://ehcache.org/ehcache.xsd">http://ehcache.org/ehcache.xsd</a> ”</li></ol><p>③ 配置 cache 标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>④ 测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">       SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">       EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">       Emp empByEid = mapper.getEmpByEid(<span class="string">&quot;14&quot;</span>);</span><br><span class="line">       System.out.println(empByEid);</span><br><span class="line">       sqlSession.commit();</span><br><span class="line">       System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">       EmpMapper mapper1 = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">       Emp empByEid1 = mapper.getEmpByEid(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">       System.out.println(empByEid1);</span><br><span class="line">       sqlSession.commit();</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">       EmpMapper mapper2 = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">       Emp empByEid2 = mapper.getEmpByEid(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">       System.out.println(empByEid2);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="七、MyBatis-逆向工程"><a href="#七、MyBatis-逆向工程" class="headerlink" title="七、MyBatis 逆向工程"></a>七、MyBatis 逆向工程</h2><h3 id="1、逆向工程的配置"><a href="#1、逆向工程的配置" class="headerlink" title="1、逆向工程的配置"></a>1、逆向工程的配置</h3><ol><li><p>导入逆向工程的 jar 包</p><p>mybatis-generator-core-1.3.2.jar</p></li><li><p>编写 MBG 的配置文件（重要几处配置），可参考官方手册</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">            MyBatis3Simple: 生成基本的CRUD</span></span><br><span class="line"><span class="comment">            MyBatis3: 生成带条件的CRUD</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置连接数据库的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test_mybatis&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- javabean的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.oy.online.bean&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 映射文件的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.oy.online.Mapper&quot;</span>  <span class="attr">targetProject</span>=<span class="string">&quot;.\config&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mapper接口的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.oy.online.Mapper&quot;</span>  <span class="attr">targetProject</span>=<span class="string">&quot;.\src&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 设置要将数据库中的哪张表逆向生成哪一个javabean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>运行代码生成器生成代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMBG</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">    File configFile = <span class="keyword">new</span> File(<span class="string">&quot;mbg.xml&quot;</span>);</span><br><span class="line">    ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">    Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">    DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">    MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">    myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、逆向工程的使用"><a href="#2、逆向工程的使用" class="headerlink" title="2、逆向工程的使用"></a>2、逆向工程的使用</h3><ol><li>基本查询（查询全部数据）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    <span class="comment">// 不添加条件，即是查询所有数据</span></span><br><span class="line">    List&lt;Emp&gt; emps = mapper.selectByExample(<span class="keyword">null</span>);</span><br><span class="line">    emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200810125002.png" alt="image-20200810125001737"></p><ol start="2"><li>带条件查询</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"></span><br><span class="line">    EmpExample empExample = <span class="keyword">new</span> EmpExample();</span><br><span class="line">    EmpExample.Criteria c1 = empExample.createCriteria();</span><br><span class="line">    c1.andEnameLike(<span class="string">&quot;%a%&quot;</span>);</span><br><span class="line">    c1.andSexEqualTo(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    EmpExample.Criteria c2 = empExample.createCriteria();</span><br><span class="line">    c2.andDidEqualTo(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    empExample.or(c2);</span><br><span class="line"></span><br><span class="line">    List&lt;Emp&gt; emps = mapper.selectByExample(empExample);</span><br><span class="line">    <span class="keyword">for</span> (Emp emp : emps) &#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200810125409.png" alt="image-20200810125409017"></p><h3 id="八、扩展-PageHelper-分页插件"><a href="#八、扩展-PageHelper-分页插件" class="headerlink" title="八、扩展-PageHelper 分页插件"></a>八、扩展-PageHelper 分页插件</h3><h3 id="1、PageHelper-的使用步骤"><a href="#1、PageHelper-的使用步骤" class="headerlink" title="1、PageHelper 的使用步骤"></a>1、PageHelper 的使用步骤</h3><ol><li>导入相关包 pagehelper-x.x.x.jar 和 jsqlparser-0.9.5.jar</li><li>在 Mybatis 全局配置文件中配置分页插件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、Page-对象的使用"><a href="#2、Page-对象的使用" class="headerlink" title="2、Page 对象的使用"></a>2、Page 对象的使用</h3><ol><li>载查询之前通过 PageHelps.startPage(页码，条数)设置分页信息，该方法返回 Page 对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getsqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageHelps</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = getsqlSessionFactory();</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    List&lt;Emp&gt; emps = mapper.getAllEmps();</span><br><span class="line">    emps.forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;====================================================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页：&quot;</span> + page.getPageNum());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页码:&quot;</span>+ page.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;总条数：&quot;</span>+ page.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;每条显示的条数：&quot;</span>+ page.getPageSize());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200811001527.png" alt="image-20200811001519957"></p><h3 id="3、PageInfo-对象的使用"><a href="#3、PageInfo-对象的使用" class="headerlink" title="3、PageInfo 对象的使用"></a>3、PageInfo 对象的使用</h3><ol><li>在查询完数据以后，使用 PageInfo 对象封装查询结果，可以获取更详细的分页信息以及完成分页逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageHelps1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = getsqlSessionFactory();</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    <span class="comment">// 设置分页信息</span></span><br><span class="line">    Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    List&lt;Emp&gt; emps = mapper.getAllEmps();</span><br><span class="line">    PageInfo&lt;Emp&gt; info = <span class="keyword">new</span> PageInfo&lt;&gt;(emps, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span> (Emp emp : emps) &#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页：&quot;</span>+info.getPageNum());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数：&quot;</span>+ info.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;每页显示的条数：&quot;</span> + info.getPageSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否是第一页：&quot;</span>+ info.isIsFirstPage());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否显示最后一页：&quot;</span> + info.isIsLastPage());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有上一页：&quot;</span>+ info.isHasPreviousPage());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有下一页：&quot;</span> + info.isHasNextPage());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span>[] nums = info.getNavigatepageNums();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">        System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200811003151.png" alt="image-20200811003150464"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="posts/864013447/"/>
      <url>posts/864013447/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库的相关概念"><a href="#数据库的相关概念" class="headerlink" title="数据库的相关概念"></a>数据库的相关概念</h1><h2 id="一、数据库的好处"><a href="#一、数据库的好处" class="headerlink" title="一、数据库的好处"></a>一、数据库的好处</h2><ol><li> 可以持久化数据到本地</li><li> 结构化查询</li></ol><h2 id="二、数据库的常见概念"><a href="#二、数据库的常见概念" class="headerlink" title="二、数据库的常见概念"></a>二、数据库的常见概念</h2><pre><code>1、DB：数据库，存储数据的容器</code></pre><p>2、DBMS：数据库管理系统，又称为数据库软件或数据库产品，用于创建或管理 DB<br>3、SQL：结构化查询语言，用于和数据库通信的语言，不是某个数据库软件特有的，而是几乎所有的主流数据库软件通用的语言</p><h2 id="三、数据库存储数据的特点"><a href="#三、数据库存储数据的特点" class="headerlink" title="三、数据库存储数据的特点"></a>三、数据库存储数据的特点</h2><pre><code>1、数据存放到表中，然后表再放到库中2、一个库中可以有多张表，每张表具有唯一的表名用来标识自己3、表中有一个或多个列，列又称为“字段”，相当于java中“属性”4、表中的每一行数据，相当于java中“对象”</code></pre><h2 id="四、常见的数据库管理系统"><a href="#四、常见的数据库管理系统" class="headerlink" title="四、常见的数据库管理系统"></a>四、常见的数据库管理系统</h2><pre><code>mysql、oracle、db2、sqlserver</code></pre><h2 id="五、MySQL-的优点"><a href="#五、MySQL-的优点" class="headerlink" title="五、MySQL 的优点"></a>五、MySQL 的优点</h2><pre><code>1、开源、免费、成本低2、性能高、移植性也好3、体积小，便于安装</code></pre><h1 id="DQL-语言"><a href="#DQL-语言" class="headerlink" title="DQL 语言"></a>DQL 语言</h1><h2 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h2><h3 id="一、语法"><a href="#一、语法" class="headerlink" title="一、语法"></a>一、语法</h3><pre><code>select 查询列表from 表名;</code></pre><h3 id="二、特点"><a href="#二、特点" class="headerlink" title="二、特点"></a>二、特点</h3><pre><code>1、查询列表可以是字段、常量、表达式、函数，也可以是多个2、查询结果是一个虚拟表</code></pre><h3 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a>三、示例</h3><h4 id="1、查询单个字段"><a href="#1、查询单个字段" class="headerlink" title="1、查询单个字段"></a>1、查询单个字段</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `last_name` <span class="keyword">FROM</span> `employees`;</span><br></pre></td></tr></table></figure><h4 id="2、查询多个字段"><a href="#2、查询多个字段" class="headerlink" title="2、查询多个字段"></a>2、查询多个字段</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名，字段名 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `last_name`,`email`,`employee_id`</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h4 id="3、查询所有字段"><a href="#3、查询所有字段" class="headerlink" title="3、查询所有字段"></a>3、查询所有字段</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `employees`;</span><br></pre></td></tr></table></figure><h4 id="4、查询常量"><a href="#4、查询常量" class="headerlink" title="4、查询常量"></a>4、查询常量</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 常量值;</span><br><span class="line">注意：字符型和日期型的常量值必须用单引号引起来，数值型不需要</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span> ;</span><br></pre></td></tr></table></figure><h4 id="5、查询函数"><a href="#5、查询函数" class="headerlink" title="5、查询函数"></a>5、查询函数</h4><pre><code>select 函数名(实参列表);</code></pre><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> VERSION();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br></pre></td></tr></table></figure><h4 id="6、查询表达式"><a href="#6、查询表达式" class="headerlink" title="6、查询表达式"></a>6、查询表达式</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">100</span><span class="operator">/</span><span class="number">1234</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">100</span><span class="operator">/</span><span class="number">1234</span>;</span><br></pre></td></tr></table></figure><h4 id="7、起别名"><a href="#7、起别名" class="headerlink" title="7、起别名"></a>7、起别名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">①<span class="keyword">as</span></span><br><span class="line">②空格</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#方式一：使用<span class="keyword">as</span>关键字</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>() <span class="keyword">AS</span> 用户名;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>() <span class="keyword">AS</span> &quot;用户名&quot;;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>() <span class="keyword">AS</span> <span class="string">&#x27;用户名&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">AS</span> &quot;姓 名&quot; <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#方式二：使用空格</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>()   用户名;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>()   &quot;用户名&quot;;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>()   <span class="string">&#x27;用户名&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name   &quot;姓 名&quot; <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h4 id="8、去重"><a href="#8、去重" class="headerlink" title="8、去重"></a>8、去重</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段名 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#需求：查询员工涉及到的部门编号有哪些</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h4 id="9、"><a href="#9、" class="headerlink" title="9、+"></a>9、+</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">作用：做加法运算</span><br><span class="line"><span class="keyword">select</span> 数值<span class="operator">+</span>数值; 直接运算</span><br><span class="line"><span class="keyword">select</span> 字符<span class="operator">+</span>数值;先试图将字符转换成数值，如果转换成功，则继续运算；否则转换成<span class="number">0</span>，再做运算</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">null</span><span class="operator">+</span>值;结果都为<span class="keyword">null</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 需求：查询 first_name 和last_name 拼接成的全名，最终起别名为：姓 名</span></span><br><span class="line"></span><br><span class="line">#方案<span class="number">1</span>：使用<span class="operator">+</span>    pass×</span><br><span class="line"><span class="keyword">SELECT</span> first_name<span class="operator">+</span>last_name <span class="keyword">AS</span> &quot;姓 名&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#方案<span class="number">2</span>：使用concat拼接函数</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(first_name,last_name) <span class="keyword">AS</span> &quot;姓 名&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h4 id="10、【补充】concat-函数"><a href="#10、【补充】concat-函数" class="headerlink" title="10、【补充】concat 函数"></a>10、【补充】concat 函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">功能：拼接字符</span><br><span class="line"><span class="keyword">select</span> concat(字符<span class="number">1</span>，字符<span class="number">2</span>，字符<span class="number">3</span>,...);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(first_name,last_name) <span class="keyword">AS</span> &quot;姓 名&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h4 id="11、【补充】ifnull-函数"><a href="#11、【补充】ifnull-函数" class="headerlink" title="11、【补充】ifnull 函数"></a>11、【补充】ifnull 函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">功能：判断某字段或表达式是否为<span class="keyword">null</span>，如果为<span class="keyword">null</span> 返回指定的值，否则返回原本的值</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ifnull(commission_pct,<span class="number">0</span>) <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><h4 id="12、【补充】isnull-函数"><a href="#12、【补充】isnull-函数" class="headerlink" title="12、【补充】isnull 函数"></a>12、【补充】isnull 函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">功能：判断某字段或表达式是否为<span class="keyword">null</span>，如果是，则返回<span class="number">1</span>，否则返回<span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><h3 id="一、语法-1"><a href="#一、语法-1" class="headerlink" title="一、语法"></a>一、语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">where</span> 筛选条件</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#案例：查询工资<span class="operator">&lt;</span><span class="number">15000</span>的姓名、工资</span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&lt;</span><span class="number">15000</span>;</span><br></pre></td></tr></table></figure><h3 id="二、筛选条件的分类"><a href="#二、筛选条件的分类" class="headerlink" title="二、筛选条件的分类"></a>二、筛选条件的分类</h3><h4 id="1、简单条件运算符"><a href="#1、简单条件运算符" class="headerlink" title="1、简单条件运算符"></a>1、简单条件运算符</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="operator">&lt;</span> <span class="operator">=</span> <span class="operator">&lt;&gt;</span> <span class="operator">!=</span> <span class="operator">&gt;=</span> <span class="operator">&lt;=</span>  <span class="operator">&lt;=&gt;</span>安全等于</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#案例：查询部门编号不是<span class="number">100</span>的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">&lt;&gt;</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h4 id="2、逻辑运算符"><a href="#2、逻辑运算符" class="headerlink" title="2、逻辑运算符"></a>2、逻辑运算符</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&amp;&amp;</span> <span class="keyword">and</span></span><br><span class="line"><span class="operator">||</span> <span class="keyword">or</span></span><br><span class="line"><span class="operator">!</span>  <span class="keyword">not</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#案例<span class="number">1</span>：查询部门编号不是 <span class="number">50</span><span class="number">-100</span>之间员工姓名、部门编号、邮箱</span><br><span class="line">#方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_id,email</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">&lt;</span><span class="number">50</span> <span class="keyword">OR</span> department_id<span class="operator">&gt;</span><span class="number">100</span>;</span><br><span class="line">#方式<span class="number">2</span>：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_id,email</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span>(department_id<span class="operator">&gt;=</span><span class="number">50</span> <span class="keyword">AND</span> department_id<span class="operator">&lt;=</span><span class="number">100</span>);</span><br></pre></td></tr></table></figure><h4 id="3、模糊查询"><a href="#3、模糊查询" class="headerlink" title="3、模糊查询"></a>3、模糊查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">like</span>:一般搭配通配符使用，可以判断字符型或数值型</span><br><span class="line">通配符：<span class="operator">%</span>任意多个字符，_任意单个字符</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#案例<span class="number">1</span>：查询姓名中包含字符a的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h4><h5 id="between-and"><a href="#between-and" class="headerlink" title="between and"></a>between and</h5><pre><code> 功能：判断某个字段的值是否介于xx之间</code></pre><p>between and/not between and</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#案例<span class="number">1</span>：查询部门编号是<span class="number">30</span><span class="number">-90</span>之间的部门编号、员工姓名</span><br><span class="line"></span><br><span class="line">#方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">SELECT</span> department_id,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">BETWEEN</span> <span class="number">30</span> <span class="keyword">AND</span> <span class="number">90</span>;</span><br></pre></td></tr></table></figure><h5 id="in"><a href="#in" class="headerlink" title="in"></a>in</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">功能：查询某字段的值是否属于指定的列表之内</span><br><span class="line">a  <span class="keyword">in</span>(常量值<span class="number">1</span>,常量值<span class="number">2</span>,常量值<span class="number">3</span>,...)</span><br><span class="line">a <span class="keyword">not</span> <span class="keyword">in</span>(常量值<span class="number">1</span>,常量值<span class="number">2</span>,常量值<span class="number">3</span>,...)</span><br><span class="line"><span class="keyword">in</span><span class="operator">/</span><span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line"><span class="keyword">is</span> <span class="keyword">null</span> <span class="operator">/</span><span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>：用于判断<span class="keyword">null</span>值</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#案例<span class="number">1</span>：查询部门编号是<span class="number">30</span><span class="operator">/</span><span class="number">50</span><span class="operator">/</span><span class="number">90</span>的员工名、部门编号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span>(<span class="number">30</span>,<span class="number">50</span>,<span class="number">90</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="is-null-is-not-null"><a href="#is-null-is-not-null" class="headerlink" title="is null/is not null"></a>is null/is not null</h5><pre><code>is null PK &lt;=&gt;              普通类型的数值         null值               可读性is null              ×                    √                 √&lt;=&gt;                  √                    √                 ×</code></pre><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#案例<span class="number">1</span>：查询没有奖金的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span>：查询有奖金的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">=</span>只能判断普通的内容</span><br><span class="line"></span><br><span class="line"><span class="keyword">IS</span>      只能判断<span class="keyword">NULL</span>值</span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;=&gt;</span>     安全等于，既能判断普通内容，又能判断<span class="keyword">NULL</span>值</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&lt;=&gt;</span> <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><h3 id="一、语法-2"><a href="#一、语法-2" class="headerlink" title="一、语法"></a>一、语法</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表</span><br><span class="line"><span class="keyword">from</span> 表</span><br><span class="line"><span class="keyword">where</span> 筛选条件</span><br><span class="line">order by 排序列表 【asc&#125;desc】</span><br></pre></td></tr></table></figure><h3 id="二、特点-1"><a href="#二、特点-1" class="headerlink" title="二、特点"></a>二、特点</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="keyword">asc</span> ：升序，如果不写默认升序</span><br><span class="line">   <span class="keyword">desc</span>：降序</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、排序列表 支持 单个字段、多个字段、函数、表达式、别名</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、<span class="keyword">order</span> <span class="keyword">by</span>的位置一般放在查询语句的最后（除limit语句之外）</span><br></pre></td></tr></table></figure><h3 id="三、示例-1"><a href="#三、示例-1" class="headerlink" title="三、示例"></a>三、示例</h3><h4 id="1、按单个字段排序"><a href="#1、按单个字段排序" class="headerlink" title="1、按单个字段排序"></a>1、按单个字段排序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#案例<span class="number">1</span>：将员工编号<span class="operator">&gt;</span><span class="number">120</span>的员工信息进行工资的升序</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary ;</span><br><span class="line"></span><br><span class="line">#案例<span class="number">1</span>：将员工编号<span class="operator">&gt;</span><span class="number">120</span>的员工信息进行工资的降序</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id<span class="operator">&gt;</span><span class="number">120</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h4 id="2、按表达式排序"><a href="#2、按表达式排序" class="headerlink" title="2、按表达式排序"></a>2、按表达式排序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#案例<span class="number">1</span>：对有奖金的员工，按年薪降序</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>,salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>))  年薪</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>)) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h4 id="3、按别名排序"><a href="#3、按别名排序" class="headerlink" title="3、按别名排序"></a>3、按别名排序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#案例<span class="number">1</span>：对有奖金的员工，按年薪降序</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>,salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>))  年薪</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 年薪 <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h4 id="4、按函数的结果排序"><a href="#4、按函数的结果排序" class="headerlink" title="4、按函数的结果排序"></a>4、按函数的结果排序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#案例<span class="number">1</span>：按姓名的字数长度进行升序</span><br><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> LENGTH(last_name);</span><br></pre></td></tr></table></figure><h4 id="5、按多个字段排序"><a href="#5、按多个字段排序" class="headerlink" title="5、按多个字段排序"></a>5、按多个字段排序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#案例<span class="number">1</span>：查询员工的姓名、工资、部门编号，先按工资升序，再按部门编号降序</span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span>,department_id <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h4 id="6、补充选学：按列数排序"><a href="#6、补充选学：按列数排序" class="headerlink" title="6、补充选学：按列数排序"></a>6、补充选学：按列数排序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">2</span> <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> first_name;</span><br></pre></td></tr></table></figure><h2 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h2><h3 id="一、字符函数"><a href="#一、字符函数" class="headerlink" title="一、字符函数"></a>一、字符函数</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>concat(str1,str2)</td><td>拼接</td></tr><tr><td>substr(str,pos)</td><td>截取从 pos 开始的所有字符，起索引从 1 开始</td></tr><tr><td>substr(str,pos,len)</td><td>截取 len 个从 pos 开始的字符，起始索引从 1 开始</td></tr><tr><td>Length(str)</td><td>获取字节个数</td></tr><tr><td>upper(str)</td><td>变大写</td></tr><tr><td>lower(str)</td><td>变小写</td></tr><tr><td>trim(【substr from】str)</td><td>去前后之后指定的字符，默认是去空格</td></tr><tr><td>left(str,len)</td><td>从左边截取指定 len 个数的字符</td></tr><tr><td>right(str,len)</td><td>从右边截指定 Len 个数的字符</td></tr><tr><td>lpad(str,substr,len)</td><td>左填充</td></tr><tr><td>rpad(str,substr,len)</td><td>右填充</td></tr><tr><td>strcmp(str1,str2)</td><td>比较两个字符的大小</td></tr><tr><td>instr(str,substr)</td><td>获取 substr 在 str 中的第一次出现的索引</td></tr></tbody></table><p><strong>示例：</strong></p><ol><li>CONCAT 拼接字符</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;hello&#x27;</span>, first_name,last_name) 备注</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ol start="2"><li>LENGTH 获取字节长度</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LENGTH(<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>CHAR_LENGTH 获取字符个数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;hell,xiaoming&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>SUBSTRING 截取子串</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;hellowoorld&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;hellowoorld&#x27;</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><ol start="5"><li>INSTR 获取字符第一次出现的索引</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;三打白骨精aaa白骨精bb白骨精&#x27;</span>,<span class="string">&#x27;白骨精&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;三打白骨精aaa白骨精bb白骨精&#x27;</span>,<span class="string">&#x27;白骨精&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="6"><li>TRIM 去前后指定的字符，默认是去空格</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27;  xiaoming  &#x27;</span>) <span class="keyword">AS</span> a;</span><br></pre></td></tr></table></figure><ol start="7"><li>LPAD/RPAD 左填充/右填充</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LPAD(<span class="string">&#x27;小明&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="8"><li><p>UPPER/LOWER 变大写/变小写</p><p>案例：查询员工表的姓名，要求格式：姓首字符大写，其他字符小写，名所有字符大写，且姓和名之间用_分割，最后起别名“OUTPUT”</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="built_in">UPPER</span>(SUBSTR(first_name,<span class="number">1</span>,<span class="number">1</span>)),<span class="built_in">LOWER</span>(SUBSTR(first_name,<span class="number">2</span>)),<span class="string">&#x27;_&#x27;</span>,<span class="built_in">UPPER</span>(last_name)) <span class="keyword">AS</span> <span class="string">&#x27;OUTPUT&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ol start="9"><li>STRCMP 比较两个字符大小</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> STRCMP(<span class="string">&#x27;aec&#x27;</span>,<span class="string">&#x27;aec&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> STRCMP(<span class="string">&#x27;adc&#x27;</span>,<span class="string">&#x27;cfg&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="10"><li>LEFT/RIGHT 截取子串</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">&#x27;鸠摩智&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="string">&#x27;鸠摩智&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="二、数字函数"><a href="#二、数字函数" class="headerlink" title="二、数字函数"></a>二、数字函数</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>ceil(x)</td><td>向上取整</td></tr><tr><td>floor(X)</td><td>向下取整</td></tr><tr><td>round(x,d)</td><td>四舍五入</td></tr><tr><td>mod(x,y)</td><td>取模/取余</td></tr><tr><td>truncate(x,d)</td><td>截取，保留小数点后 d 位</td></tr><tr><td>abs(x)</td><td>求绝对值</td></tr></tbody></table><p><strong>示例：</strong></p><ol><li>ABS 绝对值</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-2.4</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>CEIL 向上取整 返回&gt;=该参数的最小整数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEIL</span>(<span class="number">-1.77999</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEIL</span>(<span class="number">-1.09</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEIL</span>(<span class="number">0.09</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>FLOOR 向下取整，返回&lt;=该参数的最大整数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">-1.09</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">0.09</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>ROUND 四舍五入</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="number">4</span>,<span class="number">555</span>);</span><br><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="number">1.8712345</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><ol start="5"><li>TRUNCATE 截断</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(<span class="number">1.8776787</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><ol start="6"><li>MOD 取余</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MOD</span>(<span class="number">10</span>,<span class="number">3</span>); <span class="operator">/</span><span class="operator">/</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MOD</span>(<span class="number">-10</span>,<span class="number">3</span>); <span class="operator">/</span><span class="operator">/</span> <span class="number">-1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MOD</span>(<span class="number">10</span>,<span class="number">-3</span>); <span class="operator">/</span><span class="operator">/</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="三、日期函数"><a href="#三、日期函数" class="headerlink" title="三、日期函数"></a>三、日期函数</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>now()</td><td>获取当前日趋–时间</td></tr><tr><td>curtime()</td><td>只有时间</td></tr><tr><td>curdate()</td><td>只有日期</td></tr><tr><td>date_format(date,格式)</td><td>格式日期为字符</td></tr><tr><td>str_to_date(str，格式)</td><td>将字符转换为日期</td></tr><tr><td>datediff(date1,date2)</td><td>获取两个日期之间的天差数</td></tr><tr><td>year(date)</td><td>获取年</td></tr><tr><td>month(date)</td><td>获取月</td></tr></tbody></table><ol><li>NOW</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW();</span><br></pre></td></tr></table></figure><ol start="2"><li>CURDATE</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CURDATE();</span><br></pre></td></tr></table></figure><ol start="3"><li>DATEDIFF</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATEDIFF(<span class="string">&#x27;1998-7-16&#x27;</span>,<span class="string">&#x27;2019-7-13&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>DATE_FORMAT</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(<span class="string">&#x27;1998-7-19&#x27;</span>,<span class="string">&#x27;%Y年%m月%d日 %H小时%i分钟%s秒&#x27;</span>) 出生日期</span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(hiredate,<span class="string">&#x27;%Y年%M月%d日 %H小时%i分钟%s秒&#x27;</span>)入职日期</span><br></pre></td></tr></table></figure><ol start="5"><li>STR_TO_DATE 按指定格式解析字符串为日期类型</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> hiredate<span class="operator">&lt;</span>STR_TO_DATE(<span class="string">&#x27;3/15 1998&#x27;</span>,<span class="string">&#x27;%m/%d %Y&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="四、流程控制语句"><a href="#四、流程控制语句" class="headerlink" title="四、流程控制语句"></a>四、流程控制语句</h3><blockquote><p>① if(条件，表达式 1, 表达式 2)：如果条件成立，返回表达式 1，否则返回表达式 2</p><p>② case 表达式</p><p>when 值 1 then 结果 1</p><p>when 值 2 then 结果 2</p><p>….</p><p>else 结果 n</p><p>end</p><p>③ case</p><p>when 条件 1 then 结果 1</p><p>when 条件 2 then 结果 2</p><p>…</p><p>else 结果 n</p><p>end</p></blockquote><p><strong>示例：</strong></p><ol><li>IF 函数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IF(<span class="number">100</span><span class="operator">&gt;</span><span class="number">9</span>,<span class="string">&#x27;好&#x27;</span>,<span class="string">&#x27;坏&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>需求：如果有奖金，则显示最终奖金，如果没有，则显示 0</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IF(commission_pct <span class="keyword">IS</span> <span class="keyword">NULL</span>,<span class="number">0</span>,salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>commission_pct) 奖金</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ol start="3"><li>CASE 函数</li></ol><blockquote><p>案例：<br>部门编号是 30，工资显示为 2 倍<br>部门编号是 50，工资显示为 3 倍<br>部门编号是 60，工资显示为 4 倍<br>否则不变<br>显示 部门编号，新工资，旧工资</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id,salary,</span><br><span class="line"><span class="keyword">CASE</span> department_id</span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">30</span> <span class="keyword">THEN</span> salary<span class="operator">*</span><span class="number">2</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">50</span> <span class="keyword">THEN</span> salary<span class="operator">*</span><span class="number">3</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">60</span> <span class="keyword">THEN</span> salary<span class="operator">*</span><span class="number">4</span></span><br><span class="line"><span class="keyword">ELSE</span> salary</span><br><span class="line"><span class="keyword">END</span> newsalary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><blockquote><p>案例：如果工资&gt;20000,显示级别 A<br>工资&gt;15000,显示级别 B<br>工资&gt;10000,显示级别 C<br>否则，显示 D</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary,</span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">20000</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">15000</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">&#x27;等级&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br></pre></td></tr></table></figure><h2 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>sum</td><td>求和</td></tr><tr><td>avg</td><td>求平均数</td></tr><tr><td>max</td><td>求最大值</td></tr><tr><td>min</td><td>求最小值</td></tr><tr><td>count</td><td>计算非空字段值的个数</td></tr></tbody></table><p><strong>示例：</strong></p><ol><li>#案例 1 ：查询员工信息表中，所有员工的工资和、工资平均值、最低工资、最高工资、有工资的个数。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary),<span class="built_in">AVG</span>(salary),<span class="built_in">MIN</span>(salary),<span class="built_in">MAX</span>(salary),<span class="built_in">COUNT</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br></pre></td></tr></table></figure><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><h3 id="一、语法-3"><a href="#一、语法-3" class="headerlink" title="一、语法"></a>一、语法</h3><blockquote><p>select 分组函数，分组的字段</p><p>from 表名</p><p>where 分组前的筛选条件</p><p>grounp by 分组列表</p><p>having 分组后的筛选</p><p>order by 排序列表</p></blockquote><h3 id="二、特点-2"><a href="#二、特点-2" class="headerlink" title="二、特点"></a>二、特点</h3><p>​ ① 分组列表可以是单个字段、多个字段</p><p>​ ② 筛选条件分为两类</p><table><thead><tr><th></th><th>筛选的基表</th><th>使用的关键字</th><th>位置</th></tr></thead><tbody><tr><td>分组前筛选</td><td>原始表</td><td>where</td><td>group by 前面</td></tr><tr><td>分组后筛选</td><td>分组后的结果集</td><td>having</td><td>group by 后面</td></tr></tbody></table><h3 id="三、执行顺序"><a href="#三、执行顺序" class="headerlink" title="三、执行顺序"></a>三、执行顺序</h3><p>​ ① from 子句</p><p>​ ② where 子句</p><p>​ ③ group by 子句</p><p>​ ④ having 子句</p><p>​ ⑤ select 子句</p><p>​ ⑥order by 子句</p><p><strong>示例：</strong></p><p>​ 1. 查询每个工种的员工平均工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br></pre></td></tr></table></figure><ol start="2"><li>查询哪个部门的员工个数&gt;5</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) 员工个数,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>每个工种有奖金的员工的最高工资&gt;12000 的工种编号和最高工资</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> job_id,<span class="built_in">MAX</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary)<span class="operator">&gt;</span><span class="number">12000</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>查询没有奖金的员工的最高工资&gt;6000 的工种编号和最高工资,按最高工资升序</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) 最高工资, job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary)<span class="operator">&gt;</span><span class="number">6000</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">MAX</span>(salary) <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><ol start="5"><li>查询每个工种每个部门的最低工资,并按最低工资降序 (工种和部门都一样，才是一组)</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary) 最低工资,job_id,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id,department_id</span><br></pre></td></tr></table></figure><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><p>说明：当查询中涉及到了多个字段，则需要通过多表连接</p><blockquote><p>笛卡尔乘积：</p><p>​ 出现原因：没有有效的连接条件</p><p>​ 解决办法：添加有效的连接条件</p></blockquote><h3 id="一、SQL92-语法"><a href="#一、SQL92-语法" class="headerlink" title="一、SQL92 语法"></a>一、SQL92 语法</h3><p><strong>语法：</strong></p><blockquote><p>select 查询列表 ①</p><p>from 表 1 别名， 表 2 别名 ②</p><p>where 连接条件 ③</p><p>and 筛选条件 ④</p><p>group by 分组列表 ⑤</p><p>having 分组后的筛选 ⑥</p><p>order by 排序列表 ⑦</p></blockquote><p><strong>执行顺序：</strong>② ③ ④ ⑤ ⑥ ① ⑦</p><h4 id="1、等值连接"><a href="#1、等值连接" class="headerlink" title="1、等值连接"></a>1、等值连接</h4><p><strong>语法：</strong></p><blockquote><p>select 查询列表</p><p>from 表 1 别名， 表 2 别名</p><p>where 表 1.key= 表 2.key</p><p>【and 筛选条件】</p><p>【group by 分组字段】</p><p>【having 分组后的筛选】</p><p>【order by 排序字段】</p></blockquote><p><strong>代码示例：</strong></p><ol><li>等值连接：查询女神名和对应的男神名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NAME ,boyName</span><br><span class="line"><span class="keyword">FROM</span> boys,beauty</span><br><span class="line"><span class="keyword">WHERE</span> beauty.boyfriend_id <span class="operator">=</span> boys.id;</span><br></pre></td></tr></table></figure><ol start="2"><li>查询有奖金的员工名、部门名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name , department_name,commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees e , departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">AND</span> e.`commission_pct` <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_name, d.`manager_id`,<span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> departments d,employees e</span><br><span class="line"><span class="keyword">WHERE</span> d.`department_id` <span class="operator">=</span> e.`department_id`</span><br><span class="line"><span class="keyword">AND</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_name,d.`department_id`;</span><br></pre></td></tr></table></figure><ol start="4"><li>查询每个工种的工种名和员工的个数，并且按员工个数降序</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> job_title , <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> employees e, jobs j</span><br><span class="line"><span class="keyword">WHERE</span> e.`job_id`<span class="operator">=</span>j.`job_id`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_title</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><ol start="5"><li>三表连接: 查询员工名、部门名和所在的城市</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,department_name,city</span><br><span class="line"><span class="keyword">FROM</span> employees e,departments d,locations l</span><br><span class="line"><span class="keyword">WHERE</span> e.`department_id`<span class="operator">=</span>d.`department_id`</span><br><span class="line"><span class="keyword">AND</span> d.`location_id`<span class="operator">=</span>l.`location_id`</span><br><span class="line"><span class="keyword">AND</span> city <span class="keyword">LIKE</span> <span class="string">&#x27;s%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_name <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h4 id="2、非等值连接"><a href="#2、非等值连接" class="headerlink" title="2、非等值连接"></a>2、非等值连接</h4><p><strong>语法：</strong></p><blockquote><p>select 查询列表</p><p>from 表 1 别名,表 2 别名</p><p>where 非等值的连接条件</p><p>【and 筛选条件】</p><p>【group by 分组字段】</p><p>【having 分组后的筛选】</p><p>【order by 排序字段】</p></blockquote><h4 id="3、自连接"><a href="#3、自连接" class="headerlink" title="3、自连接"></a>3、自连接</h4><p><strong>语法：</strong></p><blockquote><p>select 查询列表</p><p>from 表 别名 1,表 别名 2</p><p>where 等值的连接条件</p><p>【and 筛选条件】</p><p>【group by 分组字段】</p><p>【having 分组后的筛选】</p><p>【order by 排序字段】</p></blockquote><p><strong>代码示例：</strong></p><p>自连接: 查询 员工名和上级的名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id,e.last_name,m.employee_id,m.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e,employees m</span><br><span class="line"><span class="keyword">WHERE</span> e.`manager_id`<span class="operator">=</span>m.`employee_id`;</span><br></pre></td></tr></table></figure><h3 id="二、SQL99-语法"><a href="#二、SQL99-语法" class="headerlink" title="二、SQL99 语法"></a>二、SQL99 语法</h3><h4 id="1、内连接"><a href="#1、内连接" class="headerlink" title="1、内连接"></a>1、内连接</h4><p><strong>语法：</strong></p><blockquote><p>select 查询列表 ①</p><p>from 表 1 别名 ②</p><p>【inner】 join 表 2 on 连接条件 ③</p><p>【inner】 join 表 3 on 连接条件 ③</p><p>where 筛选条件 ④</p><p>group by 分组列表 ⑤</p><p>having 分组后的筛选 ⑥</p><p>order by 排序列表 ⑦</p></blockquote><p><strong>执行顺序：</strong> ② ③ ④ ⑤ ⑥ ① ⑦</p><p><strong>特点：</strong></p><p>​ ① 表的顺序可以调换</p><p>​ ② 内连接的结果=多表的交集</p><p>​ ③ n 表连接至少需要 n-1 个连接条件</p><p><strong>分类：</strong></p><ol><li><p>等值连接</p><ol start="2"><li>非等值连接</li><li>自连接</li></ol></li></ol><p><strong>代码示例:</strong></p><ol><li>查询员工名和部门名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">JOIN</span> employees e</span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.department_id;</span><br></pre></td></tr></table></figure><ol start="2"><li>添加筛选条件: 查询部门编号&gt;100 的部门名和所在的城市名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_name,city</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">JOIN</span> locations l</span><br><span class="line"><span class="keyword">ON</span> d.`location_id` <span class="operator">=</span> l.`location_id`</span><br><span class="line"><span class="keyword">WHERE</span> d.`department_id`<span class="operator">&gt;</span><span class="number">100</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>添加分组+筛选+排序: 查询部门中员工个数&gt;10 的部门名，并按员工个数降序</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_name,<span class="built_in">COUNT</span>(<span class="operator">*</span>) 员工个数</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> d.`department_id`</span><br><span class="line"><span class="keyword">HAVING</span> 员工个数<span class="operator">&gt;</span><span class="number">10</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 员工个数 <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>非等值连接: 查询部门编号在 10-90 之间的员工的工资级别，并按级别进行分组</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) 个数,grade</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">JOIN</span> sal_grade g</span><br><span class="line"><span class="keyword">ON</span> e.`salary` <span class="keyword">BETWEEN</span> g.`min_salary`<span class="keyword">AND</span> g.`max_salary`</span><br><span class="line"><span class="keyword">WHERE</span> e.`department_id` <span class="keyword">BETWEEN</span> <span class="number">10</span> <span class="keyword">AND</span> <span class="number">90</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> g.`grade`</span><br></pre></td></tr></table></figure><ol start="5"><li>自连接: 查询员工名和对应的领导名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.`last_name`, m.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">JOIN</span> employees  m</span><br><span class="line"><span class="keyword">ON</span> e.`manager_id`<span class="operator">=</span>m.employee_id;</span><br></pre></td></tr></table></figure><h4 id="2、外连接"><a href="#2、外连接" class="headerlink" title="2、外连接"></a>2、外连接</h4><p><strong>语法：</strong></p><blockquote><p>select 查询列表</p><p>from 表 1 别名</p><p>left | right| full 【outer】 join 表 2 别名 on 连接条件</p><p>where 筛选条件</p><p>group by 分组后的筛选</p><p>order by 排序列表</p></blockquote><p><strong>特点：</strong></p><p>​ ① 查询的结果 = 主表的所有的行，如果从表和它比配的将显示匹配行，如果从表没有匹配的则显示 null</p><p>​ ② left join 左边的就是主表，right join 右边的就是主表， full jion 两边都是主表</p><p>​ ③ 一般用于查询除了交集部分的剩余的不匹配的行</p><p><strong>代码示例：</strong></p><ol><li>查询所有女神记录，以及对应的男神名,如果没有对应的男神，则显示为 null。</li></ol><p>左连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> b.<span class="operator">*</span>,bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> beauty b</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> boys bo <span class="keyword">ON</span> b.`boyfriend_id` <span class="operator">=</span> bo.`id`;</span><br></pre></td></tr></table></figure><p>右连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> b.<span class="operator">*</span>,bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> boys bo</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> beauty b <span class="keyword">ON</span> b.`boyfriend_id` <span class="operator">=</span> bo.`id`;</span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="一、含义"><a href="#一、含义" class="headerlink" title="一、含义"></a>一、含义</h3><ul><li>嵌套在其他语句内部的 select 语句称为子查询或内查询</li><li>外面的语句可以是 insert、update、select 等，一般 select 作为外面的语句较多</li><li>外面如果为 select 语句，则此语句称为外查询或主查询</li></ul><h3 id="二、分类"><a href="#二、分类" class="headerlink" title="二、分类"></a>二、分类</h3><p><strong>按出现位置</strong></p><blockquote><p>select 后面</p><p>​ 仅仅支持标量子查询</p><p>from 后面</p><p>​ 表子查询</p><p>where 或 having 后面</p><p>​ 标量子查询</p><p>​ 列子查询</p><p>​ 行子查询</p><p>​ 表子查询</p></blockquote><p><strong>按结果集的行列</strong></p><blockquote><p>标量子查询(单行子查询)：结果集为一行一列</p><p>列子查询(多行子查询):结果集为多行一列</p><p>行子查询：结果集为多行多列</p><p>表子查询：结果集为多行多列</p></blockquote><p><strong>代码示例：</strong></p><ol><li>查询最低工资大于 50 号部门最低工资的部门 id 和其最低工资</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary) <span class="operator">&gt;</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">50</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><ol start="2"><li>返回 job_id 与 141 号员工相同，salary 比 143 号员工多的员工姓名，job_id 和工资</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span>(</span><br><span class="line">      <span class="keyword">SELECT</span> job_id</span><br><span class="line">      <span class="keyword">FROM</span> employees</span><br><span class="line">      <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">141</span></span><br><span class="line">) <span class="keyword">AND</span> salary<span class="operator">&gt;</span>(</span><br><span class="line"><span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">143</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="3"><li>多行子查询:返回 location_id 是 1400 或 1700 的部门中的所有员工姓名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span>(</span><br><span class="line">    # <span class="keyword">distinct</span> 去重</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">distinct</span> department_id</span><br><span class="line">    <span class="keyword">FROM</span> departments</span><br><span class="line">    <span class="keyword">WHERE</span> location_id <span class="keyword">IN</span>(<span class="number">1400</span>,<span class="number">1700</span>)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><ol start="4"><li>放在 select 后面: 查询部门编号是 50 的员工个数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">50</span></span><br><span class="line">) 个数;</span><br></pre></td></tr></table></figure><ol start="5"><li>放在 from 后面: 查询每个部门的平均工资的工资级别</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dep_ag.department_id,dep_ag.ag,g.grade</span><br><span class="line"><span class="keyword">FROM</span> sal_grade g</span><br><span class="line"><span class="keyword">JOIN</span> (</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) ag,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"></span><br><span class="line">) dep_ag <span class="keyword">ON</span> dep_ag.ag <span class="keyword">BETWEEN</span> g.min_salary <span class="keyword">AND</span> g.max_salary;</span><br></pre></td></tr></table></figure><ol start="6"><li>放在 exists 后面</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXISTS</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name<span class="operator">=</span><span class="string">&#x27;Abel&#x27;</span></span><br><span class="line">) 有无Able;</span><br></pre></td></tr></table></figure><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><h3 id="一、应用场景"><a href="#一、应用场景" class="headerlink" title="一、应用场景"></a>一、应用场景</h3><blockquote><p>当要查询的条目数太多，一页显示不全</p></blockquote><h3 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h3><blockquote><p>select 查询列表</p><p>from 表</p><p>limit【offset】size</p></blockquote><p><strong>注意</strong>：</p><ul><li>offset 代表的是起始条目的索引，默认开始从 0 开始</li><li>size 代表的是条目数</li></ul><p><strong>公式：</strong></p><blockquote><p>假如要显示的页数为 page,每一页的条目数为 size</p><p>select 查询列表</p><p>from 表</p><p>limit(page - 1)* size, size</p></blockquote><p><strong>代码示例：</strong></p><ol><li>查询员工信息表的前 5 条</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees LIMIT <span class="number">0</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>查询年薪最高的前 10 名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary,salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>)) 年薪</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 年薪 <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure><ol start="3"><li>查询有奖金的，且工资较高的第 11 名到第 20 名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">10</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><h3 id="一、含义-1"><a href="#一、含义-1" class="headerlink" title="一、含义"></a>一、含义</h3><p>​ union: 合并、联合，将多次查询的结果合并成为一个点结果</p><h3 id="二、语法-1"><a href="#二、语法-1" class="headerlink" title="二、语法"></a>二、语法</h3><blockquote><p>查询语句 1</p><p>​ union【all】</p><p>查询语句 2</p><p>​ union【all】</p><p>…..</p></blockquote><h3 id="三、意义"><a href="#三、意义" class="headerlink" title="三、意义"></a>三、意义</h3><ol><li>将一条比较复杂的查询语句拆分成为多条语句</li><li>适用于查询多个表的时候，查询的列表是一致</li></ol><h3 id="四、特点"><a href="#四、特点" class="headerlink" title="四、特点"></a>四、特点</h3><ol><li>要求多查询列数必须一致</li><li>要求多条查询语句的查询的各列类型、顺序最好一致</li><li>union 去重，union all 包含重复项</li></ol><p><strong>代码示例：</strong></p><ol><li>查询所有国家的年龄&gt;20 岁的用户信息</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> usa <span class="keyword">WHERE</span> uage <span class="operator">&gt;</span> <span class="number">20</span> <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> chinese <span class="keyword">WHERE</span> age <span class="operator">&gt;</span><span class="number">20</span></span><br></pre></td></tr></table></figure><ol start="2"><li>查询所有国家的用户姓名和年龄</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uname,uage <span class="keyword">FROM</span> usa</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> age,<span class="string">&#x27;name&#x27;</span> <span class="keyword">FROM</span> chinese</span><br></pre></td></tr></table></figure><ol start="3"><li>union 自动去重/union all 可以支持重复项</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>,<span class="string">&#x27;小明&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>,<span class="string">&#x27;小明&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span>  <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>,<span class="string">&#x27;小明&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span>  <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>,<span class="string">&#x27;小明&#x27;</span> ;</span><br></pre></td></tr></table></figure><h1 id="DDL-语言"><a href="#DDL-语言" class="headerlink" title="DDL 语言"></a>DDL 语言</h1><h2 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h2><blockquote><p>① 创建库</p><p>create database 【if not exists】库名 【characster set 字符集名】</p><p>② 修改表</p><p>alter database 库名 character set 字符集名；</p><p>③ 删除表</p><p>drop database 【if exists】 库名；</p></blockquote><p><strong>代码示例：</strong></p><ol><li>创建数据库</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE stuDB;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> stuDB;</span><br></pre></td></tr></table></figure><ol start="2"><li>删除数据库</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE stuDB;</span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> stuDB;</span><br></pre></td></tr></table></figure><h2 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h2><blockquote><p>① 创建表</p><p>create table【if not exists】表名（</p><p>​ 字段名 字段类型【约束】，</p><p>​ 字段名 字段类型【约束】，</p><p>​ 字段名 字段类型【约束】，</p><p>​ ……</p><p>）</p><p>② 修改表</p><p>1.添加列</p><p>alter table 表名 add conlumu 列名 类型【firat|after】</p><p>2.修改列的类型或约束</p><p>alter table 表名 modify column 列名 新类型【新约束】</p><p>3.修改列名</p><p>alter table 表名 change column 旧列名 新列名 类型</p><p>4.删除列</p><p>alter table 表名 drop column 列名</p><p>5.修改表名</p><p>alter table 表名 raname【to】 新表名</p><p>③ 删除表</p><p>drop table【if exists】 表名</p><p>④ 复制表</p><p>① 复制表的结构</p><p>creato table 表名 like 旧表</p><p>② 复制表的结构+数据</p><p>create table 表名 select 查询列表 from 旧表【where 筛选】</p></blockquote><p><strong>代码示例：</strong></p><ol><li>没有添加约束</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> stuinfo(</span><br><span class="line">stuid <span class="type">INT</span> ,</span><br><span class="line">stuname <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">stugender <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">borndate DATETIME</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="2"><li>添加约束</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> stuinfo(</span><br><span class="line">stuid <span class="type">INT</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>,#添加了主键约束</span><br><span class="line">stuname <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,#添加了唯一约束<span class="operator">+</span>非空</span><br><span class="line">stugender <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span>,#添加了默认约束</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">age <span class="type">INT</span> <span class="keyword">CHECK</span>( age <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">100</span>),#添加了检查约束，mysql不支持</span><br><span class="line">majorid <span class="type">INT</span>,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_stuinfo_major <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (majorid) <span class="keyword">REFERENCES</span> major(id)#添加了外键约束</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="3"><li>修改表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>修改表名</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo RENAME <span class="keyword">TO</span> students;</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>添加字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> borndate <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> students;</span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>修改字段名</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students CHANGE <span class="keyword">COLUMN</span> borndate birthday DATETIME <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">4.</span>修改字段类型</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students MODIFY <span class="keyword">COLUMN</span> birthday <span class="type">TIMESTAMP</span> ;</span><br><span class="line"></span><br><span class="line">#<span class="number">5.</span>删除字段</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> birthday;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> students;</span><br></pre></td></tr></table></figure><ol start="4"><li>删除表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> students;</span><br></pre></td></tr></table></figure><ol start="5"><li>复制表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#仅仅复制表的结构</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> newTable2 <span class="keyword">LIKE</span> major;</span><br><span class="line"></span><br><span class="line">#复制表的结构<span class="operator">+</span>数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> newTable3 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> girls.`beauty`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例：复制employees表中的last_name,department_id,salary字段到新表 emp表，但不复制数据</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp</span><br><span class="line"><span class="keyword">SELECT</span> lat_name,department_id,salary</span><br><span class="line"><span class="keyword">FROM</span> myemployees.`employees`</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="一、数值型"><a href="#一、数值型" class="headerlink" title="一、数值型"></a>一、数值型</h3><p><strong>1、整型</strong></p><blockquote><p>tinyint 、 sallint、mediumint、int/integer、bigint</p><p>1 2 3 4 8</p></blockquote><p>特点：</p><p>① 都可以设置无符号和有符号，默认通过 unsigned 设置无符号</p><p>② 如果超出范围，会报 out or range 异常，插入临界值</p><p>③ 长度可以不指定，默认会有一个长度，长度代表显示的最大宽度，如果不够则左边用 0 填充，但需要搭配 zerofill，并且默认变为无符号整型。</p><p><strong>2、浮点型</strong></p><blockquote><p>定点数：decimal(M,D)</p><p>浮点数：</p><p>​ float(M,D) 4</p><p>​ double(M,D) 8</p></blockquote><p><strong>特点：</strong></p><p>① M 代表整数+ 小数部位的个数，D 代表小数整位</p><p>② 如果超出范围，则报 out or range 异常，并且插入临界值</p><p>③ M 和 D 都可以省略，但对于定点数，M 默认为 10， D 默认为 0</p><p>④ 如果精度要较高，则优先考虑使用定点数</p><h3 id="二、字符型"><a href="#二、字符型" class="headerlink" title="二、字符型"></a>二、字符型</h3><blockquote><p>char 、varchar、binary、enum、set、text、blob</p><p>char: 固定长度的字符，写法为 char(M),最大长度不能超过 M，其中 M 可以省略，默认为 1</p><p>varchar: 可变长度的字符，写法为 varchar(M),最大长度不能 M，不可省略 M</p></blockquote><h3 id="三、日期型"><a href="#三、日期型" class="headerlink" title="三、日期型"></a>三、日期型</h3><blockquote><p>year 年</p><p>date 日期</p><p>time 时间</p><p>datetime 日期时间 8</p><p>timestamp 日期+时间 4 比较容易受时区、语法模式、版本的影响，更能反映当前时区的真实时间</p></blockquote><h2 id="常见的约束"><a href="#常见的约束" class="headerlink" title="常见的约束"></a>常见的约束</h2><h3 id="一、常见的约束"><a href="#一、常见的约束" class="headerlink" title="一、常见的约束"></a>一、常见的约束</h3><table><thead><tr><th>约束</th><th>描述</th></tr></thead><tbody><tr><td>NOT NUll</td><td>非空，该字段的值必填</td></tr><tr><td>UnIQUE</td><td>唯一，该字段的值不可重复</td></tr><tr><td>DEFAULT</td><td>默认，该字段的值不用手动插入有默认值</td></tr><tr><td>CHECK</td><td>检查，mysql 不支持</td></tr><tr><td>PRIMARY KEY</td><td>主键，该字段的值不可重复并且非空 unique+not null</td></tr><tr><td>FPREIGN KEY</td><td>外键，该字段的值引用了另外的标的字段</td></tr></tbody></table><p><strong>主键和唯一</strong></p><p>1.区别：</p><p>​ ① 一个表至多有一个主键，但可以有多个唯一</p><p>​ ② 主键不允许为空，唯一可以为空</p><p>2.相同点：</p><p>​ 都具有唯一性</p><p>​ 都支持组合键，但不推荐</p><p><strong>外键：</strong></p><p>① 用于限制两个表的关系，从表的字段值引用了主表的某个字段值</p><p>② 外键列和主表的被引用列要求类型一致，意义一样，名称无要求</p><p>③ 主表的被引用列要求是一个 key(一般就是主键)</p><p>④ 插入数据，先插入主表</p><p>​ 删除数据，先删除从表</p><p>可以通过以下两种方式来删除主表的记录</p><p><strong>代码示例</strong>：</p><p>​ 方式一：级联删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_stu_major <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(majorid) <span class="keyword">REFERENCES</span> major(id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE;</span><br></pre></td></tr></table></figure><p>​ 方式二：级联置空</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_stu_major <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(majorid) <span class="keyword">REFERENCES</span> major(id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="二、创建表的添加约束"><a href="#二、创建表的添加约束" class="headerlink" title="二、创建表的添加约束"></a>二、创建表的添加约束</h3><blockquote><p>create table 表名（</p><p>​ 字段名 字段类型 not null ,#非空</p><p>​ 字段名 字段类型 primary key,#主键</p><p>​ 字段名 字段类型 unique,#唯一</p><p>​ 字段名 字段类型 default 值， #默认</p><p>​ constraint 约束名 foreign key(字段名) references 主表(被引用列 1)</p><p>）</p></blockquote><p><strong>注意：</strong></p><table><thead><tr><th></th><th>支持类型</th><th>可以起约束名</th></tr></thead><tbody><tr><td>列级约束</td><td>除了外键</td><td>不可以</td></tr><tr><td>表级约束</td><td>除了非空和默认</td><td>可以，但对主键无效</td></tr></tbody></table><p>列级约束可以在一个字段上追加多个，中间用空格隔开，没有顺序要求</p><h3 id="三、修改表时添加或删除约束"><a href="#三、修改表时添加或删除约束" class="headerlink" title="三、修改表时添加或删除约束"></a>三、修改表时添加或删除约束</h3><blockquote><p>1.非空</p><p>​ 添加非空</p><p>​ alter table 表名 modify column 字段名 字段类型 not null;</p><p>​ 删除非空</p><p>​ alter table 表名 modify column 字段名 字段类型;</p><p>2.默认</p><p>​ 添加默认</p><p>​ alter table 表名 modify columu 字段名 字段类型 default 值;</p><p>​ 删除默认</p><p>​ alter table 表名 modify column 字段名 字段类型;</p><p>3.主键</p><p>​ 添加主键</p><p>​ alter table 表名 add【 constraint 约束名】 primary key(字段名)；</p><p>​ 删除主键</p><p>​ alter table 表名 add drop primary key;</p><p>4.唯一</p><p>​ 添加唯一</p><p>​ alter table 表名 add【constraint 约束名】 unique(字段名);</p><p>​ 删除唯一</p><p>​ alter table 表名 drop index 索引名;</p><p>5.外键</p><p>​ 添加外键</p><p>​ alter table 表名 add【constraint 约束名】 foreign key(字段名) references 主表(被引用列)</p><p>​ 删除外键</p><p>​ alter table 表名 drop foreign key 约束名;</p></blockquote><h3 id="四、自增长列"><a href="#四、自增长列" class="headerlink" title="四、自增长列"></a>四、自增长列</h3><blockquote><p>特定：</p><p>​ 1.不用手动插入值，可以自动提供序列值，默认从 1 开始，步长为 1</p><p>​ auto_increment_increment</p><p>​ 如果要更改起始值：手动插入值</p><p>​ 如果要更改步长：更改系统变量</p><p>​ set auto_increment_increment=值</p><p>​ 2.一个表至多有一个自增长列</p><p>​ 3.自增长列只能支持数值型</p><p>​ 4.自增长列必须为一个 key</p><p>创建表时设置自增长列</p><p>​ create table 表(</p><p>​ 字段名 字段类型 约束 auto_increment</p><p>​ )</p><p>修改表时设置自增长列</p><p>​ alter table 表 modify column colum 字段名 字段类型 约束 auto_increment</p><p>删除自增长列</p><p>​ alter table 表 modify column 字段名 字段类型 约束</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200809171329.png" alt="image-20200809171229520"></p><h1 id="DML-语言"><a href="#DML-语言" class="headerlink" title="DML 语言"></a>DML 语言</h1><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><h3 id="1、方式一"><a href="#1、方式一" class="headerlink" title="1、方式一"></a>1、方式一</h3><blockquote><p>语法：</p><p>insert into 表名(字段名,…) values(值,…);</p><p>特点：</p><p>​ 1、要求值的类型和字段的类型要一致或兼容</p><p>​ 2、字段的个数和顺序不一定与原始表中的字段个数和顺序一致 但必须保证值和字段一一对应</p><p>​ 3、假如表中有可以为 null 的字段，注意可以通过以下两种方式插入 null 值</p><p>​ ① 字段和值都省略 ② 字段写上，值使用 null</p><p>​ 4、字段和值的个数必须一致</p><p>​ 5、字段名可以省略，默认所有列</p></blockquote><h3 id="2、方式二"><a href="#2、方式二" class="headerlink" title="2、方式二"></a>2、方式二</h3><blockquote><p>语法：</p><p>insert into 表名 set 字段=值,字段=值,…;</p><p>两种方式 的区别：</p><p>​ 1.方式一支持一次插入多行，语法如下： insert into 表名【(字段名,..)】 values(值，..),(值，…),…;</p><p>​ 2.方式一支持子查询，语法如下： insert into 表名 查询语句;</p></blockquote><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><h3 id="1、修改单表的记录"><a href="#1、修改单表的记录" class="headerlink" title="1、修改单表的记录"></a>1、修改单表的记录</h3><blockquote><p>语法：update 表名 set 字段=值，字段=值【where 筛选条件】</p></blockquote><h3 id="2、修改多表的记录【补充】"><a href="#2、修改多表的记录【补充】" class="headerlink" title="2、修改多表的记录【补充】"></a>2、修改多表的记录【补充】</h3><blockquote><p>语法：</p><p>update 表 1 别名</p><p>left|right|inner join 表 2 别名 on</p><p>连接条件 set 字段=值，字段=值</p><p>【where 筛选条件】</p></blockquote><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="1、使用-delete"><a href="#1、使用-delete" class="headerlink" title="1、使用 delete"></a>1、使用 delete</h3><blockquote><p>删除单表的记录</p><p>​ 语法：delete 别名 1，别名 2 from 表 1 别名</p><p>​ inner| left | right join 表 2 别名 on 连接条件</p><p>​ 【where 筛选条件】</p></blockquote><h3 id="2、-使用-truncate"><a href="#2、-使用-truncate" class="headerlink" title="2、 使用 truncate"></a>2、 使用 truncate</h3><blockquote><p>语法：truncate table 表名</p></blockquote><h3 id="3、两种方式的区别"><a href="#3、两种方式的区别" class="headerlink" title="3、两种方式的区别"></a>3、两种方式的区别</h3><blockquote><p>#【面试题】delete 和 truncate 的区别</p><p>1.delete 可以添加 WHERE 条件</p><p>​ TRUNCATE 不能添加 WHERE 条件，一次性清除所有数据</p><p>2.truncate 的效率较高</p><p>3.如果删除带自增长列的表，</p><p>​ 使用 DELETE 删除后，重新插入数据，记录从断点处开始</p><p>​ 使用 TRUNCATE 删除后，重新插入数据，记录从 1 开始</p><p>​ SELECT * FROM gradeinfo;</p><p>​ TRUNCATE TABLE gradeinfo;</p><p>​ INSERT INTO gradeinfo(gradename)VALUES(‘一年级’),(‘2 年级’),(‘3 年级’);</p><p>4.delete 删除数据，会返回受影响的行数</p><p>​ TRUNCATE 删除数据，不返回受影响的行数</p><p>5.delete 删除数据，可以支持事务回滚</p><p>​ TRUNCATE 删除数据，不支持事务回滚</p></blockquote><p><strong>代码示例：</strong></p><ol><li>添加</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stuinfo <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;吴倩&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;wuqian@qq.com&#x27;</span>,<span class="string">&#x27;2001.1.2&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>修改(修改年龄&lt;20 的专业编号为 3 号，且邮箱更改为 <a href="mailto:&#x78;&#120;&#64;&#113;&#x71;&#46;&#99;&#111;&#109;">&#x78;&#120;&#64;&#113;&#x71;&#46;&#99;&#111;&#109;</a>)</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> stuinfo <span class="keyword">SET</span> majorid <span class="operator">=</span> <span class="number">3</span>,email <span class="operator">=</span> <span class="string">&#x27;xx@qq.com&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> age<span class="operator">&lt;</span><span class="number">20</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>删除</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#案例<span class="number">1</span>：删除姓李所有信息</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> stuinfo</span><br><span class="line"><span class="keyword">WHERE</span> stuname <span class="keyword">LIKE</span> <span class="string">&#x27;李%&#x27;</span>；</span><br><span class="line">#案例<span class="number">2</span>：删除表中所有数据</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> stuinfo;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="1、含义"><a href="#1、含义" class="headerlink" title="1、含义"></a>1、含义</h3><blockquote><p>事务:一条或多条 sql 语句组成一个执行单位，一组 sql 语句要么都执行要么不执行</p></blockquote><h3 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h3><blockquote><p>A 原子性：一个事务是不可再分割的整体，要么都执行要么都不执行</p><p>C 一致性：一个事务可以使数据从一个状态切换到另一个一致的状态</p><p>I 隔离性： 一个事务不受其他事务的干扰，多个事务相互隔离的</p><p>D 持久性：一个事务一旦提交了，则永久的持久化到本地</p></blockquote><h3 id="3、事务的使用步骤"><a href="#3、事务的使用步骤" class="headerlink" title="3、事务的使用步骤"></a>3、事务的使用步骤</h3><blockquote><p>隐式（自动）事务：没有明显的开始的结束，本身就是一条事务可以自动提交，比如 insert、update、delete 显式事务：具有明显的开启和结束。</p></blockquote><p><strong>使用显式事务</strong>：</p><p>① 开启事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">start</span> transaction：#可以省略</span><br></pre></td></tr></table></figure><p><strong>设置回滚点</strong>：</p><blockquote><p>提交：commit:</p><p>回滚：rollback;</p><p>回滚到指定的地方；rollback to 回滚点名：</p></blockquote><h3 id="4、并发事务"><a href="#4、并发事务" class="headerlink" title="4、并发事务"></a>4、并发事务</h3><blockquote><p>脏读：一个事务读取其他事务还没有提交的数据，读到的是其他事务“更新”的数据</p><p>不可重复读：一个事务多次读取，结果不一样</p><p>幻读：一个事务读取了其他事务还没有提交的数据，只是读到的是 其他事务”插入”的数据</p></blockquote><p><strong>隔离级别</strong>:</p><table><thead><tr><th></th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>read uncommitted:读未提交</td><td>×</td><td>×</td><td>×</td></tr><tr><td>read committed:读已提交</td><td>√</td><td>×</td><td>×</td></tr><tr><td>repeatable read：可重复读</td><td>√</td><td>√</td><td>×</td></tr><tr><td>serializable：串行化</td><td>√</td><td>√</td><td>√</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java项目：员工管理系统</title>
      <link href="posts/2909614374/"/>
      <url>posts/2909614374/</url>
      
        <content type="html"><![CDATA[<blockquote><p>项目的具体源码，已经打包放在博客末尾</p></blockquote><h2 id="Java-项目：员工管理系统"><a href="#Java-项目：员工管理系统" class="headerlink" title="Java 项目：员工管理系统"></a>Java 项目：员工管理系统</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境:"></a>搭建环境:</h3><p>​ Idea 集成开发工具</p><h3 id="技术点："><a href="#技术点：" class="headerlink" title="技术点："></a>技术点：</h3><ul><li>数组</li><li>面向对象<ul><li>继承</li><li>多态</li><li>接口</li></ul></li><li>异常的处理</li></ul><h3 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200803183235.png" alt="image-20200803183234647"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200803183349.png" alt="image-20200803183348955"></p><h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeaView</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> NameLIstService lIstService = <span class="keyword">new</span> NameLIstService();</span><br><span class="line">   <span class="keyword">private</span> TeamService teamService = <span class="keyword">new</span> TeamService();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterMainMenu</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">boolean</span> loopFlag = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">char</span> key = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>(loopFlag)&#123;</span><br><span class="line">           <span class="keyword">if</span>(! (key == <span class="string">&#x27;1&#x27;</span>))&#123;</span><br><span class="line">                listAllEmployees();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           System.out.print(<span class="string">&quot;1-团队列表  2-添加团队成员  3-删除团队成员 4-退出   请选择(1-4)：&quot;</span>);</span><br><span class="line">           key = TSUtility.readMenuSelection();</span><br><span class="line">           System.out.println();</span><br><span class="line">           <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                   getTeam();</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                   addMenber();</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                   deleMember();</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                   System.out.print(<span class="string">&quot;确认是否退出(Y/N)：&quot;</span>);</span><br><span class="line">                   <span class="keyword">char</span> yn = TSUtility.readConfirmSelection();</span><br><span class="line">                   <span class="keyword">if</span>(yn == <span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">                       loopFlag = <span class="keyword">false</span>;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以表格形式列出公司所有的员工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listAllEmployees</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n--------------------开发团队调度软件---------------------\n&quot;</span>);</span><br><span class="line">        Employee[] employees = lIstService.getAllEmployees();</span><br><span class="line">        <span class="keyword">if</span>(employees.length == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有客户资料&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ID\t姓名\t\t年龄\t\t工资\t\t职位\t\t状态\t\t奖金\t\t股票\t\t领用设备&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Employee e : employees)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; &quot;</span>+ e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示团队成员列表操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTeam</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n--------------------团队成员列表---------------------\n&quot;</span>);</span><br><span class="line">        Programmer[] team = teamService.getTeam();</span><br><span class="line">        <span class="keyword">if</span>(team.length == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;开发团队目前没有成员！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;TID/ID\t姓名\t\t年龄\t\t工资\t\t职位\t\t奖金\t\t股票&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Programmer p : team)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; &quot;</span> + p.getDetailsForTeam());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现添加成员的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMenber</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------添加成员---------------------&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入要添加的员工ID: &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> id = TSUtility.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Employee e = lIstService.getEmployee(id);</span><br><span class="line">            teamService.addMenber(e);</span><br><span class="line">            System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TeamException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;添加失败，原因：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 按回车键继续</span></span><br><span class="line">        TSUtility.readReturn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现删除成员操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleMember</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------删除成员---------------------&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入要删除员工的TID：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> id = TSUtility.readInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;确认是否删除(Y/N)：&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> yn = TSUtility.readConfirmSelection();</span><br><span class="line">        <span class="keyword">if</span>(yn ==<span class="string">&#x27;N&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            teamService.removeMember(id);</span><br><span class="line">            System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TeamException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除失败，原因：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//按回车键继续</span></span><br><span class="line">        TSUtility.readReturn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       TeaView teaView = <span class="keyword">new</span> TeaView();</span><br><span class="line">       teaView.enterMainMenu();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提取码：<strong>kp6t</strong></p><div class="btns rounded grid5">            <a class="button" href='https://pan.baidu.com/s/1624m3K3xi8qMqASiTXPJhw' title='下载源码'><i class='fa fa-download'></i>下载源码</a>          </div>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC基础（下篇）</title>
      <link href="posts/4019007238/"/>
      <url>posts/4019007238/</url>
      
        <content type="html"><![CDATA[<h2 id="一、处理-JSON"><a href="#一、处理-JSON" class="headerlink" title="一、处理 JSON"></a>一、处理 JSON</h2><p>​ <strong>JSON 知识：</strong></p><ol><li><p>JSON 有两种格式：① Json 对象：{key:value,key:value….}，②Json 数组:[value1, value2…]</p></li><li><p>Json 对象解析方式： 对象.key; Json 数组的解析方式：for 循环遍历</p></li><li><p>java 对象转 Json： ① Bean 和 map —》Json 对象；② List —》 json 数组</p></li></ol><h3 id="1、-返回-JSON"><a href="#1、-返回-JSON" class="headerlink" title="1、 返回 JSON"></a>1、 返回 JSON</h3><ol><li><p><strong>加入 jar 包：</strong></p><p>下载地址：<a href="https://repo1.maven.org/maven2/com/fasterxml/jackson/core/">https://repo1.maven.org/maven2/com/fasterxml/jackson/core/</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200803112453.png" alt="image-20200803112445649"></p><p><strong>注意</strong>： 请根据自己的 Spring 版本下载最新的 jar，否则有肯能会报错。</p><p>报错异常可以参考我这篇博客：<a href="https://blog.csdn.net/qq_45738810/article/details/107760659">解决方案</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200803112641.png" alt="image-20200803112639555"></p></li><li><p><strong>SpringMVC 处理 json 四个条件</strong></p></li></ol><p>​ ① 导入 jackson 的 jar</p><p>​ ② 在 springMVC 的配置文件中开启 MVC 驱动，&lt;mvc:annotation-driven /&gt;</p><p>​ ③ 在处理 ajax 请求的方法上加上注解**@ResponseBody**</p><p>​ ④ 将要转换为 json 且响应到客户端的数据，直接作为该方法的返回值返回</p><ol start="3"><li><strong>代码示例</strong></li></ol><p>【index.jsp】</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;pageContext.servletContext.contextPath&#125;/js/jquery-1.8.2.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><br><span class="line">      $(function () &#123;</span><br><span class="line">        $(<span class="string">&#x27;#btn&#x27;</span>).click(function () &#123;</span><br><span class="line">          $.ajax(&#123;</span><br><span class="line">            url:<span class="string">&quot;testJson&quot;</span>,</span><br><span class="line">            type:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            dataType:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">            success:function (msg) &#123;</span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">var</span> i in msg)&#123;</span><br><span class="line">                <span class="keyword">var</span> emp = msg[i];</span><br><span class="line">        alert(<span class="string">&quot;id=&quot;</span>+emp.id+<span class="string">&quot;,lastName=&quot;</span>+emp.lastName+<span class="string">&quot;,departmentName=&quot;</span>+emp.department.departmentName);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;a href=&quot;testJson&quot;&gt;测试JSON&lt;/a&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>【JsonControllerTest.json】**@ResponseBody : ** SpringMVC 对 JSON 的支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeDao employeeDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/testJson&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title">testJson</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Collection&lt;Employee&gt; emps = employeeDao.getAll();</span><br><span class="line">        <span class="keyword">return</span> emps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200803113452.png" alt="image-20200803113451999"></p><h3 id="2、-使用-AJAX"><a href="#2、-使用-AJAX" class="headerlink" title="2、 使用 AJAX"></a>2、 使用 AJAX</h3><p>【index.jsp】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>$Title$<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &lt;link</span><br><span class="line">      rel=&quot;stylesheet&quot;</span><br><span class="line">      href=&quot;$&#123;pageContext.servletContext.contextPath&#125;/css/index_like.css&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;script</span><br><span class="line">      type=&quot;text/javascript&quot;</span><br><span class="line">      src=&quot;$&#123;pageContext.servletContext.contextPath&#125;/js/jquery-1.8.2.min.js&quot;</span><br><span class="line">    &gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">      $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#btn&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            url: <span class="string">&quot;testJson&quot;</span>,</span></span><br><span class="line"><span class="javascript">            type: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">            dataType: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="javascript">            success: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line">              /*</span><br><span class="line">                        [</span><br><span class="line"><span class="javascript">                            &#123;<span class="string">&quot;id&quot;</span>:<span class="number">1001</span>,<span class="string">&quot;lastName&quot;</span>:<span class="string">&quot;E-AA&quot;</span>,<span class="string">&quot;email&quot;</span>:<span class="string">&quot;aa@163.com&quot;</span>,<span class="string">&quot;gender&quot;</span>:<span class="number">1</span>,<span class="string">&quot;department&quot;</span>:&#123;<span class="string">&quot;id&quot;</span>:<span class="number">101</span>,<span class="string">&quot;departmentName&quot;</span>:<span class="string">&quot;D-AA&quot;</span>&#125;&#125;,</span></span><br><span class="line"><span class="javascript">                            &#123;<span class="string">&quot;id&quot;</span>:<span class="number">1002</span>,<span class="string">&quot;lastName&quot;</span>:<span class="string">&quot;E-BB&quot;</span>,<span class="string">&quot;email&quot;</span>:<span class="string">&quot;bb@163.com&quot;</span>,<span class="string">&quot;gender&quot;</span>:<span class="number">1</span>,<span class="string">&quot;department&quot;</span>:&#123;<span class="string">&quot;id&quot;</span>:<span class="number">102</span>,<span class="string">&quot;departmentName&quot;</span>:<span class="string">&quot;D-BB&quot;</span>&#125;&#125;,</span></span><br><span class="line"><span class="javascript">                            &#123;<span class="string">&quot;id&quot;</span>:<span class="number">1003</span>,<span class="string">&quot;lastName&quot;</span>:<span class="string">&quot;E-CC&quot;</span>,<span class="string">&quot;email&quot;</span>:<span class="string">&quot;cc@163.com&quot;</span>,<span class="string">&quot;gender&quot;</span>:<span class="number">0</span>,<span class="string">&quot;department&quot;</span>:&#123;<span class="string">&quot;id&quot;</span>:<span class="number">103</span>,<span class="string">&quot;departmentName&quot;</span>:<span class="string">&quot;D-CC&quot;</span>&#125;&#125;,</span></span><br><span class="line"><span class="javascript">                            &#123;<span class="string">&quot;id&quot;</span>:<span class="number">1004</span>,<span class="string">&quot;lastName&quot;</span>:<span class="string">&quot;E-DD&quot;</span>,<span class="string">&quot;email&quot;</span>:<span class="string">&quot;dd@163.com&quot;</span>,<span class="string">&quot;gender&quot;</span>:<span class="number">0</span>,<span class="string">&quot;department&quot;</span>:&#123;<span class="string">&quot;id&quot;</span>:<span class="number">104</span>,<span class="string">&quot;departmentName&quot;</span>:<span class="string">&quot;D-DD&quot;</span>&#125;&#125;,</span></span><br><span class="line"><span class="javascript">                            &#123;<span class="string">&quot;id&quot;</span>:<span class="number">1005</span>,<span class="string">&quot;lastName&quot;</span>:<span class="string">&quot;E-EE&quot;</span>,<span class="string">&quot;email&quot;</span>:<span class="string">&quot;ee@163.com&quot;</span>,<span class="string">&quot;gender&quot;</span>:<span class="number">1</span>,<span class="string">&quot;department&quot;</span>:&#123;<span class="string">&quot;id&quot;</span>:<span class="number">105</span>,<span class="string">&quot;departmentName&quot;</span>:<span class="string">&quot;D-EE&quot;</span>&#125;&#125;</span></span><br><span class="line">                        ]</span><br><span class="line">               */</span><br><span class="line"><span class="javascript">              <span class="comment">// 第一种实现方式</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              /*var tb = &quot;<span class="tag">&lt;<span class="name">table</span>&gt;</span>&quot;;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              tb += &quot;<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>departmentName<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>&quot;</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> msg)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> emp = msg[i];</span></span><br><span class="line"><span class="handlebars"><span class="xml">                tb += &quot;<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&quot;+emp.id+&quot;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&quot;+emp.lastName+&quot;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&quot;+emp.email+&quot;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&quot;+emp.gender+&quot;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&quot;+emp.department.departmentName+&quot;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>&quot;</span></span></span><br><span class="line">              &#125;</span><br><span class="line"><span class="javascript">              tb += <span class="string">&quot;&lt;/table&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">              $(<span class="string">&#x27;body&#x27;</span>).append(tb);*/</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">              <span class="comment">//第二种实现方式</span></span></span><br><span class="line"><span class="javascript">              $(<span class="string">&quot;body&quot;</span>).append(<span class="string">&quot;&lt;table&gt;&lt;/table&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">              $(<span class="string">&quot;table&quot;</span>).append(</span></span><br><span class="line"><span class="handlebars"><span class="xml">                &quot;<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>departmentName<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>&quot;</span></span></span><br><span class="line">              );</span><br><span class="line"><span class="javascript">              <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> msg) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> emp = msg[i];</span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;table&quot;</span>).append(</span></span><br><span class="line"><span class="handlebars"><span class="xml">                  &quot;<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&quot; +</span></span></span><br><span class="line">                    emp.id +</span><br><span class="line"><span class="handlebars"><span class="xml">                    &quot;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&quot; +</span></span></span><br><span class="line">                    emp.lastName +</span><br><span class="line"><span class="handlebars"><span class="xml">                    &quot;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&quot; +</span></span></span><br><span class="line">                    emp.email +</span><br><span class="line"><span class="handlebars"><span class="xml">                    &quot;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&quot; +</span></span></span><br><span class="line">                    emp.gender +</span><br><span class="line"><span class="handlebars"><span class="xml">                    &quot;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&quot; +</span></span></span><br><span class="line">                    emp.department.departmentName +</span><br><span class="line"><span class="handlebars"><span class="xml">                    &quot;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>&quot;</span></span></span><br><span class="line">                );</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;testJson&quot;</span>&gt;</span>测试JSON<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试ajax&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200803163540.png" alt="image-20200803163539333"></p><h2 id="二、HttpMessageConverter-原理"><a href="#二、HttpMessageConverter-原理" class="headerlink" title="二、HttpMessageConverter 原理"></a>二、HttpMessageConverter 原理</h2><h3 id="1、HttpMessageConverter-lt-T-gt"><a href="#1、HttpMessageConverter-lt-T-gt" class="headerlink" title="1、HttpMessageConverter&lt;T&gt;"></a>1、HttpMessageConverter&lt;T&gt;</h3><p>HttpMessageConverter&lt;T&gt; 是 Spring3.0 新添加的一个接口， 负责将请求信息转换为一个对象（类型为 T）， 将对象（类型为 T）输出为响应信息</p><h3 id="2、HttpMessageConverter-lt-T-gt-接口定义的方法"><a href="#2、HttpMessageConverter-lt-T-gt-接口定义的方法" class="headerlink" title="2、HttpMessageConverter&lt;T&gt;接口定义的方法"></a>2、HttpMessageConverter&lt;T&gt;接口定义的方法</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200803113844.png" alt="image-20200803113843706"></p><ol><li>Boolean canRead(Class&lt;?&gt; clazz,MediaType mediaType): 指定转换器可以读取的对象类型，即转 换 器 是 否 可 将 请 求 信 息 转 换 为 clazz 类 型 的 对 象 ， 同 时 指 定 支 持 MIME 类 型(text/html,applaiction/json 等)</li><li>Boolean canWrite(Class&lt;?&gt; clazz,MediaType mediaType):指定转换器是否可将 clazz 类型的对象写到响应流中，响应流支持的媒体类型在 MediaType 中定义。</li><li>List&lt;MediaType&gt; getSupportMediaTypes()：该转换器支持的媒体类型。</li><li>T read(Class&lt;? extends T&gt; clazz,HttpInputMessage inputMessage)：将请求信息流转换为 T 类型的对象。</li><li>void write(T t,MediaType contnetType,HttpOutputMessgae outputMessage):将 T 类型的对象写到响应流中，同时指定相应的媒体类型为 contentType。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.http;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpInputMessage</span> <span class="keyword">extends</span> <span class="title">HttpMessage</span> </span>&#123;</span><br><span class="line"><span class="function">InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.http;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpOutputMessage</span> <span class="keyword">extends</span> <span class="title">HttpMessage</span> </span>&#123;</span><br><span class="line"><span class="function">OutputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200803114337.png" alt="image-20200803114336375"></p><h3 id="3、HttpMessageConverter"><a href="#3、HttpMessageConverter" class="headerlink" title="3、HttpMessageConverter"></a>3、HttpMessageConverter</h3><p>使用 HttpMessageConverter<T> 将请求信息转化并绑定到处理方法的入参中或将响应结果转为对应类型的响应信息， Spring 提供了两种途径：</p><ol><li>使用 @RequestBody / <strong>@ResponseBody</strong> 对处理方法进行标注</li><li>使用 HttpEntity&lt;T&gt; / <strong>ResponseEntity&lt;T&gt;</strong> 作为处理方法的入参或返回值</li></ol><h2 id="三、文件上传下载"><a href="#三、文件上传下载" class="headerlink" title="三、文件上传下载"></a>三、文件上传下载</h2><h3 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h3><ol start="2"><li><strong>代码示例</strong></li></ol><p><strong>方式一：</strong>图片名字由服务进行绑定</p><p>​ 【index.jsp】</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=&quot;down&quot;&gt;下载图片&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>​ 【TestUploadAndDownController.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/down&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; down(HttpSession session) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取下载文件的路径</span></span><br><span class="line">    String realPath = session.getServletContext().getRealPath(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">    String finalPath = realPath + File.separator + <span class="string">&quot;2.jpg&quot;</span>;</span><br><span class="line">    InputStream is = <span class="keyword">new</span> FileInputStream(finalPath);</span><br><span class="line">    <span class="comment">// available():获取输入流所读取的文件的最大字节数</span></span><br><span class="line">    <span class="keyword">byte</span>[] bt = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line">    is.read(bt);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置请求头</span></span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=zzz.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置响应状态</span></span><br><span class="line">    HttpStatus status = HttpStatus.OK;</span><br><span class="line">    ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; entity = <span class="keyword">new</span> ResponseEntity&lt;&gt;(bt, headers, status);</span><br><span class="line">    <span class="keyword">return</span> entity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200803161907.png" alt="image-20200803161906909"></p><p><strong>方式二：</strong> 图片有请求方式来获取</p><p>​ 【index.jsp】</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=&quot;down/1&quot;&gt;下载图片&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>​ 【TestUploadAndDownController.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/down/&#123;username&#125;&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; down(<span class="meta">@PathVariable(&quot;username&quot;)</span> String username, HttpSession session) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取下载文件的路径</span></span><br><span class="line">        String realPath = session.getServletContext().getRealPath(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">        String finalPath = realPath + File.separator + username+<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(finalPath);</span><br><span class="line">        <span class="keyword">byte</span>[] bt = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line">        is.read(bt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求头</span></span><br><span class="line">        HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        headers.add(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+username+<span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置响应状态</span></span><br><span class="line">        HttpStatus status = HttpStatus.OK;</span><br><span class="line">        ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; entity = <span class="keyword">new</span> ResponseEntity&lt;&gt;(bt, headers, status);</span><br><span class="line">        <span class="keyword">return</span> entity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200803162240.png" alt="image-20200803162239131"></p><h3 id="2、文件上传"><a href="#2、文件上传" class="headerlink" title="2、文件上传"></a>2、文件上传</h3><ol><li><strong>导入需要的 Jar 包</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200803161322.png" alt="image-20200803161320628"></p><ol start="2"><li><p><strong>代码示例</strong></p><p>【index.jsp】</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;up&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        头像：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;uploadFile&quot;</span>/&gt;</span><br><span class="line">        描述：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;desc&quot;</span>/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>​ 【配置 spingmvc.xml】不配置上传则会报错</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">处理文件，将客户端上传的File文件，处理为MultipartFile</span></span><br><span class="line"><span class="comment">注意：文件解析器的bean中id必须设置为multipartResolver</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置文件解析的编码，注意：一定要和页面的pageEncoding保持一致 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置最大上传文件大小 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;88888888&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【TestUploadAndDownController.java】</p><p><strong>方式一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/up&quot; ,method = RequestMethod.POST)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">up</span> <span class="params">(String desc, MultipartFile uploadFile, HttpSession session)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">       String filename = uploadFile.getOriginalFilename();</span><br><span class="line">       String path = session.getServletContext().getRealPath(<span class="string">&quot;phone&quot;</span>) + File.separator + filename;</span><br><span class="line">       <span class="comment">// 获取输入流</span></span><br><span class="line">       InputStream is = uploadFile.getInputStream();</span><br><span class="line">       <span class="comment">// 获取输出流</span></span><br><span class="line">       File file = <span class="keyword">new</span> File(path);</span><br><span class="line">       OutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">       <span class="keyword">byte</span>[] bt = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="keyword">int</span> len;</span><br><span class="line">       <span class="keyword">while</span>((len = is.read(bt)) != -<span class="number">1</span>)&#123;</span><br><span class="line">           fos.write(bt, <span class="number">0</span>, len);</span><br><span class="line">       &#125;</span><br><span class="line">       is.close();</span><br><span class="line">       fos.close();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>上传出现异常</p><blockquote><p><strong>类型</strong> 异常报告</p><p><strong>消息</strong> E:\IDEA\SpringMVC\SpringMVC_demo3\out\artifacts\SpringMVC_demo3_war_exploded\phone\1.jpg (系统找不到指定的路径。)</p><p>java.io.FileNotFoundException: E:\IDEA\SpringMVC\SpringMVC_demo3\out\artifacts\SpringMVC_demo3_war_exploded\phone\1.jpg (系统找不到指定的路径。)</p></blockquote><p>解决方法：（以为自己的为例子）E:\IDEA\SpringMVC\SpringMVC_demo3\out\artifacts\SpringMVC_demo3_war_exploded 这个目录下创建一个<strong>phone 文件</strong>就可解决问题</p><blockquote><p>可以在代码中写入 System.out.prinln(path); 方便查看图片上传的位置</p></blockquote><p><strong>方式二：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/up&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">up</span> <span class="params">(MultipartFile uploadFile, HttpSession session)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">    String filename = uploadFile.getOriginalFilename();</span><br><span class="line">    String finalFileName = UUID.randomUUID() + filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    String path = session.getServletContext().getRealPath(<span class="string">&quot;phone&quot;</span>) + File.separator + finalFileName;</span><br><span class="line">    File file = <span class="keyword">new</span> File(path);</span><br><span class="line">    uploadFile.transferTo(file);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、多个文件上传"><a href="#3、多个文件上传" class="headerlink" title="3、多个文件上传"></a>3、多个文件上传</h3><p>【index.jsp】</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;up&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        头像：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;uploadFile&quot;</span>/&gt;</span><br><span class="line">        头像<span class="number">1</span>：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;uploadFile&quot;</span>/&gt;</span><br><span class="line">        头像<span class="number">2</span>：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;uploadFile&quot;</span>/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>【TestUploadAndDownController.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/up&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ups</span><span class="params">(MultipartFile[] uploadFile, HttpSession session)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(MultipartFile uploadFiles : uploadFile)&#123;</span><br><span class="line">       <span class="comment">//  判断文件是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(! uploadFiles.isEmpty())&#123;</span><br><span class="line">           String filename = uploadFiles.getOriginalFilename();</span><br><span class="line">           String finalFileName = UUID.randomUUID() + filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">           String path = session.getServletContext().getRealPath(<span class="string">&quot;phone&quot;</span>) + File.separator + finalFileName;</span><br><span class="line">           File file = <span class="keyword">new</span> File(path);</span><br><span class="line">           uploadFiles.transferTo(file);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、拦截器"><a href="#四、拦截器" class="headerlink" title="四、拦截器"></a>四、拦截器</h2><h3 id="1、-自定义拦截器"><a href="#1、-自定义拦截器" class="headerlink" title="1、 自定义拦截器"></a>1、 自定义拦截器</h3><p>​ Spring MVC 也可以使用拦截器对请求进行拦截处理，用户可以自定义拦截器来实现特定的 功 能 ， 自 定 义 的 拦 截 器 可 以 实 现 <strong>HandlerInterceptor</strong> 接 口 ， 也 可 以 继 承 <strong>HandlerInterceptorAdapter</strong> 适配器类 。</p><ol><li>**preHandle()**：这个方法在业务处理器处理请求之前被调用，在该方法中对用户请求 request 进行处理。如果程序员决定该拦截器对请求进行拦截处理后还要调用其他的拦截器，或者是业务处理器去进行处理，则返回 true；如果程序员决定不需要再调用其他的组件去处理请求，则返回 false。</li><li><strong>postHandle()：</strong> 这个方法在业务处理器处理完请求后，但是 DispatcherServlet 向客户端返回响应前被调用，在该方法中对用户请求 request 进行处理。</li><li><strong>afterCompletion()：</strong>这个方法在 DispatcherServlet 完全处理完请求后被调用，可以在该方法中进行一些资源清理的操作。</li></ol><p><strong>代码示例：</strong></p><p>【spingmvc.xml】中配置拦截器（3 中方式）</p><p><strong>①</strong>（推荐使用）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认拦截所有的请求--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.springmvc.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>②</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此方式要求拦截器类上必须加注解@Component --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>③</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置自定义拦截方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.springmvc.interceptor.FirstInterceptor&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 拦截所有的请求，这个必须写在前面，也就是写在【不拦截】的上面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 但是排除下面这些，也就是不拦截请求 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/login.html&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【index.jsp】</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=&quot;testInterceptor&quot;&gt;测试拦截器&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>【FirstInterceptor.java】</p><p>​ preHandle(): 中的 return 值 true 表示不拦截放行，反之 false 拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;First:preHandle&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;First:postHandle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;First:afterCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【TestInterceptorController.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterceptorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/testInterceptor&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200804115055.png" alt="image-20200804115048604"></p><h3 id="2、拦截器方法执行顺序"><a href="#2、拦截器方法执行顺序" class="headerlink" title="2、拦截器方法执行顺序"></a>2、拦截器方法执行顺序</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200804115213.png" alt="image-20200804115212883"></p><h3 id="3、多个拦截器的执行顺序"><a href="#3、多个拦截器的执行顺序" class="headerlink" title="3、多个拦截器的执行顺序"></a>3、多个拦截器的执行顺序</h3><p><strong>图解：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200804115428.png" alt="image-20200804115427251"></p><p><strong>总结：</strong></p><ul><li><p>当有多个拦截器时：</p><ul><li>preHandle: 按照拦截器数组的正向顺序执行</li><li>postHandle: 按照拦截器数组得反向顺序执行</li><li>afterCompletion: 按照拦截器的数组反向顺序执行</li></ul></li><li><p>当多个拦截器的 PreHandle 有不同的值时</p><ul><li><p>第一个返回 false,第二个返回 false: 只有第一个 preHandle 会执行</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200804121205.png" alt="image-20200804121203337"></p></li><li><p>第一个返回 true， 第二个返回 false;两个(全部)拦截器的 preHandle 都会执行，但是（全部）postHandle 都不会执行，而 afterCompletion 只有第一个（返回 false 的拦截器之前的拦截器之前的所有 afterCompletion）会执行</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200804121301.png" alt="image-20200804121300338"></p></li><li><p>第一个返回 fasle,第二个返回 true； 只有第一个的 preHandle 会执行</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200804121427.png" alt="image-20200804121426359"></p></li></ul></li></ul><h2 id="五、异常处理"><a href="#五、异常处理" class="headerlink" title="五、异常处理"></a>五、异常处理</h2><h3 id="1、异常处理的概述"><a href="#1、异常处理的概述" class="headerlink" title="1、异常处理的概述"></a>1、异常处理的概述</h3><ol><li>SpringMVC 通过 ExceptionResolver 处理程序的异常，包括 Handler 映射、数据绑定以及目标方法执行发生的异常。</li><li>SpringMVC 提供 HandlerExceptionResolver 的实现类</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200804232943.png" alt="image-20200804232936099"></p><h3 id="2、HandlerExceptionResolver"><a href="#2、HandlerExceptionResolver" class="headerlink" title="2、HandlerExceptionResolver"></a>2、HandlerExceptionResolver</h3><ol><li>DispatcherServlet 默认装配的 HandlerExceptionResolver</li><li>没有使用 &lt;mvc:annotation-driven/&gt; 配置</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200804233241.png" alt="image-20200804233240631"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200804233255.png" alt="image-20200804233254472"></p><ol start="3"><li>使用了 &lt;mvc:annotation-driven/&gt; 配置：</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200804233403.png" alt="image-20200804233402126"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200804233413.png" alt="image-20200804233412600"></p><h3 id="3、异常处理-DefaultHandlerExceptionResolver"><a href="#3、异常处理-DefaultHandlerExceptionResolver" class="headerlink" title="3、异常处理_DefaultHandlerExceptionResolver"></a>3、异常处理_DefaultHandlerExceptionResolver</h3><p><strong>对一些特殊的异常进行处理，比如：</strong></p><ul><li>NoSuchRequestHandlingMethodException</li><li>HttpRequestMethodNotSupportedException</li><li>HttpMediaTypeNotSupportedException</li><li>HttpMediaTypeNotAcceptableException</li></ul><p><strong>代码示例</strong>：</p><p>【index.jsp】</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;a href=&quot;testException&quot;&gt;异常测试&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>【ExceptionControllerTest.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/testException&quot;,method = RequestMethod.POST)</span> <span class="comment">// 不能是POST请求</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testDefaultHandlerExceptionResolver...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200805111949.png" alt="image-20200805111942998"></p><h3 id="4、异常处理-SimpleMappingExceptionResolver"><a href="#4、异常处理-SimpleMappingExceptionResolver" class="headerlink" title="4、异常处理_SimpleMappingExceptionResolver"></a>4、异常处理_SimpleMappingExceptionResolver</h3><ol><li>在 springmmvc.xml 中配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--异常处理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;simpleMappingExceptionResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArrayIndexOutOfBoundsException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【ExceptionControllerTest.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testSimpleMappingException&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testSimpleMappingException</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;testSimpleMappingException....&quot;</span>);</span><br><span class="line">    String[] s = <span class="keyword">new</span> String[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">// s[i] 下标大于数组的长度</span></span><br><span class="line">    System.out.println(s[<span class="number">12</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200805115113.png" alt="image-20200805115112892"></p><p>【eeor.jsp】</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot;&gt;操作异常，请稍后重试&lt;/a&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    $&#123;requestScope.exception &#125;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200805115300.png" alt="image-20200805115300115"></p><h2 id="六、运行流程"><a href="#六、运行流程" class="headerlink" title="六、运行流程"></a>六、运行流程</h2><h3 id="1、-流程图"><a href="#1、-流程图" class="headerlink" title="1、 流程图"></a>1、 流程图</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200805115732.png" alt="image-20200805115731886"></p><p><strong>工作流程描述：</strong></p><ol><li><p>用户向服务器发起请求，请求被 SpringMVC 前端控制器 DispatcherServlet 捕获：</p></li><li><p>DispatcherServlet 对请求解析，得到请求资源的标识符（URL）：</p><p>判断请求 URL 对应的映射</p><p>① 不存在：</p><ul><li>再判断是否配置了 mvc:default-servlet-handler：</li><li>如果没配置，则控制台报映射查找不到，客户端展示 404 错误</li></ul><p>② 存在：</p><ul><li>执行下面的流程</li></ul></li><li><p>根据 URL，调用 HandlerMapping 获取该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后 HandlerExecutionChain 对象的形式返回：</p></li><li><p>DispatcherServlet 根据获得的 Handler， 选择一个合适的 HandlerAdapter。</p></li><li><p>如果成功获得 HandlerAdapter 后，此时将开始拦截器的 preHandler(…) 方法【正向】</p></li><li><p>提取 Request 中的模型数据，填充 Handler 入参，开始执行 Handler （Controller）方法，处理请求。在填充 Handler 的入参过程中，根据配置，SpringMVC 将帮助做一些额外的工作：</p><p>① HttpMessageConverter: 将请求的信息（如 json、xml 的数据）转换成一个对象，将对象转换成指定的响应信息</p><p>② 数据转换：对请求的消息进行数据转换。如 String 转换 Integer、Double 等。</p><p>③ 数据格式化：对请求的消息进行数据格式化。如将字符串转换成数字或格式化日期等。</p><p>④ 数据验证：验证数据的有效性（长度、格式等），验证结果存储到 BindingResult 或 EEOR 中。</p></li><li><p>Handler 执行完成后，向 DispatcherServlet 返回一个 ModelAndView 对象</p></li><li><p>此时开始执行拦截器的 postHasndle(…)方法【逆向】</p></li><li><p>根据返回的 ModelAndView （此时会判断是否存在异常：如果存在异常，则执行 HandelExceptionResolver 进行异常处理）选择一个适合的 DispacherServlet（必须是已经注册到 Spring 容器中 的 ViewResolver ）返回给 DispatcherServlet，根据 Model 和 View， 来渲染试图</p></li><li><p>在返回给客户端需要执行拦截器的 AfterCompletion 方法【逆向】</p></li><li><p>将渲染的结果返回给客户端</p></li></ol><h2 id="七、Spring-整合-SpringMVC"><a href="#七、Spring-整合-SpringMVC" class="headerlink" title="七、Spring 整合 SpringMVC"></a>七、Spring 整合 SpringMVC</h2><h3 id="1、Spring-与-SpringMVC-的整合问题"><a href="#1、Spring-与-SpringMVC-的整合问题" class="headerlink" title="1、Spring 与 SpringMVC 的整合问题"></a>1、Spring 与 SpringMVC 的整合问题</h3><ol><li>需要进行 Spring 整合 SpringMVC 吗？</li><li>还是需要加入 Spring 的 IOC 容器？</li><li>是否需要在 web.xml 文件中配置启动 SpringMVC 容器的 ContextLoaderListener？</li></ol><blockquote><p>需要：通常情况下，类似于数据源，事务，整合其他框架都是放在 Spring 的配置文件中（而不是放在 SpringMVC 的配置文件中），实际上方入 Spring 配置文件对应的 IOC 容器中还有 Servlet 和 Dao。</p><p>不需要：都放在 SpringMVC 的配置文件中，也可以分多个 Spring 的配置文件，然后使用 import 节点导入其他的配置文件</p></blockquote><h3 id="2、Spring-整合-SpringMVC-解决方案配置监听器"><a href="#2、Spring-整合-SpringMVC-解决方案配置监听器" class="headerlink" title="2、Spring 整合 SpringMVC 解决方案配置监听器"></a>2、Spring 整合 SpringMVC 解决方案配置监听器</h3><ol><li>监听器配置【web.xml】</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200805155621.png" alt="image-20200805155620646"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:bean.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建 Spring 的 【bean.xml】配置文件：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置扫描组件的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.oy.online.springmvc&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id=&quot;teacher&quot; class=&quot;com.oy.online.springmvc.bean.Teacher&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>SpringMVC 配置文件：【Springmvc.xml】</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置扫描组件的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.oy.online.springmvc.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>在 Teanch 类中增加构造方法，启动服务器，查看构造器执行情况。<strong>若 Spring 的 IOC 容器 和 SpringMVC 的 IOC 容器扫描的包有重合的部分，就会导致有的 bean 会被创建 2 次。</strong></p><p><strong>解决：</strong>使 Spring 的 IOC 容器扫描的包和 SpringMVC 的 IOC 容器扫描的包没有重合的部分.使用 exclude-filter 和 include-filter 子节点来规定只能扫描的注解 。</p><p>【bean.xml】: &lt;!– 不扫描@Controller 注解 –&gt;</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200805160545.png" alt="image-20200805160544504"></p><p>【Springmvc.xml】：&lt;!– 扫描@Controller 注解 –&gt;</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200805160710.png" alt="image-20200805160709752"></p><ol start="4"><li>【index.jsp】</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;a href=&quot;testListener&quot;&gt;监听器测试&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ol><li>【SpringListener.java】</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200805161009.png" alt="image-20200805161008189"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">       ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        ServletContext servletContext = servletContextEvent.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;context&quot;</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【ExceptionControllerTest.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testListener</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获取spring所管理的teacher对象</span></span><br><span class="line">        ServletContext servletContext = session.getServletContext();</span><br><span class="line">        ApplicationContext context = (ApplicationContext) servletContext.getAttribute(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">        Teacher teacher = context.getBean(<span class="string">&quot;Teacher&quot;</span>, Teacher.class);</span><br><span class="line">        System.out.println(teacher);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200805161243.png" alt="image-20200805161242267"></p><h3 id="3、SpringIOC-容器和-SpringMVC-IOC-容器的关系"><a href="#3、SpringIOC-容器和-SpringMVC-IOC-容器的关系" class="headerlink" title="3、SpringIOC 容器和 SpringMVC IOC 容器的关系"></a>3、SpringIOC 容器和 SpringMVC IOC 容器的关系</h3><ol><li>SpringMVC 的 IOC 容器中的 bean 可以来引用 Spring IOC 容器中的 bean，之则不行. Spring IOC 容器中的 bean 却不能来引用 SpringMVC IOC 容器中的 bean 。</li><li>在 Spring MVC 配置文件中引用业务层的 Bean</li><li>多个 Spring IOC 容器之间可以设置为父子关系，以实现良好的解耦。</li><li>Spring MVC WEB 层容器可作为 “业务层” Spring 容器的子容器：即 WEB 层容器可以引用业务层容器的 Bean，而业务层容器却访问不到 WEB 层容器的 Bean 。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200805161454.png" alt="image-20200805161453395"></p><h3 id="4、SpringMVC-对比-Struts2"><a href="#4、SpringMVC-对比-Struts2" class="headerlink" title="4、SpringMVC 对比 Struts2"></a>4、SpringMVC 对比 Struts2</h3><ol><li>Spring MVC 的入口是 Servlet, 而 Struts2 是 FilterSpring MVC 会稍微比 Struts2 快些.</li><li>Spring MVC 是基于方法设计, 而 Sturts2 是基于类,每次发一次请求都会实例一个 Action.</li><li>Spring MVC 使用更加简洁, 开发效率 Spring MVC 确实比 struts2 高: 支持 JSR303, 处理 ajax 的请求更方便</li><li>Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java项目：客户管理系统</title>
      <link href="posts/726828229/"/>
      <url>posts/726828229/</url>
      
        <content type="html"><![CDATA[<blockquote><p>源码已经打包在博客末尾，有需要的话自行下载。</p></blockquote><h2 id="java-项目：-客户信息管理系统"><a href="#java-项目：-客户信息管理系统" class="headerlink" title="java 项目： 客户信息管理系统"></a>java 项目： 客户信息管理系统</h2><h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><p>​ Idea 集成开发工具</p><h3 id="技术点："><a href="#技术点：" class="headerlink" title="技术点："></a>技术点：</h3><ol><li>面向对象</li><li>数组</li></ol><h3 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200801181546.png" alt="image-20200801181545548"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200801180817.png" alt="image-20200801180816736"></p><h3 id="代码展示："><a href="#代码展示：" class="headerlink" title="代码展示："></a>代码展示：</h3><p><strong>【bean】</strong> Customer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> gender; <span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> String phone; <span class="comment">// 电话</span></span><br><span class="line">    <span class="keyword">private</span> String email; <span class="comment">// 邮箱</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name, <span class="keyword">char</span> gender, <span class="keyword">int</span> age, String phone, String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="keyword">char</span> gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>【service】</strong> CusomerList.java\</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Description</span> 内部封装一个Customer[],提供对Customer数据的增删改查操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Customer[] customers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> total; <span class="comment">// 记录存储个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器，用来初始化customer数组</span></span><br><span class="line"><span class="comment">     * totalCustomer: 指定customer 数组的最大空间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> totalCustomer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerList</span><span class="params">(<span class="keyword">int</span> totalCustomer)</span></span>&#123;</span><br><span class="line">        customers = <span class="keyword">new</span>  Customer[totalCustomer];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加指定的客户到数组中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 添加是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addCustomer</span><span class="params">(Customer customer)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(customer != <span class="keyword">null</span> &amp;&amp; total &lt; customers.length)&#123;</span><br><span class="line">           customers[total++] = customer;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 替换指定索引位置上的数组元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cust</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">replanceCustomer</span><span class="params">(<span class="keyword">int</span> index, Customer cust)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">0</span> &amp;&amp; index &lt; total)&#123;</span><br><span class="line">            customers[index] = cust;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定索引位置上的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteCustomer</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">0</span> &amp;&amp; index &lt; total)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt; total -<span class="number">1</span>; i++)&#123;</span><br><span class="line">                customers[i] = customers[i+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            customers[total -<span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">            total--; <span class="comment">// 存储人数在减少1</span></span><br><span class="line">           <span class="comment">//  customers[--total] = null;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有的customers 对象构成的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Customer[] getAllCustomers()&#123;</span><br><span class="line">       Customer[] custs = <span class="keyword">new</span> Customer[total];</span><br><span class="line">       <span class="comment">// 给元素复制</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; custs.length; i++)&#123;</span><br><span class="line">            custs[i] = customers[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> custs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回指定的索引位置上的Customer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果输入的index位置上的元素不存在，返回Null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">0</span> &amp;&amp; index &lt; total)&#123;</span><br><span class="line">            <span class="keyword">return</span> customers[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回Customer对象的个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getToTal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>【ul】</strong> CustomerView.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CustomerList customerList = <span class="keyword">new</span> CustomerList(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerView</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer(<span class="string">&quot;柯南&quot;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">23</span>,<span class="string">&quot;13344453434&quot;</span>,<span class="string">&quot;kennan@123.com&quot;</span>);</span><br><span class="line">        customerList.addCustomer(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterMainMenu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n-----------------客户信息管理软件-----------------\n&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                   1 添 加 客 户&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                   2 修 改 客 户&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                   3 删 除 客 户&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                   4 客 户 列 表&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                   5 退       出\n&quot;</span>);</span><br><span class="line">            System.out.print(<span class="string">&quot;                   请选择(1-5)：&quot;</span>);</span><br><span class="line">            <span class="comment">// 从键盘获取用户1-5的选择</span></span><br><span class="line">            <span class="keyword">char</span> menu = CMUtility.readMenuSelection();</span><br><span class="line">            <span class="comment">// 使用switch-case对用户选择，进行区别处理</span></span><br><span class="line">            <span class="keyword">switch</span>(menu)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    addNewCustomer();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                    modifyCustomer();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                    deleteCustomer();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                    listAllCustomer();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">                    System.out.print(<span class="string">&quot;确认是否退出(Y/N)：&quot;</span>);</span><br><span class="line">                    <span class="keyword">char</span> exit = CMUtility.readConfirmSelection();</span><br><span class="line">                    <span class="keyword">if</span>(exit == <span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">                        isFlag = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(isFlag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNewCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------添加客户---------------------&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line">        String name = CMUtility.readString(<span class="number">5</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;性别：&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> gender = CMUtility.readChar();</span><br><span class="line">        System.out.print(<span class="string">&quot;年龄：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> age = CMUtility.readInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;电话：&quot;</span>);</span><br><span class="line">        String phone = CMUtility.readString(<span class="number">13</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;邮箱：&quot;</span>);</span><br><span class="line">        String email = CMUtility.readString(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装一个对象</span></span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer(name, gender, age, phone, email);</span><br><span class="line">        <span class="comment">// 将此对象添加到CustomerList里的数组中</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = customerList.addCustomer(customer);</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;---------------------添加完成---------------------&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;人数已达上限，添加失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2. 修改客户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------修改客户---------------------&quot;</span>);</span><br><span class="line">        Customer customer;</span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line">        <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请选择待修改客户编号(-1退出)：&quot;</span>);</span><br><span class="line">            index = CMUtility.readInt();</span><br><span class="line">            <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 对于用户来将，我们让index 默认从1开始。</span></span><br><span class="line">           customer = customerList.getCustomer(index -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(customer == <span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;无法找到指定客户！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 修改用户的信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名(&quot;</span> + customer.getName() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果用户输入了姓名，则返回使用输入的信息，如果用户没有输入，直接回车，则返回customer.getName();</span></span><br><span class="line">        String name = CMUtility.readString(<span class="number">5</span>, customer.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;性别(&quot;</span> + customer.getGender() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> gender = CMUtility.readChar(customer.getGender());</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄(&quot;</span> + customer.getAge() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> age = CMUtility.readInt(customer.getAge());</span><br><span class="line">        System.out.println(<span class="string">&quot;电话(&quot;</span> + customer.getPhone() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">        String phone = CMUtility.readString(<span class="number">13</span>, customer.getPhone());</span><br><span class="line">        System.out.println(<span class="string">&quot;邮箱(&quot;</span> + customer.getEmail() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">        String email = CMUtility.readString(<span class="number">20</span>, customer.getEmail());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取用户输入的属性以后，得到最新的Customer对象</span></span><br><span class="line">        customer = <span class="keyword">new</span> Customer(name, gender, age, phone, email);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于用户来讲，我们让index默认从1开始</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = customerList.replanceCustomer(index -<span class="number">1</span>, customer);</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;---------------------修改完成---------------------&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;---------------------修改失败---------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3 删除客户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;---------------------删除客户---------------------&quot;</span>);</span><br><span class="line">       Customer customer;</span><br><span class="line">       <span class="keyword">int</span> index;</span><br><span class="line">       <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;请选择待删除客户编号(-1退出)：&quot;</span>);</span><br><span class="line">           <span class="comment">// 针对普通用户来讲：此index从1开始</span></span><br><span class="line">           index = CMUtility.readInt();</span><br><span class="line">           <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           customer = customerList.getCustomer(index -<span class="number">1</span>);</span><br><span class="line">           <span class="keyword">if</span>(customer == <span class="keyword">null</span>)&#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;无法找到指定的客户！&quot;</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 一旦找到相应的索引位置的customer以后，让用户决定是否确定删除</span></span><br><span class="line">       System.out.println(<span class="string">&quot;确认是否删除(Y/N)：&quot;</span>);</span><br><span class="line">       <span class="keyword">char</span> deleOrNot = CMUtility.readChar();</span><br><span class="line">       <span class="keyword">if</span>(deleOrNot == <span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">           <span class="keyword">boolean</span> flag = customerList.deleteCustomer(index -<span class="number">1</span>);</span><br><span class="line">           <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;---------------------删除完成---------------------&quot;</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;---------------------删除失败---------------------&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listAllCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;---------------------------客户列表---------------------------&quot;</span>);</span><br><span class="line">       <span class="comment">// 获取所有的客户</span></span><br><span class="line">       Customer[] customers = customerList.getAllCustomers();</span><br><span class="line">       <span class="keyword">if</span>(customers.length == <span class="number">0</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;没有任何客户记录！&quot;</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;编号\t\t姓名\t\t性别\t\t年龄\t\t电话\t\t\t\t邮箱&quot;</span>);</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; customers.length; i++)&#123;</span><br><span class="line">               Customer cust = customers[i];</span><br><span class="line">               System.out.println((i + <span class="number">1</span>) + <span class="string">&quot;\t\t&quot;</span> + cust.getName() + <span class="string">&quot;\t\t&quot;</span></span><br><span class="line">                       + cust.getGender() + <span class="string">&quot;\t\t&quot;</span> + cust.getAge() + <span class="string">&quot;\t\t&quot;</span></span><br><span class="line">                       + cust.getPhone() + <span class="string">&quot;\t\t&quot;</span> + cust.getEmail());</span><br><span class="line">               <span class="comment">//方式二：</span></span><br><span class="line">               <span class="comment">//System.out.println((i + 1) + &quot;\t&quot; + cust.info());</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;-------------------------客户列表完成-------------------------&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        CustomerView view = <span class="keyword">new</span> CustomerView();</span><br><span class="line">        view.enterMainMenu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>【util】</strong> CMUtility.java 工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">CMUtility工具类：</span></span><br><span class="line"><span class="comment">将不同的功能封装为方法，就是可以直接通过调用方法使用它的功能，而无需考虑具体的功能实现细节。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CMUtility</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">用于界面菜单的选择。该方法读取键盘，如果用户键入’1’-’5’中的任意字符，则方法返回。返回值为用户键入字符。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readMenuSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27;1&#x27;</span> &amp;&amp; c != <span class="string">&#x27;2&#x27;</span> &amp;&amp;</span><br><span class="line">                c != <span class="string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="string">&#x27;4&#x27;</span> &amp;&amp; c != <span class="string">&#x27;5&#x27;</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">从键盘读取一个字符，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readChar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> str.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">从键盘读取一个字符，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readChar</span><span class="params">(<span class="keyword">char</span> defaultValue)</span> </span>&#123;</span><br><span class="line">        String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (str.length() == <span class="number">0</span>) ? defaultValue : str.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">从键盘读取一个长度不超过2位的整数，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">2</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;数字输入错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">从键盘读取一个长度不超过2位的整数，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">(<span class="keyword">int</span> defaultValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">2</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (str.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> defaultValue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;数字输入错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">从键盘读取一个长度不超过limit的字符串，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readString</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readKeyBoard(limit, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">从键盘读取一个长度不超过limit的字符串，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readString</span><span class="params">(<span class="keyword">int</span> limit, String defaultValue)</span> </span>&#123;</span><br><span class="line">        String str = readKeyBoard(limit, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> str.equals(<span class="string">&quot;&quot;</span>)? defaultValue : str;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">用于确认选择的输入。该方法从键盘读取‘Y’或’N’，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readConfirmSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">false</span>).toUpperCase();</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;Y&#x27;</span> || c == <span class="string">&#x27;N&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">readKeyBoard</span><span class="params">(<span class="keyword">int</span> limit, <span class="keyword">boolean</span> blankReturn)</span> </span>&#123;</span><br><span class="line">        String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            line = scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (line.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (blankReturn) <span class="keyword">return</span> line;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (line.length() &lt; <span class="number">1</span> || line.length() &gt; limit) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;输入长度（不大于&quot;</span> + limit + <span class="string">&quot;）错误，请重新输入：&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>提取码：<strong>qrj3</strong></p><div class="btns rounded grid5">            <a class="button" href='https://pan.baidu.com/s/1awfIy8S5scMSZW6eER9wkg' title='下载源码'><i class='fa fa-download'></i>下载源码</a>          </div>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC基础（上篇）</title>
      <link href="posts/1905208898/"/>
      <url>posts/1905208898/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>资料已经打包放在博客下面（文章末尾）</li><li>源码分析</li><li>源代码</li></ul></blockquote><h2 id="一、SpringMVC-入门案例"><a href="#一、SpringMVC-入门案例" class="headerlink" title="一、SpringMVC 入门案例"></a>一、SpringMVC 入门案例</h2><p><strong>个人 CSDN 博客：</strong><a href="https://blog.csdn.net/qq_45738810/article/details/107729730">CSDN</a></p><p><strong>点击链接查看：</strong><a href="https://blog.csdn.net/qq_45738810/article/details/107671551">SpringMVC 之永远的 Hello world</a></p><h2 id="二、-RequestMapping-注解"><a href="#二、-RequestMapping-注解" class="headerlink" title="二、 @RequestMapping 注解"></a>二、 @RequestMapping 注解</h2><h3 id="1、-RequestMapping-概念"><a href="#1、-RequestMapping-概念" class="headerlink" title="1、@RequestMapping 概念"></a>1、@RequestMapping 概念</h3><ol><li><p>在控制器的类定义及方法定义处都可标注 @RequestMapping</p><p>​ ① 标记在类上：提供初步的映射信息。相对于 WEB 应用的根目录</p><p>​ ② 标记在方法上：提供一步的细分映射信息。相对于标记在类的 URL</p></li><li><p>若类上未标注 @RequestMapping，则方法处标记的 URL 相对于 WEB 应用的根目录</p></li><li><p>作用：DispatcherServlet 截获请求后，就通过控制器上 @RequestMapping 提供的映射信息确定请求所对应的处理方法。</p></li></ol><h3 id="2、RequestMapping-可标注的位置"><a href="#2、RequestMapping-可标注的位置" class="headerlink" title="2、RequestMapping 可标注的位置"></a>2、RequestMapping 可标注的位置</h3><p>@RequestMapping：设置请求映射，把请求和控制层中的方法设置映射关系</p><ul><li>当请求路径和@RequestMapping 的 value 属性值一致时，则该注解的方法即为处理请求的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@RequestMapping 可以加在类上，也可加在方法上。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>若类和方法上加得有，应该一层一层的访问，先访问类，在访问类中的方法</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200730102703.png" alt="image-20200730102655755"></p><h3 id="3、RequestMapping-映射请求方式"><a href="#3、RequestMapping-映射请求方式" class="headerlink" title="3、RequestMapping 映射请求方式"></a>3、RequestMapping 映射请求方式</h3><ol><li><p>method：用来设置请求方式只有客户端发送请求方式和 method 的值一致，才能处理请求。</p><p>请求方式： GET（查询） POST（添加）PUT（修改）DELETE（删除）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;, method = RequestMethod.GET)</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>params: 用来设置客户端传到服务器的数据，支持表达式。</p><p>例如：username !username username=admin username!=admin</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;, params= &#123;&quot;username&quot;,&quot;age!=12&quot;&#125; )</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200730103843.png" alt="image-20200730103842452"></p><ol start="3"><li>headers: 用来设置请求头信息，所发送的请求的请求头信息一定要和 headers 属性中所设置的一致</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;, headers= &#123;&quot;Accept-Language=zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;&#125; )</span></span><br></pre></td></tr></table></figure><h3 id="4、RequestMapping-支持-Ant-路径风格"><a href="#4、RequestMapping-支持-Ant-路径风格" class="headerlink" title="4、RequestMapping 支持 Ant 路径风格"></a>4、RequestMapping 支持 Ant 路径风格</h3><ol><li><p>Ant 风格资源地址支持 3 种匹配</p><p>?：匹配文件名中的一个字符</p><p>*：匹配文件名中的任意字符</p><p>**：** 匹配多层路径</p></li><li><p>@RequestMapping 支持 Ant 风格的 URL</p><p>例如：/user/*/createUser</p><p>匹配 /user/<strong>aaa</strong>/createUser、/user/<strong>bbb</strong>/createUser 等 URL</p><p>例如：/user/**/createUser</p><p>匹配 /user/createUser、/user/**aaa/bbb/**createUser 等 URL</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/*/ant??/**/testAnt&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200730105036.png" alt="image-20200730105035523"></p><h3 id="5、RequestMapping-映射请求占位符-PathVariable-注解"><a href="#5、RequestMapping-映射请求占位符-PathVariable-注解" class="headerlink" title="5、RequestMapping 映射请求占位符 PathVariable 注解"></a>5、RequestMapping 映射请求占位符 PathVariable 注解</h3><p>​ 通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的入参中：URL 中的 {<strong>xxx</strong>} 占位符可以通过 @PathVariable(“<strong>xxx</strong>“) 绑定到操作方法的入参中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testREST/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testREST</span><span class="params">(<span class="meta">@PathVariable</span> Integer id, <span class="meta">@PathVariable</span> String username)</span></span>&#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;id=&quot;</span> + id +<span class="string">&quot;,username=&quot;</span>+username);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200730105748.png" alt="image-20200730105747741"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200730105943.png" alt="image-20200730105942364"></p><h2 id="三、REST"><a href="#三、REST" class="headerlink" title="三、REST"></a>三、REST</h2><h3 id="1、简介-REST"><a href="#1、简介-REST" class="headerlink" title="1、简介 REST"></a>1、简介 REST</h3><p>REST：即 Representational State Transfer 。（资源）表现层状态转化。是目前最流行的一种互联网软件架构。</p><h3 id="2、配置-HiddenHTTPMethodFilter-过滤器"><a href="#2、配置-HiddenHTTPMethodFilter-过滤器" class="headerlink" title="2、配置 HiddenHTTPMethodFilter 过滤器"></a>2、配置 HiddenHTTPMethodFilter 过滤器</h3><p>在<strong>web.xml</strong>中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、原理图"><a href="#3、原理图" class="headerlink" title="3、原理图"></a>3、原理图</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200730234214.png" alt="image-20200730234205312"></p><h3 id="4、代码示例"><a href="#4、代码示例" class="headerlink" title="4、代码示例"></a>4、代码示例</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200731002634.png" alt="image-20200731002633661"></p><ol><li><strong>GET</strong></li></ol><p>在 web 目录下创建 rest.jsp 文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=&quot;testREST/100&quot;&gt;测试GET&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testREST/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;GET,id=&quot;</span>+id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>POST</strong></li></ol><p>【rest.jsp】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;testREST&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试POST&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testREST&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">insertUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;POSt&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>PUT</strong></li></ol><p>【rest.jsp】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;testREST&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试PUT&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testREST&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">insertUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;POSt&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>DELETE</strong></li></ol><p>【rest.jsp】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;testREST/1001&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DELETE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试DELETE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testREST/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;DELETE, id=&quot;</span> + id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：测试 PUT 和 DELETE 中 Tomcat 为 8.0 或者以上，则会出现以下报错</strong></p><p><strong>解决方式：</strong>【 JSP 只允许 GET、POST 或 HEAD】</p><ul><li>在你要跳转到的目标页面的下面这句代码里面添加**isErrorPage=”true”**即可，如下：</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> isErrorPage=<span class="string">&quot;true&quot;</span>%&gt;</span><br></pre></td></tr></table></figure><h2 id="四、处理请求数据"><a href="#四、处理请求数据" class="headerlink" title="四、处理请求数据"></a>四、处理请求数据</h2><p>请求参数：请求参数 cookie 信息 请求头信息….</p><p>JavaWEB: HttpServletRequest</p><p>​ Request.getParameter(参数名)； Request.getParameterMap();</p><p>​ Request.getCookies();</p><p>​ Request.getHeader();</p><h3 id="1、请求处理的方法签名"><a href="#1、请求处理的方法签名" class="headerlink" title="1、请求处理的方法签名"></a>1、请求处理的方法签名</h3><ol><li>Spring MVC 通过分析处理方法的签名(方法名+ 参数列表)， HTTP 请 求信息绑定到处理方法的相应形参中。</li><li>Spring MVC 对控制器处理方法签名的限制是很宽松的，几乎可以按喜欢的任何方式对方法进行签名。</li><li>必要时可以对方法及方法入参标注相应的注解（ @PathVariable 、 @RequestParam、@RequestHeader 等） 、</li><li>Spring MVC 框架会将 HTTP 请求的信息绑定到相应的方法入参中，并根据方法的返回值类型做出相应的后续处理。</li></ol><h3 id="2、-RequestParam-注解"><a href="#2、-RequestParam-注解" class="headerlink" title="2、@RequestParam 注解"></a>2、@RequestParam 注解</h3><ul><li>@RequestParam 可以把请求参数传递给请求方法</li><li>在处理请求的方法中，加入相对应的形参，保证形参数名和传递的数据的参数名保持一致，就可以自动赋值</li><li>value：当不满足赋值条件时，可以使用 value 属性，指定映射关系</li><li>required：设置形参是否赋被赋值，默认为 ture，必须赋值，若设置为 false，则不必须赋值，因此形参的值为 null</li><li>defaultValue：若形参所获取得的值为 null,则设置一个默认值，用在分页和模糊查询中</li></ul><p><strong>代码示例：</strong></p><p>【param.jsp】</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;param&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        username:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">        password:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">        age:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>【ParamController.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/param&quot;,method = RequestMethod.POST)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">param</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;,required =false, defaultValue = &quot;xiaoming&quot;)</span> String name, String password, String age)</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;name=&quot;</span>+name+<span class="string">&quot;,password=&quot;</span>+password+<span class="string">&quot;,age=&quot;</span>+age);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3、-RequsetHeader-注解"><a href="#3、-RequsetHeader-注解" class="headerlink" title="3、@RequsetHeader 注解"></a>3、@RequsetHeader 注解</h3><ol><li>使用@RequestHeader 绑定请求头的属性值</li><li>请求头包含若干个属性，服务器可据此获知客户端的信息，通过@RequestHeader 即可将请求头的属性绑定到处理方法的入参中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/param&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">param</span><span class="params">(<span class="meta">@RequestHeader(&quot;Accept-Language&quot;)</span> String AcceptLanguage)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;AcceptLanguage=&quot;</span>+AcceptLanguage);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、-CookieValue-注解"><a href="#4、-CookieValue-注解" class="headerlink" title="4、@CookieValue 注解"></a>4、@CookieValue 注解</h3><ol><li>使用@CookieValue 绑定请求中的 cookie 值</li><li>@CookieValue 可让处理的方法入参绑定某个 Cookie 值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/param&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">param</span><span class="params">(<span class="meta">@CookieValue(value =&quot;JSESSIONID&quot; )</span> String  JSESSIONID)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;JSESSIONID&quot;</span>+JSESSIONID);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、使用-POJO-作为参数"><a href="#5、使用-POJO-作为参数" class="headerlink" title="5、使用 POJO 作为参数"></a>5、使用 POJO 作为参数</h3><ol><li>使用 POJO 对象绑定请求参数值</li><li>Spring MVC 会按请求参数名和 POJO 属性名进行自动匹配，自动为该对象填充属性值，支持级联赋值。</li></ol><p>【param.jsp】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;param&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        age:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        province:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;address.province&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        city:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;address.city&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        county:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;address.county&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要创建 User 类 和 Address 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String county;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【ParaController.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/param&quot;,method = RequestMethod.POST)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">param</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">     System.out.println(user);</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="6、注意：如果中文出现乱码（idea）"><a href="#6、注意：如果中文出现乱码（idea）" class="headerlink" title="6、注意：如果中文出现乱码（idea）"></a>6、注意：如果中文出现乱码（idea）</h3><p>​ 需要配置字符编码过滤器， 且配置其他过滤器之前，如（HiddenHttpMethodFilter），否则不起作用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置字符集 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在修改 Tomcat</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200801002757.png" alt="image-20200801002756151"></p><p>添加：**-Dfile.encoding=UTF-8**</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200801002719.png" alt="image-20200801002609560"></p><h3 id="7、使用-Servlet-原生-API-作为参数"><a href="#7、使用-Servlet-原生-API-作为参数" class="headerlink" title="7、使用 Servlet 原生 API 作为参数"></a>7、使用 Servlet 原生 API 作为参数</h3><ol><li>MVC 的 Handler 方法可以接受的 ServletAPI 类型的参数</li></ol><ul><li>HttpServletRequest</li><li>HttpServletResponse</li><li>HttpSession</li><li>java.security.Principal</li><li>Locale</li><li>InputStream</li><li>OutputStream</li><li>Reader</li><li>Writer</li></ul><p><strong>代码示例：</strong></p><p>需要导入</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200731112920.png" alt="image-20200731112912514"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/param&quot;, method = RequestMethod.POST)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">param</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">       String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">       System.out.println(username);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/param&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">param</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Writer out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;param&quot;</span> + request +<span class="string">&quot;,&quot;</span> + response);</span><br><span class="line">    out.write(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    <span class="comment">// return &quot;success&quot;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、处理响应数据"><a href="#五、处理响应数据" class="headerlink" title="五、处理响应数据"></a>五、处理响应数据</h2><h3 id="1、SpringMVC-输出模型数据的途径"><a href="#1、SpringMVC-输出模型数据的途径" class="headerlink" title="1、SpringMVC 输出模型数据的途径"></a>1、SpringMVC 输出模型数据的途径</h3><ol><li><strong>ModelAndView</strong>: 处理方法返回值类型为 ModelAndView 时，方法体即可通过该对象添加模型数据。</li><li><strong>Map</strong> 和 <strong>Model</strong>: 入参 org.springframework.ui.Model、org.springframework.ui.ModelMap 或 java.uti.Map 时，处理方法返回时， Map 中的数据会自动添加到模型中。</li></ol><h3 id="2、处理模型数据之-ModelAndView"><a href="#2、处理模型数据之-ModelAndView" class="headerlink" title="2、处理模型数据之 ModelAndView"></a>2、处理模型数据之 ModelAndView</h3><ol><li><p>两个重要的成员变量:</p><p>private Object view; 视图信息</p><p>private ModelMap model; 模型数据</p></li><li><p>添加模型数据</p><p>MoelAndView addObject(String attributeName, Object attributeValue) 设置模型数据</p><p>ModelAndView addAllObject(Map&lt;String, ?&gt; modelMap)</p></li><li><p>设置视图</p><p>void setView(View view) 设置视图对象</p><p>void setViewName(String viewName) 设置视图名字</p></li><li><p>获取模型数据</p><p>protected Map&lt;String, Object&gt; getModelInternal() 获取模型数据</p><p>public ModelMap getModelMap()</p><p>public Map&lt;String, Object&gt; getModel()</p></li></ol><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/param&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">param</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mav.addObject(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;root&quot;</span>);<span class="comment">//往request作用域中放值</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);<span class="comment">//设置视图名称，实现页面跳转</span></span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【success.jsp】</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;成功&lt;/h1&gt;</span><br><span class="line">    $&#123;requestScope.username&#125;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="3、处理模型数据之-Map-Model"><a href="#3、处理模型数据之-Map-Model" class="headerlink" title="3、处理模型数据之 Map Model"></a>3、处理模型数据之 Map Model</h3><p><strong>第一种方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/param&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">param</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;root&quot;</span>); <span class="comment">// 往作用域中放值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;<span class="comment">// 返回示图名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二种方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/param&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">param</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;张三&quot;</span>);<span class="comment">// 向作用域中放值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; <span class="comment">// 返回试图的名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、视图解析"><a href="#六、视图解析" class="headerlink" title="六、视图解析"></a>六、视图解析</h2><h3 id="1、SpringMVC-解析视图概述"><a href="#1、SpringMVC-解析视图概述" class="headerlink" title="1、SpringMVC 解析视图概述"></a>1、SpringMVC 解析视图概述</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200801003000.png" alt="image-20200801003000222"></p><h3 id="2、视图和视图解析器"><a href="#2、视图和视图解析器" class="headerlink" title="2、视图和视图解析器"></a>2、视图和视图解析器</h3><ol><li>请求处理方法执行完成后，最终返回一个 ModelAndView 对象。对于那些返回 String，View 或 ModeMap 等类型的处理方法， <strong>Spring MVC 也会在内部将它们装配成一个 ModelAndView 对象</strong>，它包含了逻辑名和模型对象的视图。</li><li>Spring MVC 借助视图解析器（ViewResolver）得到最终的视图对象（View），最终的视图可以是 JSP。</li></ol><h3 id="3、常用的试图实现类"><a href="#3、常用的试图实现类" class="headerlink" title="3、常用的试图实现类"></a>3、常用的试图实现类</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200801003630.png" alt="image-20200801003629736"></p><h3 id="4、JstlView"><a href="#4、JstlView" class="headerlink" title="4、JstlView"></a>4、JstlView</h3><ol><li><p>若项目使用了 JSTL，则 SpringMVC 会自动把试图由 InternallResoureView 转为 JstlView</p><p><strong>（断点调试，将 JSTL 的 jar 包增加到项目中，视图解析器会自动修改为 JstlView）</strong></p></li><li><p><strong>代码示例：</strong>增加 jstl 标签 jar 包（<strong>断点调试，这时的 View 对象就是 JstlView</strong>）</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200801103935.png" alt="image-20200801103926319"></p><h3 id="5、试图解析器"><a href="#5、试图解析器" class="headerlink" title="5、试图解析器"></a>5、试图解析器</h3><ol><li><p>SpringMVC 为逻辑视图名的解析提供了不同的策略，可以在 SpringMVC 上下文中<strong>配置一种或多种解析策略， 并指定他们之间的先后顺序</strong>。每一种映射策略对应一个具体的视图解析器实现类。</p></li><li><p>视图解析器的作用比较单一：将逻辑视图解析为一个具体的视图对象。</p></li><li><p>所有的视图解析器都必须实现 <strong>ViewResolver</strong> 接口：</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200801104223.png" alt="image-20200801104222950"></p><h3 id="6、常用的试图解析器实现类"><a href="#6、常用的试图解析器实现类" class="headerlink" title="6、常用的试图解析器实现类"></a>6、常用的试图解析器实现类</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200801104934.png" alt="image-20200801104933069"></p><ol><li>可以选择一个试图解析器或混用多种试图解析器</li><li>每个试图解析器都实现了 Ordered 接口并开放一个<strong>order</strong> 属性，可以通过 order 属性指定解析器的优先顺序， <strong>order 越小优先级越高</strong>。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/view/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>InternalResourceViewResolver<ol><li>JSP 是最常见的视图技术，可以使用 InternalResourceViewResolve 作为视图解析器：</li></ol></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200801105533.png" alt="image-20200801105532299"></p><h3 id="7、重定向"><a href="#7、重定向" class="headerlink" title="7、重定向"></a>7、重定向</h3><ol><li>一般情况下，控制器方法返回字符串类型的值会被当成逻辑试图处理</li><li>如果返回的字符串中带 <strong>forward:</strong> 或 <strong>redirect:</strong> 前缀时，SpringMVC 会对他们进行特殊的处理： 将 forward: 和 redirect: 当成指示符，其后的字符串作为 URL 来处理。</li><li><strong>redirect:success.jsp</strong>：会完成一个到 success.jsp 的重定向的操作</li><li><strong>forward:success.jsp</strong>：会完成一个到 success.jsp 的转发操作</li></ol><p><strong>代码示例：</strong></p><p>【redirect.jsp】在 Web 目录下创建</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=&quot;redirect&quot;&gt;redirect测试&lt;/a&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;a href=&quot;forward&quot;&gt;forward测试&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>【RedirectTest.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedirectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/redirect&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">redirect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;redirect测试&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/forward&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">forward</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;forward测试&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重定向原理：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200801112355.png" alt="image-20200801112354760"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200801112411.png" alt="image-20200801112410210"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200801112434.png" alt="image-20200801112433685"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200801112450.png" alt="image-20200801112449534"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200801112528.png" alt="image-20200801112527472"></p><ul><li><strong>return “forward:/index.jsp”</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200801112551.png" alt="image-20200801112550617"></p><p><strong>提取码：pwbr</strong></p><div class="btns rounded grid5">            <a class="button" href='https://pan.baidu.com/s/1RIAJmyqZLMLN1NTqNup2ig' title='查看文档'><i class='fa fa-book'></i>查看文档</a>          </div>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之反射</title>
      <link href="posts/1339733598/"/>
      <url>posts/1339733598/</url>
      
        <content type="html"><![CDATA[<h2 id="一、反射的概念"><a href="#一、反射的概念" class="headerlink" title="一、反射的概念"></a>一、反射的概念</h2><h3 id="1、反射的理解"><a href="#1、反射的理解" class="headerlink" title="1、反射的理解"></a>1、反射的理解</h3><p>Reflection(反射) 是被视为动态语言的关键，反射的机制允许程序在执行期间借助 Reflection API 取得任何类的内部信息，并能直接操作任意对象的内部属性方法。</p><p>框架 = 反射 + 注解 +设计模式</p><h3 id="2、反射的”动态性”"><a href="#2、反射的”动态性”" class="headerlink" title="2、反射的”动态性”"></a>2、反射的”动态性”</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">           <span class="keyword">int</span> num = <span class="keyword">new</span> Random().nextInt(<span class="number">3</span>); <span class="comment">//0,1,2</span></span><br><span class="line">           String classPath = <span class="string">&quot;&quot;</span>;</span><br><span class="line">           <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                   classPath = <span class="string">&quot;java.util.Date&quot;</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                   classPath = <span class="string">&quot;java.lang.object&quot;</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                   classPath = <span class="string">&quot;com.oy.online.reflect&quot;</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               Object obj = getInstance(classPath);</span><br><span class="line">               System.out.println(obj);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">(String classPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       Class clazz = Class.forName(classPath);</span><br><span class="line">       <span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3、反射机制提供的功能"><a href="#3、反射机制提供的功能" class="headerlink" title="3、反射机制提供的功能"></a>3、反射机制提供的功能</h3><ul><li>在运行时判断一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li></ul><h3 id="4、相关-AIP"><a href="#4、相关-AIP" class="headerlink" title="4、相关 AIP"></a>4、相关 AIP</h3><ul><li>java.lang.Class: 反射的源头</li><li>java.lang.reflect.Method</li><li>java.lang.reflect.Field</li><li>java.lang.reflect.Consructor</li></ul><h2 id="二、Class-类的理解和获取-Class-实例"><a href="#二、Class-类的理解和获取-Class-实例" class="headerlink" title="二、Class 类的理解和获取 Class 实例"></a>二、Class 类的理解和获取 Class 实例</h2><h3 id="1、Class-类的理解"><a href="#1、Class-类的理解" class="headerlink" title="1、Class 类的理解"></a>1、Class 类的理解</h3><ol><li><p>类的加载过程：</p><p>程序经过 javac.exe 命令以后，会生成一个多字节码文件（.class 结尾），接着我们使用 java.exe 对某个字节码文件进行解释运行。相当于将某个字节码文件记载到内存中。此过程就称为类的加载。加载到内存中的类，我们称为运行时类，就作为 Class 的一个实例。</p></li><li><p>class 的实例就对应着一个运行时类。</p></li><li><p>加载到内存中的运行时类，会缓存一定的时间，在此时间之内，我们可以通过不同的方式类获取运行类。</p></li></ol><h3 id="2、获取-Class-实例的方式"><a href="#2、获取-Class-实例的方式" class="headerlink" title="2、获取 Class 实例的方式"></a>2、获取 Class 实例的方式</h3><p><strong>方式一：</strong>调用运行时类的属性：.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line">System.out.println(clazz);</span><br></pre></td></tr></table></figure><p><strong>方式二：</strong>通过运行时类的对象,调用 getClass()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">Class clazz = p1.getClass();</span><br><span class="line">System.out.println(clazz);</span><br></pre></td></tr></table></figure><p><strong>方式三：</strong>调用 Class 的静态方法：forName(String classPath)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.oy.online.bean.Person&quot;</span>);</span><br><span class="line">System.out.println(clazz);</span><br></pre></td></tr></table></figure><p><strong>方式四：</strong>使用类的加载器：ClassLoader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader classLoader = ReflectTest2.class.getClassLoader();</span><br><span class="line">Class&lt;?&gt; clazz = classLoader.loadClass(<span class="string">&quot;com.oy.online.bean.Person&quot;</span>);</span><br><span class="line">System.out.println(clazz);</span><br></pre></td></tr></table></figure><h3 id="3、Class-实例化的结构"><a href="#3、Class-实例化的结构" class="headerlink" title="3、Class 实例化的结构"></a>3、Class 实例化的结构</h3><ol><li>class：外部类、成员（成员内部类，静态内部类）、局部内部类、匿名内部类</li><li>interface：接口</li><li>[]: 数组</li><li>enum: 枚举</li><li>annotation: 注解@interface</li><li>primitive type : 基本数据类型</li><li>viod</li></ol><h2 id="三、了解-ClassLoad"><a href="#三、了解-ClassLoad" class="headerlink" title="三、了解 ClassLoad"></a>三、了解 ClassLoad</h2><h3 id="1、类的加载过程"><a href="#1、类的加载过程" class="headerlink" title="1、类的加载过程"></a>1、类的加载过程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200730161715.png" alt="image-20200730161708535"></p><h3 id="2、类的加载器的作用"><a href="#2、类的加载器的作用" class="headerlink" title="2、类的加载器的作用"></a>2、类的加载器的作用</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200730161836.png" alt="image-20200730161835640"></p><h3 id="3、类的加载器的分类"><a href="#3、类的加载器的分类" class="headerlink" title="3、类的加载器的分类"></a>3、类的加载器的分类</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200730162008.png" alt="image-20200730162007821"></p><h3 id="4、Java-类编译、运行的执行的流程"><a href="#4、Java-类编译、运行的执行的流程" class="headerlink" title="4、Java 类编译、运行的执行的流程"></a>4、Java 类编译、运行的执行的流程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200730162110.png" alt="image-20200730162110172"></p><h3 id="5、试用-Classloader-加载-src-目录下的配置文件"><a href="#5、试用-Classloader-加载-src-目录下的配置文件" class="headerlink" title="5、试用 Classloader 加载 src 目录下的配置文件"></a>5、试用 Classloader 加载 src 目录下的配置文件</h3><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 此时的文件默认在当前module下。</span></span><br><span class="line">        <span class="comment">// 读取配置文件的方式一：</span></span><br><span class="line"><span class="comment">//        FileInputStream fis = new FileInputStream(&quot;jdbc.properties&quot;);</span></span><br><span class="line"><span class="comment">//        pros.load(fis);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取配置二：使用ClassLoader</span></span><br><span class="line">        <span class="comment">// 配置文件默认识别为：当前module的src下</span></span><br><span class="line">        ClassLoader clazz = ReflectTest2.class.getClassLoader();</span><br><span class="line">        InputStream is = clazz.getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        pros.load(is);</span><br><span class="line"></span><br><span class="line">        String user = pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user =&quot;</span>+ user + <span class="string">&quot;,password =&quot;</span>+ password);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="四、反射应用一：创建运行时类的对象"><a href="#四、反射应用一：创建运行时类的对象" class="headerlink" title="四、反射应用一：创建运行时类的对象"></a>四、反射应用一：创建运行时类的对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line">Person obj = clazz.newInstance();</span><br><span class="line">System.out.println(obj);</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p><strong>newInstance()</strong>: 调用此方法的运行类的对象。内部调用了运行类的空参的构造器。</p><p>要想方法正常的创建运行时类的对象，要求：</p><ul><li>运行时必须是提供空参构造器</li><li>空参的构造器的访问权限的够。通常，设置为 public.</li></ul><p>在 javabean 中要求提供一个 public 的空参构造器。原因：</p><ul><li>便于通过反射，创建运行时类的对象</li><li>便于子类继承此运行类，默认调用 super()时，保证父类此构造器</li></ul><h2 id="五、反射应用二：获取运行时类的完整结构"><a href="#五、反射应用二：获取运行时类的完整结构" class="headerlink" title="五、反射应用二：获取运行时类的完整结构"></a>五、反射应用二：获取运行时类的完整结构</h2><p>通过反射，获取对应的运行时类中所有的属性、方法、构造器、父类、接口、父类的泛型、包、注解、异常等…</p><ul><li>getFields()：获取当前运行时类及其父类中声明为 public 访问权限的属性</li><li>getDeclaredFields()：获取当前运行类中声明的属性。（不包含父类中声明的属性）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取属性结构</span></span><br><span class="line">    <span class="comment">// getFields():获取当前运行时类及其父类中声明为public访问权限的属性</span></span><br><span class="line">    Field[] fields = clazz.getFields();</span><br><span class="line">    <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getDeclaredFields():获取当前运行类中声明的属性。（不包含父类中声明的属性）</span></span><br><span class="line">    Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span> (Field f : declaredFields) &#123;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getMethods(): 获取当前运行时类及其所父类中声明为 public 权限的方法</li><li>getDeclaredMethods():获取当前运行时类中声明的所方法。（不包含父类中声明的方法）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getMethods():获取当前运行时类及其所父类中声明为public权限的方法</span></span><br><span class="line">    Method[] methods = clazz.getMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;***********************&quot;</span>);</span><br><span class="line">    <span class="comment">//getDeclaredMethods():获取当前运行时类中声明的所方法。（不包含父类中声明的方法）</span></span><br><span class="line">    Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method f : declaredMethods) &#123;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getConstructors(): 获取当前运行时类中声明为 public 的构造器</li><li>getDeclaredConstructors(): 获取当前运行时类中声明的所的构造器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line">    <span class="comment">//getConstructors():获取当前运行时类中声明为public的构造器</span></span><br><span class="line">    Constructor&lt;?&gt;[] constructors = clazz.getConstructors();</span><br><span class="line">    <span class="keyword">for</span> (Constructor&lt;?&gt; c : constructors) &#123;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;**************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getDeclaredConstructors():获取当前运行时类中声明的所的构造器</span></span><br><span class="line">    Constructor&lt;?&gt;[] declaredConstructors = clazz.getDeclaredConstructors();</span><br><span class="line">    <span class="keyword">for</span> (Constructor&lt;?&gt; d : declaredConstructors) &#123;</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getSuperclass()：获取运行时类的父类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line">    Class&lt;? <span class="keyword">super</span> Person&gt; superclass = clazz.getSuperclass();</span><br><span class="line">    System.out.println(superclass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getGenericSuperclass()： 获取运行时类的带泛型的父类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line">    Type genericSuperclass = clazz.getGenericSuperclass();</span><br><span class="line">    System.out.println(genericSuperclass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line">    Type genericSuperclass = clazz.getGenericSuperclass();</span><br><span class="line">    ParameterizedType paramType = (ParameterizedType) genericSuperclass;</span><br><span class="line">    <span class="comment">// 获取泛型类型</span></span><br><span class="line">    Type[] actualTypeArguments = paramType.getActualTypeArguments();</span><br><span class="line">    System.out.println(((Class)actualTypeArguments[<span class="number">0</span>]).getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getInterfaces(): 获取运行时类实现的接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] interfaces = clazz.getInterfaces();</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; i : interfaces) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取运行时类的父类实现接口</span></span><br><span class="line">    Class&lt;?&gt;[] interfaces1 = clazz.getSuperclass().getInterfaces();</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; c : interfaces1) &#123;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>getPackage(): 获取运行时类所在的包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line">    Package pack = clazz.getPackage();</span><br><span class="line">    System.out.println(pack);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getAnnotations(): 获取运行时类声明的注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line">    Annotation[] annotations = clazz.getAnnotations();</span><br><span class="line">    <span class="keyword">for</span> (Annotation a : annotations) &#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="六、反射应用三：调用运行时类的指定结构"><a href="#六、反射应用三：调用运行时类的指定结构" class="headerlink" title="六、反射应用三：调用运行时类的指定结构"></a>六、反射应用三：调用运行时类的指定结构</h2><h3 id="1、调用指定的属性"><a href="#1、调用指定的属性" class="headerlink" title="1、调用指定的属性"></a>1、调用指定的属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建运行时类的对象</span></span><br><span class="line">    Person p = clazz.newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.  getDeclaredField(String fieldName):获取运行时类中指定变量名的属性</span></span><br><span class="line">    Field name = clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 保证当前属性是可访问的</span></span><br><span class="line">    name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.获取、设置指定属性对象的此属性</span></span><br><span class="line">    name.set(p,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(name.get(p));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、调用指定的方法"><a href="#2、调用指定的方法" class="headerlink" title="2、调用指定的方法"></a>2、调用指定的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建运行时类的对象</span></span><br><span class="line">    Person p = clazz.newInstance();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.获取指定的某个方法</span></span><br><span class="line"><span class="comment">    getDeclaredMethod():参数1 ：指明获取的方法的名称  参数2：指明获取的方法的形参列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Method show = clazz.getDeclaredMethod(<span class="string">&quot;show&quot;</span>, String.class);</span><br><span class="line">    <span class="comment">// 2.保证当前方法时可访问的</span></span><br><span class="line">    show.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">    3. 调用方法的invoke():参数1：方法的调用者  参数2：给方法形参赋值的实参</span></span><br><span class="line"><span class="comment">    invoke()的返回值即为对应类中调用的方法的返回值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object returnValue = show.invoke(p, <span class="string">&quot;CHN&quot;</span>);<span class="comment">//String nation = p.show(&quot;CHN&quot;);</span></span><br><span class="line">    System.out.println(returnValue);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  private static void showDesc</span></span><br><span class="line">    Method showDesc = clazz.getDeclaredMethod(<span class="string">&quot;showDesc&quot;</span>);</span><br><span class="line">    showDesc.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 如果调用的运行时类中的方法没返回值，则此invoke()返回null</span></span><br><span class="line">    Object returnVal = showDesc.invoke(Person.class);</span><br><span class="line">    System.out.println(returnVal);<span class="comment">// null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、调用指定的构造器"><a href="#3、调用指定的构造器" class="headerlink" title="3、调用指定的构造器"></a>3、调用指定的构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private Person(String name)</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.获取指定的构造器</span></span><br><span class="line"><span class="comment">    getDeclaredConstructor():参数：指明构造器的参数列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Constructor&lt;Person&gt; constructor  = clazz.getDeclaredConstructor(String.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.保证此构造器可访问的</span></span><br><span class="line">    constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.调用此构造器创建运行时类的对象</span></span><br><span class="line">    Person per = constructor.newInstance(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    System.out.println(per);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、反射应用四：动态代理"><a href="#七、反射应用四：动态代理" class="headerlink" title="七、反射应用四：动态代理"></a>七、反射应用四：动态代理</h2><h3 id="1、代理模式的原理"><a href="#1、代理模式的原理" class="headerlink" title="1、代理模式的原理"></a>1、代理模式的原理</h3><p>​ 使用一个代理将对象包装起来，然后用该代理对象去掉原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。</p><h3 id="2、静态代理"><a href="#2、静态代理" class="headerlink" title="2、静态代理"></a>2、静态代理</h3><ol><li>举例</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">实现Runnable接口的方法创建多线程。</span><br><span class="line">Class MyThread implements Runnable&#123;&#125;<span class="comment">//相当于被代理类</span></span><br><span class="line">Class Thread implements Runnable&#123;&#125;<span class="comment">//相当于代理类</span></span><br><span class="line">main()&#123;</span><br><span class="line">    MyTread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(t);</span><br><span class="line">    thresd.start();<span class="comment">//启动线程；调用线程的run()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>静态代理的缺点</li></ol><ul><li>代理类和目标对象的类都是在编译间确定下来的，不利于程序的扩展。</li><li>每一个代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。</li></ul><ol start="3"><li><p>动态代理的特点</p><p>动态代理是指客户端通过代理类来调用其他对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象</p></li></ol><h3 id="3、动态代理的实现"><a href="#3、动态代理的实现" class="headerlink" title="3、动态代理的实现"></a>3、动态代理的实现</h3><ol><li><p>需要解决的两个主要问题：</p><p>问题一：如何根据加载到内存中的被代理类，动态的创建一个代理类及其对象。（通过 Proxy.newProxyInstance()实现）</p><p>问题二：当通过代理类的对象调用方法 a 时，如何动态的去调用被代理类的同名方法 a。(通过 InvocationHandler 接口的实现类及其方法 invoke())</p></li><li><p>代码示例</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Human</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getBelief</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">implements</span> <span class="title">Human</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBelief</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I believe I can fly!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我喜欢吃&quot;</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanUtil</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====================通用方法一====================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====================通用方法二====================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用此方法，返回一个代理类的对象。解决问题一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxyInstance</span><span class="params">(Object obj)</span></span>&#123;<span class="comment">//obj:被代理类的对象</span></span><br><span class="line">        MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line"></span><br><span class="line">        handler.bind(obj);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(),handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj;<span class="comment">//需要使用被代理类的对象进行赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke()</span></span><br><span class="line">    <span class="comment">//将被代理类要执行的方法a的功能就声明在invoke()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        HumanUtil util = <span class="keyword">new</span> HumanUtil();</span><br><span class="line">        util.method1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法</span></span><br><span class="line">        <span class="comment">//obj:被代理类的对象</span></span><br><span class="line">        Object returnValue = method.invoke(obj,args);</span><br><span class="line"></span><br><span class="line">        util.method2();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上述方法的返回值就作为当前类中的invoke()的返回值。</span></span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SuperMan superMan = <span class="keyword">new</span> SuperMan();</span><br><span class="line">        <span class="comment">//proxyInstance:代理类的对象</span></span><br><span class="line">        Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan);</span><br><span class="line">        <span class="comment">//当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法</span></span><br><span class="line">        String belief = proxyInstance.getBelief();</span><br><span class="line">        System.out.println(belief);</span><br><span class="line">        proxyInstance.eat(<span class="string">&quot;四川麻辣烫&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*****************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        NikeClothFactory nikeClothFactory = <span class="keyword">new</span> NikeClothFactory();</span><br><span class="line"></span><br><span class="line">        ClothFactory proxyClothFactory = (ClothFactory) ProxyFactory.getProxyInstance(nikeClothFactory);</span><br><span class="line"></span><br><span class="line">        proxyClothFactory.produceCloth();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java之网络编程</title>
      <link href="posts/1520998390/"/>
      <url>posts/1520998390/</url>
      
        <content type="html"><![CDATA[<h2 id="一、InetAddress-类的使用"><a href="#一、InetAddress-类的使用" class="headerlink" title="一、InetAddress 类的使用"></a>一、InetAddress 类的使用</h2><h3 id="1、实现网络通信需要解决的两个问题"><a href="#1、实现网络通信需要解决的两个问题" class="headerlink" title="1、实现网络通信需要解决的两个问题"></a>1、实现网络通信需要解决的两个问题</h3><ol><li>如何准确的定位网络上一台或多台的主机;定位主机上的特定应用</li><li>找到主机后如何高效地进行数据传输</li></ol><h3 id="2、网络通信的两个要素"><a href="#2、网络通信的两个要素" class="headerlink" title="2、网络通信的两个要素"></a>2、网络通信的两个要素</h3><ol><li>对应问题一：IP 和端口号</li><li>对应问题二：提供网络协议：TCP/IP 参考模型（应用层、传输层、网络层、物理+数据链路层）</li></ol><h3 id="3、通信要素一：IP-和端口号"><a href="#3、通信要素一：IP-和端口号" class="headerlink" title="3、通信要素一：IP 和端口号"></a>3、通信要素一：IP 和端口号</h3><p><strong>① IP 的解释</strong></p><ol><li>唯一的标识 Internet 上的计算机（通信载体）</li><li>在 Java 中使用 InternetAddress 类代表 IP</li><li>IP 分类： IPV4 和 IPV6 ； 万维网 和 局域网</li><li>域名：<a href="http://www.baidu.com/">www.baidu.com</a> ;</li><li>域名解析：域名容易记忆。当在连接网络时输入一个主机的域名后，域名服务器（DNS）负责将域名转化为 IP 地址，这样才能和本地建立连接。– 域名解析</li><li>本地回路地址：127.0.0.1 对应着：localhost</li></ol><p><strong>② InetAddress 类</strong></p><p>此类的一个对象就代表着一个具体的 IP 地址</p><ol><li>实例化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getByName(String host)、getLocalhost()</span><br></pre></td></tr></table></figure><ol start="2"><li>常用方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getHostName()/getHostAddress()</span><br></pre></td></tr></table></figure><h3 id="4、端口号"><a href="#4、端口号" class="headerlink" title="4、端口号"></a>4、端口号</h3><p><strong>要求：</strong>不同的进程不同的端口号</p><p><strong>范围：</strong>被规定为一个 16 位的整数 0~65535</p><p>端口号与 IP 地址的组合得出一个网络套接字：Socket</p><h3 id="5、通信要素二：网络通信协议"><a href="#5、通信要素二：网络通信协议" class="headerlink" title="5、通信要素二：网络通信协议"></a>5、通信要素二：网络通信协议</h3><p><strong>① 分类模型</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200729132548.png" alt="image-20200728181113307"></p><p><strong>② TCP 和 UDP 的区别</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200729132551.png" alt="image-20200728181156041"></p><p><strong>③ TCP 三次握手和四次挥手</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200729132554.png" alt="image-20200728181611749"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200729132557.png" alt="image-20200728181636149"></p><p><strong>④ 补充</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// geByName 确定主机名称的IP地址</span></span><br><span class="line">InetAddress.getByName(<span class="string">&quot;192.168.12.67&quot;</span>);</span><br><span class="line"><span class="comment">// 获取本地IP</span></span><br><span class="line">InetAddress.getLocalhost();</span><br><span class="line"><span class="comment">// 获取此IP地址的主机名。</span></span><br><span class="line">inet2.getHostName()</span><br><span class="line"><span class="comment">// 返回文本显示中的IP地址字符串</span></span><br><span class="line">inet2.getHostAddress()</span><br></pre></td></tr></table></figure><h2 id="二、TCP-网络编程"><a href="#二、TCP-网络编程" class="headerlink" title="二、TCP 网络编程"></a>二、TCP 网络编程</h2><p><strong>代码示例：</strong>客户端发送信息给服务端，服务端将数据显示在控制台上</p><p><strong>客户端：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Socket socket = <span class="keyword">null</span>;</span><br><span class="line">       OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 1.创建Socket对象，指明服务器的ip和端口号</span></span><br><span class="line">           InetAddress inet = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">           socket = <span class="keyword">new</span> Socket(inet, <span class="number">8899</span>);</span><br><span class="line">           <span class="comment">// 获取一个输出流，用于输出数据</span></span><br><span class="line">           os = socket.getOutputStream();</span><br><span class="line">           os.write(<span class="string">&quot;你好，我是客户端&quot;</span>.getBytes());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span>(os != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                   os.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span>(socket != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                   socket.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>服务端：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Server</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建服务器=端的ServerSocket,指明自己的端口号</span></span><br><span class="line">        serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8899</span>);</span><br><span class="line">        <span class="comment">// 2.调用accept()表示接口来自客户端的socket</span></span><br><span class="line">        socket = serverSocket.accept();</span><br><span class="line">        <span class="comment">// 3.获取输入流</span></span><br><span class="line">        is = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.读取输入流中的数据</span></span><br><span class="line">        baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bt = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = is.read(bt)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            baos.write(bt, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;收到了来自：&quot;</span>+socket.getInetAddress().getHostAddress()+<span class="string">&quot;的数据&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(serverSocket !=  <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                serverSocket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(socket != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(is != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                is.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(baos != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                baos.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码示例 2：</strong>客户端发送文件给服务端，服务端将文件保存在本地。</p><p><strong>客户端：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">    FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">8899</span>);</span><br><span class="line">        os = socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] bt = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(bt)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(bt, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(os != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                os.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(socket != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>服务端：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Server</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServerSocket ss = <span class="keyword">null</span>;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ss = <span class="keyword">new</span> ServerSocket(<span class="number">8899</span>);</span><br><span class="line">        socket = ss.accept();</span><br><span class="line">        is = socket.getInputStream();</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;图片2.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bt = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = is.read(bt)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(bt, <span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ss != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ss.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(socket != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(is != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、UDP-编程"><a href="#三、UDP-编程" class="headerlink" title="三、UDP 编程"></a>三、UDP 编程</h2><p><strong>发送端：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sender</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">&quot;我是UDP方式发送的导弹&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] data = str.getBytes();</span><br><span class="line">        InetAddress inet = InetAddress.getLocalHost();</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data, <span class="number">0</span>, data.length, inet, <span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接收端：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiver</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line"></span><br><span class="line">    socket.receive(packet);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(packet.getData(),<span class="number">0</span>,packet.getLength()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、URL-编程"><a href="#四、URL-编程" class="headerlink" title="四、URL 编程"></a>四、URL 编程</h2><h3 id="1、URL-Uniform-Resource-Locator-的理解"><a href="#1、URL-Uniform-Resource-Locator-的理解" class="headerlink" title="1、URL(Uniform Resource Locator) 的理解"></a>1、URL(Uniform Resource Locator) 的理解</h3><p>​ 统一资源定位符，对应着互联网的某一资源地址</p><h3 id="2、URL-的-5-个基本结构"><a href="#2、URL-的-5-个基本结构" class="headerlink" title="2、URL 的 5 个基本结构"></a>2、URL 的 5 个基本结构</h3><ul><li><p><a href="http://localhost:8080/examples/beauty.jpg?username=Tom">http://localhost:8080/examples/beauty.jpg?username=Tom</a></p><p>协议 主机名 端口号 资源地址 参数列表</p></li></ul><h3 id="3、实例化"><a href="#3、实例化" class="headerlink" title="3、实例化"></a>3、实例化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://localhost:8080/examples/beauty.jpg?username=Tom&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="4、常用方法"><a href="#4、常用方法" class="headerlink" title="4、常用方法"></a>4、常用方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public String getProtocol()</td><td>获取该 URL 的协议名</td></tr><tr><td>public String getHost()</td><td>获取 URL 的主机名</td></tr><tr><td>public String getPort()</td><td>获取 URL 的端口号</td></tr><tr><td>public String getPath()</td><td>获取 URL 的文件路径</td></tr><tr><td>public String getFile()</td><td>获取 URL 的文件名</td></tr><tr><td>public String getQuery()</td><td>获取 URL 的查询名</td></tr></tbody></table><h2 id="五、可以读取、下载对应的-url-资源"><a href="#五、可以读取、下载对应的-url-资源" class="headerlink" title="五、可以读取、下载对应的 url 资源"></a>五、可以读取、下载对应的 url 资源</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HttpURLConnection urlConnection = <span class="keyword">null</span>;</span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://localhost:8080/examples/beauty.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line"></span><br><span class="line">        urlConnection.connect();</span><br><span class="line"></span><br><span class="line">        is = urlConnection.getInputStream();</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;day10\\beauty3.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;下载完成&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        <span class="keyword">if</span>(is != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(urlConnection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            urlConnection.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5之事务的操作</title>
      <link href="posts/2817363972/"/>
      <url>posts/2817363972/</url>
      
        <content type="html"><![CDATA[<h2 id="一、事务的操作（事务的概念）"><a href="#一、事务的操作（事务的概念）" class="headerlink" title="一、事务的操作（事务的概念）"></a>一、事务的操作（事务的概念）</h2><h3 id="1、事务"><a href="#1、事务" class="headerlink" title="1、事务"></a>1、事务</h3><ol><li>事务是数据库操作的基本单元，逻辑上的一组操作，要么都成功，如果一个失败所有的操作都失败</li><li>典型场景：银行转账<ol><li>lucy 转账 100 元 给 mary</li><li>lucy 少 100 ， mary 多 100</li></ol></li></ol><h3 id="2、事物四个特征（ACID）"><a href="#2、事物四个特征（ACID）" class="headerlink" title="2、事物四个特征（ACID）"></a>2、事物四个特征（ACID）</h3><ol><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ol><h2 id="二、事务操作（搭建事务操作环境）"><a href="#二、事务操作（搭建事务操作环境）" class="headerlink" title="二、事务操作（搭建事务操作环境）"></a>二、事务操作（搭建事务操作环境）</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200726231546.png" alt="image-20200726231538842"></p><h3 id="1、创建数据库表，添加记录"><a href="#1、创建数据库表，添加记录" class="headerlink" title="1、创建数据库表，添加记录"></a>1、创建数据库表，添加记录</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200726232439.png" alt="image-20200726232439079"></p><h3 id="2、创建-service-搭建-dao-完成对象的创建和注入关系"><a href="#2、创建-service-搭建-dao-完成对象的创建和注入关系" class="headerlink" title="2、创建 service, 搭建 dao, 完成对象的创建和注入关系"></a>2、创建 service, 搭建 dao, 完成对象的创建和注入关系</h3><ol><li><strong>service 注入 dao, 在 dao 注入 Jdbctemplate, 在 JdbcTemplate 注入 DataSource</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="comment">//注入 dao</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowiredprivate</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、在到创建两个方法：多钱和少钱的方法，在-service-创建方法（转账的方法）"><a href="#3、在到创建两个方法：多钱和少钱的方法，在-service-创建方法（转账的方法）" class="headerlink" title="3、在到创建两个方法：多钱和少钱的方法，在 service 创建方法（转账的方法）"></a>3、在到创建两个方法：多钱和少钱的方法，在 service 创建方法（转账的方法）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span>  <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduceMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update t_account set money=money-? where username=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, <span class="number">100</span>, <span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update t_account set money = money + ? where username = ?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, <span class="number">100</span>, <span class="string">&quot;mary&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注入dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转账的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accountMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//lucy 少 100</span></span><br><span class="line">        userDao.reduceMoney();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//mary 多 100</span></span><br><span class="line">        userDao.addMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、模拟异常"><a href="#4、模拟异常" class="headerlink" title="4、模拟异常"></a>4、模拟异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注入dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转账的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accountMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//lucy 少 100</span></span><br><span class="line">        userDao.reduceMoney();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟异常</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//mary 多 100</span></span><br><span class="line">        userDao.addMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、事务的操作（Spring-事务管理介绍）"><a href="#三、事务的操作（Spring-事务管理介绍）" class="headerlink" title="三、事务的操作（Spring 事务管理介绍）"></a>三、事务的操作（Spring 事务管理介绍）</h2><p><strong>1、事务添加到 JavaEE 三层结构里面 Service 层（业务逻辑层）</strong></p><p><strong>2、在 Spring 进行事务管理的操作</strong></p><ul><li>有两种方式：编程式事务管理和声明式事务管理（使用）</li></ul><p><strong>3、声明式事务管理</strong></p><ol><li><p>基于注解方式（使用）</p></li><li><p>基于 xml 配置文件方式</p></li></ol><p><strong>4、在 Spring 进行声明式事务管理，底层使用 AOP 原理</strong></p><p><strong>5、Spring 事务管理 API</strong></p><ul><li>提供一个接口，代表事务管理器，这个接口针对不同的框架提供不用的实现类</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200727001925.png" alt="image-20200727001924607"></p><h2 id="四、事务操作（注解声明式事务管理）"><a href="#四、事务操作（注解声明式事务管理）" class="headerlink" title="四、事务操作（注解声明式事务管理）"></a>四、事务操作（注解声明式事务管理）</h2><h3 id="1、在-Spring-配置文件配置事务管理器"><a href="#1、在-Spring-配置文件配置事务管理器" class="headerlink" title="1、在 Spring 配置文件配置事务管理器"></a>1、在 Spring 配置文件配置事务管理器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、在-Spring-配置文件，开启事务注解"><a href="#2、在-Spring-配置文件，开启事务注解" class="headerlink" title="2、在 Spring 配置文件，开启事务注解"></a>2、在 Spring 配置文件，开启事务注解</h3><ol><li><p><strong>在 Spring 配置文件引入名称空间 tx</strong></p><p>xmlns:tx=”<a href="http://www.springframework.org/schema/tx&quot;">http://www.springframework.org/schema/tx&quot;</a></p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>开启事务的注解</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--开启事务注解--&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;&gt;&lt;/tx:annotation-driven&gt;</span><br></pre></td></tr></table></figure><h3 id="3、在-service-类上面（或者-service-类里面方法上面）添加事务注解"><a href="#3、在-service-类上面（或者-service-类里面方法上面）添加事务注解" class="headerlink" title="3、在 service 类上面（或者 service 类里面方法上面）添加事务注解"></a>3、在 service 类上面（或者 service 类里面方法上面）添加事务注解</h3><ol><li> @Transactional, 这个注解添加到类上，也可以添加到方法上面</li><li> 如果把这个注解添加类上面，这个类里面 所有的方法都添加事务</li><li> 如果把这个注解添加方法上面，为这个方法添加事务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br></pre></td></tr></table></figure><h2 id="五、事务操作（声明式事务管理参数配置）"><a href="#五、事务操作（声明式事务管理参数配置）" class="headerlink" title="五、事务操作（声明式事务管理参数配置）"></a>五、事务操作（声明式事务管理参数配置）</h2><h3 id="1、在-service-类上面添加注解-Transactional-在这个注解里面可以配置事务相关参数"><a href="#1、在-service-类上面添加注解-Transactional-在这个注解里面可以配置事务相关参数" class="headerlink" title="1、在 service 类上面添加注解@Transactional,在这个注解里面可以配置事务相关参数"></a>1、在 service 类上面添加注解@Transactional,在这个注解里面可以配置事务相关参数</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200727110500.png" alt="image-20200727110453816"></p><h3 id="2、propagation-事务传播行为"><a href="#2、propagation-事务传播行为" class="headerlink" title="2、propagation: 事务传播行为"></a>2、propagation: 事务传播行为</h3><p>​ <strong>（1）多事务方法直接进行调用以及管理</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200727111219.png" alt="image-20200727111218221"></p><p><strong>事务传播行为可以由传播属性指定。Spring 定义了 7 种类传播行为</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200813232312.png" alt="image-20200727111328450"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br></pre></td></tr></table></figure><h3 id="3、ioslation-事务的隔离级别"><a href="#3、ioslation-事务的隔离级别" class="headerlink" title="3、ioslation: 事务的隔离级别"></a>3、ioslation: 事务的隔离级别</h3><ol><li>事务有特征成为隔离性，多事务操作之间不会产生影响。不考虑隔离性产生很多问题</li><li>有三个读问题：脏读、不可重复读、虚（幻）读</li><li>脏读：一个未提交事务读取到另一个未提交事务的数据</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200727112535.png" alt="image-20200727112534180"></p><ol start="4"><li>不可重复读：一个未提交的事务读取到另一个提交事务修改数据</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200727113522.png" alt="image-20200727113521751"></p><ol start="5"><li>虚读：一个未提交事务读取到另一个提交事务添加数据</li><li>解决：通过设置事务的隔离级别，解决读的问题</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200727113807.png" alt="image-20200727113807186"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br></pre></td></tr></table></figure><h3 id="4、timeout：超时时间"><a href="#4、timeout：超时时间" class="headerlink" title="4、timeout：超时时间"></a>4、timeout：超时时间</h3><ol><li>事务需要在一定时间内进行提高，如果不提交进行回滚。</li><li>，默认设置是：-1，设置时间以秒单位进行计算</li></ol><h3 id="5、readOnly-是否只读"><a href="#5、readOnly-是否只读" class="headerlink" title="5、readOnly: 是否只读"></a>5、readOnly: 是否只读</h3><ol><li>读：查询操作, 写：添加修改删除操作</li><li>readOnly 默认值 false,表示可以查询，可以添加修改删除操作</li><li>设置 readOnly 值是 true,设置成 true 之后，只能查询</li></ol><h3 id="6、rollbackFor-回滚"><a href="#6、rollbackFor-回滚" class="headerlink" title="6、rollbackFor: 回滚"></a>6、rollbackFor: 回滚</h3><ol><li>设置出现哪些异常进行事务的回滚</li></ol><h3 id="7、noRollbackFor-不回滚"><a href="#7、noRollbackFor-不回滚" class="headerlink" title="7、noRollbackFor: 不回滚"></a>7、noRollbackFor: 不回滚</h3><ol><li>设置出现哪些异常不进行事务回滚</li></ol><h2 id="六、事务操作（XML-声明式事务管理）"><a href="#六、事务操作（XML-声明式事务管理）" class="headerlink" title="六、事务操作（XML 声明式事务管理）"></a>六、事务操作（XML 声明式事务管理）</h2><p><strong>1、在 Spring 配置文件中进行配置</strong></p><p>​ 第一步 配置事务管理器</p><p>​ 第二步 配置通知</p><p>​ 第三步 配置切入点和切面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1 创建事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span><span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2 配置通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txadvice&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定哪种规则的方法上面添加事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;accountMoney&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;tx:method name=&quot;account*&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3 配置切入点和切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(*com.atguigu.spring5.service.UserService.*(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txadvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、事务操作（完全注解声明式事务管理）"><a href="#七、事务操作（完全注解声明式事务管理）" class="headerlink" title="七、事务操作（完全注解声明式事务管理）"></a>七、事务操作（完全注解声明式事务管理）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.oy.online.Spring&quot;)</span><span class="comment">// 组件扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">// 开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建数据库连接池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">getDruidSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql:///user_db&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建JdbcTemplate对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 到ioc容器中根据类型找到dataSource</span></span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        <span class="comment">// 注入dataSource</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">dataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        DataSourceTransactionManager transactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5之JdbcTemplate</title>
      <link href="posts/1762820479/"/>
      <url>posts/1762820479/</url>
      
        <content type="html"><![CDATA[<h2 id="一、JdbcTemplate-概念和准备"><a href="#一、JdbcTemplate-概念和准备" class="headerlink" title="一、JdbcTemplate(概念和准备)"></a>一、JdbcTemplate(概念和准备)</h2><h3 id="1、JdbcTemplate"><a href="#1、JdbcTemplate" class="headerlink" title="1、JdbcTemplate"></a>1、JdbcTemplate</h3><p>​ Spring 框架对 jdbc 进行封装， 使用 JdbcTemPlate 方便实现对数据库操作</p><h3 id="2、过程准备"><a href="#2、过程准备" class="headerlink" title="2、过程准备"></a>2、过程准备</h3><ol><li><strong>引入相关 jar 包</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200725233447.png" alt="image-20200725233440379"></p><ol start="2"><li><strong>在 spring 配置文件配置数据库连接池</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///user_db&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6090&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>配置 JdbcTemplate 对象，注入 DataSource</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--JdbcTemplate对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入 dateSource--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>创建 service 类，创建 dao 类，在 dao 注入 jdbcTemplate 对象</strong></li></ol><ul><li>配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.oy.online.Spring&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Service</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Dao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入 JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、JdbcTemplate-操作数据库（添加）"><a href="#二、JdbcTemplate-操作数据库（添加）" class="headerlink" title="二、JdbcTemplate 操作数据库（添加）"></a>二、JdbcTemplate 操作数据库（添加）</h2><h3 id="1、对应数据库创建实体类"><a href="#1、对应数据库创建实体类" class="headerlink" title="1、对应数据库创建实体类"></a>1、对应数据库创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String ustatus;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userId, String username, String ustatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.ustatus = ustatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUstatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ustatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUstatus</span><span class="params">(String ustatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ustatus = ustatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;userId=&#x27;&quot;</span> + userId + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, ustatus=&#x27;&quot;</span> + ustatus + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、编写-service-和-dao"><a href="#2、编写-service-和-dao" class="headerlink" title="2、编写 service 和 dao"></a>2、编写 service 和 dao</h3><ol><li><strong>在 dao 进行数据库添加操作</strong></li><li><strong>调用 JdbcTemplate 对象里面 update 方法实现添加操作</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200726002543.png" alt="image-20200726002541720"></p><ul><li>第一个参数： sql 语句</li><li>第二个参数： 可变参数，设置 sql 语句值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入 JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建sql语句</span></span><br><span class="line">        String sql = <span class="string">&quot;insert into t_book values(?,?,?)&quot;</span>;</span><br><span class="line">        <span class="comment">// 2.调用方法实现</span></span><br><span class="line">        Object[] args = &#123;book.getUserId(), book.getUsername(), book.getUstatus()&#125;;</span><br><span class="line">        jdbcTemplate.update(sql, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、测试类"><a href="#3、测试类" class="headerlink" title="3、测试类"></a>3、测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jdbcTemplateTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    BookService bookService = context.getBean(<span class="string">&quot;bookService&quot;</span>, BookService.class);</span><br><span class="line">    Book book = <span class="keyword">new</span> Book(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    bookService.addBook(book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200726112733.png" alt="image-20200726112725377"></p><h2 id="三、JdbcTemplate-操作数据库（修改和删除）"><a href="#三、JdbcTemplate-操作数据库（修改和删除）" class="headerlink" title="三、JdbcTemplate 操作数据库（修改和删除）"></a>三、JdbcTemplate 操作数据库（修改和删除）</h2><h3 id="1、修改"><a href="#1、修改" class="headerlink" title="1、修改"></a>1、修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;update t_book set username=?, ustatus=? where user_id=?&quot;</span>;</span><br><span class="line">    Object[] args = &#123;book.getUsername(), book.getUstatus(), book.getUserId()&#125;;</span><br><span class="line">    <span class="keyword">int</span> update = jdbcTemplate.update(sql, args);</span><br><span class="line">    System.out.println(update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、删除"><a href="#2、删除" class="headerlink" title="2、删除"></a>2、删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletes</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">      String sql = <span class="string">&quot;delete from t_book where user_id=?&quot;</span>;</span><br><span class="line">      <span class="keyword">int</span> update = jdbcTemplate.update(sql, id);</span><br><span class="line">      System.out.println(update);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="四、JdbcTemplate-操作数据库（查询返回某个值）"><a href="#四、JdbcTemplate-操作数据库（查询返回某个值）" class="headerlink" title="四、JdbcTemplate 操作数据库（查询返回某个值）"></a>四、JdbcTemplate 操作数据库（查询返回某个值）</h2><p><strong>1、查询表里面有多少条记录，返回是某个值</strong></p><p><strong>2、使用 JdbcTemplate 实现查询返回某个值代码</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200726161658.png" alt="image-20200726161650573"></p><ul><li>第一个参数： sql 语句</li><li>第二个参数：返回类型 Class</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">selectCountBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;select count(*) from t_book&quot;</span>;</span><br><span class="line">    Integer count = jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、JdbcTemplate-操作数据库（查询返回对象）"><a href="#五、JdbcTemplate-操作数据库（查询返回对象）" class="headerlink" title="五、JdbcTemplate 操作数据库（查询返回对象）"></a>五、JdbcTemplate 操作数据库（查询返回对象）</h2><p><strong>1、场景：查询图书详情</strong></p><p><strong>2、JdbcTemplate 实现查询返回对象</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200726114358.png" alt="image-20200726114358214"></p><ul><li>第一个参数：sql 语句</li><li>第二个参数： RowMapper 是接口，针对返回不同的类型数据，使用这个接口里面实现类完成数据封装</li><li>第三个参数：sql 语句的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询返回对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBookInfo</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;select * from t_book where user_id = ?&quot;</span>;</span><br><span class="line">    Book book = jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Book&gt;(Book.class),id);</span><br><span class="line">    <span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、JdbcTemplate-操作数据库（查询返回集合）"><a href="#六、JdbcTemplate-操作数据库（查询返回集合）" class="headerlink" title="六、JdbcTemplate 操作数据库（查询返回集合）"></a>六、JdbcTemplate 操作数据库（查询返回集合）</h2><p><strong>1、场景：查询图书列表分页</strong></p><p><strong>2、调用 JdbcTemplate 方法实现查询返回集合</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200726120207.png" alt="image-20200726120206993"></p><ul><li>第一个参数： sql 语句</li><li>第二个参数：RowMapper 是接口，针对返回不同类型数据，使的这个接口里面实现类完成数据封装</li><li>第三个参数：sql 语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAllBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;select * from t_book&quot;</span>;</span><br><span class="line">    <span class="comment">// 调用方法</span></span><br><span class="line">    List&lt;Book&gt; list = jdbcTemplate.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Book&gt;(Book.class));</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、JdbcTemplate-操作数据库（批量操作）"><a href="#七、JdbcTemplate-操作数据库（批量操作）" class="headerlink" title="七、JdbcTemplate 操作数据库（批量操作）"></a>七、JdbcTemplate 操作数据库（批量操作）</h2><p><strong>1、批量操作：操作表里面的多条记录</strong></p><p><strong>2、JdbcTemplate 实现批量添加操作</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200726121155.png" alt="image-20200726121154952"></p><ul><li>第一个参数： sql 语句</li><li>第二个参数： List 集合，添加多条记录数据</li></ul><p><strong>批量添加</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchAddBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> </span>&#123;</span><br><span class="line">       String sql = <span class="string">&quot;insert into t_book value(?,?,?)&quot;</span>;</span><br><span class="line">       <span class="keyword">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line">       System.out.println(ints);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object[]&gt; batchArgs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Object[] o1 = &#123;<span class="string">&quot;3&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;a&quot;</span>&#125;;</span><br><span class="line">Object[] o2 = &#123;<span class="string">&quot;4&quot;</span>,<span class="string">&quot;c++&quot;</span>,<span class="string">&quot;b&quot;</span>&#125;;</span><br><span class="line">Object[] o3 = &#123;<span class="string">&quot;5&quot;</span>,<span class="string">&quot;MySQL&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">batchArgs.add(o1);</span><br><span class="line">batchArgs.add(o2);</span><br><span class="line">batchArgs.add(o3);</span><br><span class="line"><span class="comment">//调用批量添加</span></span><br><span class="line">bookService.bacthAdd(batchArgs);</span><br></pre></td></tr></table></figure><p><strong>3、JDBCTemplate 实现批量修改操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchUpdateBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> </span>&#123;</span><br><span class="line">String sql = <span class="string">&quot;update t_book set username=?,ustatus=? where user_id=?&quot;</span>;</span><br><span class="line"><span class="keyword">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line">System.out.println(Arrays.toString(ints));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object[]&gt; batchArgs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Object[] o1 = &#123;<span class="string">&quot;java0909&quot;</span>,<span class="string">&quot;a3&quot;</span>,<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">Object[] o2 = &#123;<span class="string">&quot;c++1010&quot;</span>,<span class="string">&quot;b4&quot;</span>,<span class="string">&quot;4&quot;</span>&#125;;</span><br><span class="line">Object[] o3 = &#123;<span class="string">&quot;MySQL1111&quot;</span>,<span class="string">&quot;c5&quot;</span>,<span class="string">&quot;5&quot;</span>&#125;;</span><br><span class="line">batchArgs.add(o1);</span><br><span class="line">batchArgs.add(o2);</span><br><span class="line">batchArgs.add(o3);</span><br><span class="line"><span class="comment">//调用方法实现批量修改</span></span><br><span class="line">bookService.batchUpdate(batchArgs);</span><br></pre></td></tr></table></figure><p><strong>4、JdbcTemplate 实现批量删除操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 批量删除</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchdeleteBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;delete from t_book where user_id = ?&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line">    System.out.println(Arrays.toString(ints));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量删除</span></span><br><span class="line">List&lt;Object[]&gt; batchArgs = <span class="keyword">new</span> ArrayList&lt;&gt;();Object[] o1 = &#123;<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">Object[] o2 = &#123;<span class="string">&quot;4&quot;</span>&#125;;</span><br><span class="line">batchArgs.add(o1);</span><br><span class="line">batchArgs.add(o2);</span><br><span class="line"><span class="comment">//调用方法实现批量删除</span></span><br><span class="line">bookService.batchDelete(batchArgs);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之IO流</title>
      <link href="posts/2120368839/"/>
      <url>posts/2120368839/</url>
      
        <content type="html"><![CDATA[<h2 id="一、File-类的使用"><a href="#一、File-类的使用" class="headerlink" title="一、File 类的使用"></a>一、File 类的使用</h2><h3 id="1、File-类的理解"><a href="#1、File-类的理解" class="headerlink" title="1、File 类的理解"></a>1、File 类的理解</h3><p>​ ① File 类的一个对象，代表一个文件或文件目录（俗称：文件夹）</p><p>​ ② File 类声明的砸 Java.io 包下</p><p>​ ③ File 类中涉及关于文件或文件目录的创建、删除、重命名、修改时间、文件大小等方法，并涉及到写入的读取文件内容的操作。如果需要读取或写入的 ”终点“。</p><h3 id="2、File-的实例化"><a href="#2、File-的实例化" class="headerlink" title="2、File 的实例化"></a>2、File 的实例化</h3><p><strong>常用的构造器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File(String filePath)</span><br><span class="line">File(String parenPath, String childPath)</span><br><span class="line">File(File parenFile, String childPath)</span><br></pre></td></tr></table></figure><p><strong>路径的分类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">相对路径：相对某个路径，指明的路径</span><br><span class="line">绝对路径：包含盘符在内的文件或文件目录的路径</span><br></pre></td></tr></table></figure><p><strong>路径分隔符</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">windows 和 DOC 系统的默认使用“\”来表示</span><br><span class="line">UNIX 和 URL 使用“/” 来表示</span><br></pre></td></tr></table></figure><h2 id="二、流的分类"><a href="#二、流的分类" class="headerlink" title="二、流的分类"></a>二、流的分类</h2><h3 id="1、流的分类"><a href="#1、流的分类" class="headerlink" title="1、流的分类"></a>1、流的分类</h3><ul><li>操作数据的单位：字节流、字符流</li><li>数据的流向：输入流、输出流</li><li>流的角色：节点流、处理流</li></ul><p><strong>图示：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200725163625.png" alt="image-20200725163618348"></p><h3 id="2、流的体系结构"><a href="#2、流的体系结构" class="headerlink" title="2、流的体系结构"></a>2、流的体系结构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200725163744.png" alt="image-20200725163743486"></p><p><strong>说明：</strong> 红框对应的是 IO 流中的 4 个抽象基类。</p><h3 id="3、输入、输出的标准化过程"><a href="#3、输入、输出的标准化过程" class="headerlink" title="3、输入、输出的标准化过程"></a>3、输入、输出的标准化过程</h3><p><strong>① 输入过程</strong></p><ol><li>创建 File 类的对象，指明读取数据的来源。（要求此文件一定存在）</li><li>创建相对应的输入流，将 File 类的对象作为参数，传入流的构造器中</li><li>具体的读入过程：<br>创建相对应的 byte[ ] 或 char[ ]</li><li>关闭流资源</li></ol><p><strong>说明：</strong> 程序中出现的异常需要使用 try-catch-finally 处理。</p><p><strong>② 输入过程</strong></p><ol><li>创建 File 类对象，指明写出的数据的位置。(不要求此文件一定存在)</li><li>创建相对应的输出流，将 File 类的对象作为参数，传入流的构造器中。</li><li>具体的写入过程：<br>write(byte[ ] 或 char[ ], 0, len)</li><li>关闭流资源</li></ol><p><strong>说明：</strong>程序中出现的异常需要使用 try-catch-finally 处理。</p><h2 id="三、节点流（或文件流）"><a href="#三、节点流（或文件流）" class="headerlink" title="三、节点流（或文件流）"></a>三、节点流（或文件流）</h2><h3 id="1、FileReader-FileWirter-的使用"><a href="#1、FileReader-FileWirter-的使用" class="headerlink" title="1、FileReader/FileWirter 的使用"></a>1、FileReader/FileWirter 的使用</h3><p><strong>① FileReader 的使用</strong></p><ol><li>read() 的理解：返回读入的一个字符。如果达到文件的末尾。返回-1</li><li>异常的处理：为了保证流的资源一定可以执行关闭操作。需要使用 try-catch-finally 处理</li><li>读入的文件一定要存在，否则就会报 FileNotExcption。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200725172641.png" alt="image-20200725172639859"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1. File的实例化</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.FileReader流的实例化</span></span><br><span class="line">        fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.读入的操作</span></span><br><span class="line">        <span class="comment">// read(char[] ch):返回每次读入ch数组中的字符的个数。如果达到文件末尾</span></span><br><span class="line">        <span class="keyword">char</span>[] ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = fr.read(ch)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            String str = <span class="keyword">new</span> String(ch, <span class="number">0</span>, len);</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="keyword">null</span>)&#123;</span><br><span class="line">                fr.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>② FileWrite 的使用</strong></p><ol><li><p>输出操作，对应的 File 可以不存在的。并不会报异常</p></li><li><p>File 对应的硬盘中文件如果不存在，在输出的过程中，会自动创建此文件。</p><p>File 对应的硬盘中文件如果存在：</p><p>​ 如果流使用的构造器是：FileWriter(file, false)/ FileWriter(file): 对原文件的覆盖</p><p>​ 如果流使用的构造器是：FileWriter(file,true): 不会对原文件覆盖，而是原文件基础上追加内容</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">    FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1.提供File类的对象，指明写出到文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.提供FileWriter的对象，用于数据写出</span></span><br><span class="line">        fw = <span class="keyword">new</span> FileWriter(file, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.写出的操作</span></span><br><span class="line">        fw.write(<span class="string">&quot;I have a dream!\n&quot;</span>);</span><br><span class="line">        fw.write(<span class="string">&quot;you need to have a dream!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 4.流资源关闭</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fw != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③ 文本文件复制</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">    FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1.创建File类的对象，指明读入和写入文件</span></span><br><span class="line">        File srcfile = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        File dsrcfile1 = <span class="keyword">new</span> File(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建输入流和输出流</span></span><br><span class="line">        fr = <span class="keyword">new</span> FileReader(srcfile);</span><br><span class="line">        fw = <span class="keyword">new</span> FileWriter(dsrcfile1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据的读写和写入操作</span></span><br><span class="line">        <span class="keyword">char</span>[] ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 记录每次读入到ch数组中的字符串的个数</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = fr.read(ch)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 每次写出len个字符</span></span><br><span class="line">            fw.write(ch,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 4. 关闭流资源</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                fw.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                fr.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、FileInputStream-FileOutputStream-的使用"><a href="#2、FileInputStream-FileOutputStream-的使用" class="headerlink" title="2、FileInputStream / FileOutputStream 的使用"></a>2、FileInputStream / FileOutputStream 的使用</h3><ol><li>对于文本文件（**.txt**, <strong>.java</strong>, <strong>.c</strong>, <strong>.cpp</strong>）, 使用字符流处理</li><li>对于非文本文件（**.jpg** , <strong>.mp3</strong>, <strong>.mp4</strong>, <strong>.avi</strong>, <strong>.doc</strong>, <strong>.ppt</strong>），使用字节流处理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 造文件</span></span><br><span class="line">        File srcfile = <span class="keyword">new</span> File(<span class="string">&quot;图片.jpg&quot;</span>);</span><br><span class="line">        File desrfile = <span class="keyword">new</span> File(<span class="string">&quot;图片2.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.造流</span></span><br><span class="line">        fis = <span class="keyword">new</span> FileInputStream(srcfile);</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(desrfile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.复制的过程</span></span><br><span class="line">        <span class="keyword">byte</span>[] bt = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(bt)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(bt,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                fis.close();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                fos.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注意】</p><ul><li>IDEA：<ul><li>如果使用单元测试方法，相对路径当前 Module 的。</li><li>如果使用 main() 测试，相对路径基于当前 Project 的。</li></ul></li><li>Eclipes：<ul><li>单元测试方法还是 main(), 相对路径都是基于当前 Project 的。</li></ul></li></ul><h2 id="四、缓冲流"><a href="#四、缓冲流" class="headerlink" title="四、缓冲流"></a>四、缓冲流</h2><h3 id="1、缓冲流涉及到的类"><a href="#1、缓冲流涉及到的类" class="headerlink" title="1、缓冲流涉及到的类"></a>1、缓冲流涉及到的类</h3><ul><li>BufferedInputStream</li><li>BufferedOutputStream</li><li>BufferedReader</li><li>BufferedWriter</li></ul><h3 id="2、作用"><a href="#2、作用" class="headerlink" title="2、作用"></a>2、作用</h3><p><strong>作用</strong>：提高流的读取、写入的速度</p><p><strong>提高读写速度的原因</strong>：内部提供了一个缓冲区。默认情况下是 8kb</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200725181102.png" alt="image-20200725181101233"></p><h3 id="3、代码演示"><a href="#3、代码演示" class="headerlink" title="3、代码演示"></a>3、代码演示</h3><p><strong>① 使用 BufferadInputStream 和 BufferadOutputStream ：处理非文本</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">       BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 1.造文件</span></span><br><span class="line">           File srcfile = <span class="keyword">new</span> File(<span class="string">&quot;图片.jpg&quot;</span>);</span><br><span class="line">           File dsrcfile = <span class="keyword">new</span> File(<span class="string">&quot;图片3.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 2.造流</span></span><br><span class="line">           <span class="comment">// 2.1节点流</span></span><br><span class="line">           FileInputStream fis = <span class="keyword">new</span> FileInputStream(srcfile);</span><br><span class="line">           FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(dsrcfile);</span><br><span class="line">           <span class="comment">// 2.2 节点流</span></span><br><span class="line">           bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">           bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 3.复制的细节：读取、写入</span></span><br><span class="line">           <span class="keyword">byte</span>[] bt = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">           <span class="keyword">int</span> len;</span><br><span class="line">           <span class="keyword">while</span>((len = bis.read(bt)) != -<span class="number">1</span>)&#123;</span><br><span class="line">               bos.write(bt, <span class="number">0</span>, len);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">// 4. 关闭资源</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               bos.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               bis.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>② 使用 BufferedReader 和 BufferedWriter：处理文本文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">       BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           File srcfile = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">           File dsrcfile = <span class="keyword">new</span> File(<span class="string">&quot;hello3.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 造流</span></span><br><span class="line">           br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(srcfile));</span><br><span class="line">           bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(dsrcfile));</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 3. 读取</span></span><br><span class="line">           <span class="comment">// 第一种方式</span></span><br><span class="line">           String data;</span><br><span class="line">           <span class="keyword">while</span>((data = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">               <span class="comment">// data中不包含换行符</span></span><br><span class="line">               bw.write(data);</span><br><span class="line">               <span class="comment">// 提供换行符</span></span><br><span class="line">               bw.newLine();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">// 4. 关闭流资源</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               br.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               bw.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取的第二种方式</span></span><br><span class="line"><span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span>((len = br.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">      bw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">      bw.flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、转换流"><a href="#五、转换流" class="headerlink" title="五、转换流"></a>五、转换流</h2><h3 id="1、转换流涉及到的类：属于字符流"><a href="#1、转换流涉及到的类：属于字符流" class="headerlink" title="1、转换流涉及到的类：属于字符流"></a>1、转换流涉及到的类：属于字符流</h3><ul><li>InputStreamReader: 将一个字节的输入转换为字符的输入流<ul><li>解码：字节、字节组 –&gt; 字符数组、字符串</li></ul></li><li>OutputStreamWriter: 将一个字符的输入流转换字节的输出流<ul><li>编码：字符数组、字符串 –&gt; 字节、字节数组</li></ul></li><li>说明：编码决定了解码的的方式</li></ul><h3 id="2、方式"><a href="#2、方式" class="headerlink" title="2、方式"></a>2、方式</h3><p>提供字节流与字符流之间的转换</p><h3 id="3、图示"><a href="#3、图示" class="headerlink" title="3、图示"></a>3、图示</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200726171641.png" alt="image-20200726171639642"></p><h3 id="4、典型案例"><a href="#4、典型案例" class="headerlink" title="4、典型案例"></a>4、典型案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">    InputStreamReader isr = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        isr = <span class="keyword">new</span> InputStreamReader(fis, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = isr.read(ch)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            String str = <span class="keyword">new</span> String(ch, <span class="number">0</span>, len);</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isr != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                isr.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>处理异常使用 try-catch</li><li>综合使用 InputStreamReader 和 OutputStreamWriter</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">    InputStreamReader isr = <span class="keyword">null</span>;</span><br><span class="line">    OutputStreamWriter osw = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1.造文件、造流</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;hello_gbk.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line"></span><br><span class="line">        isr = <span class="keyword">new</span> InputStreamReader(fis, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        osw = <span class="keyword">new</span> OutputStreamWriter(fos, <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.读写过程</span></span><br><span class="line">        <span class="keyword">char</span>[] ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = isr.read(ch)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            osw.write(ch, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(isr != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                isr.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(osw != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                osw.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、对象流"><a href="#六、对象流" class="headerlink" title="六、对象流"></a>六、对象流</h2><h3 id="1、对象流"><a href="#1、对象流" class="headerlink" title="1、对象流"></a>1、对象流</h3><ul><li><strong>ObjectInputStream</strong> 和 <strong>ObjectOutputStream</strong></li></ul><h3 id="2、作用-1"><a href="#2、作用-1" class="headerlink" title="2、作用"></a>2、作用</h3><p>ObjectInputStream: 内存中的对象 –&gt; 存储中的文件、通过网路传输过去：序列化过程</p><p>ObjectOutputStream: 存储中文件、通过网络接收过来 –&gt; 内存中的对象：反序列化的过程</p><h3 id="3、对象的序列化机制"><a href="#3、对象的序列化机制" class="headerlink" title="3、对象的序列化机制"></a>3、对象的序列化机制</h3><ul><li>对象序列化机制允许把内存中的 Java 对象转换成平台无关的二进制流，从而允许把这二进制流持久保存在硬盘上，或通过网路将这种二进制流输入到另一个网络节点</li><li>当其他程序获取到这种二进制流，就可以恢复原来的 java 对象</li></ul><h3 id="4、序列化代码"><a href="#4、序列化代码" class="headerlink" title="4、序列化代码"></a>4、序列化代码</h3><p><strong>创建 Person 类(实现 Serializable 接口，添加序列号)：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">475463534532L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">       ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line">           oos.writeObject(<span class="keyword">new</span> String(<span class="string">&quot;你好&quot;</span>));</span><br><span class="line">           oos.flush();<span class="comment">//刷新操作</span></span><br><span class="line">           oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>,<span class="number">23</span>));</span><br><span class="line">           oos.flush();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (oos != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                   oos.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="5、反序列化代码"><a href="#5、反序列化代码" class="headerlink" title="5、反序列化代码"></a>5、反序列化代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line">        String str = (String) obj;</span><br><span class="line">        Person p = (Person) ois.readObject();</span><br><span class="line"></span><br><span class="line">        System.out.println(str);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ois != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                ois.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200728155034.png" alt="image-20200728155026646"></p><h3 id="6、实现序列化的对象所属的类需要满足："><a href="#6、实现序列化的对象所属的类需要满足：" class="headerlink" title="6、实现序列化的对象所属的类需要满足："></a>6、实现序列化的对象所属的类需要满足：</h3><ol><li>需要实现接口：Serializable</li><li>当前类提供一个全局常量：SeriaVersionUID</li><li>除了当前 Person 类需要实现 Serializable 接口之外，还需要保证其内部类所属性也必须是可序列化。(默认情况下，基本数据类型可序列化)</li><li>ObjectOutputStream 和 ObjectInputStream 不能序列化 static 修饰的成员变量。</li></ol><h2 id="七、其他流的使用"><a href="#七、其他流的使用" class="headerlink" title="七、其他流的使用"></a>七、其他流的使用</h2><h3 id="1、标准输入输出流"><a href="#1、标准输入输出流" class="headerlink" title="1、标准输入输出流"></a>1、标准输入输出流</h3><ul><li>System.in : 标准的输入流，默认从键盘输入</li><li>System.out : 标准的输出流，默认从控制台输出</li></ul><p><strong>修改默认的输入和输出行为：</strong></p><p>​ System 类的 setIn(InputStream is) / setOut(prinStream ps) 方式重新指定输入和输出流。</p><h3 id="2、打印流"><a href="#2、打印流" class="headerlink" title="2、打印流"></a>2、打印流</h3><ul><li>PrinStream 和 PrintWriter</li><li>说明：<ul><li>提供一系列重载的 print()的方法，用于多种数据类型的输出</li><li>System.out 返回的是 PrintStream 的实例</li></ul></li></ul><h3 id="3、数据流"><a href="#3、数据流" class="headerlink" title="3、数据流"></a>3、数据流</h3><ul><li>DataInputStream 和 DataOutputStream</li></ul><p><strong>作用：</strong>用于读取或写出基本数据类型的变量或字符串</p><p><strong>实例 1：将内存中的字符串、基本数据类型的变量写到文件中。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        DataInputStream dis = new DataInputStream(new FileInputStream(&quot;hello.txt&quot;));</span></span><br><span class="line">        DataOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dos = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">            dos.writeUTF(<span class="string">&quot;OY&quot;</span>);</span><br><span class="line">            <span class="comment">// 刷新操作，将内存中的数据写入文件</span></span><br><span class="line">            dos.flush();</span><br><span class="line">            dos.writeInt(<span class="number">19</span>);</span><br><span class="line">            dos.flush();</span><br><span class="line">            dos.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">            dos.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(dos != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    dos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>实例 2：将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">    DataInputStream dis = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line">        String name = dis.readUTF();</span><br><span class="line">        <span class="keyword">int</span> age = dis.readInt();</span><br><span class="line">        Boolean isMale = dis.readBoolean();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;age=&quot;</span> + age);</span><br><span class="line">        System.out.println(<span class="string">&quot;isMale=&quot;</span> + isMale);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                dis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、RandomAccesFile-的使用"><a href="#八、RandomAccesFile-的使用" class="headerlink" title="八、RandomAccesFile 的使用"></a>八、RandomAccesFile 的使用</h2><h3 id="1、随机存储文件流"><a href="#1、随机存储文件流" class="headerlink" title="1、随机存储文件流"></a>1、随机存储文件流</h3><ol><li>RondomAccessFile 直接继承于 java.Object 类，实现 DataInput 和 DataOutput 接口</li><li>RandomAccessFile 既可以作为输入流，又可以作为一个输出流</li><li>如果 RandomAccessFile 作为输出流时，写出到的文件如果不存在，则在执行的过程中自动创建。</li><li>如果写出到的文件存在，则也对原文件内容进行覆盖。（默认情况下，从头覆盖）</li><li>可以通过相关的操作，实现 RandomAccessFile”插入”数据的效果。seek（int pos）。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RandomAccessFile raf1 = <span class="keyword">null</span>;</span><br><span class="line">    RandomAccessFile raf2 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">&quot;图片.jpg&quot;</span>), <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        raf2 = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">&quot;图片4.jpg&quot;</span>), <span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bt = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = raf1.read(bt)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            raf2.write(bt, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (raf1 != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                raf1.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (raf2 != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                raf2.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合之Collections工具类</title>
      <link href="posts/3895825257/"/>
      <url>posts/3895825257/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Collections-工具类"><a href="#一、Collections-工具类" class="headerlink" title="一、Collections 工具类"></a>一、Collections 工具类</h2><p><strong>作用：</strong>操作 colleaction 和 Map 的工具类</p><h2 id="二、常用方法"><a href="#二、常用方法" class="headerlink" title="二、常用方法"></a>二、常用方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>reverse(List)</td><td>反转 List 中元素的顺序</td></tr><tr><td>shuffle(List)</td><td>对 List 集合元素进行随机排序</td></tr><tr><td>sort(List)</td><td>根据元素的自然顺序对指定 List 集合元素升序排序</td></tr><tr><td>sort(List，Comparator)</td><td>根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</td></tr><tr><td>swap(List，int， int)</td><td>将指定 list 集合中的 i 处元素和 j 处元素进行交换</td></tr><tr><td>Object max(Collection)</td><td>根据元素的自然顺序，返回给定集合中的最大元素</td></tr><tr><td>Object max(Collection，Comparator)</td><td>根据 Comparator 指定的顺序，返回给定集合中的最大元素</td></tr><tr><td>Object min(Collection)</td><td>根据元素的自然顺序，返回给定集合中的最小元素</td></tr><tr><td>Object min(Collection，Comparator)</td><td>根据 Comparator 指定的顺序，返回给定集合中的最小元素</td></tr><tr><td>int frequency(Collection，Object)</td><td>返回指定集合中指定元素的出现次数</td></tr><tr><td>void copy(List dest,List src)</td><td>将 src 中的内容复制到 dest 中</td></tr><tr><td>boolean replaceAll(List list，Object oldVal，Object newVal)</td><td>使用新值替换 List 对象的所旧值</td></tr></tbody></table><p>注：<strong>copy 特别注意</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(<span class="number">123</span>);</span><br><span class="line">    list.add(<span class="number">43</span>);</span><br><span class="line">    list.add(<span class="number">765</span>);</span><br><span class="line">    list.add(-<span class="number">97</span>);</span><br><span class="line">    list.add(<span class="number">0</span>);</span><br><span class="line">    List list1 = Arrays.asList(<span class="keyword">new</span> Object[list.size()]);</span><br><span class="line">    Collections.copy(list1,list);</span><br><span class="line">    System.out.println(list1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200723170622.png" alt="image-20200723170621050"></p><p><strong>说明：</strong> ArrayList 和 HashMap 都是线程不安全的，如果程序要求线程安全，我们可以将 ArrayList、HashMap 转换为线程的。</p><p><strong>使用：</strong> <strong>sysnchronizedList(List list)</strong> 和 <strong>sysnchronizedMap(Map map)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回的list1即为线程安全的List</span></span><br><span class="line"> List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">List list1 = Collections.synchronizedList(list);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5之AOP</title>
      <link href="posts/1738458658/"/>
      <url>posts/1738458658/</url>
      
        <content type="html"><![CDATA[<h2 id="一、AOP（概念）"><a href="#一、AOP（概念）" class="headerlink" title="一、AOP（概念）"></a>一、AOP（概念）</h2><p>（1）面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>（2）通俗的描述：不通修改源代码方式，在主功能里面添加新功能</p><p>（3）使用登录例子说明 AOP</p><p><strong>图示：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200723000710.png" alt="image-20200723000702851"></p><h2 id="二、AOP-底层原理"><a href="#二、AOP-底层原理" class="headerlink" title="二、AOP (底层原理)"></a>二、AOP (底层原理)</h2><h3 id="1、AOP-底层使用动态代理"><a href="#1、AOP-底层使用动态代理" class="headerlink" title="1、AOP 底层使用动态代理"></a>1、AOP 底层使用动态代理</h3><p><strong>（1）有两种情况动态代理</strong></p><p>​ <strong>第一种 有接口情况，使用 JDK 动态代理</strong></p><ul><li>创建接口实现类代理对象，增强类的方法</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200723001349.png" alt="image-20200723001348703"></p><p><strong>第二种没有接口情况，使用 CGLIB 动态代理</strong></p><ul><li>创建子类代理对象，增强类的方法</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200723001641.png" alt="image-20200723001640975"></p><h2 id="三、AOP-JDK-动态代理"><a href="#三、AOP-JDK-动态代理" class="headerlink" title="三、AOP(JDK 动态代理)"></a>三、AOP(JDK 动态代理)</h2><h3 id="1、使用-JDK-动态代理，使用-Proxy-类里面的方法创建代理对象"><a href="#1、使用-JDK-动态代理，使用-Proxy-类里面的方法创建代理对象" class="headerlink" title="1、使用 JDK 动态代理，使用 Proxy 类里面的方法创建代理对象"></a>1、使用 JDK 动态代理，使用 Proxy 类里面的方法创建代理对象</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200723002155.png" alt="image-20200723002154900"></p><p><strong>（1）调用 newProxyInstance 方法</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200723002259.png" alt="image-20200723002258467"></p><p>方法有三个参数：</p><p>第一参数：类加载器</p><p>第二参数：增强方法所在的类，这个类实现的接口，支持多个接口</p><p>第三参数，实现这个接口 InvocationHandler, 创建代理对象，写增强的部分</p><h3 id="2、编写-JDK-动态代理代码"><a href="#2、编写-JDK-动态代理代码" class="headerlink" title="2、编写 JDK 动态代理代码"></a>2、编写 JDK 动态代理代码</h3><p>（1）创建接口，定义方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）创建接口实现类，实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）使用 Proxy 类创建接口代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建接口实现类代理对象</span></span><br><span class="line">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class="line"><span class="comment">// Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces,new InvocationHandler() &#123;</span></span><br><span class="line"><span class="comment">// @Override</span></span><br><span class="line"><span class="comment">// public Object invoke(Object proxy, Method method, Object[] args)throws Throwable &#123;</span></span><br><span class="line"><span class="comment">// return null;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line">        UserDaoImpl userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">        UserDao dao = (UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="keyword">new</span> UserDaoProxy(userDao));</span><br><span class="line">        <span class="keyword">int</span> result = dao.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result=&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建代理对象的代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.把创建的是谁的代理对象，把谁传递过来</span></span><br><span class="line">    <span class="comment">// 有参数构造传递</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoProxy</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 增强的逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 方法之前</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行....&quot;</span>+method.getName()+<span class="string">&quot;:传递的参数...&quot;</span>+ Arrays.toString(args));</span><br><span class="line">        <span class="comment">// 被增强的方法执行</span></span><br><span class="line">        Object res = method.invoke(obj, args);</span><br><span class="line">        <span class="comment">// 方法之后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之后执行...&quot;</span>+obj);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、AOP-术语"><a href="#三、AOP-术语" class="headerlink" title="三、AOP 术语"></a>三、AOP 术语</h2><h3 id="1、连接点"><a href="#1、连接点" class="headerlink" title="1、连接点"></a>1、连接点</h3><p>​ 类里面哪些方法可以被增强，这些方法称为连接点</p><h3 id="2、切入点"><a href="#2、切入点" class="headerlink" title="2、切入点"></a>2、切入点</h3><p>​ 实际被真正增强的方法，称之切入点</p><h3 id="3、通知（增强）"><a href="#3、通知（增强）" class="headerlink" title="3、通知（增强）"></a>3、通知（增强）</h3><p>​ （1） 实际增强的逻辑部分称为通知</p><p>​ （2）通知的多种类型</p><p>​ ① 前置通知 ② 后置通知 ③ 环绕通知 ④ 异常通知 ⑤ 最终通知</p><h3 id="4、切面"><a href="#4、切面" class="headerlink" title="4、切面"></a>4、切面</h3><p>​ 把通知应用到切入点的过程</p><h2 id="四、AOP-操作"><a href="#四、AOP-操作" class="headerlink" title="四、AOP 操作"></a>四、AOP 操作</h2><h3 id="1、Spring-框架一般都是基于-AspectJ-实现-AOP-操作"><a href="#1、Spring-框架一般都是基于-AspectJ-实现-AOP-操作" class="headerlink" title="1、Spring 框架一般都是基于 AspectJ 实现 AOP 操作"></a>1、Spring 框架一般都是基于 AspectJ 实现 AOP 操作</h3><p>​ AspectJ 不是 Spring 组成部分，独立 AOP 框架， 一般把 AspectJ 和 Spring 框架一起使用，进行 AOP 操作</p><h3 id="2、基于-AspectJ-实现-AOP-操作"><a href="#2、基于-AspectJ-实现-AOP-操作" class="headerlink" title="2、基于 AspectJ 实现 AOP 操作"></a>2、基于 AspectJ 实现 AOP 操作</h3><p>​ （1）基于 xml 配置文件实现</p><p>​ （2）基于注解方式实现（使用）</p><h3 id="3、在项目工程里面引入-AOP-相关依赖"><a href="#3、在项目工程里面引入-AOP-相关依赖" class="headerlink" title="3、在项目工程里面引入 AOP 相关依赖"></a>3、在项目工程里面引入 AOP 相关依赖</h3><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200723112133.png" alt="image-20200723112125943"></p><h3 id="4、切入点表达式"><a href="#4、切入点表达式" class="headerlink" title="4、切入点表达式"></a>4、切入点表达式</h3><p>​ （1）切入点表达式作用：知道对哪个类里面的哪个方法进行增强</p><p>​ （2）语法结构：execution([权限修饰符][返回值类型][类全路径][方法名称][参数列表])</p><ul><li><p>举例 1: 对 com.oy.dao.BookDao 类里面的 add 进行增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.oy.dao.BookDao.add(..))</span><br></pre></td></tr></table></figure></li><li><p>举例 2：对 com.oy.dao.BookDao 类里面的所有的方法进行增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(*.com.oy.dao.BookDao.*(..))</span><br></pre></td></tr></table></figure></li><li><p>举例 3：对 com.atguigu.dao 包里面所有类，类里面所有方法进行增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.atguigu.dao.*.* (..))</span><br></pre></td></tr></table></figure><h2 id="五、AOP-操作（AspectJ-注解）"><a href="#五、AOP-操作（AspectJ-注解）" class="headerlink" title="五、AOP 操作（AspectJ 注解）"></a>五、AOP 操作（AspectJ 注解）</h2></li></ul><h3 id="1、创建类，再类里面定义方法"><a href="#1、创建类，再类里面定义方法" class="headerlink" title="1、创建类，再类里面定义方法"></a>1、创建类，再类里面定义方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、创建增强类（编写增强逻辑）"><a href="#2、创建增强类（编写增强逻辑）" class="headerlink" title="2、创建增强类（编写增强逻辑）"></a>2、创建增强类（编写增强逻辑）</h3><p>​ （1）在增强类里面，创建方法，让不同的代表不同的通知类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;<span class="comment">//前置通知</span></span><br><span class="line">System.out.println(<span class="string">&quot;before......&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、进行配置的通知"><a href="#3、进行配置的通知" class="headerlink" title="3、进行配置的通知"></a>3、进行配置的通知</h3><p>（1）在 Spring 配置文件中，开始注解扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.oy.online.Spring.aopanno&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​ (2) 使用注解创建类 User 和 UserProxy 对象</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200723115952.png" alt="image-20200723115951605"></p><p>​ （3）在增强类上面添加注解 <strong>@Aspect</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>​ （4）在 spring 配置文件中华开启生成代理对象</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开启 Aspect 生成代理对象--&gt;</span><br><span class="line">&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span><br></pre></td></tr></table></figure><h3 id="4、配置不同类型的通知"><a href="#4、配置不同类型的通知" class="headerlink" title="4、配置不同类型的通知"></a>4、配置不同类型的通知</h3><p>​ （1）在增强类里面，在作为通知方法上面添加通知类型的注解，使用切入点表达式配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="comment">// @Before 注解表示作为前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.oy.online.Spring.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;<span class="comment">// 前置通知</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知（返回通知）</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* com.oy.online.Spring.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;<span class="comment">// 前置通知</span></span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终通知</span></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(* com.oy.online.Spring.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;<span class="comment">// 前置通知</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* com.oy.online.Spring.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing.........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 环绕通知</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.oy.online.Spring.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span><span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之前.........&quot;</span>);</span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之后.........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、相同的切入点抽取"><a href="#5、相同的切入点抽取" class="headerlink" title="5、相同的切入点抽取"></a>5、相同的切入点抽取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相同切入点</span></span><br><span class="line">  <span class="meta">@Pointcut(value = &quot;execution(* com.oy.online.Spring.aopanno.User.add(..))&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointdemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 前置通知</span></span><br><span class="line">  <span class="comment">// @Before 注解表示作为前置通知</span></span><br><span class="line">  <span class="meta">@Before(value = &quot;pointdemo()&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;<span class="comment">// 前置通知</span></span><br><span class="line">      System.out.println(<span class="string">&quot;before....&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="6、有多个增强类同一个方法进行增强，设置增强类优先级"><a href="#6、有多个增强类同一个方法进行增强，设置增强类优先级" class="headerlink" title="6、有多个增强类同一个方法进行增强，设置增强类优先级"></a>6、有多个增强类同一个方法进行增强，设置增强类优先级</h3><p>​ （1）在增强类上面添加注释 <strong>@Order</strong>（数字类型值），数字类型值越小优先级越高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonProxy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.oy.online.Spring.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;<span class="comment">// 前置通知</span></span><br><span class="line">        System.out.println(<span class="string">&quot;PersonProxy before....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、完全使用注解开发"><a href="#7、完全使用注解开发" class="headerlink" title="7、完全使用注解开发"></a>7、完全使用注解开发</h3><p>​ （1）创建配置类，不需要创建 xml 配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.oy.online.Spring.aopanno&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigAOP</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">   ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(ConfigAOP.class);</span><br><span class="line"></span><br><span class="line">   User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">   user.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、AOP-操作（AspectJ-配置文件）"><a href="#六、AOP-操作（AspectJ-配置文件）" class="headerlink" title="六、AOP 操作（AspectJ 配置文件）"></a>六、AOP 操作（AspectJ 配置文件）</h2><h3 id="1、创建两个类，增强类和被增强类，创建方法"><a href="#1、创建两个类，增强类和被增强类，创建方法" class="headerlink" title="1、创建两个类，增强类和被增强类，创建方法"></a>1、创建两个类，增强类和被增强类，创建方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被增强类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增强类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、在-Spring-配置文件中创建两个类的对象"><a href="#2、在-Spring-配置文件中创建两个类的对象" class="headerlink" title="2、在 Spring 配置文件中创建两个类的对象"></a>2、在 Spring 配置文件中创建两个类的对象</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.Spring.aopxml.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.Spring.aopxml.BookProxy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、在-Spring-配置文件中配置切入点"><a href="#3、在-Spring-配置文件中配置切入点" class="headerlink" title="3、在 Spring 配置文件中配置切入点"></a>3、在 Spring 配置文件中配置切入点</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置aop增强--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.oy.online.Spring.aopxml.Book.buy(..))&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;bookProxy&quot;</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--增强作用在具体的方法上--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;p&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、测试类"><a href="#4、测试类" class="headerlink" title="4、测试类"></a>4、测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean2.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Book book = context.getBean(<span class="string">&quot;book&quot;</span>, Book.class);</span><br><span class="line">    book.buy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200723161841.png" alt="image-20200723161840553"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java之泛型</title>
      <link href="posts/3994269159/"/>
      <url>posts/3994269159/</url>
      
        <content type="html"><![CDATA[<h2 id="一、泛型概念"><a href="#一、泛型概念" class="headerlink" title="一、泛型概念"></a>一、泛型概念</h2><p>所谓泛型，就是允许自定义类，接口通过一个标识类中的某个属性的类型或者是某个方法的返回值及参数类型。</p><p>这个类型参数将在使用时.(例如，继承或实现这个接口，用这个类型声明变量、创建对象时确定(即传入实际类型参数，也称类型实参))。</p><h2 id="二、泛型的引用背景"><a href="#二、泛型的引用背景" class="headerlink" title="二、泛型的引用背景"></a>二、泛型的引用背景</h2><p>​ 集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在 JDK1.5 之前只能把元素类型设计为 object,JDK1.5 之后使用泛型类解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个这个元素如何保存的，如何管理等使确定的，因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。Collection，List 这个就是类型参数，即泛型。</p><h2 id="三、泛型在集合中的使用"><a href="#三、泛型在集合中的使用" class="headerlink" title="三、泛型在集合中的使用"></a>三、泛型在集合中的使用</h2><h3 id="1、没有使用泛型之前"><a href="#1、没有使用泛型之前" class="headerlink" title="1、没有使用泛型之前"></a>1、没有使用泛型之前</h3><p><strong>图示：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200723173559.png" alt="image-20200723173557955"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//需求：存放学生的成绩</span></span><br><span class="line">        list.add(<span class="number">78</span>);</span><br><span class="line">        list.add(<span class="number">76</span>);</span><br><span class="line">        list.add(<span class="number">89</span>);</span><br><span class="line">        list.add(<span class="number">88</span>);</span><br><span class="line">        <span class="comment">// 问题一：类型不安全</span></span><br><span class="line"><span class="comment">//        list.add(&quot;Tom&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object obj : list) &#123;</span><br><span class="line">           <span class="comment">// 问题二：强转时，可能出现ClassCastException</span></span><br><span class="line">            <span class="keyword">int</span> stuScore = (Integer) obj;</span><br><span class="line">            System.out.println(stuScore);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2、使用泛型"><a href="#2、使用泛型" class="headerlink" title="2、使用泛型"></a>2、使用泛型</h3><p><strong>图示：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200723174104.png" alt="image-20200723174103692"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       list.add(<span class="number">78</span>);</span><br><span class="line">       list.add(<span class="number">87</span>);</span><br><span class="line">       list.add(<span class="number">99</span>);</span><br><span class="line">       list.add(<span class="number">65</span>);</span><br><span class="line">       <span class="comment">// 编译时，就会进行类型检查，保证数据的安全</span></span><br><span class="line">       <span class="comment">// 使用迭代器遍历</span></span><br><span class="line">       Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">       <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">           Integer next = iterator.next();</span><br><span class="line">           System.out.println(next);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// 在集合中使用泛型的情况：以HashMap为例</span></span><br><span class="line">       <span class="comment">// JDK 7 新特性：类型判断</span></span><br><span class="line">       HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       map.put(<span class="string">&quot;Tom&quot;</span>,<span class="number">87</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Jerry&quot;</span>,<span class="number">87</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Jack&quot;</span>,<span class="number">67</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 泛型的嵌套</span></span><br><span class="line">       Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = map.entrySet();</span><br><span class="line">       Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = entries.iterator();</span><br><span class="line">       <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">           Map.Entry&lt;String, Integer&gt; e = iterator.next();</span><br><span class="line">           String key = e.getKey();</span><br><span class="line">           Integer value = e.getValue();</span><br><span class="line">           System.out.println(key +<span class="string">&quot;--&gt;&quot;</span> + value);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3、集合中使用泛型总结"><a href="#3、集合中使用泛型总结" class="headerlink" title="3、集合中使用泛型总结"></a>3、集合中使用泛型总结</h3><ol><li>集合接口或集合类在 JDk 5.0 时都修改带泛型的结构。</li><li>在实例化集合类时，可以指明具体的泛型类型</li><li>指明完以后，在集合或接口中凡是定义类或接口时，内部结构（比如：方法、构造器、属性等）使用到类的泛型的位置，都指定为实例化的泛型类型。</li><li>比如：add（E e） —&gt; 实例化必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换</li><li>如果实例化时，没指明泛型的类型。默认类型为 java.Object 类型。</li></ol><h2 id="四、自定义泛型类、泛型接口、泛型方法"><a href="#四、自定义泛型类、泛型接口、泛型方法" class="headerlink" title="四、自定义泛型类、泛型接口、泛型方法"></a>四、自定义泛型类、泛型接口、泛型方法</h2><p>【Order.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    String orderName;</span><br><span class="line">    <span class="keyword">int</span> orderId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类的内部结构就可以使用类的泛型</span></span><br><span class="line">    T orderT;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span></span>&#123;</span><br><span class="line">        T[] arr = (T[]) <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(String orderName, <span class="keyword">int</span> orderId, T orderT)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">        <span class="keyword">this</span>.orderT = orderT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如下的方法不是泛型方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getOrderT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderT</span><span class="params">(T orderT)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderT = orderT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Order&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;orderName=&#x27;&quot;</span> + orderName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, orderId=&quot;</span> + orderId +</span><br><span class="line">                <span class="string">&quot;, orderT=&quot;</span> + orderT +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt;<span class="function">List&lt;E&gt; <span class="title">copyFormArrayTolist</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(E e : arr)&#123;</span><br><span class="line">            list.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>静态方法中不能使用类的泛型。</li><li>泛型方法：在方法中出现了泛型的结构，泛型参数与类的泛型参数没任何关系。</li><li>换句话说，泛型方法所属的类是不是泛型类都没关系。</li><li>泛型方法，可以声明为静态的。原因：泛型参数是在调用方法时确定的。并非在实例化类时确定。</li></ol><p>【SubOrder.java】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubOrder</span> <span class="keyword">extends</span> <span class="title">Order</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;<span class="comment">//SubOrder:不是泛型类</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">copyFromArrayToList</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(E e : arr)&#123;</span><br><span class="line">            list.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>实例化时，如下的代码是错误的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SubOrder&lt;Integer&gt; o &#x3D; new SubOrder&lt;&gt;();</span><br></pre></td></tr></table></figure><p>【测试】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 如果定义了泛型，实例化没指明类的泛型，则认为此泛型类型为Object类型</span></span><br><span class="line">        <span class="comment">// 要求：如果大家定义类是带泛型的，建议在实例化时要指明类的泛型。</span></span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        order.setOrderT(<span class="number">123</span>);</span><br><span class="line">        order.setOrderT(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建议：实例化时指明类的泛型</span></span><br><span class="line">        Order&lt;String&gt; order1 = <span class="keyword">new</span> Order&lt;&gt;(<span class="string">&quot;orderAA&quot;</span>,<span class="number">1001</span>,<span class="string">&quot;order:AA&quot;</span>);</span><br><span class="line"></span><br><span class="line">        order1.setOrderT(<span class="string">&quot;AA:hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SubOrder sub1 = <span class="keyword">new</span> SubOrder();</span><br><span class="line">        <span class="comment">// 由于子类在继承带泛型时，指明了泛型的类型。则实例化子类对象，不在需要指明泛型。</span></span><br><span class="line">        sub1.setOrderT(<span class="number">1122</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Order&lt;String&gt; order = <span class="keyword">new</span> Order&lt;&gt;();</span><br><span class="line">        Integer[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">// 泛型方法在调用时，指明泛型参数的类型。</span></span><br><span class="line">        List&lt;Integer&gt; list = order.copyFormArrayTolist(arr);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、注意点"><a href="#五、注意点" class="headerlink" title="五、注意点"></a>五、注意点</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200723183631.png" alt="image-20200723183630373"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200723183722.png" alt="image-20200723183721692"></p><h2 id="六、通配符的使用"><a href="#六、通配符的使用" class="headerlink" title="六、通配符的使用"></a>六、通配符的使用</h2><p><strong>通配符</strong>：<strong>？</strong></p><p>​ 类 A 是类 B 的父类，G&lt;A&gt;和 G&lt;B&gt;是没关系的，二者共同的父类是：G&lt;?&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;Object&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">       List&lt;String&gt; list2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       List&lt;?&gt; list = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       list = list1;</span><br><span class="line">       list = list2;</span><br><span class="line"></span><br><span class="line">       System.out.println(list1);</span><br><span class="line">       System.out.println(list2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">null</span></span><br><span class="line"><span class="keyword">null</span></span><br></pre></td></tr></table></figure><p><strong>有限制条件的通配符的使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    限制条件的通配符的使用。</span></span><br><span class="line"><span class="comment">        ? extends A:</span></span><br><span class="line"><span class="comment">                G&lt;? extends A&gt; 可以作为G&lt;A&gt;和G&lt;B&gt;的父类，其中B是A的子类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ? super A:</span></span><br><span class="line"><span class="comment">                G&lt;? super A&gt; 可以作为G&lt;A&gt;和G&lt;B&gt;的父类，其中B是A的父类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;? extends Person&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;? <span class="keyword">super</span> Person&gt; list2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; list3 = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        List&lt;Person&gt; list4 = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">        List&lt;Object&gt; list5 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">        list1 = list3;</span><br><span class="line">        list1 = list4;</span><br><span class="line"><span class="comment">//        list1 = list5;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        list2 = list3;</span></span><br><span class="line">        list2 = list4;</span><br><span class="line">        list2 = list5;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取数据：</span></span><br><span class="line">        list1 = list3;</span><br><span class="line">        Person p = list1.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line">        <span class="comment">//Student s = list1.get(0);</span></span><br><span class="line"></span><br><span class="line">        list2 = list4;</span><br><span class="line">        Object obj = list2.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">////编译不通过</span></span><br><span class="line"><span class="comment">//        Person obj = list2.get(0);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入数据：</span></span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        list1.add(new Student());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//编译通过</span></span><br><span class="line">        list2.add(<span class="keyword">new</span> Person());</span><br><span class="line">        list2.add(<span class="keyword">new</span> Student());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合之Map</title>
      <link href="posts/3528046541/"/>
      <url>posts/3528046541/</url>
      
        <content type="html"><![CDATA[<h2 id="一、常用实现类结构"><a href="#一、常用实现类结构" class="headerlink" title="一、常用实现类结构"></a>一、常用实现类结构</h2><ul><li><strong>Map</strong>：双列数据：存储 key-value 键值对的数据<ul><li><strong>HashMap</strong>: 在作为 Map 的主要实现类：线程不安全，效率高；存储 null 的 key 和 value<ul><li><strong>LinkedMap</strong>：保证在遍历 map 元素时，可以照添加的顺序实现遍历。<ul><li>原因：在原来的 HashMap 底层结构基础上，添加了一对指针，指向前一个和后一个元素。对于频繁的遍历操作，此类执行的效率高于 HashMap。</li></ul></li><li><strong>TreeMap</strong>: 保证照添加的 key-value 对进行排序，实现排序遍历。此时考虑 key 的自然排序或定制排序，底层使用红黑树</li><li><strong>Hashtable</strong>：作为古老实现类，线程是安全的，效率低；不能存储 null 的 key 和 value<ul><li><strong>properties</strong>:常用类处理配置文件。key 和 value 都是 String 类型</li></ul></li></ul></li></ul></li><li>HashMap 的底层：<ul><li>数组 + 链表 （JDK 7.0 及之前）</li><li>数组 + 链表 + 红黑树 （JDK 8.0）</li></ul></li></ul><h2 id="二、存储结构的理解"><a href="#二、存储结构的理解" class="headerlink" title="二、存储结构的理解"></a>二、存储结构的理解</h2><ol><li>Map 中 key：无序的、不可重复的，使用 Set 存储的 key —》 key 所在的类要重写 equals() 和 hashCode() () （以 HashMap 为例)</li><li>Map 中的 value：无序的、可重复的，使用 collection 存储所在的类要重写 equals()</li><li>一个键值对：key - value 构成一个 Entry 对象。</li><li>Map 中的 entry：无序的、不可重复的，使用 Set 存储所在的 entry</li></ol><p><strong>图示：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200722163719.png" alt="image-20200722163711690"></p><h2 id="三、常用方法"><a href="#三、常用方法" class="headerlink" title="三、常用方法"></a>三、常用方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>put(Object key, Object value)</td><td>添加</td></tr><tr><td>remove(Object key)</td><td>删除</td></tr><tr><td>put(Object key, Object value)</td><td>修改</td></tr><tr><td>get(Object key)</td><td>查询</td></tr><tr><td>size()</td><td>长度</td></tr><tr><td>keySet()/value()/entrySet()</td><td>遍历</td></tr></tbody></table><p><strong>①</strong> <strong>keySet()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  Set keySet()：返回所有key构成的Set集合</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>,<span class="number">1234</span>);</span><br><span class="line">        map.put(<span class="string">&quot;BB&quot;</span>,<span class="number">56</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set keySet():返回所有的key构成的Set集合</span></span><br><span class="line">        Set set = map.keySet();</span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>② value()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Collection values()：返回所有value构成的Collection集合</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>,<span class="number">1234</span>);</span><br><span class="line">        map.put(<span class="string">&quot;BB&quot;</span>,<span class="number">56</span>);</span><br><span class="line"></span><br><span class="line">        Collection values = map.values();</span><br><span class="line">        Iterator iterator = values.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③ entrySet()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Set entrySet()：返回所有key-value对构成的Set集合</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>,<span class="number">1234</span>);</span><br><span class="line">        map.put(<span class="string">&quot;BB&quot;</span>,<span class="number">56</span>);</span><br><span class="line"></span><br><span class="line">        Set set = map.entrySet();</span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Object next = iterator.next();</span><br><span class="line">            Map.Entry entry = (Map.Entry) next;</span><br><span class="line">            System.out.println(entry.getKey()+<span class="string">&quot;--&gt;&quot;</span>+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、内存结构说明"><a href="#四、内存结构说明" class="headerlink" title="四、内存结构说明"></a>四、内存结构说明</h2><h3 id="1、HashMap-在-JDK-7-0-中实现的原理"><a href="#1、HashMap-在-JDK-7-0-中实现的原理" class="headerlink" title="1、HashMap 在 JDK 7.0 中实现的原理"></a>1、HashMap 在 JDK 7.0 中实现的原理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">在实例化以后，底层创建了长度为<span class="number">16</span>的一维数组Entry[] table.</span><br><span class="line">....可能已经执行多次put...</span><br><span class="line">    map.put(key1， value1);</span><br><span class="line">首先，调用Key所在类的HashCode()计算Key1的哈希值，此哈希值经过某种算法计算以后，得到entry数组中的存放位置。</span><br><span class="line">    如果此位置上的数据为空，此时Key1-value1添加成功。 --&gt;   情况<span class="number">1</span></span><br><span class="line">    如果位置上的数据不为空，（意味着此位置上存在一个或多个数据（以链表的形式存在））,比较Key1和已经存在的一个或多个的哈希值：</span><br><span class="line">       ① 如果key1的哈希值与已经存在的数据的哈希值不相同，此时key1-value1添加成功。 --&gt; 情况<span class="number">2</span></span><br><span class="line">       ② 如果Key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的equals(Key2)方法比较：</span><br><span class="line">        ①如果equlas()返回<span class="keyword">false</span>：此时key1-value1添加成功。--&gt;情况<span class="number">3</span></span><br><span class="line">        ②如果equals()返回<span class="keyword">true</span>：使用value1替换value2.</span><br></pre></td></tr></table></figure><p><strong>补充</strong>：</p><ul><li>关于情况 2 和情况 3：此时 key1-value1 和 原来的数据以链表的方式存储</li><li>在不断的添加过程中，会涉及的问题，当超出临界值（且要存放的位置非空）时，扩容。</li><li>默认的扩容方式：扩容为原来的 2 倍，并将原来的数组复制过来。</li></ul><h3 id="2、HashMap-在-JDK-8-0-中的实现原理"><a href="#2、HashMap-在-JDK-8-0-中的实现原理" class="headerlink" title="2、HashMap 在 JDK 8.0 中的实现原理"></a>2、HashMap 在 JDK 8.0 中的实现原理</h3><p><strong>HashMap 在 Jdk8 中相较于 jdk7 在底层实现方面不同：</strong></p><p>​ ① new HashMap(); 底层没创建一个长度为 16 的数组</p><p>​ ② jdk 8 底层数组是：Node[ ]， 而非 Entry[ ]</p><p>​ ③ 首次调用 put() 方法时，底层创建长度为 16 的数组</p><p>​ ④ jdk 7 底层结构是： 数组加链表。 jdk 8 中底层结构： 数组 + 链表 + 红黑树。</p><p>​ &lt;1&gt; 当形成链表时，<strong>七上八下</strong>（jdk7: 新的元素指向旧的元素。jdk8: 旧的元素指向新的元素）</p><p>​ &lt;2&gt; 当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前元素数组的长度 &gt; 64 时，此时此索引位置上的所有数据改为使用红黑树存储。</p><h3 id="3、HashMap-底层典型属性说明"><a href="#3、HashMap-底层典型属性说明" class="headerlink" title="3、HashMap 底层典型属性说明"></a>3、HashMap 底层典型属性说明</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>DEFAULT_INITIAL_CAPACITY</td><td>HashMap 的默认容量，16</td></tr><tr><td>DEFAULT_LOAD_FACTOR</td><td>HashMap 的默认加载因子：0.75</td></tr><tr><td>threshold</td><td>扩容的临界值，=容量*填充因子：16 * 0.75 =&gt; 12</td></tr><tr><td>TREEIFY_THRESHOLD</td><td>Bucket 中链表长度大于该默认值，转化为红黑树:8</td></tr><tr><td>MIN_TREEIFY_CAPACITY</td><td>桶中的 Node 被树化时最小的 hash 表容量:64</td></tr></tbody></table><h3 id="4、LinkedHashMap-的底层实现原理"><a href="#4、LinkedHashMap-的底层实现原理" class="headerlink" title="4、LinkedHashMap 的底层实现原理"></a>4、LinkedHashMap 的底层实现原理</h3><p>​ LinkedMap 底层使用的结构是与 HashMap 相同，因为 LinkHashMap 继承 HashMap</p><p>​ 区别在于：LinkHashMap 内部提供了 Entry，替换 HashMap 中的 Node</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200722173646.png" alt="image-20200722173645605"></p><h2 id="五、TreeMap-的使用"><a href="#五、TreeMap-的使用" class="headerlink" title="五、TreeMap 的使用"></a>五、TreeMap 的使用</h2><p>​ 向 TreeMap 中添加 key-value,要求 key 必须是由一个类创建的对象，因为要照 key 进行排序：自然排序、定制排序。</p><p><strong>① 自然排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        User user = (User) o;</span><br><span class="line">        <span class="keyword">return</span> age == user.age &amp;&amp;</span><br><span class="line">                name.equals(user.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            User user = (User) o;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.name.equals(user.name))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.age - user.age;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(user.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的值无法判断&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       TreeMap map = <span class="keyword">new</span> TreeMap();</span><br><span class="line">       User u1 = <span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>);</span><br><span class="line">       User u2 = <span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>);</span><br><span class="line">       User u3 = <span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">20</span>);</span><br><span class="line">       User u4 = <span class="keyword">new</span> User(<span class="string">&quot;Rose&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">       map.put(u1,<span class="number">98</span>);</span><br><span class="line">       map.put(u2,<span class="number">78</span>);</span><br><span class="line">       map.put(u3,<span class="number">90</span>);</span><br><span class="line">       map.put(u4,<span class="number">67</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 元示图遍历</span></span><br><span class="line">       Set set = map.entrySet();</span><br><span class="line">       Iterator iterator = set.iterator();</span><br><span class="line">       <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">           Object next = iterator.next();</span><br><span class="line">           Map.Entry e = (Map.Entry) next;</span><br><span class="line">           System.out.println(e.getKey()+<span class="string">&quot;-----&quot;</span>+e.getValue());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200722175131.png" alt="image-20200722175130851"></p><p><strong>② 定制排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Comparator comparator = <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                   User user1 = (User) o1;</span><br><span class="line">                   User user2 = (User) o2;</span><br><span class="line">                   <span class="keyword">return</span> user1.getAge() - user2.getAge();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的数值错误!!!!&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       TreeMap map = <span class="keyword">new</span> TreeMap(comparator);</span><br><span class="line">       User u1 = <span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>);</span><br><span class="line">       User u2 = <span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>);</span><br><span class="line">       User u3 = <span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">20</span>);</span><br><span class="line">       User u4 = <span class="keyword">new</span> User(<span class="string">&quot;Rose&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">       map.put(u1,<span class="number">98</span>);</span><br><span class="line">       map.put(u2,<span class="number">78</span>);</span><br><span class="line">       map.put(u3,<span class="number">90</span>);</span><br><span class="line">       map.put(u4,<span class="number">67</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       Set set = map.entrySet();</span><br><span class="line">       Iterator iterator = set.iterator();</span><br><span class="line">       <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">           Object next = iterator.next();</span><br><span class="line">           Map.Entry e = (Map.Entry) next;</span><br><span class="line">           System.out.println(e.getKey() +<span class="string">&quot;---&gt;&quot;</span> + e.getValue());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200722180546.png" alt="image-20200722180546207"></p><h2 id="六、使用-Properties-读取配置文件"><a href="#六、使用-Properties-读取配置文件" class="headerlink" title="六、使用 Properties 读取配置文件"></a>六、使用 Properties 读取配置文件</h2><p><strong>创建 jdbc.properties 文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">OY</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Properties:常用里处理配置文件.key和value都是String类类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        <span class="comment">//加载流对应的文件</span></span><br><span class="line">        pro.load(fis);</span><br><span class="line">        String name = pro.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String password = pro.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span>+name+<span class="string">&quot;password&quot;</span>+password);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用类</title>
      <link href="posts/518000799/"/>
      <url>posts/518000799/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天的努力只为更好的明天。</p></blockquote><h1 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p><strong>String:</strong></p><ol><li> String 声明为 fianl 的，不可被继承。</li><li> String 实现了 Serializable 接口，表示字符串是支持序列化的。实现了 Comparable 接口，表示 String 可以进行比较大小。</li><li> String 内部定义的 fianl char[ ] value 用于储存字符串数据。</li><li> 通过字面量的方式（区别<strong>new</strong>给一个字符串赋值，此时得到字符串声明在字符串常量池中）。</li><li> 字符串常量池是不会存储相同的内容（使用 String 类的<strong>equals()**比较，返回</strong>true**）的字符串的。</li></ol><h2 id="二、String-的不可变性"><a href="#二、String-的不可变性" class="headerlink" title="二、String 的不可变性"></a>二、String 的不可变性</h2><blockquote><p>说明：<br>① 当对字符串重新赋值，需要重写指定内存中区域赋值，不能使用原有的 value 进行赋值<br>② 当对现有的字符串进行操作时，也需要重新指定内存区域的赋值，不能使用原有的 value 进行赋值。<br>③ 当调用 String 的 replace（）方式修改指定字符串时，也需要重新指定区域赋值，不能使用原有的 value 进行赋值。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// 字面量的定义</span></span><br><span class="line">       String s1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">       String s2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">       <span class="comment">//比较s1和s2的地址值</span></span><br><span class="line">       System.out.println(s1 == s2); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*****************&quot;</span>);</span><br><span class="line"></span><br><span class="line">String s4 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">String s5 = s4.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">System.out.println(s4);<span class="comment">//abc</span></span><br><span class="line">System.out.println(s5);<span class="comment">//mbc</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、String-实例化的不同方式"><a href="#三、String-实例化的不同方式" class="headerlink" title="三、String 实例化的不同方式"></a>三、String 实例化的不同方式</h2><blockquote><p>方式说明：<br>方式一：通过字面量定义的方式<br>方式二：通过 new+构造器的方式</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// 通过字面定义的方式：此时的s1和s2的数据javaEE声明在方法区中字符串常量池</span></span><br><span class="line">       String  s1 = <span class="string">&quot;JavaEE&quot;</span>;</span><br><span class="line">       String  s2 = <span class="string">&quot;JavaEE&quot;</span>;</span><br><span class="line">       <span class="comment">// 通过new + 构造器的方式：此时的s3和s4保存地址，是数据在堆空间以后对应的地址值。</span></span><br><span class="line">       String s3 = <span class="keyword">new</span> String(<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line">       String s4 = <span class="keyword">new</span> String(<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println(s1 == s2);<span class="comment">// true</span></span><br><span class="line">       System.out.println(s1 == s3);<span class="comment">// false</span></span><br><span class="line">       System.out.println(s1 == s4);<span class="comment">// false</span></span><br><span class="line">       System.out.println(s3 == s4);<span class="comment">// false</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>图示：</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200606164300492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="String实例化"><br><strong>问题：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>); 方式创建对象，在内存中创建了几个对象？</span><br><span class="line">两个：一个是堆空间<span class="string">&quot;new&quot;</span>结构，另一个是<span class="keyword">char</span>[] 对应的常量池中的数据：<span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure><h2 id="四、字符串拼接方式赋值的对比"><a href="#四、字符串拼接方式赋值的对比" class="headerlink" title="四、字符串拼接方式赋值的对比"></a>四、字符串拼接方式赋值的对比</h2><blockquote><p>说明： 1.常量与常量的拼接结果在常量池，且常量池中不会存在相同的常量 2.只要其中一个是变量，结果就在堆中。 3.如果拼接的结果调用 **intern()**方法，返回值就是在常量池中。</p></blockquote><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">      String s1 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">      String s2 = <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line"></span><br><span class="line">      String s3 = <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">      String s4 = <span class="string">&quot;javaEE&quot;</span>+<span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">      String s5 = s1 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">      String s6 = <span class="string">&quot;javaEE&quot;</span> + s2;</span><br><span class="line">      String s7 = s1 + s2;</span><br><span class="line"></span><br><span class="line">      System.out.println(s3 == s4);<span class="comment">//true</span></span><br><span class="line">      System.out.println(s3 == s5);<span class="comment">//false</span></span><br><span class="line">      System.out.println(s3 == s6);<span class="comment">//false</span></span><br><span class="line">      System.out.println(s3 == s7);<span class="comment">//false</span></span><br><span class="line">      System.out.println(s5 == s6);<span class="comment">//false</span></span><br><span class="line">      System.out.println(s5 == s7);<span class="comment">//false</span></span><br><span class="line">      System.out.println(s6 == s7);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;**********************************&quot;</span>);</span><br><span class="line">      String s8 = s6.intern(); <span class="comment">// 返回值得到的s8使用的常量值中已经存在的&quot;javaEEhadoop&quot;;</span></span><br><span class="line">      System.out.println(s3 == s8); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String s1 = <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">       String s2 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">       String s3 = s2 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">       System.out.println(s1 == s3);<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> String s4 = <span class="string">&quot;javaEE&quot;</span>; <span class="comment">// s4:常量</span></span><br><span class="line">       String s5 = s4 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">       System.out.println(s1 == s5); <span class="comment">// true</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="五、常用方法"><a href="#五、常用方法" class="headerlink" title="五、常用方法"></a>五、常用方法</h2><ul><li>int length()：返回字符串的长度： return value.length</li><li>char charAt(int index)： 返回某索引处的字符 return value[index]</li><li>boolean isEmpty()：判断是否是空字符串：return value.length == 0</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(str.length());<span class="comment">// 3</span></span><br><span class="line">System.out.println(str.charAt(<span class="number">2</span>));<span class="comment">// c</span></span><br><span class="line">System.out.println(str.isEmpty());<span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>String toLowerCase()：使用默认语言环境，将 String 中的所字符转换为小写</li><li>String toUpperCase()：使用默认语言环境，将 String 中的所字符转换为大写</li><li>String trim()：返回字符串的副本，忽略前导空白和尾部空白</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;   abcdefg   &quot;</span>;</span><br><span class="line">System.out.println(str1.toLowerCase());<span class="comment">// abcdefg</span></span><br><span class="line">System.out.println(str1.toUpperCase());<span class="comment">// ABCDEFG</span></span><br><span class="line">System.out.println(str2.trim());<span class="comment">// abcdefg</span></span><br></pre></td></tr></table></figure><ul><li>boolean equals(Object obj)：比较字符串的内容是否相同</li><li>boolean equalsIgnoreCase(String anotherString)：与 equals 方法类似，忽略大小写</li><li>String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str3 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">String str4 = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">String str5 = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">String str6 = <span class="string">&quot;efg&quot;</span>;</span><br><span class="line">System.out.println(str3.equals(str4)); <span class="comment">// false</span></span><br><span class="line">System.out.println(str3.equalsIgnoreCase(str4)); <span class="comment">// true</span></span><br><span class="line">System.out.println(str5.concat(str6));<span class="comment">// abcdefg</span></span><br></pre></td></tr></table></figure><ul><li>int compareTo(String anotherString)：比较两个字符串的大小</li><li>String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从 beginIndex 开始截取到最后的一个子字符串。</li><li>String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从 beginIndex 开始截取到 endIndex(不包含)的一个子字符串。</li><li>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str7 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">String str8 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">String str9 = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">System.out.println(str7.compareTo(str8)); <span class="comment">// 0 表示相等</span></span><br><span class="line">System.out.println(str7.substring(<span class="number">2</span>));<span class="comment">// cdefg</span></span><br><span class="line">System.out.println(str7.substring(<span class="number">0</span>,<span class="number">5</span>)); <span class="comment">// abcde</span></span><br><span class="line">System.out.println(str7.indexOf(<span class="string">&quot;d&quot;</span>,<span class="number">0</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束</li><li>boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</li><li>boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">boolean b1 = str1.endsWith(<span class="string">&quot;rld&quot;</span>);</span><br><span class="line">boolean b2 = str1.startsWith(<span class="string">&quot;hel&quot;</span>);</span><br><span class="line">boolean b3 = str1.startsWith(<span class="string">&quot;ll&quot;</span>,<span class="number">2</span>);</span><br><span class="line">System.out.println(b1); <span class="comment">//ture</span></span><br><span class="line">System.out.println(b2); <span class="comment">//ture</span></span><br><span class="line">System.out.println(b3); <span class="comment">//ture</span></span><br></pre></td></tr></table></figure><ul><li>boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;wor&quot;</span>;</span><br><span class="line">System.out.println(str1.contains(str2)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(str1.indexOf(<span class="string">&quot;ll&quot;</span>)); <span class="comment">// 2</span></span><br><span class="line">System.out.println(str1.indexOf(<span class="string">&quot;lo&quot;</span>,<span class="number">5</span>));<span class="comment">// -1</span></span><br></pre></td></tr></table></figure><ul><li>int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引</li><li>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str3 = <span class="string">&quot;hellorworld&quot;</span>;</span><br><span class="line">System.out.println(str3.lastIndexOf(<span class="string">&quot;or&quot;</span>)); <span class="comment">// 7</span></span><br><span class="line">System.out.println(str3.lastIndexOf(<span class="string">&quot;or&quot;</span>,<span class="number">2</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p><strong><em>注：indexOf 和 lastIndexOf 方法如果未找到都是返回-1</em></strong></p><p><strong>替换：</strong></p><ul><li>String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所 oldChar 得到的。</li><li>String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所匹配字面值目标序列的子字符串。</li><li>String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所匹配给定的正则表达式的子字符串。</li><li>String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;中国湖南&quot;</span>;</span><br><span class="line">        <span class="comment">//   String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</span></span><br><span class="line">        String str2 = str1.replace(<span class="string">&quot;湖南&quot;</span>,<span class="string">&quot;湖北&quot;</span>);</span><br><span class="line">        System.out.println(str2); <span class="comment">// 中国湖北</span></span><br><span class="line">        System.out.println(<span class="string">&quot;*********************************************&quot;</span>);</span><br><span class="line">        <span class="comment">//   String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</span></span><br><span class="line">        String str3 = <span class="string">&quot;12hello34world5java7891mysql456&quot;</span>;</span><br><span class="line">        String str4 = str3.replaceAll(<span class="string">&quot;\\d+&quot;</span>, <span class="string">&quot;,&quot;</span>).replaceAll(<span class="string">&quot;^,|,$&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(str4); <span class="comment">// hello,world,java,mysql</span></span><br></pre></td></tr></table></figure><p><strong>匹配:</strong></p><ul><li>boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str5 = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line">      <span class="comment">//判断str字符串中是否全部有数字组成，即有1-n个数字组成</span></span><br><span class="line">      boolean matches = str5.matches(<span class="string">&quot;\\d+&quot;</span>);</span><br><span class="line">      System.out.println(matches); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>切片：</strong></p><ul><li>String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。</li><li>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过 limit 个，如果超过了，剩下的全部都放到最后一个元素中。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String str6 = <span class="string">&quot;hello|world|java&quot;</span>;</span><br><span class="line">      String[] strs = str6.split(<span class="string">&quot;\\|&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">          System.out.println(strs[i]); <span class="comment">// hello world java</span></span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line">      String str7 = <span class="string">&quot;hello.world.java&quot;</span>;</span><br><span class="line">      String[] strs2 = str7.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">          System.out.println(strs2[i]); <span class="comment">// hello  world java</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="String-与其他结构的替换"><a href="#String-与其他结构的替换" class="headerlink" title="String 与其他结构的替换"></a>String 与其他结构的替换</h2><ul><li>① 与基本的数据类型、包装类之间的装换<blockquote><pre><code>String  ----  基本数据类型、包装类：调用包装类的静态方法：parse**XXX**(str)</code></pre><p>基本数据类型、包装类 — String：调用 String 重载的 valueof(<strong>XXX</strong>)</p></blockquote></li></ul><p><strong>代码示例</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(str);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        String str1 = String.valueOf(num);</span><br><span class="line">        System.out.println(str1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>String ====》char[ ]: 调用 String 的 toCharArray();<br>char[ ] ===》 String :调用 String 的构造器</p></blockquote><p><strong>代码示例</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        String --&gt; char[] :调用String的toCharArray();</span></span><br><span class="line">        String str = <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line">        <span class="keyword">char</span>[] ch = str.toCharArray();</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ch.length; i++)&#123;</span><br><span class="line">           System.out.println(ch[i]);</span><br><span class="line">       &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;***************************&quot;</span>);</span><br><span class="line"><span class="comment">//        char[] --&gt; String：调用String的构造器</span></span><br><span class="line">       <span class="keyword">char</span>[] arr = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>&#125;;</span><br><span class="line">       String str2 = <span class="keyword">new</span> String(arr);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>② 与字数组之间的转换</li></ul><blockquote><p>编码：String ===》 byte[ ]:调用 String 的 getBytes();<br>解码：byte[ ] ===》 String :调用 String 的构造器<br>编码：字符串 ===》 字节（二进制）<br>解码：编码的逆过程，字节 ===》 字符串<br>说明：解码时，要求解码的使用的字符集必须与编码的字符集一致，否则会出现乱码。</p></blockquote><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> throws UnsupportedEncodingException </span>&#123;</span><br><span class="line">       String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">       byte[] bytes = str.getBytes(); <span class="comment">// 使用默认字符集，进行编码</span></span><br><span class="line">       System.out.println(bytes);</span><br><span class="line">       byte[] gbks = str.getBytes(<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">       System.out.println(Arrays.toString(gbks));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200613161741418.png"><br><strong>补充：</strong><br>与 StringBuffer、StringBuilder 之间的转换<br>String === 》 StringBuffer、StringBuilder：调用 StringBuffer、StringBuilder 构造器；<br>StringBuffer、StringBuilder ===》 String: ① 调用 String 构造器 ② StringBuffer、StringBuilder 的 toString();</p><h2 id="JVM-中字符串常量池存放位置说明："><a href="#JVM-中字符串常量池存放位置说明：" class="headerlink" title="JVM 中字符串常量池存放位置说明："></a>JVM 中字符串常量池存放位置说明：</h2><blockquote><p>JDK 1.6： (jdk 6.0 , java 6.0):字符串常量池存储在方法区<strong>（</strong>永久区<strong>）</strong><br>JDK 1.7： 字符串常量池存储在<strong>堆空间</strong><br>JDK 1.8： 字符串常量池存储在方法区（<strong>云空间</strong>）</p></blockquote><h1 id="StringBuffer、StringBuilder"><a href="#StringBuffer、StringBuilder" class="headerlink" title="StringBuffer、StringBuilder"></a>StringBuffer、StringBuilder</h1><h2 id="一、String、String、StringBuilder-三者的对比"><a href="#一、String、String、StringBuilder-三者的对比" class="headerlink" title="一、String、String、StringBuilder 三者的对比"></a>一、String、String、StringBuilder 三者的对比</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String：不可变的字符序列：底层使用<span class="keyword">char</span>[] 储存</span><br><span class="line">StringBuffer： 可变的字符序列：线程安全的，效率低：底层使用<span class="keyword">char</span>[]存储</span><br><span class="line">StringBuilder： 可变的字符序列：jdk5<span class="number">.0</span>：新增的，线程不安全，效率高；底层使用<span class="keyword">char</span>[] 存储</span><br></pre></td></tr></table></figure><p>可变类型：</p><pre><code> 比如列表：列表名（或称为列表引用）指向堆空间中的一个列表。列表引用当中存储的内容为地址，可以指向堆内存中的具体对象.一方面，该列表可以保证在地址不变的前提下，改变列表内容;另一方面，该引用也可以直接指向堆空间中的另外一个列表..</code></pre><p>不可变序列:</p><pre><code>比如数字、字符、（元祖）：对于基础数据类型，变量地址即变量本身，所以值发生变化了，内存地址就一定也变了。比如字符串：被称为不可变的字符序列，每个字符底层均有规范的Unicode码对应，内存规定无法对单一的一个字符进行修改，要修改字符串必须重新指向一个全新的字符串</code></pre><h2 id="二、StringBuffer-与-StringBuilder-的内存解析"><a href="#二、StringBuffer-与-StringBuilder-的内存解析" class="headerlink" title="二、StringBuffer 与 StringBuilder 的内存解析"></a>二、StringBuffer 与 StringBuilder 的内存解析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">以Stringuffer为例：</span><br><span class="line">String str = <span class="keyword">new</span> String();<span class="comment">//char[] value = new char[0];</span></span><br><span class="line">String str1 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);<span class="comment">//char[] value = new char[]&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;;</span></span><br><span class="line"></span><br><span class="line">StringBuffer sb1 = <span class="keyword">new</span> StringBuffer();<span class="comment">//char[] value = new char[16];底层创建了一个长度是16的数组。</span></span><br><span class="line">System.out.println(sb1.length());<span class="comment">//</span></span><br><span class="line">sb1.append(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//value[0] = &#x27;a&#x27;;</span></span><br><span class="line">sb1.append(<span class="string">&#x27;b&#x27;</span>);<span class="comment">//value[1] = &#x27;b&#x27;;</span></span><br><span class="line"></span><br><span class="line">StringBuffer sb2 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;abc&quot;</span>);<span class="comment">//char[] value = new char[&quot;abc&quot;.length() + 16];</span></span><br></pre></td></tr></table></figure><blockquote><p>扩容问题：如果添加的数组底层数组盛不下，那就需要扩容底层的数组<br>默认的情况,扩容为原来的 2 倍+2;同时将原来的数组复制到新数组中。<br>在开发中优先使用：StringBuffer、StringBuilder</p></blockquote><h2 id="三、对比-String、StringBuffer-、StringBuilder-三者的执行效率"><a href="#三、对比-String、StringBuffer-、StringBuilder-三者的执行效率" class="headerlink" title="三、对比 String、StringBuffer 、StringBuilder 三者的执行效率"></a>三、对比 String、StringBuffer 、StringBuilder 三者的执行效率</h2><blockquote><p>从高到低排序：StringBuiler &gt; StringBuffer &gt; String</p></blockquote><h2 id="四、StringBuffer、StringBuilder-中常用的方法"><a href="#四、StringBuffer、StringBuilder-中常用的方法" class="headerlink" title="四、StringBuffer、StringBuilder 中常用的方法"></a>四、StringBuffer、StringBuilder 中常用的方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">增：oppend（XXX）</span><br><span class="line">删：<span class="keyword">delete</span>（<span class="keyword">int</span> start, <span class="keyword">int</span> end）</span><br><span class="line">改：setCharAt(<span class="keyword">int</span> n , <span class="keyword">char</span> ch) / replance(<span class="keyword">int</span> start, <span class="keyword">int</span> end , Sting str)</span><br><span class="line">查：charAt(<span class="keyword">int</span> n)</span><br><span class="line">插： insert（<span class="keyword">int</span> offset , XXX）;</span><br><span class="line">长度：Lenght();</span><br><span class="line">*遍历：<span class="keyword">for</span>（） + charAt() / toString（）</span><br></pre></td></tr></table></figure><h1 id="JDK-8-之前日期时间-API"><a href="#JDK-8-之前日期时间-API" class="headerlink" title="JDK 8 之前日期时间 API"></a>JDK 8 之前日期时间 API</h1><h2 id="一、获取系统之前当前时间"><a href="#一、获取系统之前当前时间" class="headerlink" title="一、获取系统之前当前时间"></a>一、获取系统之前当前时间</h2><blockquote><p>System 类中的 CurrentTimeMills()</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> time = Sysem.cuurenTimeMillis()</span><br><span class="line"><span class="comment">//返回当前时间与1970年1月1日0时0分之间以毫秒为单位的时间差。</span></span><br><span class="line"><span class="comment">//称为时间戳</span></span><br><span class="line">System.out.println(time);</span><br></pre></td></tr></table></figure><h2 id="二、java-util-Date-类与-java-sql-Date-类"><a href="#二、java-util-Date-类与-java-sql-Date-类" class="headerlink" title="二、java.util.Date 类与 java.sql.Date 类"></a>二、java.util.Date 类与 java.sql.Date 类</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java.util.Date类</span><br><span class="line">|---java.sql.Date类</span><br><span class="line"><span class="number">1.</span>两个构造器的使用</span><br><span class="line">&gt;构造器一：Date()创建一个对应当前时间的Date对象</span><br><span class="line">&gt;构造器二：创建指定毫秒数的Date对象</span><br><span class="line"><span class="number">2.</span>两个方法的使用</span><br><span class="line">&gt;toString() 显示当前的年、月、日、分、秒</span><br><span class="line">&gt;getTime() 获取当前Date对象对应的毫秒数。(时间戳)</span><br><span class="line"><span class="number">3.</span>java.sql.Date对应着数据中日期类型的变量</span><br><span class="line">&gt; 实例化</span><br><span class="line">&gt; 将java.util.Date 转为 java.sql.Date</span><br></pre></td></tr></table></figure><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">       System.out.println(time);</span><br><span class="line">   &#125;</span><br><span class="line">   @Test</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// 构造器一：Date()：创建一个对应当前时间的Date对象</span></span><br><span class="line">       Date date = <span class="keyword">new</span> Date();</span><br><span class="line">       System.out.println(date.toString()); <span class="comment">// Sat Jun 13 17:07:02 CST 2020</span></span><br><span class="line"></span><br><span class="line">       System.out.println(date.getTime()); <span class="comment">// 1592039273009</span></span><br><span class="line">   &#125;</span><br><span class="line">   @Test</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// 构造器二：创建指定毫秒数的Date对象</span></span><br><span class="line">       Date date = <span class="keyword">new</span> Date(<span class="number">1592039273009L</span>);</span><br><span class="line">       System.out.println(date.toString()); <span class="comment">// Sat Jun 13 17:07:53 CST 2020</span></span><br><span class="line">       System.out.println(<span class="string">&quot;***********************&quot;</span>);</span><br><span class="line">       <span class="comment">// 创建java.sql.Date对象</span></span><br><span class="line">       java.sql.Date date1 = <span class="keyword">new</span> java.sql.Date(<span class="number">1592039273009L</span>);</span><br><span class="line">       System.out.println(date1); <span class="comment">// 2020-06-13</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将java.util.Date对象转换为java.sql.Date对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// 情况一：</span></span><br><span class="line">       Date date = <span class="keyword">new</span> java.sql.Date(<span class="number">1592039273009L</span>);</span><br><span class="line">       java.sql.Date date1 = (java.sql.Date) date;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 情况二：</span></span><br><span class="line">       Date date2 = <span class="keyword">new</span> Date();</span><br><span class="line">       java.sql.Date date3 = <span class="keyword">new</span> java.sql.Date(date2.getTime());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="三、java-text-SimpleDateFormat-类"><a href="#三、java-text-SimpleDateFormat-类" class="headerlink" title="三、java.text.SimpleDateFormat 类"></a>三、java.text.SimpleDateFormat 类</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">simpleDateFormat 对日期Date类的格式化和解析</span><br><span class="line"><span class="number">1.</span>两个操作</span><br><span class="line"><span class="number">1.1</span> 格式化：日期 --&gt; 字符串</span><br><span class="line"><span class="number">1.2</span> 解析： 格式化的逆过程，字符串 --&gt; 日期</span><br><span class="line"><span class="number">2.</span>SimpleDateFormat</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> throws ParseException </span>&#123;</span><br><span class="line"><span class="comment">//        照指定的方式格式化和解析：调用带参的构造器</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd  hh:mm aaa&quot;</span>);</span><br><span class="line">        <span class="comment">// 格式化</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        String format = sdf.format(date);</span><br><span class="line">        System.out.println(format); <span class="comment">// 2020-06-13  05:23 下午</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析:要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现),</span></span><br><span class="line">        <span class="comment">//否则，抛异常</span></span><br><span class="line">        Date parse = sdf.parse(<span class="string">&quot;2020-06-13  05:23 下午&quot;</span>);</span><br><span class="line">        System.out.println(parse); <span class="comment">// Sat Jun 13 17:23:00 CST 2020</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="四、Calendar-类：日历类、抽象类"><a href="#四、Calendar-类：日历类、抽象类" class="headerlink" title="四、Calendar 类：日历类、抽象类"></a>四、Calendar 类：日历类、抽象类</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.实例化</span></span><br><span class="line">        <span class="comment">//方式一：创建其子类（GregorianCalendar的对象</span></span><br><span class="line">        <span class="comment">//方式二：调用其静态方法getInstance()</span></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line"><span class="comment">//        System.out.println(calendar);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 常用方法</span></span><br><span class="line">        <span class="comment">// get</span></span><br><span class="line">        <span class="keyword">int</span> days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(days);<span class="comment">// 13</span></span><br><span class="line">        System.out.println(calendar.get(Calendar.DAY_OF_YEAR)); <span class="comment">// 165</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// set()</span></span><br><span class="line">        calendar.<span class="built_in">set</span>(Calendar.DAY_OF_MONTH,<span class="number">22</span>);</span><br><span class="line">        <span class="keyword">int</span> days1 = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(days1); <span class="comment">// 22</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//add()</span></span><br><span class="line">        calendar.add(Calendar.DAY_OF_MONTH,<span class="number">-3</span>);</span><br><span class="line">        days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(days); <span class="comment">// 19</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// getTime() 日历类 ---&gt; Date</span></span><br><span class="line">        Date time = calendar.getTime();</span><br><span class="line">        System.out.println(time);<span class="comment">// Fri Jun 19 17:41:29 CST 2020</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//setTime():Date ---&gt; 日历类</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        calendar.setTime(date);</span><br><span class="line">        days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(days); <span class="comment">// 13</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="JDK8-中新日期时间-API"><a href="#JDK8-中新日期时间-API" class="headerlink" title="JDK8 中新日期时间 API"></a>JDK8 中新日期时间 API</h1><h2 id="一、日期时间的迭代"><a href="#一、日期时间的迭代" class="headerlink" title="一、日期时间的迭代"></a>一、日期时间的迭代</h2><blockquote><p>第一代：jdk 1.0 Date 类<br>第二代：jdk 1.1 Calender 类，一定的程度上替代了 Date 类<br>第三代：jdk 1.8 提出了新的一套 API</p></blockquote><h2 id="二、前两代存在的问题举例："><a href="#二、前两代存在的问题举例：" class="headerlink" title="二、前两代存在的问题举例："></a>二、前两代存在的问题举例：</h2><blockquote><p>可变性：像时间和日期这样的类应该是吧不可变的。<br>偏移性：Date 中的年份是从 1900 年开始的，月份是从 0 开始的。<br>格式化：格式话只对 Date 有用，calender 则不行。<br>此外，它们也不是线程安全的，不能处理闰秒等。</p></blockquote><h2 id="三、java-8-中新的日期时间-API-涉及到的包"><a href="#三、java-8-中新的日期时间-API-涉及到的包" class="headerlink" title="三、java 8 中新的日期时间 API 涉及到的包"></a>三、java 8 中新的日期时间 API 涉及到的包</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200613180443221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="新日期API包"></p><h2 id="四、本地日期、本地时间、本地日期时间的使用：LocalDate-LocalTime-LocalDateTime"><a href="#四、本地日期、本地时间、本地日期时间的使用：LocalDate-LocalTime-LocalDateTime" class="headerlink" title="四、本地日期、本地时间、本地日期时间的使用：LocalDate/LocalTime/LocalDateTime"></a>四、本地日期、本地时间、本地日期时间的使用：LocalDate/LocalTime/LocalDateTime</h2><ul><li>一、说明<blockquote><p>① 分别表示使用 ISO-8601 日历系统的日期、时间、和时间。它们提供了简单的本地时间信息，也不包含当前的时间信息，也不包含与时区相关的信息。<br>② LocalDatetime 相较于 LocalDate、LocalTIme,使用频率高<br>③ 类似于 Calender</p></blockquote></li><li>二、常用方法<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200613181042463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70"></li></ul><h2 id="五-时间点：Instant"><a href="#五-时间点：Instant" class="headerlink" title="五 时间点：Instant"></a>五 时间点：Instant</h2><ul><li><p>一、说明</p><blockquote><p>① 时间线上的一个瞬时点，概念上讲。它只是简单的表示自 1970 年 1 月 1 日 0 时 0 秒（UTC 开始的秒数）<br>② 类似于 java.util.Date 类</p></blockquote></li><li><p>二、常用方法<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200613181420651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70"></p></li></ul><h2 id="六、时间日期格式化类：DateTimeFormatter"><a href="#六、时间日期格式化类：DateTimeFormatter" class="headerlink" title="六、时间日期格式化类：DateTimeFormatter"></a>六、时间日期格式化类：DateTimeFormatter</h2><ul><li>一、说明</li></ul><blockquote><p>① 格式化或解析日期、时间<br>② 类似于 SimpleDateFormat</p></blockquote><ul><li>二、常用方法<br>① 实例化方式：</li></ul><blockquote><p>预定义的标准格式，如：<strong>ISO_LOCAL_DATE_TIME; ISO_LOCAL_DATE;ISO_DATE;ISO_LOCAL_TIME</strong><br>本地相关的格式：如：<strong>ofLocalizedDateTime(FormatStyle.LONG)</strong><br>自定义的格式：如：<strong>ofPattern（“yyyy-MM-dd hh:mm:ss”）</strong></p></blockquote><p>② 常用方法<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020062015303181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">     DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">     <span class="comment">// 格式化</span></span><br><span class="line">     String str = formatter.format(LocalDateTime.now());</span><br><span class="line">     System.out.println(str); <span class="comment">// 2020-06-20 03:38:37</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 解析</span></span><br><span class="line">     TemporalAccessor accessor = formatter.parse(<span class="string">&quot;2020-06-20 03:38:37&quot;</span>);</span><br><span class="line">     System.out.println(accessor); <span class="comment">// &#123;MinuteOfHour=38, HourOfAmPm=3, MilliOfSecond=0, MicroOfSecond=0, NanoOfSecond=0, SecondOfMinute=37&#125;,ISO resolved to 2020-06-20</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h2><ul><li>带时区的日期时间：ZonedDateTime / ZoneId</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * ZoneId:类中包含的失去信息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  @Test</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">// getAvailableZoneIds():获取所有的ZoneId</span></span><br><span class="line">     Set&lt;String&gt; zoneIds = ZoneId.getAvailableZoneIds();</span><br><span class="line">     <span class="keyword">for</span> (String s : zoneIds) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println(<span class="string">&quot;***********************&quot;</span>);</span><br><span class="line">     LocalDateTime localDateTime = LocalDateTime.now(ZoneId.of(<span class="string">&quot;Asia/Tokyo&quot;</span>));</span><br><span class="line">     System.out.println(localDateTime); <span class="comment">// 2020-06-20T16:53:34.885</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * ZonedDateTime: 带时区的时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  @Test</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">// now() 获取本时区的ZoneDateTime对象</span></span><br><span class="line">     ZonedDateTime now = ZonedDateTime.now();</span><br><span class="line">     System.out.println(now); <span class="comment">// 2020-06-20T15:57:00.163+08:00[Asia/Shanghai]</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// now(ZoneId id) 获取指定时区的ZonedTime对象</span></span><br><span class="line">     ZonedDateTime zonedDateTiem = ZonedDateTime.now(ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));</span><br><span class="line">     System.out.println(zonedDateTiem);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>时间间隔：Duration–用于计算两个“时间”间隔，以秒和纳秒为基准</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">     LocalTime localTime = LocalTime.now();</span><br><span class="line">     LocalTime localTime2 = LocalTime.of(<span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line">     <span class="comment">// between() 静态方法，返回Duration对象，表示两个时间间隔</span></span><br><span class="line">     Duration between = Duration.between(localTime, localTime2);</span><br><span class="line">     System.out.println(between);</span><br><span class="line"></span><br><span class="line">     System.out.println(between.getSeconds());</span><br><span class="line">     System.out.println(between.getNano());</span><br><span class="line"></span><br><span class="line">     LocalDateTime localdatetime = LocalDateTime.of(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line">     LocalDateTime localdatetime1 = LocalDateTime.of(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line">     Duration between1 = Duration.between(localdatetime, localdatetime1);</span><br><span class="line">     System.out.println(between1.toDays()); <span class="comment">// 365</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>日期间隔：Period –用于计算两个“日期”间隔，以年、月、日衡量</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200620163056623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">      LocalDate localdate = LocalDate.now();</span><br><span class="line">      LocalDate localdate1 = LocalDate.of(<span class="number">2028</span>, <span class="number">3</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">      Period period = Period.between(localdate, localdate1);</span><br><span class="line">      System.out.println(period); <span class="comment">// P7Y8M27D</span></span><br><span class="line"></span><br><span class="line">      System.out.println(period.getYears()); <span class="comment">// 7</span></span><br><span class="line">      System.out.println(period.getMonths()); <span class="comment">// 8</span></span><br><span class="line">      System.out.println(period.getDays()); <span class="comment">// 27</span></span><br><span class="line"></span><br><span class="line">      Period period1 = period.withYears(<span class="number">2</span>);</span><br><span class="line">      System.out.println(period1); <span class="comment">// P2Y8M27D</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>日期时间校正器：TemporalAdjuster</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">// 获取当前日期的下一个周日是哪天？</span></span><br><span class="line">     TemporalAdjuster temporalAdjuster = TemporalAdjusters.next(DayOfWeek.SUNDAY);</span><br><span class="line">     LocalDateTime localDateTime = LocalDateTime.now().with(temporalAdjuster);</span><br><span class="line">     System.out.println(localDateTime); <span class="comment">// 2020-06-21T16:42:13.229</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 获取下一个工作日食哪天</span></span><br><span class="line">     LocalDate localDate = LocalDate.now().with(<span class="keyword">new</span> TemporalAdjuster() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> Temporal adjustInto(Temporal temporal) &#123;</span><br><span class="line">           LocalDate date = (LocalDate) temporal;</span><br><span class="line">           <span class="keyword">if</span> (date.getDayOfWeek().equals(DayOfWeek.FRIDAY)) &#123;</span><br><span class="line">              <span class="keyword">return</span> date.plusDays(<span class="number">3</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (date.getDayOfWeek().equals(DayOfWeek.SATURDAY)) &#123;</span><br><span class="line">              <span class="keyword">return</span> date.plusDays(<span class="number">2</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> date.plusDays(<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     System.out.println(<span class="string">&quot;下一个工作日是:&quot;</span>+localDate);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="Java-比较器"><a href="#Java-比较器" class="headerlink" title="Java 比较器"></a>Java 比较器</h1><h2 id="一、java-比较器的使用背景"><a href="#一、java-比较器的使用背景" class="headerlink" title="一、java 比较器的使用背景"></a>一、java 比较器的使用背景</h2><blockquote><p>① Java 中的对象，正常情况下，只能进行比较： == 或 ！= ，不能使用 &gt; 或 &lt; 但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。使用两个接口中的任何一个: <strong>Comparable</strong> 或 <strong>Compartor</strong></p></blockquote><h2 id="二、自然排序：使用-comparable-接口"><a href="#二、自然排序：使用-comparable-接口" class="headerlink" title="二、自然排序：使用 comparable 接口"></a>二、自然排序：使用 comparable 接口</h2><ul><li>说明<blockquote><p>① 像 String、包装类等实现了 Comparable 接口，重写了 comparaTo（obj）方法，给出了比较两个对象大小的方式。<br>② String、包装类重写了 comparaTo(）的规则：<br>如果当前的对象 this 大于形参对象 obj，则返回正整数.<br>如果当前对象 this 小于形参 obj，则返回负整数<br>如果当前对象 this 等于形对象 obj,则返回零。<br>③ 对于自定义类来说，如果需要排序，我们可以自定义类实现 Comparablej 接口，重写 comparaTo（obj）方法。在 comparaTo()方法中指明如何排序</p></blockquote></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> <span class="title">implements</span> <span class="title">Comparable</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> Sting name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="comment">//指明商品比较大小的方式：照价格从低到高排序，在照产品名称从高到低排序</span></span><br><span class="line">      @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;**************&quot;);</span></span><br><span class="line">        <span class="keyword">if</span>(o instanceof Goods)&#123;</span><br><span class="line">            Goods goods = (Goods)o;</span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.price &gt; goods.price)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.price &lt; goods.price)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//                return 0;</span></span><br><span class="line">               <span class="keyword">return</span> -<span class="keyword">this</span>.name.compareTo(goods.name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//方式二：</span></span><br><span class="line"><span class="comment">//           return Double.compare(this.price,goods.price);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        return 0;</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;传入的数据类型不一致！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// getter、setter、toString()、构造器：省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、定制排序：使用-Comparator-接口"><a href="#三、定制排序：使用-Comparator-接口" class="headerlink" title="三、定制排序：使用 Comparator 接口"></a>三、定制排序：使用 Comparator 接口</h2><p><strong>说明：</strong></p><p>① 背景：</p><blockquote><p>当元素的类型没实现 java.lang.comparable 接口而又不方便修改代码，或实现了 java.lang.Comparable<br>接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象类排序</p></blockquote><p>② 重写 comparator(Object o1, Object o2)方法，比较 o1 和 o2 的大小：</p><blockquote><p>重写方法返回正整数，则表示 o1 大于 o2<br>如果返回 0,表示相等<br>返回负整数，表示 o1 小于 o2</p></blockquote><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Comparator com = <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">    <span class="comment">//指明商品比较大小的方式:照产品名称从低到高排序,再照价格从高到低排序</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> compare(Object o1, Object o2) &#123;</span><br><span class="line">        <span class="keyword">if</span>(o1 instanceof Goods &amp;&amp; o2 instanceof Goods)&#123;</span><br><span class="line">            Goods g1 = (Goods)o1;</span><br><span class="line">            Goods g2 = (Goods)o2;</span><br><span class="line">            <span class="keyword">if</span>(g1.getName().equals(g2.getName()))&#123;</span><br><span class="line">                <span class="keyword">return</span> -Double.compare(g1.getPrice(),g2.getPrice());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> g1.getName().compareTo(g2.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的数据类型不一致&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>使用：</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(goods,com);</span><br><span class="line">Collections.sort(coll,com);</span><br><span class="line"><span class="keyword">new</span> TreeSet(com);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Goods[] arr = <span class="keyword">new</span> Goods[<span class="number">6</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> Goods(<span class="string">&quot;lenovoMouse&quot;</span>,<span class="number">34.0</span>);</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> Goods(<span class="string">&quot;dellMouse&quot;</span>,<span class="number">43.0</span>);</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> Goods(<span class="string">&quot;xiaomiMouse&quot;</span>,<span class="number">12.0</span>);</span><br><span class="line">        arr[<span class="number">3</span>] = <span class="keyword">new</span> Goods(<span class="string">&quot;huaweiMouse&quot;</span>,<span class="number">65.0</span>);</span><br><span class="line">        arr[<span class="number">4</span>] = <span class="keyword">new</span> Goods(<span class="string">&quot;huaweiMouse&quot;</span>,<span class="number">224.0</span>);</span><br><span class="line">        arr[<span class="number">5</span>] = <span class="keyword">new</span> Goods(<span class="string">&quot;microsoftMouse&quot;</span>,<span class="number">43.0</span>);</span><br><span class="line"></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;Comparable排序&quot;</span>+Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 使用匿名内部类，可以在一定的程度上优化代码 new Comparator&lt;T&gt;()&#123;&#125;</span></span><br><span class="line">        Arrays.sort(arr, <span class="keyword">new</span> Comparator&lt;Goods&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">int</span> compare(Goods o1, Goods o2) &#123;</span><br><span class="line">            <span class="comment">// name 相同 就比较 价格（降序）</span></span><br><span class="line">               <span class="keyword">if</span>(o1.getName().equals(o2.getName()))&#123;</span><br><span class="line">                   <span class="keyword">return</span> -Double.compare(o1.getPrice(),o2.getPrice());</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;Comparator:&quot;</span>+Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其他类"><a href="#其他类" class="headerlink" title="其他类"></a>其他类</h1><h2 id="一、System-类"><a href="#一、System-类" class="headerlink" title="一、System 类"></a>一、System 类</h2><blockquote><p>① System 类代表系统，系统级的很多属性和控制方法都放置在该类的内部。该类位于 java.lang 包。<br>② 由于该类的构造器是 private 的，所以无法创建该类的对象，也就是无法实例化该类。其内部的成员变量和成员方法都是 static 的，所以也可以很方便的进行调用。</p></blockquote><ul><li><strong>方法：</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">native <span class="keyword">long</span> <span class="title">currentTimeMillis</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">String <span class="title">getProperty</span><span class="params">(String key)</span></span></span><br></pre></td></tr></table></figure><h2 id="二、Math-类"><a href="#二、Math-类" class="headerlink" title="二、Math 类"></a>二、Math 类</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Math提供了一系列静态方法用于科学计算。其方法的参数和返回值类型一般为<span class="keyword">double</span>型。</span><br></pre></td></tr></table></figure><h2 id="三、BigInteger-类、BigDecimal-类"><a href="#三、BigInteger-类、BigDecimal-类" class="headerlink" title="三、BigInteger 类、BigDecimal 类"></a>三、BigInteger 类、BigDecimal 类</h2><p><strong>说明：</strong></p><blockquote><p>① java.math 包的 BigInteger 可以表示不可变的任意精度的整数。<br>② 要求数字精度比较高，用到 java.math.BigDecimal 类</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigIntegerTest</span> &#123;</span></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BigInteger bi = <span class="keyword">new</span> BigInteger(<span class="string">&quot;12323443544535&quot;</span>);</span><br><span class="line">        BigDecimal bd = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;233434.35445&quot;</span>);</span><br><span class="line">        BigDecimal bd2 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;2113&quot;</span>);</span><br><span class="line">        System.out.println(bi); <span class="comment">// 12323443544535</span></span><br><span class="line"></span><br><span class="line">        System.out.println(bd.divide(bd2,BigDecimal.ROUND_HALF_UP)); <span class="comment">// 110.47532</span></span><br><span class="line">        System.out.println(bd.divide(bd2,<span class="number">15</span>,BigDecimal.ROUND_HALF_UP)); <span class="comment">// 110.475321557027922</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5之IOC</title>
      <link href="posts/3979597380/"/>
      <url>posts/3979597380/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring5-介绍"><a href="#Spring5-介绍" class="headerlink" title="Spring5 介绍"></a>Spring5 介绍</h2><ol><li><p>Spring 是轻量级的开源的 JavaEE 框架</p></li><li><p>Spring 可以解决企业应用开发的复杂性</p></li><li><p>Spring 有两个核心部分：IOC 和 Aop</p><p>(1) IOC : 控制反转，把创建对象过程给 Spring 进行管理</p><p>(2) Aop: 面向切面，不修改源代码进行功能增强</p></li><li><p>Spring 特点</p><p>（1）方便解耦，简化开发</p><p>（2）Aop 编程支持</p><p>（3）方便程序测试</p><p>（4） 方便和其他框架进行整合</p><p>（5）方便进行事务操作</p><p>（6）降低 API 开发难度</p></li></ol><h2 id="Spring5-入门案例"><a href="#Spring5-入门案例" class="headerlink" title="Spring5 入门案例"></a>Spring5 入门案例</h2><ol><li><p>使用 idea 创建一个普通的 java 工程</p></li><li><p>导入 Spring5 相关的 jar 包（先去 Spring 官网下载）</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200720000533.png" alt="image-20200720000532117"></p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200720000547.png" alt="image-20200720000545998"></p><ol start="3"><li>创建普通类，在这个类创建普通方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;add....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建 Spring 配置文件，在配置文件配置创建的对象（bean1.xml）</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200720000856.png" alt="image-20200720000855494"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;!--配置User对象的创建--&gt;</span><br><span class="line">    &lt;bean id=&quot;user&quot; class=&quot;com.oy.online.spring.User&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>5.进行测试代码编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.加载Spring配置文件</span></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.获取配置创建的对象</span></span><br><span class="line">    User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    user.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200720001342.png" alt="image-20200720001341048"></p><h2 id="一、IOC-概念和原理"><a href="#一、IOC-概念和原理" class="headerlink" title="一、IOC(概念和原理)"></a>一、IOC(概念和原理)</h2><h3 id="1、IOC"><a href="#1、IOC" class="headerlink" title="1、IOC"></a>1、IOC</h3><ul><li><p>控制反转，把对象创建和对象之间的调用过程，交给 Spring 进行管理</p></li><li><p>使用 IOC 目的：为了耦合度降低</p></li></ul><h3 id="2、IOC-底层原理"><a href="#2、IOC-底层原理" class="headerlink" title="2、IOC 底层原理"></a>2、IOC 底层原理</h3><ul><li>xml 解析、工厂模式、反射</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200720002538.png" alt="image-20200720002537623"></p><h2 id="二、-IOC-BeanFactory-接口"><a href="#二、-IOC-BeanFactory-接口" class="headerlink" title="二、 IOC(BeanFactory 接口)"></a>二、 IOC(BeanFactory 接口)</h2><ol><li><p>IOC 思想基于 IOC 容器完成，IOC 容器底层就是对象工厂</p></li><li><p>Spring 提供 IOC 容器实现的两种方式:（两个接口）</p><p>(1) BeanFactory: IOC 容器基本实现，是 Spring 内部的使用接口，不提供开发人员进行使用</p><p>​ <strong>加载配置文件时候不会加载，在获取对象（使用）才会去创建对象</strong></p><p>(2)ApplicationContext: BeanFactory 接口的子接口，提供更多更强大的功能，一般有开发人员进行使用</p><p>​ <strong>加载配置文件时候就会把配置文件对象进行创建</strong></p></li><li><p>ApplicationContext 接口有实现类</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200720003503.png" alt="image-20200720003502372"></p><h2 id="三、IOC-操作-Bean-管理（概念）"><a href="#三、IOC-操作-Bean-管理（概念）" class="headerlink" title="三、IOC 操作 Bean 管理（概念）"></a>三、IOC 操作 Bean 管理（概念）</h2><h3 id="1、Bean-管理"><a href="#1、Bean-管理" class="headerlink" title="1、Bean 管理"></a>1、Bean 管理</h3><ol><li>Bean 管理指的是两个操作</li><li>Spring 创建对象</li><li>Spring 注入属性</li></ol><h3 id="2、Bean-管理的操作的两种方式"><a href="#2、Bean-管理的操作的两种方式" class="headerlink" title="2、Bean 管理的操作的两种方式"></a>2、Bean 管理的操作的两种方式</h3><ol><li>基于 xml 配置文件方式实现</li><li>基于注解方式实现</li></ol><h2 id="四、IOC-操作-Bean-管理（基于-xml-方式）"><a href="#四、IOC-操作-Bean-管理（基于-xml-方式）" class="headerlink" title="四、IOC 操作 Bean 管理（基于 xml 方式）"></a>四、IOC 操作 Bean 管理（基于 xml 方式）</h2><h3 id="1、基于-xml-方式创建对象"><a href="#1、基于-xml-方式创建对象" class="headerlink" title="1、基于 xml 方式创建对象"></a>1、基于 xml 方式创建对象</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置User对象的创建--&gt;</span><br><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.oy.online.spring.User&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>(1) 在 spring 配置文件中，使用 bean 标签，标签里面添加对应属性，就可以实现对象的创建</p><p>(2) 在 bean 标签有很多属性，介绍常用属性</p><ul><li>Id 属性 ： 唯一标识符</li><li>class 属性：类全路径（包类路径）</li></ul><p>(3) 创建对象时候，默认也是执行无参构造器完成对象的创建</p><h3 id="2、基于-xml-方式注入属性"><a href="#2、基于-xml-方式注入属性" class="headerlink" title="2、基于 xml 方式注入属性"></a>2、基于 xml 方式注入属性</h3><p>（1）DI：依赖注入，就是注入属性</p><h3 id="3、第一种注入方式：使用-set-方法进行注入"><a href="#3、第一种注入方式：使用-set-方法进行注入" class="headerlink" title="3、第一种注入方式：使用 set 方法进行注入"></a>3、第一种注入方式：使用 set 方法进行注入</h3><p>​ (1) 创建类，定义属性和对应的 set 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建属性</span></span><br><span class="line">    <span class="keyword">private</span> String bname;</span><br><span class="line">    <span class="keyword">private</span> String bauthor;</span><br><span class="line">    <span class="comment">// 创建属性对应的set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBname</span><span class="params">(String bname)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bname = bname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBauthor</span><span class="params">(String bauthor)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bauthor = bauthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(bname+<span class="string">&quot;::&quot;</span>+bauthor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ (2) 在 spring 配置文件配置对象创建，配置属性注入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置Book对象的创建--&gt;</span><br><span class="line">  &lt;!--set 方法注入属性--&gt;</span><br><span class="line">  &lt;bean id=<span class="string">&quot;book&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.oy.online.spring.Book&quot;</span>&gt;</span><br><span class="line">      &lt;!--使用property 完成属性的注入</span><br><span class="line">          name : 类里面属性名称</span><br><span class="line">          value: 向属性注入的值</span><br><span class="line">      --&gt;</span><br><span class="line">      &lt;property name=&quot;bname&quot; value=&quot;Java编程之美&quot;&gt;&lt;/property&gt;</span><br><span class="line">      &lt;property name=&quot;bauthor&quot; value=&quot;Java&quot;&gt;&lt;/property&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="4、第二种注入方式：使用有参数构成进行注入"><a href="#4、第二种注入方式：使用有参数构成进行注入" class="headerlink" title="4、第二种注入方式：使用有参数构成进行注入"></a>4、第二种注入方式：使用有参数构成进行注入</h3><p>​ (1) 创建类，定义属性，创建属性对应有参数构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参数构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(String oname, String address)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oname = oname;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(oname+<span class="string">&quot;::&quot;</span>+address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ (2) 在 spring 配置文件中的进行配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--有参构造函数注入属性--&gt;</span><br><span class="line">   &lt;bean id=<span class="string">&quot;order&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.oy.online.spring.Order&quot;</span>&gt;</span><br><span class="line">       &lt;constructor-arg name=&quot;oname&quot; value=&quot;电脑&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">       &lt;constructor-arg name=&quot;address&quot; value=&quot;China&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="5、p-空间名称注入（了解）"><a href="#5、p-空间名称注入（了解）" class="headerlink" title="5、p 空间名称注入（了解）"></a>5、p 空间名称注入（了解）</h3><p>​ (1) 使用 p 名称空间注入，可以简化基于 xml 配置方式</p><p>第一步 添加 p 名称空间在配置文件中</p><p><strong>xmlns:p=”<a href="http://www.springframework.org/schema/p&quot;">http://www.springframework.org/schema/p&quot;</a></strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:p=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>第二步 进行属性注入，在 bean 标签里面进行操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--set 方法注入属性--&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;book&quot; class&#x3D;&quot;com.oy.online.spring.Book&quot; p:bname&#x3D;&quot;java编程之美&quot; p:bauthor&#x3D;&quot;java&quot;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><h2 id="五、IOC-操作-Bean-管理（xml-注入其他类型属性）"><a href="#五、IOC-操作-Bean-管理（xml-注入其他类型属性）" class="headerlink" title="五、IOC 操作 Bean 管理（xml 注入其他类型属性）"></a>五、IOC 操作 Bean 管理（xml 注入其他类型属性）</h2><h3 id="1、-字面量"><a href="#1、-字面量" class="headerlink" title="1、 字面量"></a>1、 字面量</h3><p>（1）null 值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;property name=<span class="string">&quot;address&quot;</span>&gt;</span><br><span class="line">   &lt;<span class="keyword">null</span>/&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>​ (2) 属性包含特殊符号</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--属性值包含特殊符号</span><br><span class="line"><span class="number">1</span> 把&lt;&gt;进行转义 &amp;lt; &amp;gt;</span><br><span class="line"><span class="number">2</span> 把带特殊符号内容写到 CDATA</span><br><span class="line">--&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;address&quot;</span>&gt;</span><br><span class="line">&lt;value&gt;&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h3 id="2、注入属性-外部-bean"><a href="#2、注入属性-外部-bean" class="headerlink" title="2、注入属性-外部 bean"></a>2、注入属性-外部 bean</h3><p>(1) 创建两个类 service 类 和 dao 类</p><p>(2) 在 service 调用 dao 里面的方法</p><p>(3) 在 spring 配置文件中进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建 UserDao 类型属性，生成 set 方法</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;service add...............&quot;</span>);</span><br><span class="line">    userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--<span class="number">1</span> service 和 dao 对象创建--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;userService&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.atguigu.spring5.service.UserService&quot;</span>&gt;</span><br><span class="line">    &lt;!--注入 userDao 对象</span><br><span class="line">        name 属性：类里面属性名称</span><br><span class="line">        ref 属性：创建 userDao 对象 bean 标签 id 值</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;property name=&quot;userDao&quot; ref=&quot;userDaoImpl&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=&quot;userDaoImpl&quot; class=&quot;com.atguigu.spring5.dao.UserDaoImpl&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="3、注入属性-内部-bean"><a href="#3、注入属性-内部-bean" class="headerlink" title="3、注入属性-内部 bean"></a>3、注入属性-内部 bean</h3><p>（1） 一对多关系：部门和员工</p><p>​ 一个部门有多个员工，一个员工属于一个部门</p><p>​ 部门是一，员工是多</p><p>（2）在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性进行表示</p><p>​ 部门：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dept&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;dname=&#x27;&quot;</span> + dname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 员工：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">// 员工属于某一个部门，使用对象形式表示</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(ename + <span class="string">&quot;::&quot;</span> + gender + <span class="string">&quot;::&quot;</span> + dept);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ (3) 在 Spring 配置文件中进行配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--内部bean--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;emp&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.oy.online.spring.bean.Emp&quot;</span>&gt;</span><br><span class="line">        &lt;!--设置两个普通属性--&gt;</span><br><span class="line">        &lt;property name=&quot;ename&quot; value=&quot;jack&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;gender&quot; value=&quot;女&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--设置对象类型属性--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dept&quot;</span>&gt;</span><br><span class="line">            &lt;bean id=<span class="string">&quot;dept&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.oy.online.spring.bean.Dept&quot;</span>&gt;</span><br><span class="line">                &lt;property name=&quot;dname&quot; value=&quot;设计部&quot;&gt;&lt;/property&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>​ 测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EmpTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 加载Spring配置文件</span></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean3.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取创建对象</span></span><br><span class="line">    Emp emp = context.getBean(<span class="string">&quot;emp&quot;</span>, Emp.class);</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">    emp.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200720234514.png" alt="image-20200720234512323"></p><h3 id="4、注入属性-级联赋值"><a href="#4、注入属性-级联赋值" class="headerlink" title="4、注入属性-级联赋值"></a>4、注入属性-级联赋值</h3><ol><li><p><strong>第一种写法</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.spring.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.spring.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;技术部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>第二种写法</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200720235821.png" alt="image-20200720235820170"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.spring.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;财务部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.spring.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;技术部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、IOC-操作-Bean-管理（xml-注入集合属性）"><a href="#六、IOC-操作-Bean-管理（xml-注入集合属性）" class="headerlink" title="六、IOC 操作 Bean 管理（xml 注入集合属性）"></a>六、IOC 操作 Bean 管理（xml 注入集合属性）</h2></li></ol><h3 id="1、注入数组类型属性"><a href="#1、注入数组类型属性" class="headerlink" title="1、注入数组类型属性"></a>1、注入数组类型属性</h3><h3 id="2、注入-List-集合类型属性"><a href="#2、注入-List-集合类型属性" class="headerlink" title="2、注入 List 集合类型属性"></a>2、注入 List 集合类型属性</h3><h3 id="3、注入-Map-集合属性"><a href="#3、注入-Map-集合属性" class="headerlink" title="3、注入 Map 集合属性"></a>3、注入 Map 集合属性</h3><p>（1） 创建类，定义属性、list、map、set 类型属性，生成对应的 set 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stu</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.数组类型属性</span></span><br><span class="line">    <span class="keyword">private</span> String[] courses;</span><br><span class="line">    <span class="comment">// 2. list集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="comment">// 3.map 集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; maps;</span><br><span class="line">    <span class="comment">// 4.set集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourses</span><span class="params">(String[] courses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSet</span><span class="params">(Set&lt;String&gt; set)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.set = set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Stu&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;courses=&quot;</span> + Arrays.toString(courses) +</span><br><span class="line">                <span class="string">&quot;, list=&quot;</span> + list +</span><br><span class="line">                <span class="string">&quot;, maps=&quot;</span> + maps +</span><br><span class="line">                <span class="string">&quot;, set=&quot;</span> + set +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ （2）在 Spring 配置文件进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--集合类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.Spring.Stu&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数组类型属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>java课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>数据库课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--list 类型属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Map 类型属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;Java&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;PHP&quot;</span> <span class="attr">value</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--set 类型属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySql<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Redis<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、在集合里面设置对象类型值"><a href="#4、在集合里面设置对象类型值" class="headerlink" title="4、在集合里面设置对象类型值"></a>4、在集合里面设置对象类型值</h3><p>​ 在 Stu 中添加属性和方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生所学多门课程</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;Course&gt; courseList;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourseList</span><span class="params">(List&lt;Course&gt; courseList)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.courseList = courseList;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在 Spring 配置文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注入 list 集合类型，值是对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建多个 course 对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.Spring.Course&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring5框架&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.Spring.Course&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mybaits框架&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、把集合注入部分提取出来"><a href="#5、把集合注入部分提取出来" class="headerlink" title="5、把集合注入部分提取出来"></a>5、把集合注入部分提取出来</h3><p>（1）在 Spring 配置文件中引入名称 util</p><p><strong><a href="http://www.springframework.org/schema/util">http://www.springframework.org/schema/util</a> <a href="http://www.springframework.org/schema/util/spring-util.xsd">http://www.springframework.org/schema/util/spring-util.xsd</a></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2) 使用 util 标签完成 list 集合注入提取</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1、提取list集合类型属性注入使用--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>java编程之美<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>java核心卷<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>MYSQL必知必会<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--2、提取list集合类型属性注入使用--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.Spring.book&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、IOC-操作-Bean-管理（FactoryBean）"><a href="#七、IOC-操作-Bean-管理（FactoryBean）" class="headerlink" title="七、IOC 操作 Bean 管理（FactoryBean）"></a>七、IOC 操作 Bean 管理（FactoryBean）</h2><ul><li>Spring 有两种类型 bean， 一种普通 bean, 另外一种工厂 bean(FactroyBean)</li><li>普通 bean: 在配置文件中定义 bean 类型就是返回类型</li><li>工厂 bean：在配置文件定义 bean 类型可以和返回类型不一样<ul><li>第一步 创建类，让这个类为工厂 bean,实现接口 FactoryBean</li><li>第二步 实现接口里面的方法，在实现的方法中定义返回的 bean 类型</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mybean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Course <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Course course = <span class="keyword">new</span> Course();</span><br><span class="line">        course.setCname(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.Spring.bean.Mybean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FactoryTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// 加载Spring配置文件</span></span><br><span class="line">       ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean2.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取创建对象</span></span><br><span class="line">       Course course = context.getBean(<span class="string">&quot;myBean&quot;</span>, Course.class);</span><br><span class="line">       System.out.println(course);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="八、IOC-操作-Bean-管理（bean-作用域）"><a href="#八、IOC-操作-Bean-管理（bean-作用域）" class="headerlink" title="八、IOC 操作 Bean 管理（bean 作用域）"></a>八、IOC 操作 Bean 管理（bean 作用域）</h2><h3 id="1-在-Spring-里面，默认情况下，bean-是单实例对象"><a href="#1-在-Spring-里面，默认情况下，bean-是单实例对象" class="headerlink" title="1.在 Spring 里面，默认情况下，bean 是单实例对象"></a>1.在 Spring 里面，默认情况下，bean 是单实例对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">BookTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 加载Spring配置文件</span></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean2.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取创建对象</span></span><br><span class="line">    book book1 = context.getBean(<span class="string">&quot;book&quot;</span>, book.class);</span><br><span class="line">    book book2 = context.getBean(<span class="string">&quot;book&quot;</span>, book.class);</span><br><span class="line">    System.out.println(book1);</span><br><span class="line">    System.out.println(book2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200721114750.png" alt="image-20200721114307906"></p><h3 id="2-设置单实例或多实例"><a href="#2-设置单实例或多实例" class="headerlink" title="2.设置单实例或多实例"></a>2.设置单实例或多实例</h3><ul><li>在 Spring 配置文件 bean 标签里面有属性**(scope)**用于设置单实例还是多实例</li><li>scope 属性值<ul><li>第一个值 默认值，singleton，表示是单实例</li><li>第二个值 prototype, 表示第多实例对象</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.Spring.book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200721114951.png" alt="image-20200721114949659"></p><ul><li><p>singleton 和 prototype 区别</p><ul><li><p>第一 singleton 单实例，prototype 多实例</p></li><li><p>第二 设置 scope 值是 <strong>singleton</strong> 时候，<strong>加载 spring 配置文件时候就会创建单实例对象</strong>。</p><p>​ 设置 scope 值是 <strong>prototype</strong> 时候，不是加载 spring 配置文件时候创建 对象，<strong>在调用 getBean 方法时候创建多实例对象</strong>。</p></li></ul></li></ul><h2 id="九、IOC-操作-Bean-管理（bean-生命周期）"><a href="#九、IOC-操作-Bean-管理（bean-生命周期）" class="headerlink" title="九、IOC 操作 Bean 管理（bean 生命周期）"></a>九、IOC 操作 Bean 管理（bean 生命周期）</h2><h3 id="1、生命周期"><a href="#1、生命周期" class="headerlink" title="1、生命周期"></a>1、生命周期</h3><ul><li>从对象创建到对象销毁的过程</li></ul><h3 id="2、bean-生命周期"><a href="#2、bean-生命周期" class="headerlink" title="2、bean 生命周期"></a>2、bean 生命周期</h3><ul><li>通过构造器创建 bean 实例（无参数构造）</li><li>为 bean 的属性设置值 和 对其他 bean 引用（调用 set 方法）</li><li>调用 bean 的初始化的方法（需要进行配置初始化方法）</li><li>bean 可以使用了（对象获取到了）</li><li>当容器关闭时候，调用 bean 的销毁方法（需要进行配置销毁的方法）</li></ul><h3 id="3、演示-bean-生命周期"><a href="#3、演示-bean-生命周期" class="headerlink" title="3、演示 bean 生命周期"></a>3、演示 bean 生命周期</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Orders</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步 执行无参构造创建 bean 实例&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOname</span><span class="params">(String oname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oname = oname;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二步 调set方法设置属性值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建执行的初始化的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三步 执行初始化的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建执行的销毁的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第五步 执行销毁的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.Spring.bean.Orders&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span>  <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;手机&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OrdersTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean3.xml&quot;);</span></span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean3.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Orders orders = context.getBean(<span class="string">&quot;orders&quot;</span>, Orders.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;第四步 获取创建Bean 实例对象&quot;</span>);</span><br><span class="line">        System.out.println(orders);</span><br><span class="line">        <span class="comment">// 手动让bean实例销毁</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200721122144.png" alt="image-20200721122143974"></p><h3 id="4、bean-的后置处理器，bean-生命周期"><a href="#4、bean-的后置处理器，bean-生命周期" class="headerlink" title="4、bean 的后置处理器，bean 生命周期"></a>4、bean 的后置处理器，bean 生命周期</h3><ul><li>通过构造器创建 bean 实例（无参构造器）</li><li>为 bean 的属性设置值和其他 bean 引用（调用 set 方法）</li><li>**把 bean 的实例传递 bean 后置处理器的方法 **postProcessBefoInitialization</li><li>调用 bean 的初始化的方法</li><li><strong>把 bean 实例传递 bean 后置处理器的方法</strong> postProcessAfterInitialization</li><li>bean 可以使用（对象获取到了）</li><li>当前容器关闭时，调用 bean 的销毁方法（需要精心配制销毁的方法）</li></ul><h3 id="5、添加后置处理器"><a href="#5、添加后置处理器" class="headerlink" title="5、添加后置处理器"></a>5、添加后置处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybeanPost</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之前执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之后执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置后置处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPost&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.Spring.bean.MybeanPost&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200721154558.png" alt="image-20200721154557604"></p><h2 id="十、IOC-操作-Bean-管理（XML-自动装配）"><a href="#十、IOC-操作-Bean-管理（XML-自动装配）" class="headerlink" title="十、IOC 操作 Bean 管理（XML 自动装配）"></a>十、IOC 操作 Bean 管理（XML 自动装配）</h2><h3 id="1、自动装配"><a href="#1、自动装配" class="headerlink" title="1、自动装配"></a>1、自动装配</h3><ul><li>根据指定装配规则（属性名称或者属性类型），Spring 自动将匹配的属性值进行注入</li></ul><h3 id="2、自动装配过程"><a href="#2、自动装配过程" class="headerlink" title="2、自动装配过程"></a>2、自动装配过程</h3><p><strong>（1）根据属性名称自动注入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Emp&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;dept=&quot;</span> + dept +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(dept);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dept&#123;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--实现自动装配</span></span><br><span class="line"><span class="comment">    bean标签属性autowire,配置自动装配</span></span><br><span class="line"><span class="comment">    autowire 属性常用两个值：</span></span><br><span class="line"><span class="comment">        byName 根据属性名称注入，注入值bean的id值和类型性名称一样</span></span><br><span class="line"><span class="comment">        byType 根据属性类型注入</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.Spring.autowire.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.Spring.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>(2) 根据属性类型自动注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--实现自动装配</span></span><br><span class="line"><span class="comment">    bean标签属性autowire,配置自动装配</span></span><br><span class="line"><span class="comment">    autowire 属性常用两个值：</span></span><br><span class="line"><span class="comment">        byName 根据属性名称注入，注入值bean的id值和类型性名称一样</span></span><br><span class="line"><span class="comment">        byType 根据属性类型注入</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.Spring.autowire.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oy.online.Spring.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十一、IOC-操作-Bean-管理（外部属性文件）"><a href="#十一、IOC-操作-Bean-管理（外部属性文件）" class="headerlink" title="十一、IOC 操作 Bean 管理（外部属性文件）"></a>十一、IOC 操作 Bean 管理（外部属性文件）</h2><ol><li><p><strong>直接配置数据库信息</strong></p><p>（1）配置德鲁伊连接池</p><p>（2）引入德鲁伊连接池依赖 jar 包</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200722111356.png" alt="image-20200722111348312"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--直接配置连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:8080/test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>引入外部属性文件配置数据库连接池</strong></p><p>(1) 创建外部属性文件，properties 格式文件，写数据库信息</p></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">prop.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">prop.url</span>=<span class="string">jdbc:mysql://localhost:8080/test</span></span><br><span class="line"><span class="meta">prop.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">prop.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>​ (2) 把外部 properties 属性文件引入到 spring 配置文件中</p><ul><li>引入 context 名称空间<ul><li>xmlns:context=”<a href="http://www.springframework.org/schema/context&quot;">http://www.springframework.org/schema/context&quot;</a></li><li><a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a> <a href="http://www.springframework.org/schema/context/spring-context.xsd">http://www.springframework.org/schema/context/spring-context.xsd</a></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 spring 配置文件使用标签引入外部属性文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部属性文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十二、IOC-操作-Bean-管理（基于注解方式）"><a href="#十二、IOC-操作-Bean-管理（基于注解方式）" class="headerlink" title="十二、IOC 操作 Bean 管理（基于注解方式）"></a>十二、IOC 操作 Bean 管理（基于注解方式）</h2></li></ol><h3 id="1、注解"><a href="#1、注解" class="headerlink" title="1、注解"></a>1、注解</h3><p>​ （1）注解是代码的特殊标记，格式：@注解名称(属性名称=属性值，属性名称=属性值…)</p><p>​ （2）使用注解，注解作用在类上面，方法上面，属性上面</p><p>​ （3）使用注解目的：简化 xml 配置</p><h3 id="2、Spring-针对-Bean-管理中创建对象提供注解"><a href="#2、Spring-针对-Bean-管理中创建对象提供注解" class="headerlink" title="2、Spring 针对 Bean 管理中创建对象提供注解"></a>2、Spring 针对 Bean 管理中创建对象提供注解</h3><p>​ （1）@Component</p><p>​ （2）@Service</p><p>​ （3）@Controller</p><p>​ （4）@Repository</p><p><strong>上面四个注解功能是一样的，都可以用来创建 bean 实例</strong></p><h3 id="3、基于注解方式实现对象创建"><a href="#3、基于注解方式实现对象创建" class="headerlink" title="3、基于注解方式实现对象创建"></a>3、基于注解方式实现对象创建</h3><p><strong>第一步 引入依赖</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200722115434.png" alt="image-20200722115433412"></p><p><strong>第二步：开始组件扫描</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启组件扫描</span></span><br><span class="line"><span class="comment">       1.如果扫描多个包，多个包使用逗号隔开</span></span><br><span class="line"><span class="comment">       2.扫描包上的目录</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.oy.online.Spring&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第三步 创建类，在类上面添加创建对象的注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在注解里面 value 属性值可以省略不写，</span></span><br><span class="line"><span class="comment">//默认值是类名称，首字母小写</span></span><br><span class="line"><span class="comment">//UserService -- userService</span></span><br><span class="line"><span class="meta">@Component(value = &quot;userService&quot;)</span> <span class="comment">//&lt;bean id=&quot;userService&quot; class=&quot;..&quot;/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;service add.......&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、开启组件扫描细节设置"><a href="#4、开启组件扫描细节设置" class="headerlink" title="4、开启组件扫描细节设置"></a>4、开启组件扫描细节设置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例 1</span></span><br><span class="line"><span class="comment">use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置 filter</span></span><br><span class="line"><span class="comment">context:include-filter ，设置扫描哪些内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.oy.online.Spring&quot;</span> <span class="attr">use-defaultfilters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span><span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例 2</span></span><br><span class="line"><span class="comment">下面配置扫描包所有内容</span></span><br><span class="line"><span class="comment">context:exclude-filter： 设置哪些内容不进行扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.oy.online.Spring&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span><span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、基于注解方式实现属性注入"><a href="#5、基于注解方式实现属性注入" class="headerlink" title="5、基于注解方式实现属性注入"></a>5、基于注解方式实现属性注入</h3><p>（1）**@Autowired**: 根据属性类型进行自动装配</p><p>​ 第一步：把 service 和 dao 对象创建，在 service 和 dao 类创建对象注解</p><p>​ 第二步：把 service 注入 dao 对象， 在 service 类添加 dao 类型属性，在属性上面使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao add...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义dao 类型属性</span></span><br><span class="line">    <span class="comment">// 不需要添加 set 方法</span></span><br><span class="line">    <span class="comment">// 添加注入属性注解</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add....&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean6.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">       UserService userService = context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">       System.out.println(userService);</span><br><span class="line">       userService.add();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>（2）**@Qualifier**：根据名称进行注入</p><p>这个@Qualifier 注解的使用 ，和上面@Autowired 一起使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义 dao 类型属性</span></span><br><span class="line"><span class="comment">//不需要添加 set 方法</span></span><br><span class="line"><span class="comment">//添加注入属性注解</span></span><br><span class="line"><span class="meta">@Autowired</span> <span class="comment">//根据类型进行注入</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span> <span class="comment">//根据名称进行注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure><p>（3）**@Resource**: 可以根据类型注入，可以根据名称注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Resource //根据类型进行注入</span></span><br><span class="line"><span class="meta">@Resource(name = &quot;userDaoImpl1&quot;)</span> <span class="comment">//根据名称进行注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure><p>（4）**@Value**：注入普通类型的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;abc&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><h3 id="6、完全注解开发"><a href="#6、完全注解开发" class="headerlink" title="6、完全注解开发"></a>6、完全注解开发</h3><p>（1）创建配置类，替代 xml 配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 作为配置类，替代xml 配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.oy.online.Spring&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SpringConfigTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// 加载配置类</span></span><br><span class="line">       ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">       UserService userService = context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">       System.out.println(userService);</span><br><span class="line">       userService.add();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaEE框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java集合之List、Set</title>
      <link href="posts/2068565369/"/>
      <url>posts/2068565369/</url>
      
        <content type="html"><![CDATA[<h2 id="Collection-子接口：List-接口"><a href="#Collection-子接口：List-接口" class="headerlink" title="Collection 子接口：List 接口"></a>Collection 子接口：List 接口</h2><h3 id="一、存储的数据特点"><a href="#一、存储的数据特点" class="headerlink" title="一、存储的数据特点"></a>一、存储的数据特点</h3><p>​ <strong>有序的、可重复的数据</strong></p><h3 id="二、常用的方法"><a href="#二、常用的方法" class="headerlink" title="二、常用的方法"></a>二、常用的方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>add(Object)</td><td>增加</td></tr><tr><td>remove（int index）/ remove(Object obj)</td><td>删除</td></tr><tr><td>set(int index , object ele)</td><td>修改</td></tr><tr><td>get(int index)</td><td>查找</td></tr><tr><td>add(int index， Object ele)</td><td>插入</td></tr><tr><td>size()</td><td>长度</td></tr><tr><td>① Itertor 迭代器 ②foreach ③ for</td><td>遍历</td></tr></tbody></table><h3 id="三、常用的实现类"><a href="#三、常用的实现类" class="headerlink" title="三、常用的实现类"></a>三、常用的实现类</h3><ul><li>Collection 接口：单例集合，用来存储一个一个对象<ul><li>List 接口；存储有序的，可重复的数据。<ul><li>ArrayList: 作为 List 接口的主要的实现类：线程不安全，效率高：底层使用 Objecet[] elementDate 存储</li><li>LinkedList: 对于频繁的插入、删除操作，使用此类效率比 ArraList 高：底层使用双向链表存储。</li><li>Vector: 作为 List 接口的古老实现类：线程安全，效率低：底层使用 object[] elementDate 存储</li></ul></li></ul></li></ul><h3 id="四、源码分析"><a href="#四、源码分析" class="headerlink" title="四、源码分析"></a>四、源码分析</h3><ol><li><strong>ArrayList 的源码分析</strong></li></ol><ul><li><p>JDK 7 情况下：</p><ul><li>ArrayList list = new ArrayList(); <strong>底层创建长度是 10 的 object[ ]数组 elementDate</strong></li><li>List.add(123); <strong>elementDate[0] = new Integer(123)</strong></li><li>….</li><li>list.add(11); <strong>如果此次的添加导致底层 elementDate 数组容量不够，则扩容。</strong></li></ul><p>默认情况下：扩容为原来的 1.5 倍，同时需要将原有的数组中的数据复制到新的数组中。</p><p>结论：建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity)</p></li><li><p>JDK 8 中的 ArrayList 的变化：</p><ul><li>ArrayList list = new ArrayList(); <strong>底层 object[ ] elementDate 初始化为{}，并没有创建长度为 10 的数组</strong></li><li>list.add(123); <strong>第一次调用 add()时，底层创建了长度为 10 的数组，并将数组 123 添加 dao elementDate[0]</strong></li><li>….</li></ul><p>后续的添加和扩容与 jdk 7 无异。</p><p>结论：jdk 7 中的 ArrayList 的对象的创建类似于单例的饿汉式，而 jdk 8 中的 ArrayList 的对象的创建类似于单例模式的懒汉式延迟了数组的创建，节省了空间。</p></li></ul><ol start="2"><li><p><strong>LinkedList 的源码分析</strong></p><ul><li>LinkedList list = new LinkedList(); <strong>内部声明的 Node 类型的 first 和 last 属性，默认值 null。</strong></li><li>list.add(123); <strong>将 123 封装到 Node 中，创建 Node</strong></li></ul><p>其中 Node 定义为：体现了 linkedList 的双向链表的说法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">       E item;</span><br><span class="line">       Node&lt;E&gt; next;</span><br><span class="line">       Node&lt;E&gt; prev;<span class="comment">//前</span></span><br><span class="line"></span><br><span class="line">       Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">       <span class="keyword">this</span>.item = element;</span><br><span class="line">       <span class="keyword">this</span>.next = next;</span><br><span class="line">       <span class="keyword">this</span>.prev = prev;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>Vector 的源码分析</strong><ul><li>jdk 7 和 jdk 8 中通用 Vector() 构造器创建对象，底层都是创建 10 的数组。</li><li>在扩容方面。默认扩容为原数组的 2 倍。</li></ul></li></ul><h3 id="五、存储元素的要求"><a href="#五、存储元素的要求" class="headerlink" title="五、存储元素的要求"></a>五、存储元素的要求</h3><p>​ 添加对象，所在的类要重写 equals()方法</p><h2 id="Collection-子接口：set-接口"><a href="#Collection-子接口：set-接口" class="headerlink" title="Collection 子接口：set 接口"></a>Collection 子接口：set 接口</h2><h3 id="一、存储的数据特点-1"><a href="#一、存储的数据特点-1" class="headerlink" title="一、存储的数据特点"></a>一、存储的数据特点</h3><p>​ <strong>无序的，不可重复的元素</strong></p><ul><li>以 HashSet 为例说明<ul><li>无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数组的哈希值决定的。</li><li>不可重复性：保证添加的元素按照 equals()判断时，不能返回 true，即，相同的元素只能添加一个。</li></ul></li></ul><h3 id="二、元素添加的过程：（以-HashSet-为例）"><a href="#二、元素添加的过程：（以-HashSet-为例）" class="headerlink" title="二、元素添加的过程：（以 HashSet 为例）"></a>二、元素添加的过程：（以 HashSet 为例）</h3><ul><li><p>我们向 HashSet 中添加元素 a,首先调用元素 a 所在类的 hashcode()方法，计算元素 a 的哈希值，此哈希值接着某种算法在 HashSet 底层数组中的存放位置（即为：索引位置）</p></li><li><p>接着判断数组位置上是否已经有元素：</p><ul><li><p>如果此位置上没有其他元素，则元素 a 添加成功。 —-》 <strong>情况 1</strong></p></li><li><p>如果此位置上有其他元素 b(获以链表形式存在的多个元素，则比较元素 a 与元素 b 的 hash 值)</p><ul><li>如果 hash 值不相同，则元素 a 添加成功。 —》 <strong>情况 2</strong></li><li>如果 hash 值相同，进而需要调用元素的 a 所在类的 equals()方法<ul><li>equals() 返回 true, 元素 a 添加失败</li><li>equals() 返回 false, 元素 a 添加成功。 —》 <strong>情况 3</strong></li></ul></li></ul><p>对于添加成功的情况 2 和情况 3 而言：元素 a 与已经存在指定索引上数据以链表的方式存储。</p><p>JDK 7 ：元素 a 放大数组中，指向元素 a。</p><p>JDK 8 : 原来的元素在数组中，指向元素 a。</p><p>总结：<strong>七上八下</strong></p><p>HashSet 底层：数组加链表的结构。(前提：jdk7)</p></li></ul></li></ul><h3 id="三、常用的方法"><a href="#三、常用的方法" class="headerlink" title="三、常用的方法"></a>三、常用的方法</h3><p>​ set 接口没有定义新的方法，使用的都是 collection 声明方法。</p><h3 id="四、常用实现类"><a href="#四、常用实现类" class="headerlink" title="四、常用实现类"></a>四、常用实现类</h3><ul><li>Collection 接口：单例集合，用来存储一个一个的对象、<ul><li>set 接口：存储无序的、不可重复的数据<ul><li>HashSet : 作为 Set 接口主要实现类；可以存储 null 值<ul><li>LinkedHashSet: 作为 HashSet 的子类；遍历其内部数据时，可以按照添加的顺序遍历，造添加数据的同时，每一个数据还在维护两个引用。记录此数据的前一个和后一个数据。对于频繁的遍历操作，LinkedHashSetLinkedHashSet 效率高于 HashSet.</li></ul></li><li>TreeSet:可以添加对象的指定属性，进行排序。</li></ul></li></ul></li></ul><h3 id="五、存储对象所在类的要求"><a href="#五、存储对象所在类的要求" class="headerlink" title="五、存储对象所在类的要求"></a>五、存储对象所在类的要求</h3><ul><li><p>HashSet/LinkedHashSet：</p><ul><li><p>要求:向 Set(主要指：HashSet、LinkedHashSet)中添加数据，其所在的类一定要重写<strong>hashcode()**和</strong>equals()**。</p></li><li><p>要求:重写的 HashCode() 和 equals() 尽可能保持一致：相等的对象必须具体的相等的散列码</p><p>​ 重写的两个方法的小技巧：对象中用作 equals()方法比较的 Field，都应该用来计算 hashcode 值。</p></li></ul></li><li><p>TreeSet:</p><ul><li>自然排序中，比较两个对象是否相等的标准为：compareTo() 返回 0，不再是 equals()</li><li>定制排序中，比较两个对象是否相同的标准为：compare()返回 0.不再是 equals().</li></ul></li></ul><h3 id="六、TreeSet-的使用"><a href="#六、TreeSet-的使用" class="headerlink" title="六、TreeSet 的使用"></a>六、TreeSet 的使用</h3><ul><li>向 TreeSet 中添加的数据，要求是相同类的对象。</li><li>两种排序方式：自然排序（实现 Comparable 接口 和 定制排序（Comparator）</li></ul><ol><li><p><strong>自然排序：</strong></p><p>创建 User 类</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        User user = (User) o;</span><br><span class="line">        <span class="keyword">return</span> age == user.age &amp;&amp;</span><br><span class="line">                name.equals(user.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            User user = (User) o;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.name.equals(user.name))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.age - user.age;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(user.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的值无法判断&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      TreeSet set = <span class="keyword">new</span> TreeSet();</span><br><span class="line">      set.add(<span class="keyword">new</span> User(<span class="string">&quot;hunan&quot;</span>, <span class="number">12</span>));</span><br><span class="line">      set.add(<span class="keyword">new</span> User(<span class="string">&quot;beijing&quot;</span>, <span class="number">12</span>));</span><br><span class="line">      set.add(<span class="keyword">new</span> User(<span class="string">&quot;hunan&quot;</span>, <span class="number">9</span>));</span><br><span class="line">      set.add(<span class="keyword">new</span> User(<span class="string">&quot;fujian&quot;</span>, <span class="number">15</span>));</span><br><span class="line">      set.add(<span class="keyword">new</span> User(<span class="string">&quot;lingxia&quot;</span>, <span class="number">18</span>));</span><br><span class="line"></span><br><span class="line">      Iterator iterator = set.iterator();</span><br><span class="line">      <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">      System.out.println(iterator.next());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200721182532.png" alt="image-20200721182530695"></p><ol start="2"><li><strong>定制排序</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Comparator com = <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                User user1 = (User) o1;</span><br><span class="line">                User user2 = (User) o2;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(user1.getAge(), user2.getAge());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的数据类型不匹配&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    TreeSet set = <span class="keyword">new</span> TreeSet(com);</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jim&quot;</span>,<span class="number">2</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Mike&quot;</span>,<span class="number">65</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Mary&quot;</span>,<span class="number">33</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">33</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">56</span>));</span><br><span class="line"></span><br><span class="line">    Iterator iterator = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200721183622.png" alt="image-20200721183621349"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java集合之Collection</title>
      <link href="posts/816104377/"/>
      <url>posts/816104377/</url>
      
        <content type="html"><![CDATA[<h2 id="数组与集合"><a href="#数组与集合" class="headerlink" title="数组与集合"></a>数组与集合</h2><h3 id="一、集合与数组存储数据的概述"><a href="#一、集合与数组存储数据的概述" class="headerlink" title="一、集合与数组存储数据的概述"></a>一、集合与数组存储数据的概述</h3><p>集合：数组都是对数据进行存储操作的结构，简称 Java 容器</p><p>说明：此时的存储，主要指的是内存层面的存储，不涉及到持久化的储存（.text,.jpg,avi,数据库中）</p><h3 id="二、数组存储的特点"><a href="#二、数组存储的特点" class="headerlink" title="二、数组存储的特点"></a>二、数组存储的特点</h3><p>一旦初始化以后，其长度就确定了。</p><p>数组一旦定义好，其元素的类型也就搞定了。我们也就只能操作指定类型的数据了。</p><p>比如：String[] arr; int[] arr1; Object[] arr2;</p><h3 id="三、数组存储的弊端"><a href="#三、数组存储的弊端" class="headerlink" title="三、数组存储的弊端"></a>三、数组存储的弊端</h3><ol><li>一旦初始化以后，其长度就不可修改。</li><li>数组中提供的方法非常有限，对于添加、插入数据等操作，非常不便，同时效率不高。</li><li>获取数组中实际元素的个数的需求，数组没有规定的属性方法可用</li><li>数组存储的特点：有序、可重复性、对于无序、不可重复的需求，不能满足。</li></ol><h3 id="四、集合存储的优点"><a href="#四、集合存储的优点" class="headerlink" title="四、集合存储的优点"></a>四、集合存储的优点</h3><p>​ 解决数组存储数据方面的弊端。</p><h2 id="Collection-接口"><a href="#Collection-接口" class="headerlink" title="Collection 接口"></a>Collection 接口</h2><h3 id="一、单列集合框架结构"><a href="#一、单列集合框架结构" class="headerlink" title="一、单列集合框架结构"></a>一、单列集合框架结构</h3><ul><li><strong>Collection</strong>接口：单列集合，用来存储一个一个的对象<ul><li><strong>list</strong>接口：存储有序的、可重复的数据。(<strong>动态</strong>数组)<ul><li>ArrayList、LinkedList、Vector</li></ul></li><li><strong>set</strong>接口：存储无序的、不可重复的数据 （集合）<ul><li>HashSet、LinkedHashSet、TreeSet</li></ul></li></ul></li></ul><p><strong>对应图示</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200720163356.png" alt="image-20200720163349709"></p><h3 id="二、Collection-接口常用方法"><a href="#二、Collection-接口常用方法" class="headerlink" title="二、Collection 接口常用方法"></a>二、Collection 接口常用方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>add(Object obj)</td><td>将元素 obj 添加到集合 coll 中</td></tr><tr><td>addAll(Collection coll)</td><td>将 coll1 集合中的元素添加到当前的集合中</td></tr><tr><td>isEmpty()</td><td>判断当前集合是否为空</td></tr><tr><td>clear()</td><td>清空集合元素</td></tr><tr><td>contains(Object obj)</td><td>判断当前集合中是否包含 obj</td></tr><tr><td>containsAll(Collection coll)</td><td>判断形参 coll1 中的所有元素是否都存在于当前集合中。</td></tr><tr><td>remove(Object obj)</td><td>当前集合中移除 obj 元素</td></tr><tr><td>removeAll(Collection coll)</td><td>从当前集合中移除 coll1 中所有的元素</td></tr><tr><td>retainsAll(Collection coll)</td><td>获取当前集合和 coll1 集合的交集，并返回给当前集合</td></tr><tr><td>equals(Object obj)</td><td>相同返回 true，需要当前集合和形参集合的元素都相同。</td></tr><tr><td>hasCode()</td><td>返回当前对象的哈希值</td></tr><tr><td>toArray()</td><td>返回一个包含此集合中所有元素的数组。</td></tr><tr><td>iterator()</td><td>迭代器遍历</td></tr><tr><td>size()</td><td>获取添加的元素的个数</td></tr></tbody></table><h3 id="三、Collection-集合与数组的转换"><a href="#三、Collection-集合与数组的转换" class="headerlink" title="三、Collection 集合与数组的转换"></a>三、Collection 集合与数组的转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//集合 ---&gt; 数组：toArray()</span></span><br><span class="line">Object[] arr =coll.toArray();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拓展：数组 --&gt; 集合：调用Arrays类的静态方法asList(T ... t)</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="keyword">new</span> String[] &#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;BB&quot;</span>,<span class="string">&quot;CC&quot;</span>&#125;);</span><br><span class="line">System.out.println(lis.size()); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">List arr1 = Arrays.asList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">123</span>,<span class="number">456</span>&#125;);</span><br><span class="line">System.oout.println(arr1.size());<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">List arr2 = Arrays.asList(<span class="keyword">new</span> Integer[]&#123;<span class="number">123</span>,<span class="number">456</span>&#125;);</span><br><span class="line">System.out.println(arr2.size());<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h3 id="四-、使用-Collection-集合存储对象，要求所属对象的类吗，满足"><a href="#四-、使用-Collection-集合存储对象，要求所属对象的类吗，满足" class="headerlink" title="四 、使用 Collection 集合存储对象，要求所属对象的类吗，满足"></a>四 、使用 Collection 集合存储对象，要求所属对象的类吗，满足</h3><p>​ 向 collection 接口的实现类的对象中添加数据 obj,要求 obj 所在类要重写 equals();</p><h2 id="Iteratorj-接口与-foreach-循环"><a href="#Iteratorj-接口与-foreach-循环" class="headerlink" title="Iteratorj 接口与 foreach 循环"></a>Iteratorj 接口与 foreach 循环</h2><h3 id="一、遍历-Collection-的两种方式"><a href="#一、遍历-Collection-的两种方式" class="headerlink" title="一、遍历 Collection 的两种方式"></a>一、遍历 Collection 的两种方式</h3><ol><li>使用迭代器 iterator</li><li>foreach 循环（或增强 for 循环）</li></ol><h3 id="二、说明"><a href="#二、说明" class="headerlink" title="二、说明"></a>二、说明</h3><p>Iterator 对象成为迭代器（设计模式的一种），主要用于遍历 collection 集合中的元素。</p><p>GOF 给迭代器模式定义为：提供一个方法访问一个容器（container）对象中各个元素，而又不需要暴露该对象的内部细节。迭代器模式，就是为容器而生。</p><p><strong>作用：</strong>遍历集合 Collection 元素</p><p><strong>获取示例：</strong> coll.iterator()返回一个迭代器实例</p><p><strong>遍历的代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Iterator iterator = coll.iterator();</span><br><span class="line"><span class="comment">// hasNext():判断是否还有下一个元素</span></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">    <span class="comment">// next();①指针下移 ②将下移的以后的集合位置上的元素返回</span></span><br><span class="line">    System.out.prinln(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>图示：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200720181110.png" alt="image-20200720181109215"></p><p><strong>remove()使用说明</strong></p><ol><li>测试 Iterator 中的 remove（）</li><li>如果还未调用 next（）或在上一次调用 next()方法之后已经调用 remove 方法，在调用 remove 报 IllegalStateException。</li><li>内部定义了 remove（）,可以在遍历的时候，删除集合中的元素。此方法不同于集合调用 remove()</li></ol><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除集合中&quot;Tom&quot;</span></span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line"><span class="comment">//            iterator.remove();</span></span><br><span class="line">            Object obj = iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;Tom&quot;</span>.equals(obj))&#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line"><span class="comment">//                iterator.remove();</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        iterator = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="三、JDK5-0-新特性-–-增强-for-循环：（forech-循环）"><a href="#三、JDK5-0-新特性-–-增强-for-循环：（forech-循环）" class="headerlink" title="三、JDK5.0 新特性 – 增强 for 循环：（forech 循环）"></a>三、JDK5.0 新特性 – 增强 for 循环：（forech 循环）</h3><ol><li><strong>遍历集合举例</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    coll.add(<span class="number">123</span>);</span><br><span class="line">    coll.add(<span class="number">456</span>);</span><br><span class="line">    coll.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">    coll.add(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">    coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//for(集合元素的类型 局部变量 : 集合对象)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Object obj : coll)&#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>​ 内部仍调用了迭代器。</p><ol start="2"><li><strong>遍历数组举例：</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="comment">//for(数组元素的类型 局部变量 : 数组对象)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i : arr)&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之Shell编程</title>
      <link href="posts/427140827/"/>
      <url>posts/427140827/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-编程"><a href="#Shell-编程" class="headerlink" title="Shell 编程"></a>Shell 编程</h1><h2 id="1-1-shell"><a href="#1-1-shell" class="headerlink" title="1.1 shell"></a>1.1 shell</h2><p><strong>示例图：</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200717225636.png" alt="image-20200717225223567"></p><p>​ Shell 是一个命令行解释器， 它为用户提供了一个向 Linux 内核发送请求以便运行程序的界面系统级程序， 用户可以用 Shell 来启动、 挂起、 停止甚至是编写一些程序.</p><h2 id="1-2-shell-编程快速入门-shell-脚本的执行方式"><a href="#1-2-shell-编程快速入门-shell-脚本的执行方式" class="headerlink" title="1.2 shell 编程快速入门-shell 脚本的执行方式"></a>1.2 shell 编程快速入门-shell 脚本的执行方式</h2><h3 id="1-2-1-脚本格式要求"><a href="#1-2-1-脚本格式要求" class="headerlink" title="1.2.1 脚本格式要求"></a>1.2.1 脚本格式要求</h3><ol><li><strong>脚本以#!/bin/bash 开头</strong></li><li><strong>执行脚本需要有执行的权限</strong></li></ol><h3 id="1-2-2-编写第一个-shell-脚本"><a href="#1-2-2-编写第一个-shell-脚本" class="headerlink" title="1.2.2 编写第一个 shell 脚本"></a>1.2.2 编写第一个 shell 脚本</h3><ul><li><p><strong>需求说明</strong></p><p>创建一个 shell 脚本， 输出 hello world!</p></li><li><p><strong>案例</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200717231058.png" alt="image-20200717231057345"></p><h3 id="1-2-3-脚本的常用执行方式"><a href="#1-2-3-脚本的常用执行方式" class="headerlink" title="1.2.3 脚本的常用执行方式"></a>1.2.3 脚本的常用执行方式</h3><ul><li>方式 1(输入脚本的<strong>绝对路径</strong>或<strong>相对路径</strong>)</li></ul><ol><li><p>首先要赋予 helloworld.sh 脚本的+x 权限</p></li><li><p>执行脚本</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200717231609.png" alt="image-20200717231607907"></p></li></ol><ul><li><p>方式 2(sh+脚本)， 不推荐</p><p>说明： 不用赋予脚本+x 权限， 直接执行即可</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200717232122.png" alt="image-20200717232121204"></p></li></ul><h2 id="1-3-shell-的变量"><a href="#1-3-shell-的变量" class="headerlink" title="1.3 shell 的变量"></a>1.3 shell 的变量</h2><h3 id="1-3-1-shell-的变量的介绍"><a href="#1-3-1-shell-的变量的介绍" class="headerlink" title="1.3.1 shell 的变量的介绍"></a>1.3.1 shell 的变量的介绍</h3><ol><li><p>linux shell 变量分为，<strong>系统变量</strong>和<strong>用户自定义变量</strong></p></li><li><p>系统变量 ： $HOME、$PWD、 $SHELL、 $USER 等等</p><p><strong>比如：</strong> echo $HOME 等等</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200717232640.png" alt="image-20200717232638641"></p><ol start="3"><li>显示当前 shell 中所有变量： set</li></ol><h3 id="1-3-2-shell-变量的定义"><a href="#1-3-2-shell-变量的定义" class="headerlink" title="1.3.2 shell 变量的定义"></a>1.3.2 shell 变量的定义</h3><ol><li>定义变量： 变量=值</li><li>撤销变量： unset 变量</li><li>声明静态变量： readonly 变量， 注意： 不能 unset</li></ol><ul><li><p><strong>快速入门</strong></p><p><strong>案例 1： 定义变量 A</strong></p><p><strong>案例 2： 撤销变量 A</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200717233237.png" alt="image-20200717233236005"></p><p><strong>案例 3： 声明静态的变量 B=2， 不能 unset</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200717233557.png" alt="image-20200717233556784"></p></li></ul><h3 id="1-3-3-定义变量的规则"><a href="#1-3-3-定义变量的规则" class="headerlink" title="1.3.3 定义变量的规则"></a>1.3.3 定义变量的规则</h3><ol><li>变量名称可以由字母、 数字和下划线组成， 但是不能以数字开头。</li><li>等号两侧不能有空格</li><li>变量名称一般习惯为大写</li></ol><h3 id="1-3-4-将命令的返回值赋给变量（重点）"><a href="#1-3-4-将命令的返回值赋给变量（重点）" class="headerlink" title="1.3.4 将命令的返回值赋给变量（重点）"></a>1.3.4 将命令的返回值赋给变量（重点）</h3><ol><li>A=`ls -la` 反引号， 运行里面的命令， 并把结果返回给变量 A</li><li>A=$(ls -la) 等价于反引号</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200717234324.png" alt="image-20200717234322972"></p><h2 id="1-4-设置环境变量"><a href="#1-4-设置环境变量" class="headerlink" title="1.4 设置环境变量"></a>1.4 设置环境变量</h2><h3 id="1-4-1-基本语法"><a href="#1-4-1-基本语法" class="headerlink" title="1.4.1 基本语法"></a>1.4.1 基本语法</h3><ol><li>export 变量名=变量值 （功能描述： 将 shell 变量输出为环境变量）</li><li>source 配置文件 （功能描述： 让修改后的配置信息立即生效）</li><li>echo $变量名 （功能描述： 查询环境变量的值）</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200717234524.png" alt="image-20200717234523597"></p><ul><li><p><strong>快速入门</strong></p><ol><li>在/etc/profile 文件中定义 TOMCAT_HOME 环境变量</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200717235116.png" alt="image-20200717235114680"></p><ol start="2"><li>查看环境变量 TOMCAT_HOME 的值</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$TOMCAT_HOME</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在另外一个 shell 程序中使用 TOMCAT_HOME</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200717235808.png" alt="image-20200717235807646"></p></li></ul><p>注意：在输出 TOMCAT_HOME 环境变量前，需要让其生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h2 id="1-5-位置参数变量"><a href="#1-5-位置参数变量" class="headerlink" title="1.5 位置参数变量"></a>1.5 位置参数变量</h2><h3 id="1-5-1-介绍"><a href="#1-5-1-介绍" class="headerlink" title="1.5.1 介绍"></a>1.5.1 介绍</h3><p>​ 当我们执行一个 shell 脚本时， 如果希望获取到命令行的参数信息， 就可以使用到位置参数变量， 比如 ： ./myshell.sh 100 200 , 这个就是一个执行 shell 的命令行， 可以在 myshell 脚本中获取到参数信息</p><h3 id="1-5-2-基本语法"><a href="#1-5-2-基本语法" class="headerlink" title="1.5.2 基本语法"></a>1.5.2 基本语法</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>$n</td><td>功能描述： n 为数字， $0 代表命令本身， $1-$9 代表第一到第九个参数， 十以上的参数， 十以上的参数需要用大括号包含， 如${10}）</td></tr><tr><td>$*</td><td>（功能描述： 这个变量代表命令行中所有的参数， $*把所有的参数看成一个整体）</td></tr><tr><td>$@</td><td>（功能描述： 这个变量也代表命令行中所有的参数， 不过$@把每个参数区分对待）</td></tr><tr><td>$#</td><td>（功能描述： 这个变量代表命令行中所有参数的个数）</td></tr></tbody></table><h3 id="1-5-3-位置参数变量应用实例"><a href="#1-5-3-位置参数变量应用实例" class="headerlink" title="1.5.3 位置参数变量应用实例"></a>1.5.3 位置参数变量应用实例</h3><p>​ 案例： 编写一个 shell 脚本 positionPara.sh ， 在脚本中获取到命令行的各个参数信息</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200718001230.png" alt="image-20200718001229517"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200718001312.png" alt="image-20200718001312069"></p><h2 id="1-6-预定义变量"><a href="#1-6-预定义变量" class="headerlink" title="1.6 预定义变量"></a>1.6 预定义变量</h2><h3 id="1-6-1-基本语法"><a href="#1-6-1-基本语法" class="headerlink" title="1.6.1 基本语法"></a>1.6.1 基本语法</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>$$</td><td>（功能描述： 当前进程的进程号（PID） ）</td></tr><tr><td>$!</td><td>（功能描述： 后台运行的最后一个进程的进程号（PID） ）</td></tr><tr><td>$？</td><td>（功能描述： 最后一次执行的命令的返回状态。 如果这个变量的值为 0， 证明上一个命令正确执行； 如果这个变量的值为非 0（具体是哪个数， 由命令自己来决定） ， 则证明上一个命令执行不正确了。 ）</td></tr></tbody></table><h3 id="1-6-2-应用实例"><a href="#1-6-2-应用实例" class="headerlink" title="1.6.2 应用实例"></a>1.6.2 应用实例</h3><p>在一个 shell 脚本中简单使用一下预定义变量</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200718002309.png" alt="image-20200718002308765"></p><h2 id="1-7-运算符"><a href="#1-7-运算符" class="headerlink" title="1.7 运算符"></a>1.7 运算符</h2><h3 id="1-7-1-基本语法"><a href="#1-7-1-基本语法" class="headerlink" title="1.7.1 基本语法"></a>1.7.1 基本语法</h3><ol><li>“$((运算式))” 或“$[运算式]”</li><li>expr m + n <strong>注意 expr 运算符间要有空格</strong></li><li>expr m - n</li><li>expr *, /, % 乘， 除， 取余</li></ol><ul><li><p><strong>应用实例</strong></p><p>案例 1： 计算（2+3） X4 的值</p></li></ul><ol><li><p>$((运算式))</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200718003441.png" alt="image-20200718003440495"></p></li><li><p>$[运算式]</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200718003502.png" alt="image-20200718003501338"></p></li><li><p>expr</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200718003523.png" alt="image-20200718003522904"></p><p><strong>案例 2： 请求出命令行的两个参数[整数]的和</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200718003927.png" alt="image-20200718003927176"></p></li></ol><h2 id="1-8-条件判断"><a href="#1-8-条件判断" class="headerlink" title="1.8 条件判断"></a>1.8 条件判断</h2><h3 id="1-8-1-基本语法"><a href="#1-8-1-基本语法" class="headerlink" title="1.8.1 基本语法"></a>1.8.1 基本语法</h3><p>​ **[ condition ]**（注意 condition 前后要有空格）</p><p>​ #非空返回 true， 可使用$?验证（0 为 true， &gt;1 为 false）</p><h3 id="1-8-2-应用实例"><a href="#1-8-2-应用实例" class="headerlink" title="1.8.2 应用实例"></a>1.8.2 应用实例</h3><p>​ [ atguigu ] 返回 true</p><p>​ [] 返回 false</p><p>​ [condition] &amp;&amp; echo OK || echo notok 条件满足， 执行后面的语句</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200718221244.png" alt="image-20200718221156472"></p><h3 id="1-8-3-常用判断条件"><a href="#1-8-3-常用判断条件" class="headerlink" title="1.8.3 常用判断条件"></a>1.8.3 常用判断条件</h3><ol><li><p><strong>两个整数的比较</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>字符串比较</td></tr><tr><td>-lt</td><td>小于</td></tr><tr><td>-le</td><td>小于等于</td></tr><tr><td>-eq</td><td>等于</td></tr><tr><td>-gt</td><td>大于</td></tr><tr><td>-ge</td><td>大于等于</td></tr><tr><td>-ne</td><td>不等于</td></tr></tbody></table></li><li><p><strong>按照文件的权限进行判断</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>-r</td><td>有读的权限[-r 文件]</td></tr><tr><td>-w</td><td>有写的权限</td></tr><tr><td>-x</td><td>有执行的权限</td></tr></tbody></table></li><li><p><strong>按照文件类型进行判断</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>-f</td><td>文件存在并且是一个常规的文件</td></tr><tr><td>-e</td><td>文件存在</td></tr><tr><td>-d</td><td>文件存在并是一个目录</td></tr></tbody></table></li></ol><h3 id="1-8-4-应用实例"><a href="#1-8-4-应用实例" class="headerlink" title="1.8.4 应用实例"></a>1.8.4 应用实例</h3><p>​ <strong>案例 1： “ok”是否等于”ok”</strong></p><p>​ 判断语句：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200718222717.png" alt="image-20200718222716509"></p><p><strong>案例 2： 23 是否大于等于 22</strong></p><p>判断语句：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200718222938.png"></p><p><strong>案例 3： /root/install.log 目录中的文件是否存在</strong></p><p>判断语句：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200718223316.png" alt="image-20200718223314713"></p><h2 id="1-9-流程控制"><a href="#1-9-流程控制" class="headerlink" title="1.9 流程控制"></a>1.9 流程控制</h2><h3 id="1-9-1-if-判断"><a href="#1-9-1-if-判断" class="headerlink" title="1.9.1 if 判断"></a>1.9.1 if 判断</h3><ul><li><strong>基本语法</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>[ 条件测试 ];<span class="keyword">then</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>[ 条件判断式 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">elif</span>[ 条件判断式 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>： （1） [ 条件判断式 ]， 中括号和条件判断式之间必须有空格</p><p>​ (2) 推荐使用第二种方式</p><ul><li><strong>应用实例</strong></li></ul><p>案例： 请编写一个 shell 程序， 如果输入的参数， 大于等于 60， 则输出 “及格了”， 如果小于 60,则输出 “不及格”</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200718224249.png" alt="image-20200718224248163"></p><h3 id="1-9-2-case-语句"><a href="#1-9-2-case-语句" class="headerlink" title="1.9.2 case 语句"></a>1.9.2 case 语句</h3><ul><li><strong>基本语法</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> $变量名 <span class="keyword">in</span></span><br><span class="line"><span class="string">&quot;值 1&quot;</span>）</span><br><span class="line">如果变量的值等于值 1， 则执行程序 1</span><br><span class="line">;;</span><br><span class="line"><span class="string">&quot;值 2&quot;</span>）</span><br><span class="line">如果变量的值等于值 2， 则执行程序 2</span><br><span class="line">;;</span><br><span class="line">…省略其他分支…</span><br><span class="line">*）</span><br><span class="line">如果变量的值都不是以上的值， 则执行此程序 Linux 课程</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>应用实例</strong></p><p>案例 1 ： 当命令行参数是 1 时， 输出 “周一”, 是 2 时， 就输出”周二”， 其它情况输出 “other”</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200718230542.png" alt="image-20200718230541027"></p><h3 id="1-9-3-for-循环"><a href="#1-9-3-for-循环" class="headerlink" title="1.9.3 for 循环"></a>1.9.3 for 循环</h3><ul><li><strong>基本语法 1</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量值 <span class="keyword">in</span> 值1 值2 值3...</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li><strong>应用实例</strong></li></ul><p>案例 1 ： 打印命令行输入的参数 【会使用到$* $@】</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200718232246.png" alt="image-20200718232245642"></p><ul><li><strong>基本语法 2</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(( 初始值:循环控制条件;变量变化))</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">程序</span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li><strong>应用实例</strong></li></ul><p><strong>案例 1 ： 从 1 加到 100 的值输出显示</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200718232918.png" alt="image-20200718232917512"></p><h2 id="1-10-while-循环"><a href="#1-10-while-循环" class="headerlink" title="1.10 while 循环"></a>1.10 while 循环</h2><ul><li><strong>基本语法</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [ 条件判断式 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li><strong>应用实例</strong></li></ul><p><strong>案例 1 ： 从命令行输入一个数 n， 统计从 1+..+ n 的值是多少？</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200718233828.png" alt="image-20200718233827189"></p><h2 id="1-11-read-读取控制台输入"><a href="#1-11-read-读取控制台输入" class="headerlink" title="1.11 read 读取控制台输入"></a>1.11 read 读取控制台输入</h2><h3 id="1-11-1-基本语法"><a href="#1-11-1-基本语法" class="headerlink" title="1.11.1 基本语法"></a>1.11.1 基本语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span>(选项)(参数)</span><br></pre></td></tr></table></figure><p><strong>选项：</strong></p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>-p</td><td>指定读取值时的提示符；</td></tr><tr><td>-t</td><td>指定读取值时等待的时间（秒） ， 如果没有在指定的时间内输入， 就不再等待了</td></tr></tbody></table><p><strong>参数：</strong></p><p>变量：指定读取值的变量名</p><h3 id="1-11-2-应用实例"><a href="#1-11-2-应用实例" class="headerlink" title="1.11.2 应用实例"></a>1.11.2 应用实例</h3><p><strong>案例 1： 读取控制台输入一个 num 值</strong><br><strong>案例 2： 读取控制台输入一个 num 值， 在 10 秒内输入</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200718235049.png" alt="image-20200718235048371"></p><h2 id="1-12-函数"><a href="#1-12-函数" class="headerlink" title="1.12 函数"></a>1.12 函数</h2><h3 id="1-12-1-函数介绍"><a href="#1-12-1-函数介绍" class="headerlink" title="1.12.1 函数介绍"></a>1.12.1 函数介绍</h3><p>​ shell 编程和其它编程语言一样， 有系统函数， 也可以自定义函数。 系统函数中， 我们这里就介绍两个。</p><h3 id="1-12-2-系统函数"><a href="#1-12-2-系统函数" class="headerlink" title="1.12.2 系统函数"></a>1.12.2 系统函数</h3><ul><li><p><strong>basename 基本语法</strong></p><p><strong>功能：</strong> 返回完整路径最后 / 的部分， 常用于获取文件名</p><p>basename [pathname] [suffix]</p><p>basename [string] [suffix] （功能描述： basename 命令会删掉所有的前缀包括最后一个（‘/’ ）字符， 然后将字符串显示出来。</p><p><strong>选项：</strong>suffix 为后缀， 如果 suffix 被指定了， basename 会将 pathname 或 string 中的 suffix 去掉。</p></li><li><p><strong>dirname 基本语法</strong></p><p><strong>功能：</strong> 返回完整路径最后 / 的前面的部分， 常用于返回路径部分</p><p>dirname 文件绝对路径 （功能描述： 从给定的包含绝对路径的文件名中去除文件名（非目录的部分） ， 然后返回剩下的路径（目录的部分） ）</p></li></ul><h3 id="1-12-3-应用实例"><a href="#1-12-3-应用实例" class="headerlink" title="1.12.3 应用实例"></a>1.12.3 应用实例</h3><p><strong>案例 1： 请返回 /home/aaa/test.txt 的 “test.txt” 部分</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200719000226.png" alt="image-20200719000225467"></p><p><strong>案例 2： 请返回 /home/aaa/test.txt 的 /home/aaa</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200719000347.png" alt="image-20200719000346538"></p><h3 id="1-12-4-自定义函数"><a href="#1-12-4-自定义函数" class="headerlink" title="1.12.4 自定义函数"></a>1.12.4 自定义函数</h3><ul><li><strong>基本语法</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="keyword">function</span> ] funname[()]</span><br><span class="line">&#123;</span><br><span class="line">Action;</span><br><span class="line">[<span class="built_in">return</span> int;]</span><br><span class="line">&#125;</span><br><span class="line">调用直接写函数名： funname [值]</span><br></pre></td></tr></table></figure><ul><li><p><strong>应用实例</strong></p><p><strong>案例 1： 计算输入两个参数的和（read） ， getSum</strong></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200719001342.png" alt="image-20200719001341684"></p><h2 id="1-13-shell-编程综合案例"><a href="#1-13-shell-编程综合案例" class="headerlink" title="1.13 shell 编程综合案例"></a>1.13 shell 编程综合案例</h2><p><strong>需求分析</strong></p><ol><li><p>每天凌晨 2:10 备份 数据库 atguiguDB 到 /data/backup/db</p></li><li><p>备份开始和备份结束能够给出相应的提示信息</p></li><li><p>备份后的文件要求以备份时间为文件名， 并打包成 .tar.gz 的形式， 比如：</p><p>2020-07-22_230201.tar.gz</p></li><li><p>在备份的同时， 检查是否有 10 天前备份的数据库文件， 如果有就将其删除。</p></li></ol><p><strong>编写一个 shell 脚本</strong></p><p><strong>思路分析</strong>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200719001550.png" alt="image-20200719001549327"></p><p><strong>代码实现</strong>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200719012812.png" alt="image-20200719012811434"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200719012736.png" alt="image-20200719012734452"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200719012746.png" alt="image-20200719012745856"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 搭建 JavaEE 环境</title>
      <link href="posts/2922948377/"/>
      <url>posts/2922948377/</url>
      
        <content type="html"><![CDATA[<h1 id="LInux-搭建-JavaEE-环境"><a href="#LInux-搭建-JavaEE-环境" class="headerlink" title="LInux 搭建 JavaEE 环境"></a>LInux 搭建 JavaEE 环境</h1><h2 id="一、安装-JDK-1-8"><a href="#一、安装-JDK-1-8" class="headerlink" title="一、安装 JDK(1.8)"></a>一、安装 JDK(1.8)</h2><p><strong>先将软件通过 xftp5 上传到 /opt 下</strong></p><ol><li><strong>解压缩到 /opt</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200715223403.png" alt="image-20200715223356015"></p><ol start="2"><li><strong>配置环境变量的配置文件 vim /etc/profile</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME&#x3D;&#x2F;opt&#x2F;opt&#x2F;jdk1.8.0_261</span><br><span class="line">PATH&#x3D;&#x2F;opt&#x2F;jdk1.8.0_261&#x2F;bin:$PATH</span><br><span class="line">export JAVA_HOME PATH</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200715224230.png" alt="image-20200715224230019"></p><ol start="3"><li><p><strong>需要注销用户，环境变量才能生效</strong></p><p>如果是在 3 运行级别， <strong>logout</strong></p><p>如果是在 5 的运行级别</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200715224457.png" alt="image-20200715224455768"></p></li><li><p><strong>在任何目录下就可以使用 java 和 javac</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200715224553.png" alt="image-20200715224552751"></p></li><li><p><strong>测试是否安装成功</strong></p><p>编写一个简单的 Hello.java 输出”hello,world!”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200715225623.png" alt="image-20200715225622172"></p><p><strong>使用 javac 编译 , 在使用 java 执行</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200715225701.png" alt="image-20200715225659958"></p></li></ol><h2 id="二、Tomcat-服务器搭建"><a href="#二、Tomcat-服务器搭建" class="headerlink" title="二、Tomcat 服务器搭建"></a>二、Tomcat 服务器搭建</h2><ol><li><strong>解压缩到/opt</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200715225915.png" alt="image-20200715225913184"></p><p>2**.启动 tomcat ./startup.sh**</p><p>​ 先进入到 tomcat 的 bin 目录</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200715230313.png" alt="image-20200715230312437"></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200715230541.png" alt="image-20200715230539086"></p><p>​ 在 liunx 浏览器中，输入 <a href="http://localhost:808/">http://localhost:808</a> 启动成功即可。</p><ol start="3"><li><p><strong>开放端口 8080 ,这样外网才能访问到 tomcat</strong> （CentOS7）</p><p>① <strong>检验防火墙是否启动</strong></p><p>​ 输入命令 “ ==firewall-cmd –state== “ 如果出现如图所示的这种情况说明正在运行，如果没有正在运行需要执行命令” ==systemctl start firewalld== “开启防火墙服务</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200716015152.png" alt="image-20200716015151199"></p></li></ol><p>​ ② <strong>配置防火墙，开放 8080 端口</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>4.<strong>开放端口 8080 ,这样外网才能访问到 tomcat</strong> （CentOS7 以下）</p><p><strong>vim /etc/sysconfig/iptables</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200716015605.png" alt="image-20200716015604853"></p><p><strong>重启防火墙</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200716015638.png" alt="image-20200716015637468"></p><h2 id="三、Tomcat-启动失败解决方案（启动成功跳过）"><a href="#三、Tomcat-启动失败解决方案（启动成功跳过）" class="headerlink" title="三、Tomcat 启动失败解决方案（启动成功跳过）"></a>三、Tomcat 启动失败解决方案（启动成功跳过）</h2><ol><li><p><strong>启动 tomcat</strong></p><p>进入 tomcat 所在的目录的 bin 的文件夹下执行” <strong>./ startup.sh</strong>“ 命令 启动 tomcat ，如果出现下面这种情况说明 tomcat 启动 成功。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200716020126.png" alt="image-20200716020125408"></p></li><li><p><strong>验证 tomcat 是否启动成功</strong></p><p>输入” <strong>ps -ef|grep tomcat</strong> “ 命令验证 tomcat 是否启动成功，如果出现下面这种情况说明启动成功。</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200716020211.png" alt="image-20200716020210587"></p><ol start="3"><li><p>若启动成功，在 linux 中输入 curl <a href="http://192.168.31.128:8080/">http://192.168.112.130:8080</a>（自己 linux 的 ip）看是否正常访问。</p><p> <strong>如下则表示正常访问：</strong></p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200716020307.png" alt="image-20200716020306410"></p><ol start="4"><li><p><strong>检验防火墙是否启动</strong></p><p>输入命令 “ <strong>==firewall-cmd –state==</strong> “ 如果出现如图所示的这种情况说明正在运行，如果没有正在运行需要执行命令” <strong>==systemctl start firewalld==</strong> “开启防火墙服务</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200716020420.png" alt="image-20200716020419634"></p></li><li><p><strong>检查 8080 端口是否被防火墙开启</strong></p><p>输入命令” ==<strong>firewall-cmd –permanent –zone=public –list-ports</strong>== “ 如果终端输出 “8080/tcp” 则说明 8080 端口被开启</p><p>如果没有该输出则需要执行命令” ==<strong>firewall-cmd –zone=public –add-port=8080/tcp –permanent</strong>==”开启 8080 端口, 出现” ==<strong>success</strong>==” 则表示添加成功。</p></li><li><p><strong>重新启动防火墙</strong></p><p>输入命令” firewall-cmd –reload” 重新启动防火墙，出现” success“ 字样则表示重新启动成功。</p></li><li><p><strong>验证开启的 8080 端口是否生效</strong></p><p>输入命令” firewall-cmd –zone=public –query-port=8080/tcp“ 验证 8080 端口是否生效，如果出现 ” yes “字样则代表生效。</p><p>此时，重新启动 tomcat 就可以使用外部浏览器访问 centos 中的 tomcat 啦。</p></li></ol><p><strong>补充：</strong></p><p>​ 如果以上还没有解决，或者 tomcat 提示需要配置环境。请去去查看你的<strong>JDK</strong>的配置信息，配置文件在安装 JDK 中以提及。没有发现问题，可以重启 Linux,重新登入。</p><h2 id="四-、Eclipse-的安装"><a href="#四-、Eclipse-的安装" class="headerlink" title="四 、Eclipse 的安装"></a>四 、Eclipse 的安装</h2><ol><li><p><strong>解压缩到/opt</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716231441236.png" alt="image-20200716231441236"></p></li><li><p><strong>启动 eclipse</strong></p><p>进入到 eclipse 解压后的文件夹， 然后执行 ./eclipse</p></li></ol><h2 id="五、mysql-的安装和配置"><a href="#五、mysql-的安装和配置" class="headerlink" title="五、mysql 的安装和配置"></a>五、mysql 的安装和配置</h2><p>【说明】：因为 mysql 安装时间较长，所以我已经把安装步骤放到我博客的文件中了。有需要的话。点击链接下载即可。或者你可以百度用 yum 安装。</p><p><strong>提取码：9ifr</strong></p><div class="btns rounded grid5">            <a class="button" href='https://pan.baidu.com/s/1H1_9p6XFgvN-DQdxgW3V_A' title='查看文档'><i class='fa fa-book'></i>查看文档</a>          </div>]]></content>
      
      
      <categories>
          
          <category> Linux语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 笔记【适用新手】</title>
      <link href="posts/2761314235/"/>
      <url>posts/2761314235/</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客中所需要的工具我已经打包好，放在博客文章最后。</p><p>里面包含了:</p><ol><li> PDF 版知识点</li><li> Xshell</li><li> Xftp</li></ol></blockquote><h1 id="第一章-开机、重启和用户登录注销"><a href="#第一章-开机、重启和用户登录注销" class="headerlink" title="第一章 开机、重启和用户登录注销"></a>第一章 开机、重启和用户登录注销</h1><h2 id="Linux-目录结构："><a href="#Linux-目录结构：" class="headerlink" title="Linux 目录结构："></a>Linux 目录结构：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707133025.png" alt="image-20200707133023667"></p><h2 id="1-1-关机-amp-重启命令"><a href="#1-1-关机-amp-重启命令" class="headerlink" title="1.1 关机&amp;重启命令"></a>1.1 关机&amp;重启命令</h2><ul><li><p><strong>shutdown</strong></p></li><li><p>shutdown -h now : 表示立即关机</p></li><li><p>shutdown -h 1 : 表示 1 分钟后关机</p></li><li><p>shutdown -r now : 立即重启</p></li><li><p><strong>halt</strong></p><ul><li>就是直接使用，效果等价于关机</li></ul></li><li><p><strong>reboot</strong></p><ul><li>就是重启系统</li></ul></li><li><p><strong>syn</strong></p><ul><li>把内存的数据同步到磁盘</li></ul></li></ul><h2 id="1-2-用户基本登入和注销"><a href="#1-2-用户基本登入和注销" class="headerlink" title="1.2 用户基本登入和注销"></a>1.2 用户基本登入和注销</h2><h3 id="1-2-1-基本介绍"><a href="#1-2-1-基本介绍" class="headerlink" title="1.2.1 基本介绍"></a>1.2.1 基本介绍</h3><p>​ 1）登入时尽量少用 root 登录，因为它是系统管理员，最大权限，避免操作失误。可利用普通用户登录，登入后再用**”su -用户名”** 命令来切换成系统管理员身份.</p><p>​ 2) 在提示符输入 <strong>logout</strong> 即可以注销用户</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200706164120.png" alt="1594015025921"></p><h1 id="第二章-用户管理"><a href="#第二章-用户管理" class="headerlink" title="第二章 用户管理"></a>第二章 用户管理</h1><h2 id="2-1-添加用户"><a href="#2-1-添加用户" class="headerlink" title="2.1 添加用户"></a>2.1 添加用户</h2><h3 id="2-1-1-基本语法"><a href="#2-1-1-基本语法" class="headerlink" title="2.1.1 基本语法"></a>2.1.1 基本语法</h3><p>​ <strong>useradd</strong> [选项] 用户名</p><h3 id="2-1-2-实际案例"><a href="#2-1-2-实际案例" class="headerlink" title="2.1.2 实际案例"></a>2.1.2 实际案例</h3><p>​ 添加一个用户 xm</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200706164126.png" alt="1594015058626"></p><p>​ <strong>特别说明</strong></p><p>​ <strong>cd</strong> 表示 <em>change directory</em></p><h3 id="2-1-3-细节说明"><a href="#2-1-3-细节说明" class="headerlink" title="2.1.3 细节说明"></a>2.1.3 细节说明</h3><p>​ 1）当创建用户成功后，会自动的创建和用户名同名的家的目录</p><p>​ 2） 也可以通过 <strong>useradd - d</strong> 指定目录 新的用户名，给新创建的用户指定家目录</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716230457171.png" alt="image-20200716230457171"></p><h2 id="2-2-给用户指定或修改密码"><a href="#2-2-给用户指定或修改密码" class="headerlink" title="2.2 给用户指定或修改密码"></a>2.2 给用户指定或修改密码</h2><h3 id="2-2-1-基本语法"><a href="#2-2-1-基本语法" class="headerlink" title="2.2.1 基本语法"></a>2.2.1 基本语法</h3><p>​ <strong>passwd</strong> 用户名</p><h3 id="2-2-2-应用案例"><a href="#2-2-2-应用案例" class="headerlink" title="2.2.2 应用案例"></a>2.2.2 应用案例</h3><p>​ 1） 给 xm 指定密码</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200706164139.png" alt="1594015092082"></p><h2 id="2-3-删除用户"><a href="#2-3-删除用户" class="headerlink" title="2.3 删除用户"></a>2.3 删除用户</h2><h3 id="2-3-1-基本语法"><a href="#2-3-1-基本语法" class="headerlink" title="2.3.1 基本语法"></a>2.3.1 基本语法</h3><p>​ <strong>userdel</strong> 用户名</p><h3 id="2-3-2-应用案例"><a href="#2-3-2-应用案例" class="headerlink" title="2.3.2 应用案例"></a>2.3.2 应用案例</h3><p>​ 1）删除用户 xm, 但是要保留加目录</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200706164148.png" alt="1594015234066"></p><p>​ 2）删除用户 xq 以及用户主目录</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200706164151.png" alt="1594015246507"></p><h2 id="2-4-查询用户信息"><a href="#2-4-查询用户信息" class="headerlink" title="2.4 查询用户信息"></a>2.4 查询用户信息</h2><h3 id="2-4-1-基本语法"><a href="#2-4-1-基本语法" class="headerlink" title="2.4.1 基本语法"></a>2.4.1 基本语法</h3><p>​ <strong>id</strong> 用户名</p><h3 id="2-4-2-应用实例"><a href="#2-4-2-应用实例" class="headerlink" title="2.4.2 应用实例"></a>2.4.2 应用实例</h3><p>​ <strong>案例 1：请查询 root 信息</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200706164155.png" alt="1594015149857"></p><h3 id="2-4-3-细节说明"><a href="#2-4-3-细节说明" class="headerlink" title="2.4.3 细节说明"></a>2.4.3 细节说明</h3><p>​ 1）当用户不存在时，返回“无此用户”</p><h2 id="2-5-切换用户"><a href="#2-5-切换用户" class="headerlink" title="2.5 切换用户"></a>2.5 切换用户</h2><h3 id="2-5-1-介绍"><a href="#2-5-1-介绍" class="headerlink" title="2.5.1 介绍"></a>2.5.1 介绍</h3><p>​ 在操作 Linux 中，如果当前用户的权限不够，可以通过 <strong>su -</strong> 指令，切换到高权限用户，比如 root。</p><h3 id="2-5-2-基本语法"><a href="#2-5-2-基本语法" class="headerlink" title="2.5.2 基本语法"></a>2.5.2 基本语法</h3><p>​ <strong>su -</strong> 切换用户名</p><h3 id="2-5-3-应用实例"><a href="#2-5-3-应用实例" class="headerlink" title="2.5.3 应用实例"></a>2.5.3 应用实例</h3><p>​ 1) 创建一个用户 zf, 指定密码，然后切换到 zf</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200706175509.png" alt="image-20200706175315058"></p><h3 id="2-5-4-细节说明"><a href="#2-5-4-细节说明" class="headerlink" title="2.5.4 细节说明"></a>2.5.4 细节说明</h3><p>​ 1）从权限高的用户切换到权限低的用户，不需要输入密码，反之需要</p><p>​ 2）当需要返回到原来的用户时，使用<strong>exit</strong>命名</p><h2 id="2-6-用户组"><a href="#2-6-用户组" class="headerlink" title="2.6 用户组"></a>2.6 用户组</h2><h3 id="2-6-1-介绍"><a href="#2-6-1-介绍" class="headerlink" title="2.6.1 介绍"></a>2.6.1 介绍</h3><p>​ 类似于角色， 系统可以对有共性的多个用户进行统一的管理。</p><h3 id="2-6-2-增加组"><a href="#2-6-2-增加组" class="headerlink" title="2.6.2 增加组"></a>2.6.2 增加组</h3><p><strong>groupadd</strong> 组名</p><h3 id="2-6-3-案例演示"><a href="#2-6-3-案例演示" class="headerlink" title="2.6.3 案例演示"></a>2.6.3 案例演示</h3><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200706231853.png" alt="image-20200706231729007"></p><h3 id="2-6-4-删除组"><a href="#2-6-4-删除组" class="headerlink" title="2.6.4 删除组"></a>2.6.4 删除组</h3><p>​ 指令（基本语法）</p><p><strong>groupdel</strong> 组名</p><h3 id="2-6-5-案例演示"><a href="#2-6-5-案例演示" class="headerlink" title="2.6.5 案例演示"></a>2.6.5 案例演示</h3><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200706232509.png" alt="image-20200706232508125"></p><h2 id="2-7-增加用户时直接加上组"><a href="#2-7-增加用户时直接加上组" class="headerlink" title="2.7 增加用户时直接加上组"></a>2.7 增加用户时直接加上组</h2><h3 id="2-7-1-指令（基本语法）"><a href="#2-7-1-指令（基本语法）" class="headerlink" title="2.7.1 指令（基本语法）"></a>2.7.1 指令（基本语法）</h3><p>​ <strong>useradd -g</strong> 用户组 用户名</p><h3 id="2-7-2-案例演示"><a href="#2-7-2-案例演示" class="headerlink" title="2.7.2 案例演示"></a>2.7.2 案例演示</h3><p>​ <strong>增加一个用户 zwj, 直接将他指定到 wudang</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200706233015.png" alt="image-20200706233014550"></p><h2 id="2-8-修改用户的组"><a href="#2-8-修改用户的组" class="headerlink" title="2.8 修改用户的组"></a>2.8 修改用户的组</h2><h3 id="2-8-1-指令（基本语法）"><a href="#2-8-1-指令（基本语法）" class="headerlink" title="2.8.1 指令（基本语法）"></a>2.8.1 指令（基本语法）</h3><p>​ <strong>usermod -g</strong> 用户组 用户名</p><h3 id="2-8-2-案例演示"><a href="#2-8-2-案例演示" class="headerlink" title="2.8.2 案例演示"></a>2.8.2 案例演示</h3><p>​ <strong>创建一个 shaolin 组， 让将 zwj 用户修改到 shaolin</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200706234027.png" alt="image-20200706234025775"></p><h2 id="2-9-etc-passwd-文件"><a href="#2-9-etc-passwd-文件" class="headerlink" title="2.9 /etc/passwd 文件"></a>2.9 /etc/passwd 文件</h2><p>​ 用户(user) 的配置文件，记录用户的各种信息</p><p>​ 每行的含义：用户名：口令：用户标识符：组标识号：注释性描述：主目录：登录 Shell</p><ul><li><strong>操作代码</strong></li></ul><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200706235055.png" alt="image-20200706235052380"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200706234731.png" alt="image-20200706234730569"></p><h2 id="2-10-etc-shadow-文件"><a href="#2-10-etc-shadow-文件" class="headerlink" title="2.10 /etc/shadow 文件"></a>2.10 /etc/shadow 文件</h2><p>​ 口令的配置文件</p><p>​ 每行的含义： 登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动 时间:失效时间:标志</p><h2 id="2-11-etc-group-文件"><a href="#2-11-etc-group-文件" class="headerlink" title="2.11 /etc/group 文件"></a>2.11 /etc/group 文件</h2><p>​ 组(group)的配置文件 ，记录 Linux 包含的组的信息</p><p>​ 每行含义：组名:口令:组标识号:组内用户列表</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200706235936.png" alt="image-20200706235934624"></p><h1 id="第三章-实用指令"><a href="#第三章-实用指令" class="headerlink" title="第三章 实用指令"></a>第三章 实用指令</h1><h2 id="3-1-指定运行的级别"><a href="#3-1-指定运行的级别" class="headerlink" title="3.1 指定运行的级别"></a>3.1 指定运行的级别</h2><h3 id="3-1-1-运行级别说明："><a href="#3-1-1-运行级别说明：" class="headerlink" title="3.1.1 运行级别说明："></a>3.1.1 运行级别说明：</h3><ul><li><p>0 ： 关机</p></li><li><p>1 ： 单用户【找回丢失密码】</p></li><li><p>2： 多用户状态没有网络服务</p></li><li><p>3： 多用户状态有网络服务</p></li><li><p>4： 系统未使用保留给用户</p></li><li><p>5： 图形界面</p></li><li><p>6： 系统重启</p><p><strong>常用运行级别是 3 和 5 ， 要修改默认的运行级别可改文件</strong></p><p><strong>/etc/inittab 的 id:5:initdefault:这一行中的数字</strong></p></li></ul><h3 id="3-1-2-运行级别的示意图："><a href="#3-1-2-运行级别的示意图：" class="headerlink" title="3.1.2 运行级别的示意图："></a>3.1.2 运行级别的示意图：</h3><p>​</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707000645.png" alt="image-20200707000644701"></p><h2 id="3-2-切换到指定运行级别的指令"><a href="#3-2-切换到指定运行级别的指令" class="headerlink" title="3.2 切换到指定运行级别的指令"></a>3.2 切换到指定运行级别的指令</h2><h3 id="3-2-1-基本语法"><a href="#3-2-1-基本语法" class="headerlink" title="3.2.1 基本语法"></a>3.2.1 基本语法</h3><p>​ <strong>init [0123456]</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707004351.png" alt="image-20200707004348669"></p><p><strong>补充：</strong></p><p>​ 关于 root 密码忘记，改怎么用运行级别的指令来操作，每个版本不同，所以自行百度。</p><h2 id="3-3-帮助指令"><a href="#3-3-帮助指令" class="headerlink" title="3.3 帮助指令"></a>3.3 帮助指令</h2><h3 id="3-3-1-介绍"><a href="#3-3-1-介绍" class="headerlink" title="3.3.1 介绍"></a>3.3.1 介绍</h3><p>​ 当我们对某个指令不熟悉时， 我们可以使用 Linux 提供的帮助指令来了解这个指令的使用方法。</p><h3 id="3-3-2-man-获取帮助信息"><a href="#3-3-2-man-获取帮助信息" class="headerlink" title="3.3.2 man 获取帮助信息"></a>3.3.2 man 获取帮助信息</h3><ul><li><p><strong>基本语法</strong></p><p><strong>man</strong> [命令或配置文件] （功能描述: 获取帮助信息）</p></li><li><p><strong>实用案例</strong></p><p>​ <strong>案例：查看 ls 命令的帮助信息</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707130915.png" alt="image-20200707130907570"></p></li></ul><h3 id="3-3-3-help-指令"><a href="#3-3-3-help-指令" class="headerlink" title="3.3.3 help 指令"></a>3.3.3 help 指令</h3><ul><li><p><strong>基本语法</strong></p><p>​ <strong>help</strong> 命令 （功能描述： 获取 shell 内置命令的帮助信息）</p></li><li><p><strong>应用案例</strong></p><p>​ <strong>案例： 查看 cd 命令的帮助信息</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707131313.png" alt="image-20200707131312298"></p></li></ul><h2 id="3-4-文件目录类"><a href="#3-4-文件目录类" class="headerlink" title="3.4 文件目录类"></a>3.4 文件目录类</h2><h3 id="3-4-1-pwd-指令"><a href="#3-4-1-pwd-指令" class="headerlink" title="3.4.1 pwd 指令"></a>3.4.1 pwd 指令</h3><ul><li><p><strong>基本用法</strong></p><p>​ <strong>pwd</strong> (功能描述： 显示当前工作目录的绝对路径)</p></li><li><p><strong>应用实例</strong></p><p>​ <strong>案例：显示当前工作目录的绝对路径</strong></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707131634.png" alt="image-20200707131633657"></p><h3 id="3-4-2-ls-指令"><a href="#3-4-2-ls-指令" class="headerlink" title="3.4.2 ls 指令"></a>3.4.2 ls 指令</h3><ul><li><p><strong>基本语法</strong></p><p>​ <strong>ls</strong> [选项] [目录或是文件]</p></li><li><p><strong>应用案例</strong></p><p>​ <strong>-a</strong> : 显示当前目录所在的文件和目录，包括隐藏的。</p><p>​ <strong>-l</strong> : 以列表的方式显示信息</p></li><li><p><strong>应用实例</strong></p><p>​ <strong>案例： 查看当前目录的所在的内容信息</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707132228.png" alt="image-20200707132226091"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707132351.png" alt="image-20200707132349650"></p></li></ul><h3 id="3-4-3-cd-指令"><a href="#3-4-3-cd-指令" class="headerlink" title="3.4.3 cd 指令"></a>3.4.3 cd 指令</h3><ul><li><p><strong>基本语法</strong></p><p>​ <strong>cd</strong> [参数] （功能切换到指定目录）</p></li><li><p><strong>常用参数</strong></p><p>​ ==绝对路径== 和 ==相对路径==</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707132841.png" alt="image-20200707132840549"></p><p>​ <strong>cd ~</strong> 或者 <strong>cd</strong> : 回到自己的家目录</p><p>​ <strong>cd..</strong> 回到当前目录的上一级目录</p></li><li><p><strong>应用实例</strong></p><p>​ <strong>案例 1： 使用绝对路径切换到 root 目录</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707133440.png" alt="image-20200707133439217"></p><p><strong>案例 2： 回到家目录</strong></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707133556.png" alt="image-20200707133554976"></p><h3 id="3-4-4-mkdir-指令"><a href="#3-4-4-mkdir-指令" class="headerlink" title="3.4.4 mkdir 指令"></a>3.4.4 mkdir 指令</h3><p>​ <strong>mkdir</strong> 指令用于创建目录（make directory）</p><ul><li><p><strong>基本用法</strong></p><p>​ <strong>mkdir</strong> [选项] 要创建的目录</p></li><li><p><strong>常用选项</strong></p><p>​ <strong>-p</strong> : 创建多级目录</p></li><li><p><strong>应用实例</strong></p><p>​ <strong>案例 1:创建一个目录 /home/dog</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707134541.png" alt="image-20200707134540622"></p><p>​ <strong>案例 2:创建多级目录 /home/animal/tiger</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707134815.png" alt="image-20200707134814642"></p></li></ul><h3 id="3-4-5-rmdir-指令"><a href="#3-4-5-rmdir-指令" class="headerlink" title="3.4.5 rmdir 指令"></a>3.4.5 rmdir 指令</h3><ul><li><p><strong>介绍</strong></p><p>​ <strong>rmdir</strong> 指令删除空目录</p></li><li><p><strong>基本语法</strong></p><p>​ <strong>rmdir</strong> [选项] 要删除的空目录</p></li><li><p><strong>应用实例</strong></p><p>​ <strong>案例 1:删除一个目录 /home/dog</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707231403.png" alt="image-20200707231324290"></p></li><li><p><strong>使用细节</strong></p><p>​ rmdir 删除的是空目录， 如果目录下有内容时无法删除的。<br>​ 提示： 如果需要删除非空目录， 需要使用 rm -rf 要删除的目录</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707231657.png" alt="image-20200707231655692"></p><h3 id="3-4-6-touch-指令"><a href="#3-4-6-touch-指令" class="headerlink" title="3.4.6 touch 指令"></a>3.4.6 touch 指令</h3><p>​ <strong>touch</strong> 指令创建空文件</p><ul><li><p><strong>基本用法</strong></p><p>​ <strong>touch</strong> 文件名称</p></li><li><p><strong>应用实例</strong></p><p>​ <strong>案例 1: 创建一个空文件 hello.txt</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707232141.png" alt="image-20200707232140225"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707232158.png" alt="image-20200707232157579"></p></li></ul><h3 id="3-4-7-cp-指令"><a href="#3-4-7-cp-指令" class="headerlink" title="3.4.7 cp 指令"></a>3.4.7 cp 指令</h3><p>​ <strong>cp</strong> 指令拷贝文件到指定的目录</p><ul><li><p><strong>基本用法</strong></p><p>​ <strong>cp</strong> [选项] source dest</p></li><li><p><strong>常用选项</strong></p><p>​ <strong>-r</strong> : 递归复制整个文件夹</p></li><li><p><strong>应用实例</strong></p><p>​ <strong>案例 1: 将 /home/aaa.txt 拷贝到 /home/bbb 目录下[拷贝单个文件]</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707232813.png" alt="image-20200707232812514"></p><p><strong>案例 2: 递归复制整个文件夹， 举例 ：将/home/test 整个目录拷贝到 /home/zwj 目录</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707233030.png" alt="image-20200707233029699"></p></li><li><p><strong>使用细节</strong></p><p>​ 强制覆盖不提示的方法： <strong>\cp</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707233352.png" alt="image-20200707233351210"></p></li></ul><h3 id="3-4-8-rm-指令"><a href="#3-4-8-rm-指令" class="headerlink" title="3.4.8 rm 指令"></a>3.4.8 rm 指令</h3><p>​ rm 指令移除【删除】 文件或目录</p><ul><li><p><strong>基本用法</strong></p><p>​ <strong>rm</strong> [选项] 要删除的文件或目录</p></li><li><p><strong>常用选项</strong></p><p>​ <strong>-r</strong> : 递归删除整个文件夹</p><p>​ <strong>-f</strong> : 强制删除不提示</p></li><li><p><strong>应用实例</strong></p><p>​ <strong>案例 1: 将 /home/aaa.txt 删除</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707233832.png" alt="image-20200707233831071"></p><p><strong>案例 2: 递归删除整个文件夹 /home/bbb</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707234026.png" alt="image-20200707234025761"></p></li><li><p><strong>使用细节</strong></p><p>​ <strong>强制删除不提示的方法： 带上 -f 参数即可</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707234214.png" alt="image-20200707234213136"></p></li></ul><h3 id="3-4-9-cat-指令"><a href="#3-4-9-cat-指令" class="headerlink" title="3.4.9 cat 指令"></a>3.4.9 cat 指令</h3><p>​ cat 查看文件内容， 是以只读的方式打开。</p><ul><li><p><strong>基本语法</strong></p><p><strong>cat</strong> [选项] 要查看的文件</p></li><li><p><strong>常用选项</strong></p><p><strong>-n</strong> : 显示行号</p></li><li><p><strong>应用实例</strong></p><p>​ <strong>案例 1: /etc/profile 文件内容， 并显示行号</strong></p><p>​</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707235037.png" alt="image-20200707235035822"></p></li><li><p><strong>使用细节</strong></p><p>​ cat 只能修改文件， 而不能修改文件，为了浏览方便，一般会带上 管道命令 | more</p><p>​ cat 文件名 | more [分页浏览]</p></li></ul><h3 id="3-4-10-mv-指令"><a href="#3-4-10-mv-指令" class="headerlink" title="3.4.10 mv 指令"></a>3.4.10 mv 指令</h3><p>​ mv 移动文件与目录或重命名</p><ul><li><p><strong>基本用法</strong></p><p>​ <strong>mv</strong> oldNameFile newNameFile (功能描述： 重命名)<br>​ <strong>mv</strong> /temp/movefile /targetFolder (功能描述： 移动文件)</p></li><li><p><strong>应用实例</strong></p><p>​ <strong>案例 1: 将 /home/aaa.txt 文件 重新命名为 pig.txt</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200708002335.png" alt="image-20200708002334471"></p><p><strong>案例 2:将 /home/pig.txt 文件 移动到 /root 目录下</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200708002539.png" alt="image-20200708002538638"></p></li></ul><h3 id="3-4-11-more-指令"><a href="#3-4-11-more-指令" class="headerlink" title="3.4.11 more 指令"></a>3.4.11 more 指令</h3><p>​ more 指令是一个基于 VI 编辑器的文本过滤器， ==它以全屏幕的方式按页显示文本文件的内容==。more 指令中内置了若干快捷键， 详见操作说明</p><ul><li><p><strong>基本语法</strong></p><p>​ <strong>more</strong> 要查看的文件</p></li><li><p><strong>应用实例</strong></p><p>​ <strong>案例: 采用 more 查看文件 /etc/profile</strong><br>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707235641.png" alt="image-20200707235640390"></p><ul><li><p><strong>快捷键</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200707235727.png" alt="image-20200707235726391"></p></li></ul></li></ul><h3 id="3-4-12-less-指令"><a href="#3-4-12-less-指令" class="headerlink" title="3.4.12 less 指令"></a>3.4.12 less 指令</h3><p>​ less 指令用来==分屏查看文件内容==， 它的功能与 more 指令类似， 但是比 more 指令更加强大， 支持各种显示终端。 less 指令在显示文件内容时， 并不是一次将整个文件加载之后才显示， 而是根据显示需要加载内容， 对于显示大型文件具有较高的效率。</p><ul><li><p><strong>基本语法</strong></p><p>​ <strong>less</strong> 要查看的文件</p></li><li><p><strong>应用实例</strong></p><p><strong>案例: 采用 less 查看一个大文件文件 /opt/金庸-射雕英雄传 txt 精校版.txt</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200708000046.png" alt="image-20200708000045325"></p><ul><li><p><strong>快捷键</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200708000116.png" alt="image-20200708000115738"></p></li></ul></li></ul><h3 id="3-4-13-gt-指令-和-gt-gt-指令"><a href="#3-4-13-gt-指令-和-gt-gt-指令" class="headerlink" title="3.4.13 &gt; 指令 和 &gt;&gt; 指令"></a>3.4.13 &gt; 指令 和 &gt;&gt; 指令</h3><ul><li><p><strong>介绍</strong></p><p>==&gt; 指令 和 &gt;&gt; 指令==</p><p>&gt; 输出重定向 : 会将原来的文件的内容覆盖</p><p>&gt;&gt; 追加： 不会覆盖原来文件的内容， 而是追加到文件的尾部。</p></li><li><p><strong>基本语法</strong></p><p><strong>1) ls -l &gt;文件 （功能描述： 列表的内容写入文件 a.txt 中（==覆盖写==） ）</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200708000603.png" alt="image-20200708000602451"></p><p>说明： ls -l &gt; a.txt , 将 ls -l 的显示的内容覆盖写入到 a.txt 文件， 如果该文件不存在， 就创建该文<br>件。</p><p>​ <strong>2) ls -al &gt;&gt;文件 （功能描述： 列表的内容追加到文件 a.txt 的末尾）</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200708001012.png" alt="image-20200708001011568"></p><p><strong>3) cat 文件 1 &gt; 文件 2 （功能描述： 将文件 1 的内容覆盖到文件 2）</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200708001150.png" alt="image-20200708001148886"></p></li><li><p><strong>应用实例</strong></p><p>​ <strong>案例 1: 将 /home 目录下的文件列表 写入到 /home/info.txt 中</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200708001404.png" alt="image-20200708001403097"></p><p><strong>案例 2: 将当前日历信息 追加到 /home/mycal 文件中 [提示 cal ]</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200708001738.png" alt="image-20200708001737150"></p></li></ul><h3 id="3-4-14-echo-指令"><a href="#3-4-14-echo-指令" class="headerlink" title="3.4.14 echo 指令"></a>3.4.14 echo 指令</h3><p>​ echo 输出内容到控制台。</p><ul><li><p><strong>基本语法</strong></p><p><strong>echo</strong> [选项] [输出内容]</p></li><li><p><strong>应用实例</strong></p><p><strong>案例: 使用 echo 指令输出环境变量,输出当前的环境路径。</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200708002844.png" alt="image-20200708002843661"></p></li></ul><h3 id="3-4-15-head-指令"><a href="#3-4-15-head-指令" class="headerlink" title="3.4.15 head 指令"></a>3.4.15 head 指令</h3><p>​ head 用于显示文件的开头部分内容， 默认情况下 head 指令显示文件的前 10 行内容</p><ul><li><p><strong>基本语法</strong></p><p><strong>head</strong> 文件 (功能描述： 查看文件头 10 行内容)<br><strong>head -n</strong> 5 文件 (功能描述： 查看文件头 5 行内容， 5 可以是任意行数)</p></li><li><p><strong>应用实例</strong></p><p><strong>案例: 查看/etc/profile 的前面 5 行代码</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200708003233.png" alt="image-20200708003232118"></p></li></ul><h3 id="3-4-16-tail-指令"><a href="#3-4-16-tail-指令" class="headerlink" title="3.4.16 tail 指令"></a>3.4.16 tail 指令</h3><p>​ tail 用于输出文件中尾部的内容， 默认情况下 tail 指令显示文件的后 10 行内容。</p><ul><li><p><strong>基本语法</strong></p><ol><li><strong>tail</strong> 文件 （功能描述： 查看文件后 10 行内容）</li><li><strong>tail -n</strong> 5 文件 （功能描述： 查看文件后 5 行内容， 5 可以是任意行数）</li><li><strong>tail -f</strong> 文件 （功能描述： 实时追踪该文档的所有更新， 工作经常使用）</li></ol></li><li><p><strong>应用实例</strong></p><p><strong>案例 1: 查看/etc/profile 最后 5 行的代码</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200708003649.png" alt="image-20200708003648317"></p><p><strong>案例 2: 实时监控 mydate.txt , 看看到文件有变化时， 是否看到， 实时的追加日期</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200708004030.png" alt="image-20200708004029822"></p></li></ul><h3 id="3-4-17-ln-指令"><a href="#3-4-17-ln-指令" class="headerlink" title="3.4.17 ln 指令"></a>3.4.17 ln 指令</h3><p>软链接也叫符号链接，类似于 window 里的快捷方式，主要存放了链接其他文件的路径。</p><ul><li><p><strong>基本用法</strong></p><p><strong>In -s</strong> <strong>[原文件或目录]软连接</strong>] （功能描述：给原文件创建一个软链接）</p></li><li><p><strong>应用实例</strong></p><p><strong>案例 1: 在/home 目录下创建一个软连接 linkToRoot， 连接到 /root 目录</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200713232806.png" alt="image-20200713232805422"></p><p><strong>案例 2: 删除软连接 linkToRoot</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200713233203.png" alt="image-20200713233202221"></p></li><li><p><strong>细节说明</strong></p><p>当我们使用 pwd 指令查看目录时，仍然看到的是软链接所在的目录</p></li></ul><h3 id="3-4-18-history-指令"><a href="#3-4-18-history-指令" class="headerlink" title="3.4.18 history 指令"></a>3.4.18 history 指令</h3><p>​ 查看已经执行的历史命令，也可以执行历史的指令</p><ul><li><p><strong>基本用法</strong></p><p><strong>history</strong> (功能描述：查看已经执行的历史命令)</p></li><li><p><strong>应用实例</strong></p><p><strong>案例 1: 显示所有的历史命令</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200713233732.png" alt="image-20200713233731397"></p></li></ul><p><strong>案例 2: 显示最近使用过的 10 个指令。</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200713233836.png" alt="image-20200713233835634"></p><p><strong>案例 3： 执行历史编号为 5 的指令</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200713234045.png" alt="image-20200713234044022"></p><h2 id="3-5-时间日期类"><a href="#3-5-时间日期类" class="headerlink" title="3.5 时间日期类"></a>3.5 时间日期类</h2><h3 id="3-5-1-date-指令-显示当前日期"><a href="#3-5-1-date-指令-显示当前日期" class="headerlink" title="3.5.1 date 指令-显示当前日期"></a>3.5.1 date 指令-显示当前日期</h3><ul><li><p><strong>基本用法</strong></p><p>1）date (功能描述： 显示当前时间)</p><p>2）date+%Y （功能描述：显示当前年份）</p><p>3）date +%m (功能描述： 显示当前月份)</p><p>4）date + %d (功能描述：显示当前是哪一天)</p><p>5）date”+Y-%m-%d%H:%M:%S” (功能描述： 显示年月份时分秒)</p></li><li><p><strong>应用实例</strong></p><p><strong>案例 1: 显示当前时间信息</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200713234744.png" alt="image-20200713234743533"></p><p><strong>案例 2: 显示当前时间年月日</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200713234930.png" alt="image-20200713234928229"></p><p><strong>案例 3: 显示当前时间年月日时分秒</strong></p></li></ul><p>​ <img src= "/img/loading.gif" data-lazy-src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20200713235052867.png" alt="image-20200713235052867"></p><h3 id="3-5-2-date-指令-设置日期"><a href="#3-5-2-date-指令-设置日期" class="headerlink" title="3.5.2 date 指令- 设置日期"></a>3.5.2 date 指令- 设置日期</h3><ul><li><p><strong>基本语法</strong></p><p><strong>date</strong> -s 字符串时间</p></li><li><p><strong>应用实例</strong></p><p><strong>案例 1: 设置系统当前时间 ， 比如设置成 2020-10-10 11:22:22</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200713235418.png" alt="image-20200713235354189"></p></li></ul><h3 id="3-5-3-cal-指令"><a href="#3-5-3-cal-指令" class="headerlink" title="3.5.3 cal 指令"></a>3.5.3 cal 指令</h3><p>​ 查看日历的指令</p><ul><li><p><strong>基本指令</strong></p><p>cal [选项] （功能描述）</p></li><li><p><strong>应用实例</strong></p><p><strong>案例 1: 显示当前日历</strong></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200713235703.png" alt="image-20200713235702451"></p><p>​ <strong>案例 2: 显示 2020 年日历</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200713235754.png" alt="image-20200713235753909"></p><h2 id="3-6-搜索查找类"><a href="#3-6-搜索查找类" class="headerlink" title="3.6 搜索查找类"></a>3.6 搜索查找类</h2><h3 id="3-6-1-find-指令"><a href="#3-6-1-find-指令" class="headerlink" title="3.6.1 find 指令"></a>3.6.1 find 指令</h3><p>​ find 指令将从指定目录向下递归地遍历其各个子目录， 将满足条件的文件或者目录显示在终端。</p><ul><li><p><strong>基本用法</strong></p><p><strong>find</strong> [搜索范围] [选项]</p></li><li><p><strong>选项说明</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714000106.png" alt="image-20200714000105464"></p></li><li><p><strong>应用实例</strong></p><p><strong>案例 1: 按文件名： 根据名称查找/home 目录下的 hello.txt 文件</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714000425.png" alt="image-20200714000424458"></p><p><strong>案例 2： 按拥有者： 查找/opt 目录下， 用户名称为 nobody 的文件</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714001129.png" alt="image-20200714001128962"></p><p><strong>案例 3： 查找整个 linux 系统下大于 20m 的文件（+n 大于 -n 小于 n 等于）</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714001654.png" alt="image-20200714001654034"></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714001804.png" alt="image-20200714001802697"></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714001854.png" alt="image-20200714001852987"></p></li></ul><p><strong>查询 / 目录下， 所有 .txt 的文件</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714002024.png" alt="image-20200714002023155"></p><h3 id="3-6-2-Locate-指令"><a href="#3-6-2-Locate-指令" class="headerlink" title="3.6.2 Locate 指令"></a>3.6.2 Locate 指令</h3><p>​ locaate 指令可以快速定位文件路径。 locate 指令利用事先建立的系统中所有文件名称及路径的 ocate 数据库实现快速定位给定的文件。 Locate 指令无需遍历整个文件系统， 查询速度较快。 为了保证查询结果的准确度， 管理员必须定期更新 locate 时刻。</p><ul><li><p><strong>基本语法</strong></p><p><strong>locate</strong> 搜索文件</p></li><li><p><strong>特别说明</strong></p><p>由于 locate 指令基于数据库进行查询， ==所以第一次运行前， 必须使用 updatedb 指令创建 locate 数据库。==</p></li><li><p><strong>应用案例</strong></p><p><strong>案例 1: 请使用 locate 指令快速定位 hello.txt 文件所在目录</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714002533.png" alt="image-20200714002532343"></p></li></ul><h3 id="3-6-3-grep-指令-和-管道符号"><a href="#3-6-3-grep-指令-和-管道符号" class="headerlink" title="3.6.3 grep 指令 和 管道符号"></a>3.6.3 grep 指令 和 管道符号</h3><p>​ grep 过滤查找 ， 管道符， “|”， 表示将前一个命令的处理结果输出传递给后面的命令处理。</p><ul><li><p><strong>基本用法</strong></p><p><strong>grep</strong> [选项] 查找内容</p></li><li><p><strong>常用选项</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714002838.png" alt="image-20200714002837504"></p></li><li><p><strong>应用实例</strong></p><p><strong>案例 1: 请在 hello.txt 文件中， 查找 “yes” 所在行， 并且显示行号</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714003727.png" alt="image-20200714003725265"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714003919.png" alt="image-20200714003917407"></p></li></ul><h2 id="3-7-压缩和解压类"><a href="#3-7-压缩和解压类" class="headerlink" title="3.7 压缩和解压类"></a>3.7 压缩和解压类</h2><h3 id="3-7-1-gzip-gunzip-指令"><a href="#3-7-1-gzip-gunzip-指令" class="headerlink" title="3.7.1 gzip/gunzip 指令"></a>3.7.1 gzip/gunzip 指令</h3><p>​ gzip 用于压缩文件，gunzip 用于解压</p><ul><li><p><strong>基本用法</strong></p><p><strong>gzip</strong> 文件 （功能描述）</p><p><strong>gunzip</strong> 文件 （功能描述：解压文件命令）</p></li><li><p><strong>应用实例</strong></p><p><strong>案例 1: gzip 压缩， 将 /home 下的 hello.txt 文件进行压缩</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714102152.png" alt="image-20200714102151644"></p><p><strong>案例 2: gunzip 压缩， 将 /home 下的 hello.txt.gz 文件进行解压缩</strong></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714102335.png" alt="image-20200714102332900"></p><ul><li><p><strong>细节说明</strong></p><p>当我们使用 gzip 对文件进行压缩后，捕获保留原来的文件</p></li></ul><h3 id="3-7-2-zip-unzip-指令"><a href="#3-7-2-zip-unzip-指令" class="headerlink" title="3.7.2 zip/unzip 指令"></a>3.7.2 zip/unzip 指令</h3><p>​ zip 用于压缩文件，unzip 用于解压的，这个在项目打包发布中很有用的</p><ul><li><p><strong>基本用法</strong></p><p><strong>zip</strong> [选项]XXX.zip 将要压缩地内容（功能描述：压缩文件和目录的命令）</p><p><strong>unzip</strong> [选项] XXX.zip （功能描述：解压缩文件）</p></li><li><p><strong>常用选项</strong></p><p><strong>-r</strong> 递归压缩，即压缩目录</p></li><li><p><strong>unzip 的常用选项</strong></p><p><strong>-d</strong>&lt;目录&gt;： 指定解压后文件的存放目录</p></li><li><p><strong>应用实例</strong></p><p><strong>案例 1: 将 /home 下的 所有文件进行压缩成 mypackage.zip</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714104319.png" alt="image-20200714104318947"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714104354.png" alt="image-20200714104352860"></p><p><strong>案例 2: 将 mypackge.zip 解压到 /opt/tmp 目录下</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714104629.png" alt="image-20200714104627948"></p></li></ul><h3 id="3-7-3-tar-指令"><a href="#3-7-3-tar-指令" class="headerlink" title="3.7.3 tar 指令"></a>3.7.3 tar 指令</h3><p>​ tar <strong>指令 是打包指令</strong> ，最后打包的文件是**.tar.gz** 的文件</p><ul><li><p><strong>基本语法</strong></p><p>tar [选项] XXX.tar.gz 打包的内容 （功能描述：打包目录,压缩后的文件格式.tar.gz）</p></li><li><p><strong>选项说明</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714105011.png" alt="image-20200714105010507"></p></li><li><p><strong>应用实例</strong></p><p><strong>案例 1: 压缩多个文件， 将 /home/a1.txt 和 /home/a2.txt 压缩成 a.tar.gz</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714105758.png" alt="image-20200714105757307"></p><p><strong>案例 2: 将/home 的文件夹 压缩成 myhome.tar.gz</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714105859.png" alt="image-20200714105858523"></p><p><strong>案例 3: 将 a.tar.gz 解压到当前目录</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714110053.png" alt="image-20200714110051115"></p><p><strong>案例 4: 将 myhome.tar.gz 解压到 /opt/ 目录下</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714110338.png" alt="image-20200714110338132"></p><p>==指定解压到的那个目录， 事先要存在才能成功， 否则会报错。==</p></li></ul><h1 id="第四章-组管理和权限管理"><a href="#第四章-组管理和权限管理" class="headerlink" title="第四章 组管理和权限管理"></a>第四章 组管理和权限管理</h1><h2 id="4-1-Linux-组基本介绍"><a href="#4-1-Linux-组基本介绍" class="headerlink" title="4.1 Linux 组基本介绍"></a>4.1 Linux 组基本介绍</h2><p>​ 在 linux 中的每个用户必须属于一个组， 不能独立于组外。 在 linux 中每个文件有所有者、 所在组、 其它组的概念。<br>​ 1) 所有者<br>​ 2) 所在组<br>​ 3) 其它组<br>​ 4) 改变用户所在的组</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714110745.png" alt="image-20200714110744377"></p><h2 id="4-2-文件-目录-所有者"><a href="#4-2-文件-目录-所有者" class="headerlink" title="4.2 文件/目录 所有者"></a>4.2 文件/目录 所有者</h2><h3 id="4-2-1-查看文件的所有者"><a href="#4-2-1-查看文件的所有者" class="headerlink" title="4.2.1 查看文件的所有者"></a>4.2.1 查看文件的所有者</h3><ol><li><p>指令： ls -ahl</p></li><li><p><strong>应用实例：</strong>创建一个组 polic，在创建一个用户 tom，将 tom 放在 polic 组，然后使用 tom 来创建一个文件 ok.txt,看看情况如何</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714111936.png" alt="image-20200714111935042"></p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714112326.png" alt="image-20200714112325738"></p><h3 id="4-2-3-修改文件所有者"><a href="#4-2-3-修改文件所有者" class="headerlink" title="4.2.3 修改文件所有者"></a>4.2.3 修改文件所有者</h3><ul><li><p><strong>指令</strong></p><p><strong>chown</strong> 用户名 文件名</p></li><li><p><strong>应用实例</strong></p><p>要求： 使用 root 创建一个文件 apple.txt，然后将其所有者修改成 tom</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714112822.png" alt="image-20200714112821153"></p></li></ul><h2 id="4-3-组的创建"><a href="#4-3-组的创建" class="headerlink" title="4.3 组的创建"></a>4.3 组的创建</h2><h3 id="4-3-1-基本指令"><a href="#4-3-1-基本指令" class="headerlink" title="4.3.1 基本指令"></a>4.3.1 基本指令</h3><p>​ <strong>groupadd</strong> 组名</p><h3 id="4-3-2-应用实例"><a href="#4-3-2-应用实例" class="headerlink" title="4.3.2 应用实例"></a>4.3.2 应用实例</h3><p>​ 创建一个组，monster</p><p>​ 创建一个用户 fox , 并放入到 monster 组中</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714113130.png" alt="image-20200714113128197"></p><h2 id="4-4-文件-目录-所在组"><a href="#4-4-文件-目录-所在组" class="headerlink" title="4.4 文件/目录 所在组"></a>4.4 文件/目录 所在组</h2><p>​ 当某个用户创建了一个文件后， 默认这个文件的所在组就是该用户所在的组。</p><h3 id="4-4-1-查看文件-目录所在组"><a href="#4-4-1-查看文件-目录所在组" class="headerlink" title="4.4.1 查看文件/目录所在组"></a>4.4.1 查看文件/目录所在组</h3><ul><li><p><strong>基本指令</strong></p><p><strong>ls -alh</strong></p></li></ul><h3 id="4-4-2-修改文件所在的组"><a href="#4-4-2-修改文件所在的组" class="headerlink" title="4.4.2 修改文件所在的组"></a>4.4.2 修改文件所在的组</h3><ul><li><p><strong>基本指令</strong></p><p>chgrp 组名 文件名</p></li><li><p><strong>应用实例</strong></p><p>使用 root 用户创建文件 orange.txt ,看看当前这个文件属于哪个组， 然后将这个文件所在组， 修改到 police 组。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714113854.png" alt="image-20200714113853636"></p></li></ul><h2 id="4-5-其它组"><a href="#4-5-其它组" class="headerlink" title="4.5 其它组"></a>4.5 其它组</h2><p>​ 除文件的所有者和所在组的用户外， 系统的其它用户都是文件的其它组.</p><h2 id="4-6-改变用户所在组"><a href="#4-6-改变用户所在组" class="headerlink" title="4.6 改变用户所在组"></a>4.6 改变用户所在组</h2><p>​ 在添加用户时， 可以指定将该用户添加到哪个组中， 同样的用 root 的管理权限可以改变某个用户所在的组。</p><h3 id="4-6-1-改变用户所在组"><a href="#4-6-1-改变用户所在组" class="headerlink" title="4.6.1 改变用户所在组"></a>4.6.1 改变用户所在组</h3><ol><li>​ usermod - g 组名 用户名</li><li>​ usermod -d 目录名 用户名 改变该用户登陆的初始目录</li></ol><h3 id="4-6-2-应用实例"><a href="#4-6-2-应用实例" class="headerlink" title="4.6.2 应用实例"></a>4.6.2 应用实例</h3><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714114740.png" alt="image-20200714114739471"></p><h2 id="4-7-权限的基本介绍"><a href="#4-7-权限的基本介绍" class="headerlink" title="4.7 权限的基本介绍"></a>4.7 权限的基本介绍</h2><p>​ ls -l 中显示的内容如下：</p><p>​ <strong>-rwxrw-r–</strong> 1 root root 1213 Feb 2 09:39 abc</p><p>​ ==<strong>0-9 位说明</strong>==</p><ol><li>第 0 位确定文件类型(d, -, c, b)</li><li>第 1-3 位确定所有者（该文件的所有者）拥有该文件的权限。 —User</li><li>第 4-6 位确定所属组（同用户组的） 拥有该文件的权限， —Group</li><li>第 7-9 位确定其他用户拥有该文件的权限 —Other</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714115223.png" alt="image-20200714115222643"></p><h2 id="4-8-rwx-权限的详解"><a href="#4-8-rwx-权限的详解" class="headerlink" title="4.8 rwx 权限的详解"></a>4.8 rwx 权限的详解</h2><h3 id="4-8-1-rwx-作用到文件"><a href="#4-8-1-rwx-作用到文件" class="headerlink" title="4.8.1 rwx 作用到文件"></a>4.8.1 rwx 作用到文件</h3><ol><li>[ r ]代表可读(read): 可以读取,查看</li><li>[ w ]代表可写(write): 可以修改,但是不代表可以删除该文件,删除一个文件的前提条件是对该文件所在的目录有写权限， 才能删除该文件</li><li>[ x ]代表可执行(execute):可以被执行</li></ol><h3 id="4-8-2-rwx-作用到目录"><a href="#4-8-2-rwx-作用到目录" class="headerlink" title="4.8.2 rwx 作用到目录"></a>4.8.2 rwx 作用到目录</h3><ol><li>[ r ]代表可读(read): 可以读取， ls 查看目录内容</li><li>[ w ]代表可写(write): 可以修改,目录内创建+删除+重命名目录</li><li>[ x ]代表可执行(execute):可以进入该目录</li></ol><h2 id="4-9-文件及目录权限的实际案例"><a href="#4-9-文件及目录权限的实际案例" class="headerlink" title="4.9 文件及目录权限的实际案例"></a>4.9 文件及目录权限的实际案例</h2><p>​ ls -l 中显示的内容如下： ==(记住)==</p><p>​ <strong>-rwxrw-r– 1 root root 1213 Feb 2 09:39 abc</strong></p><p><strong>10 个字符确定不同用户能对文件干什么</strong></p><p>​ 第一个字符代表文件类型： 文件 (-),目录(d),链接(l)<br>​ 其余字符每 3 个一组(rwx) 读(r) 写(w) 执行(x)<br>​ 第一组 rwx : 文件拥有者的权限是读、 写和执行<br>​ 第二组 rw- : 与文件拥有者同一组的用户的权限是读、 写但不能执行<br>​ 第三组 r– : 不与文件拥有者同组的其他用户的权限是读不能写和执行</p><p><strong>可用数字表示为: r=4,w=2,x=1 因此 rwx=4+2+1=7</strong></p><table><thead><tr><th>1</th><th>文件： 硬连接数或 目录： 子目录数</th></tr></thead><tbody><tr><td>root</td><td>用户</td></tr><tr><td>root</td><td>组</td></tr><tr><td>1213</td><td>文件大小(字节)， 如果是文件夹， 显示 4096 字节</td></tr><tr><td>Feb 2 09:39</td><td>最后修改日期</td></tr><tr><td>abc</td><td>文件名</td></tr></tbody></table><h2 id="4-10-修改权限-chmod"><a href="#4-10-修改权限-chmod" class="headerlink" title="4.10. 修改权限-chmod"></a>4.10. 修改权限-chmod</h2><h3 id="4-10-1-基本说明"><a href="#4-10-1-基本说明" class="headerlink" title="4.10.1 基本说明"></a>4.10.1 基本说明</h3><p>​ 通过 chmod 指令，可以修改文件或者目录的权限</p><h3 id="4-10-2-第一种方式：-、-、-变更权限"><a href="#4-10-2-第一种方式：-、-、-变更权限" class="headerlink" title="4.10.2 第一种方式： + 、-、= 变更权限"></a>4.10.2 第一种方式： + 、-、= 变更权限</h3><p>​ u ： 所有者 g: 所有组 o:其他人 a:所有人（u、g、o 的总和）</p><ol><li>chmod u= rwx , g = rx , o=x 文件目录名</li><li>chmod o+w 文件目录名</li><li>chmod a-x 文件目录名</li></ol><ul><li><p><strong>案例演示</strong></p><ol><li><strong>给 abc 文件 的==所有者读写执行的权限==， 给==所在组读执行权限==， 给其它组读执行权限。</strong></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714121720.png" alt="image-20200714121719548"></p><ol start="2"><li><p><strong>给 abc 文件的所有者除去执行的权限， 增加组写的权限</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714121920.png" alt="image-20200714121919294"></p></li></ol></li></ul><h3 id="4-10-3-第二种方式：-通过数字变更权限"><a href="#4-10-3-第二种方式：-通过数字变更权限" class="headerlink" title="4.10.3 第二种方式： 通过数字变更权限"></a>4.10.3 第二种方式： 通过数字变更权限</h3><p>​ <strong>规则：</strong></p><p>​ r=4 w=2 x=1 rwx=4+2+1=7</p><p>​ chmod u=rwx,g=rx,o=x 文件目录名</p><p>​ 相当于 chmod 751 文件目录名</p><ul><li><p><strong>案例演示</strong></p><p><strong>要求： 将 /home/abc.txt 文件的权限修改成 rwxr-xr-x, 使用给数字的方式实现：</strong></p><p><strong>rwx = 4+2+1 = 7 r-x = 4+1=5 r-x = 4+1 =5</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714122647.png" alt="image-20200714122646171"></p></li></ul><h2 id="4-11-修改文件所有者-chown"><a href="#4-11-修改文件所有者-chown" class="headerlink" title="4.11 修改文件所有者-chown"></a>4.11 修改文件所有者-chown</h2><h3 id="4-11-1-基本介绍"><a href="#4-11-1-基本介绍" class="headerlink" title="4.11.1 基本介绍"></a>4.11.1 基本介绍</h3><p>​ <strong>chown newowner file</strong> 改变文件的所有者</p><p>​ <strong>chown newowner:newgroup file</strong> 改变用户的所有者和所有组</p><p>​ <strong>-R</strong> 如果是目录 则使其下所有的子文件或目录递归生效</p><h3 id="4-11-2-案例演示"><a href="#4-11-2-案例演示" class="headerlink" title="4.11.2 案例演示"></a>4.11.2 案例演示</h3><p>​ 1. <strong>请将 /home/abc .txt 文件的所有者修改成 tom</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714123430.png" alt="image-20200714123428050"></p><pre><code>2. 请将 /home/kkk 目录下所有的文件和目录的所有者都修改成 tom  ![image-20200714123616286](https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714123617.png)</code></pre><h2 id="4-12-修改文件所在组-chgrp"><a href="#4-12-修改文件所在组-chgrp" class="headerlink" title="4.12 修改文件所在组-chgrp"></a>4.12 修改文件所在组-chgrp</h2><h3 id="4-12-1-基本介绍"><a href="#4-12-1-基本介绍" class="headerlink" title="4.12.1 基本介绍"></a>4.12.1 基本介绍</h3><p>​ <strong>chgrp newgroup file</strong> 改变文件的所有组</p><h3 id="4-12-2-案例演示"><a href="#4-12-2-案例演示" class="headerlink" title="4.12.2 案例演示"></a>4.12.2 案例演示</h3><p>​ 1.<strong>请将 /home/abc .txt 文件的所在组修改成 bandit (土匪)</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714124258.png" alt="image-20200714124255800"></p><p>​ 2**.请将 /home/kkk 目录下所有的文件和目录的所在组都修改成 bandit(土匪)**</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714124449.png" alt="image-20200714124447588"></p><h2 id="4-13-实战练习"><a href="#4-13-实战练习" class="headerlink" title="4.13 实战练习"></a>4.13 实战练习</h2><p><strong>题目：</strong> <strong>最佳实践-警察和土匪游戏</strong></p><p>​ police ， bandit</p><p>​ jack, jerry: 警察<br>​ xh, xq: 土匪</p><p><strong>(1) 创建组</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714124920.png" alt="image-20200714124919507"></p><p><strong>(2) 创建用户</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714125102.png" alt="image-20200714125102237"></p><p>同时给 4 个用户设置密码：（示例）</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714125149.png" alt="image-20200714125148533"></p><p><strong>(3) jack 创建一个文件， 自己可以读写， 本组人可以读， 其它组没人任何权限</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714130753.png" alt="image-20200714130751547"></p><p><strong>(4) jack 修改该文件， 让其它组人可以读, 本组人可以读写</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714131046.png" alt="image-20200714131045468"></p><p><strong>(5) xh 投靠 警察， 看看是否可以读写.</strong></p><p>先用 root 修改 xh 的组 ：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714131215.png" alt="image-20200714131212914"></p><p>使用 jack 给他的家目录 /home/jack 的所在组一个 rx 的权限</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714131539.png" alt="image-20200714131538667"></p><p>xh 需要重新注销在到 jack 目录就可以操作 jack 的文件 <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714132020.png" alt="image-20200714132019715"></p><h1 id="第五章-crond-任务调度"><a href="#第五章-crond-任务调度" class="headerlink" title="第五章 crond 任务调度"></a>第五章 crond 任务调度</h1><h2 id="5-1-原理示意图"><a href="#5-1-原理示意图" class="headerlink" title="5.1 原理示意图"></a>5.1 原理示意图</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714233238.png" alt="image-20200714233237708"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714233256.png" alt="image-20200714233255262"></p><p><strong>crontab 进行 定时任务的设置</strong></p><h2 id="5-2-基本语法"><a href="#5-2-基本语法" class="headerlink" title="5.2 基本语法"></a>5.2 基本语法</h2><p>​ <strong>crontab</strong> [选项]</p><h3 id="5-2-1-常用选项"><a href="#5-2-1-常用选项" class="headerlink" title="5.2.1 常用选项"></a>5.2.1 常用选项</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714233559.png" alt="image-20200714233559033"></p><h2 id="5-3-快速入门"><a href="#5-3-快速入门" class="headerlink" title="5.3 快速入门"></a>5.3 快速入门</h2><h3 id="5-3-1-任务的要求"><a href="#5-3-1-任务的要求" class="headerlink" title="5.3.1 任务的要求"></a>5.3.1 任务的要求</h3><p>​ 设置任务的调度文件： /ect/crontab</p><p>​ 设置个人任务调度。执行 crontab -e 命令</p><p>​ 接着输入任务到调度文件</p><p>​ 如： _/1 _ * * * ls – l /etc/ &gt; /tmp/to.txt<br>​ 意思说每小时的每分钟执行 ls – l /etc/ &gt; /tmp/to.txt 命令</p><h3 id="5-3-2-步骤如下"><a href="#5-3-2-步骤如下" class="headerlink" title="5.3.2 步骤如下"></a>5.3.2 步骤如下</h3><ol><li>cron -e</li><li>_/ 1 _ * * * ls -l /etc &gt;&gt; /tmp/to.txt</li><li>保存退出就会启动程序。</li><li>在每一分钟都会自动保存的调用 ls -l /etc &gt;&gt; /tmp/to.txt</li></ol><h3 id="5-3-3-参数细节说明"><a href="#5-3-3-参数细节说明" class="headerlink" title="5.3.3 参数细节说明"></a>5.3.3 参数细节说明</h3><ul><li>5<strong>个占位符的说明</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714235832.png" alt="image-20200714235831711"></p><ul><li><p><strong>特殊符号说明</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200714235929.png" alt="image-20200714235924290"></p></li><li><p><strong>特定时间执行任务案例</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200715000051.png" alt="image-20200715000050290"></p></li></ul><h2 id="5-4-任务调度的几个使用案例"><a href="#5-4-任务调度的几个使用案例" class="headerlink" title="5.4 任务调度的几个使用案例"></a>5.4 任务调度的几个使用案例</h2><h3 id="5-4-1-案例-1："><a href="#5-4-1-案例-1：" class="headerlink" title="5.4.1 案例 1："></a>5.4.1 案例 1：</h3><p><strong>每隔 1 分钟，就将当前的日期信息，追加到/tmp/mydate 文件中</strong></p><ol><li>先编写一个文件 /home/mytask1.sh<br>date &gt;&gt; /tmp/mydate</li><li>给 mytask1.sh 一个可以执行权限<br>chmod 744 /home/mytask1.sh</li><li>crontab -e</li><li>_/1 _ * * * /home/mytask1.sh</li><li>成功</li></ol><h3 id="5-4-2-案例-2："><a href="#5-4-2-案例-2：" class="headerlink" title="5.4.2 案例 2："></a>5.4.2 案例 2：</h3><p><strong>每隔 1 分钟， 将当前日期和日历都追加到 /home/mycal 文件中</strong></p><p>1.先编写一个文件 /home/mytask2.sh<br>date &gt;&gt; /tmp/mycal<br>cal &gt;&gt; /tmp/mycal</p><ol start="2"><li>给 mytask1.sh 一个可以执行权限<br>chmod 744 /home/mytask2.sh</li><li>crontab -e</li><li>_/1 _ * * * /home/mytask2.sh</li><li>成功</li></ol><h3 id="5-4-3-案例-3"><a href="#5-4-3-案例-3" class="headerlink" title="5.4.3 案例 3:"></a>5.4.3 案例 3:</h3><p><strong>每天凌晨 2:00 将 mysql 数据库 testdb ， 备份到文件中 mydb.bak。</strong></p><ol><li>先编写一个文件 /home/mytask3.sh<br>/usr/local/mysql/bin/mysqldump -u root -proot testdb &gt; /tmp/mydb.bak</li><li>给 mytask3.sh 一个可以执行权限<br>chmod 744 /home/mytask3.sh</li><li>crontab -e</li><li>0 2 * * * /home/mytask3.sh</li><li>成功</li></ol><h2 id="5-5-crond-相关指令"><a href="#5-5-crond-相关指令" class="headerlink" title="5.5 crond 相关指令"></a>5.5 crond 相关指令</h2><ol><li><strong>crontab -r</strong> : 终止任务调度。</li><li><strong>crontab -l</strong> : 列出当前有哪些任务调度</li><li><strong>service crond restart</strong> : [重启任务调度]</li></ol><h1 id="第六章-Linux-磁盘分区、挂载"><a href="#第六章-Linux-磁盘分区、挂载" class="headerlink" title="第六章 Linux 磁盘分区、挂载"></a>第六章 Linux 磁盘分区、挂载</h1><h2 id="6-1-分区基础知识"><a href="#6-1-分区基础知识" class="headerlink" title="6.1 分区基础知识"></a>6.1 分区基础知识</h2><h3 id="6-1-1-分区的方式"><a href="#6-1-1-分区的方式" class="headerlink" title="6.1.1 分区的方式"></a>6.1.1 分区的方式</h3><p><strong>mbr 分区</strong></p><ol><li>最多支持四个主分区</li><li>系统只能安装在主分区</li><li>扩展分区要占一个主分区</li><li>MBR 最大只支持 2TB， 但拥有最好的兼容性</li></ol><p><strong>gtp 分区</strong></p><ol><li>支持无限多个主分区（但操作系统可能限制， 比如 windows 下最多 128 个分区）</li><li>最大支持 18EB 的大容量（1EB=1024 PB， 1PB=1024 TB ）</li><li>windows7 64 位以后支持 gtp</li></ol><h2 id="6-2-Linux-分区"><a href="#6-2-Linux-分区" class="headerlink" title="6.2 Linux 分区"></a>6.2 Linux 分区</h2><h3 id="6-2-1-原理介绍"><a href="#6-2-1-原理介绍" class="headerlink" title="6.2.1 原理介绍"></a>6.2.1 原理介绍</h3><ol><li><p>Linux 来说无论有几个分区， 分给哪一目录使用， 它归根结底就只有一个根目录， 一个独立且唯一的文件结构 , Linux 中每个分区都是用来组成整个文件系统的一部分。</p></li><li><p>Linux 采用了一种叫“载入” 的处理方法， 它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。 这时要载入的一个分区将使它的存储空间在一个目录下获得。</p></li><li><p><strong>示意图：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716110138982.png" alt="image-20200716110138982"></p></li></ol><h3 id="6-2-2-硬盘说明"><a href="#6-2-2-硬盘说明" class="headerlink" title="6.2.2 硬盘说明"></a>6.2.2 硬盘说明</h3><ol><li> Linux 硬盘分 IDE 硬盘和 SCSI 硬盘， 目前基本上是 SCSI 硬盘</li><li> 对于 IDE 硬盘， 驱动器标识符为“hdx<del>”,其中“hd”表明分区所在设备的类型， 这里是指 IDE 硬盘了。 “x”为盘号（a 为基本盘， b 为基本从属盘， c 为辅助主盘， d 为辅助从属盘） ,“</del>”代表分区，前四个分区用数字 1 到 4 表示， 它们是主分区或扩展分区， 从 5 开始就是逻辑分区。 例， hda3 表示为第一个 IDE 硬盘上的第三个主分区或扩展分区,hdb2 表示为第二个 IDE 硬盘上的第二个主分区或扩展分区。</li><li> 对于 SCSI 硬盘则标识为“sdx~”， SCSI 硬盘是用“sd”来表示分区所在设备的类型的， 其余则和 IDE 硬盘的表示方法一样。</li></ol><h3 id="6-2-3-使用-lsblk-指令查看当前系统的分区情况"><a href="#6-2-3-使用-lsblk-指令查看当前系统的分区情况" class="headerlink" title="6.2.3 使用 lsblk 指令查看当前系统的分区情况"></a>6.2.3 使用 lsblk 指令查看当前系统的分区情况</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716111042744.png" alt="image-20200716111042744"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716111125821.png" alt="image-20200716111125821"></p><h2 id="6-3-挂载的经典案例"><a href="#6-3-挂载的经典案例" class="headerlink" title="6.3 挂载的经典案例"></a>6.3 挂载的经典案例</h2><p><strong>需求是给我们的 Linux 系统增加一个新的硬盘， 并且挂载到/home/newdisk</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716111804631.png" alt="image-20200716111804631"></p><h3 id="6-3-1-如何增加一块硬盘"><a href="#6-3-1-如何增加一块硬盘" class="headerlink" title="6.3.1 如何增加一块硬盘"></a>6.3.1 如何增加一块硬盘</h3><ol><li><p>虚拟机添加硬盘</p></li><li><p>分区 fdisk /dev/sdb</p></li><li><p>格式化 mkfs -t ext4 /dev/sdb1</p></li><li><p>挂载 先创建一个 /home/newdisk , 挂载 mount /dev/sdb1 /home/newdisk</p></li><li><p>设置可以自动挂载(永久挂载， 当你重启系统， 仍然可以挂载到 /home/newdisk) 。</p><p>vim /etc/fstab<br>/dev/sdb1 /home/newdisk ext4 defaults 0 0</p></li></ol><h2 id="6-4-具体的操作步骤整理"><a href="#6-4-具体的操作步骤整理" class="headerlink" title="6.4 具体的操作步骤整理"></a>6.4 具体的操作步骤整理</h2><h3 id="6-4-1-虚拟机增加硬盘步骤-1"><a href="#6-4-1-虚拟机增加硬盘步骤-1" class="headerlink" title="6.4.1 虚拟机增加硬盘步骤 1"></a>6.4.1 虚拟机增加硬盘步骤 1</h3><p>​ 在【虚拟机】 菜单中， 选择【设置】 ， 然后设备列表里添加硬盘， 然后一路【下一步】 ， 中间只选择磁盘大小的地方需要修改， 至到完成。 然后重启系统（才能识别） ！</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716114951454.png" alt="image-20200716114951454"></p><h3 id="6-4-2-虚拟机增加硬盘步骤-2"><a href="#6-4-2-虚拟机增加硬盘步骤-2" class="headerlink" title="6.4.2 虚拟机增加硬盘步骤 2"></a>6.4.2 虚拟机增加硬盘步骤 2</h3><p>​ 分区命令 fdisk /dev/sdb<br>​ 开始对/sdb 分区<br>​ •m 显示命令列表<br>​ •p 显示磁盘分区 同 fdisk – l<br>​ •n 新增分区<br>​ •d 删除分区<br>​ •w 写入并退出</p><p>**==说明：==**开始分区后输入 n， 新增分区， 然后选择 p ， 分区类型为主分区。 两次回车默认剩余全部空间。 最后输入 w 写入分区并退出， 若不保存退出输入 q。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716115128699.png" alt="image-20200716115128699"></p><h3 id="6-4-3-虚拟机增加硬盘步骤-3"><a href="#6-4-3-虚拟机增加硬盘步骤-3" class="headerlink" title="6.4.3 虚拟机增加硬盘步骤 3"></a>6.4.3 虚拟机增加硬盘步骤 3</h3><p>​ 格式化磁盘</p><p>​ 分区命令:mkfs -t ext4 /dev/sdb1<br>​ 其中 ext4 是分区类型</p><h3 id="6-4-4-虚拟机增加硬盘步骤-4"><a href="#6-4-4-虚拟机增加硬盘步骤-4" class="headerlink" title="6.4.4 虚拟机增加硬盘步骤 4"></a>6.4.4 虚拟机增加硬盘步骤 4</h3><p>​ 挂载: 将一个分区与一个目录联系起来，<br>​ •mount 设备名称 挂载目录<br>​ •例如： mount /dev/sdb1 /newdisk<br>​ •==umount 设备名称 或者 挂载目录==</p><h3 id="6-4-5-虚拟机增加硬盘步骤-5"><a href="#6-4-5-虚拟机增加硬盘步骤-5" class="headerlink" title="6.4.5 虚拟机增加硬盘步骤 5"></a>6.4.5 虚拟机增加硬盘步骤 5</h3><p>​ 永久挂载: 通过修改/etc/fstab 实现挂载<br>​ 添加完成后 执行 mount – a 即刻生效</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716115319818.png" alt="image-20200716115319818"></p><h2 id="6-5-磁盘情况查询"><a href="#6-5-磁盘情况查询" class="headerlink" title="6.5 磁盘情况查询"></a>6.5 磁盘情况查询</h2><h3 id="6-5-1-查询系统整体磁盘使用情况"><a href="#6-5-1-查询系统整体磁盘使用情况" class="headerlink" title="6.5.1 查询系统整体磁盘使用情况"></a>6.5.1 查询系统整体磁盘使用情况</h3><ul><li><p><strong>基本语法</strong></p><p><strong>df -h</strong></p></li><li><p><strong>应用实例</strong></p><p>查询系统整体磁盘使用情况</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716115832997.png" alt="image-20200716115832997"></p></li></ul><h3 id="6-5-2-查询指定目录的磁盘占用情况"><a href="#6-5-2-查询指定目录的磁盘占用情况" class="headerlink" title="6.5.2 查询指定目录的磁盘占用情况"></a>6.5.2 查询指定目录的磁盘占用情况</h3><ul><li><p><strong>基本语法</strong></p><p><strong>du -h</strong> / 目录</p><p>查询指定目录的磁盘占用情况， 默认为当前目录</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>-s</td><td>指定目录占用大小汇总</td></tr><tr><td>-h</td><td>带计量单位</td></tr><tr><td>-a</td><td>含文件</td></tr><tr><td>–max-depth=1</td><td>子目录深度</td></tr><tr><td>-c</td><td>列出明细的同时， 增加汇总值</td></tr></tbody></table></li></ul><h3 id="6-6-磁盘情况-工作实用指令"><a href="#6-6-磁盘情况-工作实用指令" class="headerlink" title="6.6 磁盘情况-工作实用指令"></a>6.6 磁盘情况-工作实用指令</h3><ol><li><p><strong>统计/home 文件夹下文件的个数</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716120414567.png" alt="image-20200716120414567"></p></li><li><p><strong>统计/home 文件夹下目录的个数</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716120602354.png" alt="image-20200716120602354"></p></li><li><p><strong>统计/home 文件夹下文件的个数， 包括子文件夹里的</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716120722475.png" alt="image-20200716120722475"></p></li><li><p><strong>统计文件夹下目录的个数， 包括子文件夹里的</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716120936908.png" alt="image-20200716120936908"></p></li><li><p><strong>以树状显示目录结构</strong> （CenOS 7）</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716121248128.png" alt="image-20200716121248128"></p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716121347618.png" alt="image-20200716121347618"></p><h1 id="第七章-网络配置"><a href="#第七章-网络配置" class="headerlink" title="第七章 网络配置"></a>第七章 网络配置</h1><h2 id="7-1-Linux-网络配置原理图-含虚拟机"><a href="#7-1-Linux-网络配置原理图-含虚拟机" class="headerlink" title="7.1 Linux 网络配置原理图(含虚拟机)"></a>7.1 Linux 网络配置原理图(含虚拟机)</h2><p><strong>目前我们的网络配置采用的是 NAT。</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716125541980.png" alt="image-20200716125541980"></p><h2 id="7-2-查看网络-IP-和网关"><a href="#7-2-查看网络-IP-和网关" class="headerlink" title="7.2 查看网络 IP 和网关"></a>7.2 查看网络 IP 和网关</h2><h3 id="7-2-1-查看虚拟网络编辑器"><a href="#7-2-1-查看虚拟网络编辑器" class="headerlink" title="7.2.1 查看虚拟网络编辑器"></a>7.2.1 查看虚拟网络编辑器</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716125906761.png" alt="image-20200716125906761"></p><h3 id="7-2-2-修改-ip-地址-修改虚拟网络的-ip"><a href="#7-2-2-修改-ip-地址-修改虚拟网络的-ip" class="headerlink" title="7.2.2 修改 ip 地址(修改虚拟网络的 ip)"></a>7.2.2 修改 ip 地址(修改虚拟网络的 ip)</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716130339488.png" alt="image-20200716130339488"></p><h3 id="7-2-3-查看网关"><a href="#7-2-3-查看网关" class="headerlink" title="7.2.3 查看网关"></a>7.2.3 查看网关</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716130444151.png" alt="image-20200716130444151"></p><h3 id="7-2-4-查看-windows-环境的中-VMnet8-网络配置-ipconfig-指令"><a href="#7-2-4-查看-windows-环境的中-VMnet8-网络配置-ipconfig-指令" class="headerlink" title="7.2.4 查看 windows 环境的中 VMnet8 网络配置 (ipconfig 指令)"></a>7.2.4 查看 windows 环境的中 VMnet8 网络配置 (ipconfig 指令)</h3><ol><li><p> 使用 ipconfig 查看</p></li><li><p>界面查看</p><p> <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716131037431.png" alt="image-20200716131037431"></p></li></ol><h2 id="7-3-ping-测试主机之间网络连通"><a href="#7-3-ping-测试主机之间网络连通" class="headerlink" title="7.3 ping 测试主机之间网络连通"></a>7.3 ping 测试主机之间网络连通</h2><h3 id="7-3-1-基本语法"><a href="#7-3-1-基本语法" class="headerlink" title="7.3.1 基本语法"></a>7.3.1 基本语法</h3><p>​ <strong>ping</strong> 目的主机 （功能描述： 测试当前服务器是否可以连接目的主机）</p><h3 id="7-3-2-应用实例"><a href="#7-3-2-应用实例" class="headerlink" title="7.3.2 应用实例"></a>7.3.2 应用实例</h3><p>​ <strong>测试当前服务器是否可以连接百度</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716131643211.png" alt="image-20200716131643211"></p><h2 id="7-4-linux-网络环境配置"><a href="#7-4-linux-网络环境配置" class="headerlink" title="7.4 linux 网络环境配置"></a>7.4 linux 网络环境配置</h2><h3 id="7-4-1-指定固定的-ip"><a href="#7-4-1-指定固定的-ip" class="headerlink" title="7.4.1 指定固定的 ip"></a>7.4.1 指定固定的 ip</h3><p><strong>说明</strong></p><p>​ 直 接 修 改 配 置 文 件 来 指 定 IP, 并 可 以 连 接 到 外 网 ( 程 序 员 推 荐 ) ， 编 辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi  /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><p><strong>要求： 将 ip 地址配置的静态的， ip 地址为 192.168.184.130</strong> (IP 地址参看自己的)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig //在Linux终端即可查看</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716162207894.png" alt="image-20200716162207894"></p><p><strong>修改后， 一定要 ==重启服务==</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot 重启系统</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716162338058.png" alt="image-20200716162338058"></p><h1 id="第八章-进程管理"><a href="#第八章-进程管理" class="headerlink" title="第八章 进程管理"></a>第八章 进程管理</h1><h2 id="8-1-显示系统执行的进程"><a href="#8-1-显示系统执行的进程" class="headerlink" title="8.1 显示系统执行的进程"></a>8.1 显示系统执行的进程</h2><h3 id="8-1-1-说明"><a href="#8-1-1-说明" class="headerlink" title="8.1.1 说明"></a>8.1.1 说明</h3><p>​ 查看进行使用的指令是 ps ,一般来说使用的参数是 <strong>ps -aux</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716162932629.png" alt="image-20200716162932629"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716162953140.png" alt="image-20200716162953140"></p><h3 id="8-1-2-ps-指令详解"><a href="#8-1-2-ps-指令详解" class="headerlink" title="8.1.2 ps 指令详解"></a>8.1.2 ps 指令详解</h3><ol><li><p>指令： ps – aux|grep xxx ， 比如我看看有没有 sshd 服务</p></li><li><p>指令说明</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>System V</td><td>展示风格</td></tr><tr><td>USER</td><td>用户名称</td></tr><tr><td>PID</td><td>进程号</td></tr><tr><td>%CPU</td><td>进程占用 CPU 的百分比</td></tr><tr><td>%MEM</td><td>进程占用物理内存的百分比</td></tr><tr><td>VSZ</td><td>进程占用的虚拟内存大小（单位： KB）</td></tr><tr><td>RSS</td><td>进程占用的物理内存大小（单位： KB）</td></tr><tr><td>TT</td><td>终端名称,缩写</td></tr><tr><td>STAT</td><td>进程状态， 其中 S-睡眠， s-表示该进程是会话的先导进程， N-表示进程拥有比普通优先级更低的优先级， R-正在运行， D-短期等待， Z-僵死进程， T-被跟踪或者被停止等等</td></tr><tr><td>STARTED</td><td>进程的启动时间</td></tr><tr><td>TIME</td><td>CPU 时间， 即进程使用 CPU 的总时间</td></tr><tr><td>COMMAND</td><td>启动进程所用的命令和参数， 如果过长会被截断显示</td></tr></tbody></table></li></ol><h3 id="8-1-3-应用实例"><a href="#8-1-3-应用实例" class="headerlink" title="8.1.3 应用实例"></a>8.1.3 应用实例</h3><ul><li><strong>要求： 以全格式显示当前所有的进程， 查看进程的父进程。</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716163908090.png" alt="image-20200716163908090"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef 是以全格式显示当前所有的进程</span><br><span class="line">-e 显示所有进程。 -f 全格式</span><br></pre></td></tr></table></figure><ul><li><strong>ps -ef| grep xxx 是 BSD 风格</strong></li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>UID</td><td>用户 ID</td></tr><tr><td>PID</td><td>进程 ID</td></tr><tr><td>PPID</td><td>父进程 ID</td></tr><tr><td>C</td><td>CPU 用于计算执行优先级的因子。 数值越大， 表明进程是 CPU 密集型运算， 执行优先级会<br/>降低； 数值越小， 表明进程是 I/O 密集型运算， 执行优先级会提高</td></tr><tr><td>STIME</td><td>进程启动的时间</td></tr><tr><td>TTY</td><td>完整的终端名称</td></tr><tr><td>TIME</td><td>CPU 时间</td></tr><tr><td>CMD</td><td>启动进程所用的命令和参数</td></tr></tbody></table><ul><li><strong>要求：查看 sshd 进程的父进程号是多少， 应该怎样查询</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716164558921.png" alt="image-20200716164558921"></p><h2 id="8-2-终止进程-kill-和-killall"><a href="#8-2-终止进程-kill-和-killall" class="headerlink" title="8.2 终止进程 kill 和 killall"></a>8.2 终止进程 kill 和 killall</h2><h3 id="8-2-1-介绍"><a href="#8-2-1-介绍" class="headerlink" title="8.2.1 介绍:"></a>8.2.1 介绍:</h3><p>​ 若是某个进程执行一半需要停止时， 或是已消了很大的系统资源时， 此时可以考虑停止该进程。使用 kill 命令来完成此项任务。</p><h3 id="8-2-1-基本语法"><a href="#8-2-1-基本语法" class="headerlink" title="8.2.1 基本语法"></a>8.2.1 基本语法</h3><p>​ <strong>kill</strong> [选项] 进程号（功能描述： 通过进程号杀死进程）</p><p>​ <strong>killall</strong> 进程名称 （功能描述： 通过进程名称杀死进程， 也支持通配符， 这在系统因负载过大而变得很慢时很有用）</p><h3 id="8-2-2-常用选项"><a href="#8-2-2-常用选项" class="headerlink" title="8.2.2 常用选项"></a>8.2.2 常用选项</h3><p>​ <strong>-9</strong> :表示强迫进程立即停止</p><h3 id="8-2-3-最佳实践"><a href="#8-2-3-最佳实践" class="headerlink" title="8.2.3 最佳实践"></a>8.2.3 最佳实践</h3><p>​ <strong>案例 1： 踢掉某个非法登录用户</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716165539424.png" alt="image-20200716165539424"></p><p>​ <strong>案例 2: 终止远程登录服务 sshd, 在适当时候再次重启 sshd 服务</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716165722306.png" alt="image-20200716165722306"></p><p>​ <strong>案例 3: 终止多个 gedit 编辑器 【killall , 通过进程名称来终止进程】</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716165929281.png" alt="image-20200716165929281"></p><p><strong>案例 4： 强制杀掉一个终端</strong> <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716170008099.png" alt="image-20200716170008099"></p><h2 id="8-3-查看进程树-pstree"><a href="#8-3-查看进程树-pstree" class="headerlink" title="8.3 查看进程树 pstree"></a>8.3 查看进程树 pstree</h2><h3 id="8-3-1-基本语法"><a href="#8-3-1-基本语法" class="headerlink" title="8.3.1 基本语法"></a>8.3.1 基本语法</h3><p>​ <strong>pstree</strong> [选项] ,可以更加直观的来看进程信息</p><h3 id="8-3-2-常用选项"><a href="#8-3-2-常用选项" class="headerlink" title="8.3.2 常用选项"></a>8.3.2 常用选项</h3><p>​ <strong>-p</strong> :显示进程的 PID</p><p>​ <strong>-u</strong> :显示进程的所属用户</p><h3 id="8-3-3-应用实例"><a href="#8-3-3-应用实例" class="headerlink" title="8.3.3 应用实例"></a>8.3.3 应用实例</h3><p>​ <strong>案例 1： 请你树状的形式显示进程的 pid</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716170418195.png" alt="image-20200716170418195"></p><p>​ <strong>案例 2： 请你树状的形式进程的用户 id</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716170522289.png" alt="image-20200716170522289"></p><h2 id="8-4-服务-Service-管理"><a href="#8-4-服务-Service-管理" class="headerlink" title="8.4 服务(Service)管理"></a>8.4 服务(Service)管理</h2><h3 id="8-4-1-介绍"><a href="#8-4-1-介绍" class="headerlink" title="8.4.1 介绍"></a>8.4.1 介绍</h3><p>​ 服务(service) 本质就是进程， 但是是运行在后台的， 通常都会监听某个端口， 等待其它程序的请求， 比如(mysql , sshd 防火墙等)， 因此我们又称为守护进程， 是 Linux 中非常重要的知识点。 【原理图】</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716170655510.png" alt="image-20200716170655510"></p><h3 id="8-4-2-service-管理指令"><a href="#8-4-2-service-管理指令" class="headerlink" title="8.4.2 service 管理指令"></a>8.4.2 service 管理指令</h3><p>​ <strong>service</strong> 服务名 [start | stop | restart | reload | status]</p><p>​ 在 CentOS7.0 后 不再使用 service ,而是 <strong>systemctl</strong></p><h3 id="8-4-3-使用案例"><a href="#8-4-3-使用案例" class="headerlink" title="8.4.3 使用案例"></a>8.4.3 使用案例</h3><p><strong>==CentOS 7== 示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看firewall服务状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">service firewalld start</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">service firewalld restart</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">service firewalld stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看防火墙规则</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询端口是否开放</span></span><br><span class="line">firewall-cmd --query-port=8080/tcp</span><br><span class="line"><span class="comment"># 开放80端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=80/tcp</span><br><span class="line"><span class="comment"># 移除端口</span></span><br><span class="line">firewall-cmd --permanent --remove-port=8080/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启防火墙(修改配置后要重启防火墙)</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数解释</span></span><br><span class="line">1、firwall-cmd：是Linux提供的操作firewall的一个工具；</span><br><span class="line">2、--permanent：表示设置为持久；</span><br><span class="line">3、--add-port：标识添加的端口；</span><br></pre></td></tr></table></figure><ol><li><p><strong>查看当前防火墙的状况， 关闭防火墙和重启防火墙。</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716171940787.png" alt="image-20200716171940787"></p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716173533184.png" alt="image-20200716173533184"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716173556479.png" alt="image-20200716173556479"></p><p><strong>==CenOS 6:==</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716173638162.png" alt="image-20200716173638162"></p><h3 id="8-4-4-细节讨论"><a href="#8-4-4-细节讨论" class="headerlink" title="8.4.4 细节讨论"></a>8.4.4 细节讨论</h3><ol><li><p><strong>关闭或者启用防火墙后， 立即生效。 [telnet 测试 某个端口即可]</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716173742478.png" alt="image-20200716173742478"></p></li><li><p><strong>这种方式只是临时生效， 当重启系统后， 还是回归以前对服务的设置。</strong></p></li></ol><h3 id="8-4-5-查看服务名"><a href="#8-4-5-查看服务名" class="headerlink" title="8.4.5 查看服务名"></a>8.4.5 查看服务名</h3><p>​ <strong>方式 1： 使用 setup -&gt; 系统服务 就可以看到。</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716174037167.png" alt="image-20200716174037167"></p><p><strong>方式 2: /etc/init.d/服务名称</strong></p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716174233887.png" alt="image-20200716174233887"></p><h3 id="8-4-6-服务的运行级别-runlevel"><a href="#8-4-6-服务的运行级别-runlevel" class="headerlink" title="8.4.6 服务的运行级别(runlevel)"></a>8.4.6 服务的运行级别(runlevel)</h3><p>​ 查看或者修改默认级别： vi /etc/inittab<br>​ Linux 系统有 7 种运行级别(runlevel)： 常用的是级别 3 和 5</p><ul><li>运行级别 0： 系统停机状态， 系统默认运行级别不能设为 0， 否则不能正常启动</li><li>运行级别 1： 单用户工作状态， root 权限， 用于系统维护， 禁止远程登陆</li><li>运行级别 2： 多用户状态(没有 NFS)， 不支持网络</li><li>运行级别 3： 完全的多用户状态(有 NFS)， 登陆后进入控制台命令行模式</li><li>运行级别 4： 系统未使用， 保留</li><li>运行级别 5： X11 控制台， 登陆后进入图形 GUI 模式</li><li>运行级别 6： 系统正常关闭并重启， 默认运行级别不能设为 6， 否则不能正常启动</li></ul><h3 id="8-4-7-开机的流程说明"><a href="#8-4-7-开机的流程说明" class="headerlink" title="8.4.7 开机的流程说明"></a>8.4.7 开机的流程说明</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716174511184.png" alt="image-20200716174511184"></p><h3 id="8-4-8-chkconfig-指令"><a href="#8-4-8-chkconfig-指令" class="headerlink" title="8.4.8 chkconfig 指令"></a>8.4.8 chkconfig 指令</h3><ul><li><p><strong>介绍</strong></p><p>通过 chkconfig 命令可以给每个服务的各个运行级别设置自启动/关闭</p></li><li><p><strong>基本语法</strong> (==CenOS 6==)</p><ol><li><p><strong>查看服务 chkconfig –list|grep xxx</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716174754465.png" alt="image-20200716174754465"></p></li></ol></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716174925168.png" alt="image-20200716174925168"></p><ol start="2"><li><p><strong>chkconfig 服务名 –list</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716175226244.png" alt="image-20200716175226244"></p></li><li><p><strong>chkconfig –level 5 服务名 on/off</strong></p><p>请将 sshd 服务在运行级别为 5 的情况下， 不要自启动。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716175304029.png" alt="image-20200716175304029"></p></li></ol><h3 id="8-4-9-应用实例-CenOS-6"><a href="#8-4-9-应用实例-CenOS-6" class="headerlink" title="8.4.9 应用实例 (CenOS 6)"></a>8.4.9 应用实例 (CenOS 6)</h3><p>​ <strong>案例 1： 请显示当前系统所有服务的各个运行级别的运行状态</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list</span><br></pre></td></tr></table></figure><p>​ <strong>案例 2 ： 请查看 sshd 服务的运行状态</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd status</span><br></pre></td></tr></table></figure><p>​ <strong>案例 3： 将 sshd 服务在运行级别 5 下设置为不自动启动， 看看有什么效果？</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --level 5 sshd off</span><br></pre></td></tr></table></figure><p>​ <strong>案例 4： 当运行级别为 5 时， 关闭防火墙。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --level 5 iptables off</span><br></pre></td></tr></table></figure><p><strong>案例 5： 在所有运行级别下， 关闭防火墙</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig iptables off</span><br></pre></td></tr></table></figure><p>​ <strong>案例 6： 在所有运行级别下， 开启防火墙</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig iptables on</span><br></pre></td></tr></table></figure><h3 id="8-4-10-使用细节"><a href="#8-4-10-使用细节" class="headerlink" title="8.4.10 使用细节"></a>8.4.10 使用细节</h3><p>chkconfig 重新设置服务后自启动或关闭， 需要重启机器 <strong>reboot</strong> 才能生效.</p><h2 id="8-5-动态监控进程"><a href="#8-5-动态监控进程" class="headerlink" title="8.5 动态监控进程"></a>8.5 动态监控进程</h2><h3 id="8-5-1-介绍"><a href="#8-5-1-介绍" class="headerlink" title="8.5.1 介绍"></a>8.5.1 介绍</h3><p>​ top 与 ps 命令很相似。 它们都用来显示正在执行的进程。 Top 与 ps 最大的不同之处， 在于 top 在执行一段时间可以更新正在运行的的进程。</p><h3 id="8-5-2-基本语法"><a href="#8-5-2-基本语法" class="headerlink" title="8.5.2 基本语法"></a>8.5.2 基本语法</h3><p>​ <strong>top</strong> [选项]</p><h3 id="8-5-3-选项说明"><a href="#8-5-3-选项说明" class="headerlink" title="8.5.3 选项说明"></a>8.5.3 选项说明</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716180318802.png" alt="image-20200716180318802"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716180340901.png" alt="image-20200716180340901"></p><h3 id="8-5-4-应用实例"><a href="#8-5-4-应用实例" class="headerlink" title="8.5.4 应用实例"></a>8.5.4 应用实例</h3><p>​ <strong>案例 1.监视特定用户</strong></p><p>top： 输入此命令， 按回车键， 查看执行的进程。</p><p>u： 然后输入==“u” 回车， 再输入用户名， 即可==</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716180954926.png" alt="image-20200716180954926"></p><p>​ <strong>案例 2： 终止指定的进程</strong></p><p>​ top： 输入此命令， 按回车键， 查看执行的进程。<br>​ k： 然后输入“k” 回车， 再输入要结束的进程 ID 号</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716181038036.png" alt="image-20200716181038036"></p><p><strong>案例 3:指定系统状态更新的时间(每隔 10 秒自动更新， 默认是 3 秒)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -d 10</span><br></pre></td></tr></table></figure><h3 id="8-5-5-查看系统网络情况-netstat-重要"><a href="#8-5-5-查看系统网络情况-netstat-重要" class="headerlink" title="8.5.5 查看系统网络情况 netstat(重要)"></a>8.5.5 查看系统网络情况 netstat(重要)</h3><ul><li><p><strong>基本语法</strong></p><p><strong>netstat</strong> [选项]<br><strong>netstat -anp</strong></p></li><li><p><strong>选项说明</strong></p><p><strong>-an</strong> 按一定顺序排列输出<br><strong>-p</strong> 显示哪个进程在调用</p></li><li><p><strong>应用案例</strong> (==CenOS 6==)</p><p><strong>查看系统所有的网络服务</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716181511135.png" alt="image-20200716181511135"></p><p><strong>请查看服务名为 sshd 的服务的信息。</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716181546012.png" alt="image-20200716181546012"></p></li></ul><h1 id="第九章-RPM-和-YUM"><a href="#第九章-RPM-和-YUM" class="headerlink" title="第九章 RPM 和 YUM"></a>第九章 RPM 和 YUM</h1><h2 id="9-1-rpm-包的管理"><a href="#9-1-rpm-包的管理" class="headerlink" title="9.1 rpm 包的管理"></a>9.1 rpm 包的管理</h2><h3 id="9-1-1-rpm-包的简单查询指令"><a href="#9-1-1-rpm-包的简单查询指令" class="headerlink" title="9.1.1 rpm 包的简单查询指令"></a>9.1.1 rpm 包的简单查询指令</h3><p>​ 查询已安装的 rpm 列表 rpm – qa|grep xx</p><p>​ 请查询看一下， 当前的 Linux 有没有安装 firefox .</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716182049241.png" alt="image-20200716182049241"></p><h3 id="9-1-2-rpm-包名基本格式"><a href="#9-1-2-rpm-包名基本格式" class="headerlink" title="9.1.2 rpm 包名基本格式"></a>9.1.2 rpm 包名基本格式</h3><p>​ 一个 rpm 包名： firefox-45.0.1-1.el6.centos.x86_64.rpm<br>​ 名称:firefox<br>​ 版本号： 45.0.1-1<br>​ 适用操作系统: el6.centos.x86_64<br>​ 表示 centos6.x 的 64 位系统<br>​ 如果是 i686、 i386 表示 32 位系统， noarch 表示通用。 。</p><h3 id="9-1-3-rpm-包的其它查询指令"><a href="#9-1-3-rpm-包的其它查询指令" class="headerlink" title="9.1.3 rpm 包的其它查询指令"></a>9.1.3 rpm 包的其它查询指令</h3><p>​ <strong>rpm -qa</strong> :查询所安装的所有 rpm 软件包</p><p>​ <strong>rpm -qa | more</strong> [分页显示]</p><p>​ <strong>rpm -qa | grep X [rpm -qa</strong> | grep firefox ]</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716182436952.png" alt="image-20200716182436952"></p><p>​ <strong>rpm -q</strong> 软件包名 :查询软件包是否安装</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716182607417.png" alt="image-20200716182607417"></p><p>​ <strong>rpm -qi</strong> 软件包名 ： 查询软件包信息</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716183009944.png" alt="image-20200716183009944"></p><p>​ <strong>rpm -ql</strong> 软件包名 :查询软件包中的文件</p><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716183224931.png" alt="image-20200716183224931"></p><p>​ <strong>rpm -qf</strong> 文件全路径名 查询文件所属的软件包</p><p>​ rpm -qf /etc/passwd<br>​ rpm -qf /root/install.log</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716183527562.png" alt="image-20200716183527562"></p><h3 id="9-1-4-卸载-rpm-包"><a href="#9-1-4-卸载-rpm-包" class="headerlink" title="9.1.4 卸载 rpm 包"></a>9.1.4 卸载 rpm 包</h3><ul><li><p><strong>基本语法</strong></p><p>​ <strong>rpm -e RPM</strong> 包的名称</p></li><li><p><strong>应用案例</strong></p><ol><li> 删除 firefox 软件包</li></ol></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716183708154.png" alt="image-20200716183708154"></p><ul><li><p><strong>细节问题</strong></p><ol><li> 如果其它软件包依赖于您要卸载的软件包， 卸载时则会产生错误信息。</li></ol><p>如： $ rpm -e foo</p><p>removing these packages would break dependencies:foo is needed by bar-1.0-1</p><ol start="2"><li><p>如果我们就是要删除 foo 这个 rpm 包， 可以增加参数 –nodeps ,就可以强制删除， 但是一般不推荐这样做， 因为依赖于该软件包的程序可能无法运行</p><p>如： $ rpm -e ==–nodeps== foo<br>带上 ==–nodeps== 就是强制删除。</p></li></ol></li></ul><h3 id="9-1-5-安装-rpm-包"><a href="#9-1-5-安装-rpm-包" class="headerlink" title="9.1.5 安装 rpm 包"></a>9.1.5 安装 rpm 包</h3><ul><li><p><strong>基本语法</strong></p><p><strong>rpm -ivh RPM</strong> 包全路径名称</p></li><li><p><strong>参数说明</strong></p><p><strong>i=install</strong> 安装<br><strong>v=verbose</strong> 提示<br><strong>h=hash</strong> 进度条</p></li><li><p><strong>应用实例</strong></p><ol><li><p>演示安装 firefox 浏览器</p><p>步骤先找到 firefox 的安装 rpm 包,你需要挂载上我们安装 centos 的 iso 文件， 然后到/media/下去找 rpm 找。</p><p>cp firefox-45.0.1-1.el6.centos.x86_64.rpm /opt/</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716184254683.png" alt="image-20200716184254683"></p></li></ol></li></ul><h2 id="9-2-yum"><a href="#9-2-yum" class="headerlink" title="9.2 yum"></a>9.2 yum</h2><h3 id="9-2-1-介绍"><a href="#9-2-1-介绍" class="headerlink" title="9.2.1 介绍"></a>9.2.1 介绍</h3><p>​ Yum 是一个 Shell 前端软件包管理器。 基于 RPM 包管理， 能够从指定的服务器自动下载 RPM 包并且安装， 可以自动处理依赖性关系， 并且一次安装所有依赖的软件包。 使用 yum 的前提是可以联网。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716225141213.png" alt="image-20200716225141213"></p><h3 id="9-2-2-yum-的基本指令"><a href="#9-2-2-yum-的基本指令" class="headerlink" title="9.2.2 yum 的基本指令"></a>9.2.2 yum 的基本指令</h3><ul><li><p><strong>查询 yum 服务器是否有需要安装的软件</strong></p><p><strong>yum list|grep xx</strong> 软件列表 软件列表</p></li><li><p><strong>安装指定的 yum 包</strong></p><p><strong>yum install xxx</strong> 下载安装</p></li></ul><h3 id="9-2-3-yum-应用实例"><a href="#9-2-3-yum-应用实例" class="headerlink" title="9.2.3 yum 应用实例"></a>9.2.3 yum 应用实例</h3><p>​ <strong>案例： 请使用 yum 的方式来安装 firefox</strong></p><p>​ <strong>1.先查看一下 firefox rpm 在 yum 服务器有没有</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e firefox</span><br></pre></td></tr></table></figure><p>​ <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716225743794.png" alt="image-20200716225743794"></p><ol start="2"><li><strong>安装</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install firefox</span><br></pre></td></tr></table></figure><p>​ 会安装最新版本的软件</p><p>​ 【完成】</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/image-20200716230040138.png" alt="image-20200716230040138"></p><p><strong>提取码：0xub</strong></p><div class="btns rounded grid5">            <a class="button" href='https://pan.baidu.com/s/1S3RC7eLjlxfR3velb0XnoQ' title='查看文档'><i class='fa fa-book'></i>查看文档</a>          </div>]]></content>
      
      
      <categories>
          
          <category> Linux语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="posts/1005838445/"/>
      <url>posts/1005838445/</url>
      
        <content type="html"><![CDATA[<h2 id="一、jQuery-使用："><a href="#一、jQuery-使用：" class="headerlink" title="一、jQuery 使用："></a>一、jQuery 使用：</h2><h3 id="1-本地引入"><a href="#1-本地引入" class="headerlink" title="1.本地引入"></a>1.本地引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-1.10.1.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-CDN-远程引入"><a href="#2-CDN-远程引入" class="headerlink" title="2.CDN 远程引入"></a>2.CDN 远程引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://code.jquery.com/jquery-migrate-1.2.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-使用-jQuery"><a href="#3-使用-jQuery" class="headerlink" title="3.使用 jQuery"></a>3.使用 jQuery</h3><p><strong>方式一：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;jQuery&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;jquery-3.5.1.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">      $(function () &#123;</span><br><span class="line"></span><br><span class="line">      &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure><p><strong>方式二：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;jquery-3.5.1.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h2 id="二、jQuery-对象和-dom-对象区分"><a href="#二、jQuery-对象和-dom-对象区分" class="headerlink" title="二、jQuery 对象和 dom 对象区分"></a>二、jQuery 对象和 dom 对象区分</h2><h3 id="1-jQuery-对象与-dom-对象"><a href="#1-jQuery-对象与-dom-对象" class="headerlink" title="1.jQuery 对象与 dom 对象"></a>1.jQuery 对象与 dom 对象</h3><p>① <strong>DOM 对象：</strong></p><ol><li>通过 getElementById()查询出来的标签对象时 Dom 对象</li><li>通过 getElementName()查询出来的标签对象时 Dom 对象</li><li>通过 getElementByTagName()查询出来的标签对象是 Dom 对象</li><li>通过 createElemnet()方法创建的对象,是 Dom 对象</li></ol><p><strong>DOM 对象 Alert 出来的效果是:[object HTML 标签名 Element]</strong></p><p>② <strong>jQuery 对象：</strong></p><ol><li>通过 jQuery 提供的 API 创建的对象，是 jQuery 对象</li><li>通过 jquery 包装的 Dom 对象,也是 jQuery 对象</li><li>通过 jquery 提供的 API 查询到的对象,是 jQuery 对象</li></ol><h3 id="2-jQuery-对象的本质"><a href="#2-jQuery-对象的本质" class="headerlink" title="2.jQuery 对象的本质"></a>2.jQuery 对象的本质</h3><p> JQuery 对象时 dom 对象的数组 + JQuery 提供的一系列功能函数。</p><h3 id="3-jQuery-对象和-Dom-对象使用的区别"><a href="#3-jQuery-对象和-Dom-对象使用的区别" class="headerlink" title="3.jQuery 对象和 Dom 对象使用的区别"></a>3.jQuery 对象和 Dom 对象使用的区别</h3><ol><li>JQuery 对象不能使用 DOM 对象的属性和方法</li><li>DOM 对象也不能使用 JQuery 对象的属性和方法</li></ol><h3 id="4-DOM-对象-和-jQuery-对象互转"><a href="#4-DOM-对象-和-jQuery-对象互转" class="headerlink" title="4.DOM 对象 和 jQuery 对象互转"></a>4.DOM 对象 和 jQuery 对象互转</h3><ul><li>dom 对象转为 JQuery 对象<ul><li>先有 Dom 对象</li><li>$(DOM 对象) 就可以转换为 jQuery 对象</li></ul></li><li>jQuery 对象转为 dom 对象<ul><li>先有 jQuery 对象</li><li>jQuery 对象(下标)取出相对应的 DOM 对象</li></ul></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/oy_chart_bed/no1_drawing_bed/raw/master/20200719165719.png" alt="image-20200719165711650"></p><h2 id="三、jQuery-的-2-把利器"><a href="#三、jQuery-的-2-把利器" class="headerlink" title="三、jQuery 的 2 把利器"></a>三、jQuery 的 2 把利器</h2><h3 id="1-jQuery-函数-jQuery"><a href="#1-jQuery-函数-jQuery" class="headerlink" title="1.jQuery 函数; $/jQuery"></a>1.jQuery 函数; $/jQuery</h3><ul><li>jQuery 向外暴露的就是 jQuery 函数，可以直接使用</li><li>当成一般函数使用：$(param)<ul><li>param 是 function: 相当于 windown.onload = function(文档加载完成的监听)</li><li>param 是选择器字符串：查找所有的匹配 Dom 元素，返回包含所有的 DOM 元素的 jQuery 对象</li><li>param 是 DOM 元素：将 DOM 元素对象包装成 jQuery 对象返回$(this)</li><li>param 是标签字符串： 创建标签 DOM 元素对象并包装为 jQuery 对象返回</li></ul></li><li>当成对象使用：$.xxx<ul><li>each(obj/arr, function(key, value){})</li><li>trim(str)</li></ul></li></ul><h3 id="2-jQuery-对象"><a href="#2-jQuery-对象" class="headerlink" title="2.jQuery 对象"></a>2.jQuery 对象</h3><ul><li>包含所有匹配的 n 个 DOM 元素的伪数组对象</li><li>执行$()返回的就是 jQuery 对象</li><li>基本行为：<ul><li>length/size(): 得到 dom 元素的个数</li><li>[index] : 得到指定下标对应的 dom 元素</li><li>each(function(index, domEle){}): 遍历所有的 dom 元素</li><li>index(): 得到当前 dom 元素在所在兄弟中的下标</li></ul></li></ul><h2 id="四、jQuery-选择器"><a href="#四、jQuery-选择器" class="headerlink" title="四、jQuery 选择器"></a>四、jQuery 选择器</h2><ul><li>有特定语法规则（CSS 选择器）的字符串</li><li>用来查找某个/些 DOM 元素：$(selector)</li></ul><h3 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1.基本选择器"></a>1.基本选择器</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>#id</td><td>根据给定的 ID 匹配一个元素。</td></tr><tr><td>tagName/*</td><td>根据匹配标签元素/所有元素。</td></tr><tr><td>.class</td><td>根据给定的类匹配元素。</td></tr><tr><td>selector1,selector2,selector3</td><td>将每一个选择器匹配到的元素合并后一起返回。</td></tr><tr><td>selector1selector2selector3</td><td>将每一个选择器匹配到的元素交集部分一起返回。</td></tr></tbody></table><h3 id="2-层次选择器"><a href="#2-层次选择器" class="headerlink" title="2.层次选择器"></a>2.层次选择器</h3><p> <strong>找子孙后代，兄弟元素</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>selector1&gt;selector2</td><td>子元素</td></tr><tr><td>selector1 selector2</td><td>后代元素</td></tr></tbody></table><h3 id="3-过滤选择器"><a href="#3-过滤选择器" class="headerlink" title="3.过滤选择器"></a>3.过滤选择器</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>:first</td><td>获取第一个元素</td></tr><tr><td>:last</td><td>获取最后个元素</td></tr><tr><td>:eq(index)</td><td>匹配一个给定索引值的元素</td></tr><tr><td>:lt</td><td>匹配所有小于给定索引值的元素</td></tr><tr><td>:gt</td><td>匹配所有大于给定索引值的元素</td></tr><tr><td>:odd</td><td>匹配所有索引值为奇数的元素，从 0 开始计数</td></tr><tr><td>:even</td><td>匹配所有索引值为偶数的元素，从 0 开始计数</td></tr><tr><td>:not(selector)</td><td>去除所有与给定选择器匹配的元素</td></tr><tr><td>:hidden</td><td>匹配所有不可见元素，或者 type 为 hidden 的元素</td></tr><tr><td>:visible</td><td>匹配所有的可见元素</td></tr><tr><td>[attrName]</td><td>匹配包含给定属性的元素。</td></tr><tr><td>[attrName=value]</td><td>匹配给定的属性是某个特定值的元素</td></tr></tbody></table><p><strong>代码示例 [attrName]：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jQuery 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;div[id]&quot;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;test2&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><strong>代码示例 [attrName=value]：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;newsletter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hot Fuzz&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;newsletter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Cold Fusion&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;accept&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Evil Plans&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>jQuery 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;input[name&#x3D;&#39;newsletter&#39;]&quot;).attr(&quot;checked&quot;, true);</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;newsletter&quot; value&#x3D;&quot;Hot Fuzz&quot; checked&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;newsletter&quot; value&#x3D;&quot;Cold Fusion&quot; checked&#x3D;&quot;true&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="4-表单选择器"><a href="#4-表单选择器" class="headerlink" title="4.表单选择器"></a>4.表单选择器</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>:input</td><td>匹配所有 input, textarea, select 和 button 元素</td></tr><tr><td>:text</td><td>匹配所有的单行文本框</td></tr><tr><td>:checkbox</td><td>匹配所有复选框</td></tr><tr><td>:radio</td><td>匹配所有单选按钮</td></tr><tr><td>:checked</td><td>匹配所有选中的被选中元素(复选框、单选框等，不包括 select 中的 option)</td></tr></tbody></table><p><strong>代码示例 【:input】：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Input Button&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Option<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jQuery 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;:input&quot;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Input Button&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Option<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>代码示例 【:checked】：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;newsletter&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Daily&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;newsletter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Weekly&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;newsletter&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Monthly&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jQuery 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;input:checked&quot;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;newsletter&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Daily&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;newsletter&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Monthly&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、属性-文本"><a href="#五、属性-文本" class="headerlink" title="五、属性/文本"></a>五、属性/文本</h2><ul><li><strong>操作标签的属性, 标签体文本</strong></li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>attr(name) / attr(name, value)</td><td>读写非布尔值的标签属性</td></tr><tr><td>prop(name) / prop(name, value)</td><td>读写布尔值的标签属性</td></tr><tr><td>removeAttr(name)/removeProp(name)</td><td>删除属性</td></tr><tr><td>addClass(classValue)</td><td>添加 class</td></tr><tr><td>removeClass(classValue)</td><td>移除指定 class</td></tr><tr><td>val() / val(value)</td><td>读写标签的 value</td></tr><tr><td>html() / html(htmlString)</td><td>读写标签体文本</td></tr></tbody></table><h2 id="六、CSS-模块"><a href="#六、CSS-模块" class="headerlink" title="六、CSS 模块"></a>六、CSS 模块</h2><h3 id="1-style-样式"><a href="#1-style-样式" class="headerlink" title="1. style 样式"></a>1. style 样式</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>css(styleName)</td><td>根据样式名得到对应的值</td></tr><tr><td>css(styleName, value)</td><td>设置一个样式</td></tr><tr><td>css(多个样式对)</td><td>设置多个样式</td></tr></tbody></table><p><strong>代码示例：</strong></p><ol><li>取得第一个段落的 color 样式属性的值。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).css(&quot;color&quot;);</span><br></pre></td></tr></table></figure><ol start="2"><li>将所有段落的字体颜色设为红色并且背景为蓝色。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).css(&#123; color: &quot;#ff0011&quot;, background: &quot;blue&quot; &#125;);</span><br></pre></td></tr></table></figure><pre><code>3. 将所有段落字体设为红色</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).css(&quot;color&quot;,&quot;red&quot;);</span><br></pre></td></tr></table></figure><h3 id="2-位置坐标"><a href="#2-位置坐标" class="headerlink" title="2.位置坐标"></a>2.位置坐标</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>offset()</td><td>读/写当前坐标（原点是页面左上角）</td></tr><tr><td>position()</td><td>读写当前元素的坐标的（原点是父元素左上角）</td></tr><tr><td>scrollTop()/scrollLeft()</td><td>读/写元素/页面的滚动坐标</td></tr></tbody></table><p><strong>代码示例：</strong></p><ol><li><strong>offset()</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2nd Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// jQuery代码 var p = $(&quot;p:last&quot;); var offset = p.offset(); p.html( &quot;left: &quot; +</span><br><span class="line">offset.left + &quot;, top: &quot; + offset.top );</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>left: 0, top: 35<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>position()</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2nd Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// jQuery代码 var p = $(&quot;p:first&quot;); var position = p.position();</span><br><span class="line">$(&quot;p:last&quot;).html( &quot;left: &quot; + position.left + &quot;, top: &quot; + position.top );</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>left: 15, top: 15<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>scrollTop()</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2nd Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// jQuery代码 var p = $(&quot;p:first&quot;); $(&quot;p:last&quot;).text( &quot;scrollTop:&quot; +</span><br><span class="line">p.scrollTop() );</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>scrollTop: 0<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>scrollLeft()</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2nd Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; jQuery代码</span><br><span class="line">var p &#x3D; $(&quot;p:first&quot;);</span><br><span class="line">$(&quot;p:last&quot;).text( &quot;scrollLeft:&quot; + p.scrollLeft() );</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Hello&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;scrollLeft: 0&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><h3 id="3-尺寸"><a href="#3-尺寸" class="headerlink" title="3.尺寸"></a>3.尺寸</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>width()/height()</td><td>width/height</td></tr><tr><td>innerWidth()/innerHeight()</td><td>width + padding</td></tr><tr><td>outerWidth()/outerHeight()</td><td>width + padding + border</td></tr><tr><td>outerWidth(true)/outerHeight(true)</td><td>width + padding + border+margin</td></tr></tbody></table><p><strong>代码示例：</strong></p><ol><li><strong>width()</strong> 获取第一段的高</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).height();</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>innerWidth()</strong> 获取第一段落内部区域高度。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2nd Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line"><span class="keyword">var</span> p = $(<span class="string">&quot;p:first&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;p:last&quot;</span>).text(<span class="string">&quot;innerHeight:&quot;</span> + p.innerHeight());</span><br></pre></td></tr></table></figure><p><strong>结果示例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>innerHeight: 16<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>outerWidth()</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2nd Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line"><span class="keyword">var</span> p = $(<span class="string">&quot;p:first&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;p:last&quot;</span>).text(</span><br><span class="line">  <span class="string">&quot;outerHeight:&quot;</span> +</span><br><span class="line">    p.outerHeight() +</span><br><span class="line">    <span class="string">&quot; , outerHeight(true):&quot;</span> +</span><br><span class="line">    p.outerHeight(<span class="literal">true</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>outerHeight: 35 , outerHeight(true):55<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、筛选模块"><a href="#七、筛选模块" class="headerlink" title="七、筛选模块"></a>七、筛选模块</h2><h3 id="1-过滤"><a href="#1-过滤" class="headerlink" title="1.过滤"></a>1.过滤</h3><p> 在 jQuery 对象内部的元素中找出部分匹配的元素, 并封装成新的 jQuery 对象返回</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>first()</td><td>获取第一个元素</td></tr><tr><td>last()</td><td>获取最后个元素</td></tr><tr><td>eq(index)</td><td>获取第 N 个元素</td></tr><tr><td>filter(selector)</td><td>筛选出与指定表达式匹配的元素集合。</td></tr><tr><td>not(selector)</td><td>删除与指定表达式匹配的元素</td></tr><tr><td>has(selector)</td><td>保留包含特定后代的元素，去掉那些不含有指定后代的元素。</td></tr></tbody></table><p><strong>代码示例：</strong></p><ol><li><strong>filter(selector)</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello Again<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>And Again<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).filter(<span class="string">&quot;.selected&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 运行结果</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>And Again<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>not(selector)</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>Hello Again<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).not($(<span class="string">&quot;#selected&quot;</span>)[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 运行结果</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>3. **has(selector)**</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>list item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    list item 2</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>list item 2-a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>list item 2-b<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>list item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>list item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">&quot;li&quot;</span>).has(<span class="string">&quot;ul&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-查找"><a href="#2-查找" class="headerlink" title="2.查找"></a>2.查找</h3><p> 查找 jQuery 对象内部的元素的子孙/兄弟/父母元素, 并封装成新的 jQuery 对象返回</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>children(selector)</td><td>取得一个包含匹配的元素集合中每一个元素的所有子元素的元素集合。（子元素）</td></tr><tr><td>find(selector)</td><td>搜索所有与指定表达式匹配的元素。这个函数是找出正在处理的元素的后代元素的方法。（后代元素）</td></tr><tr><td>preAll(selector)</td><td>查找当前元素之前所有的同辈元素（前的所有兄弟）</td></tr><tr><td>siblings(selector)</td><td>取得一个包含匹配的元素集合中每一个元素的所有唯一同辈元素的元素集合。（所有兄弟）</td></tr><tr><td>parent()</td><td>取得一个包含着所有匹配元素的唯一父元素的元素集合。（父元素）</td></tr></tbody></table><p><strong>代码示例：</strong></p><ol><li><strong>preAll(selector)</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">&quot;div:last&quot;</span>).prevAll().addClass(<span class="string">&quot;before&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 运行结果</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;before&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;before&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;before&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="八、文档处理-CUD-模块"><a href="#八、文档处理-CUD-模块" class="headerlink" title="八、文档处理(CUD)模块"></a>八、文档处理(CUD)模块</h2><h3 id="1-增加"><a href="#1-增加" class="headerlink" title="1.增加"></a>1.增加</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>append() / appendTo()</td><td>插入后部</td></tr><tr><td>preppend() / preppendTo()</td><td>插入前部</td></tr><tr><td>before()</td><td>插到前面</td></tr><tr><td>after()</td><td>插到后面</td></tr></tbody></table><h3 id="2-删除"><a href="#2-删除" class="headerlink" title="2.删除"></a>2.删除</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>remove()</td><td>从 DOM 中删除所有匹配的元素。(将自己及内部的孩子都删除)</td></tr><tr><td>empty()</td><td>删除匹配的元素集合中所有的子节点。(掏空(自己还在))</td></tr></tbody></table><p><strong>代码示例：</strong></p><ol><li><strong>remove()</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">how are</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>you?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).remove();</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 运行结果 how are</span><br></pre></td></tr></table></figure><h3 id="3-更新"><a href="#3-更新" class="headerlink" title="3.更新"></a>3.更新</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>replaceWith()</td><td>将所有匹配的元素替换成指定的 HTML 或 DOM 元素。</td></tr></tbody></table><p><strong>代码示例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>cruel<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).replaceWith(<span class="string">&quot;&lt;b&gt;Paragraph. &lt;/b&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 运行结果</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Paragraph. <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Paragraph. <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Paragraph. <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="九、事件模块"><a href="#九、事件模块" class="headerlink" title="九、事件模块"></a>九、事件模块</h2><h3 id="1-绑定事件"><a href="#1-绑定事件" class="headerlink" title="1.绑定事件"></a>1.绑定事件</h3><ul><li><strong>eventName(function(){})</strong></li><li><strong>on(‘eventName’, function(){})</strong><ul><li>常用: <strong>click</strong>,<strong>mouseenter /mouseleave</strong> , <strong>mouseover /mouseout</strong>,<strong>focus/blur</strong></li></ul></li><li><strong>hover(function(){}, function(){})</strong></li></ul><h3 id="2-解绑事件"><a href="#2-解绑事件" class="headerlink" title="2.解绑事件"></a>2.解绑事件</h3><ul><li><strong>off(‘eventName’)</strong></li></ul><h3 id="3-事件委托"><a href="#3-事件委托" class="headerlink" title="3.事件委托"></a>3.事件委托</h3><p><strong>理解:</strong> 将子元素的事件委托给父辈元素处理</p><ul><li>事件监听绑定在父元素上, 但事件发生在子元素上</li><li>事件会冒泡到父元素</li><li>但最终调用的事件回调函数的是子元素: event.target</li></ul><p><strong>好处:</strong></p><ul><li>新增的元素没有事件监听</li><li>减少监听的数量(n==&gt;1)</li></ul><p><strong>jQuery 的事件委托 API</strong></p><ul><li>设置事件委托: $(parentSelector).delegate(childrenSelector, eventName, callback)</li><li>移除事件委托: $(parentSelector).undelegate(eventName)</li></ul><p><strong>代码示例</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>111111111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>11111111111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>22222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>添加新的li<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">&quot;ul&gt;li&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.style.background = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;#btn&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;ul&quot;</span>).append(<span class="string">&quot;&lt;li&gt;新增的li....&lt;/li&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 运行结果</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>111111111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>11111111111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>新增的li....<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-事件坐标"><a href="#4-事件坐标" class="headerlink" title="4.事件坐标"></a>4.事件坐标</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>event.offsetX</td><td>原点是当前元素左上角</td></tr><tr><td>event.clientX</td><td>原点是窗口左上角</td></tr><tr><td>event.pageX</td><td>原点是页面左上角</td></tr></tbody></table><p><strong>代码示例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;out&quot;</span>&gt;</span></span><br><span class="line">  外部DIV</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>内部div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divBtn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>测试事件坐标<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// event 事件</span></span><br><span class="line">  <span class="built_in">console</span>.log(event.offsetX, event.offsetY); <span class="comment">// 原点为事件元素的左上角</span></span><br><span class="line">  <span class="built_in">console</span>.log(event.clientX, event.clientY); <span class="comment">// 原点为窗口的左上角</span></span><br><span class="line">  <span class="built_in">console</span>.log(event.pageX, event.pageY); <span class="comment">// 原点为页面的左上角</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-事件相关"><a href="#5-事件相关" class="headerlink" title="5.事件相关"></a>5.事件相关</h3><ul><li>停止事件冒泡: event.stopPropagation()</li><li>阻止事件的默认行为: event.preventDefault()</li></ul><p><strong>代码示例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>22222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>添加新的li<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>删除ul上的事件委托的监听器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line"><span class="comment">// 设置事件委托</span></span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).delegate(<span class="string">&quot;li&quot;</span>, <span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.style.background = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;ul&quot;</span>).append(<span class="string">&quot;&lt;li&gt;新增的li....&lt;/li&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 移除事件委托</span></span><br><span class="line">$(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;ul&quot;</span>).undelegate(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="十、JQuery-动画"><a href="#十、JQuery-动画" class="headerlink" title="十、JQuery 动画"></a>十、JQuery 动画</h2><h3 id="1-基本动画"><a href="#1-基本动画" class="headerlink" title="1.基本动画"></a>1.基本动画</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>show()</td><td>将隐藏的元素显示</td></tr><tr><td>hide()</td><td>将可见的元素隐藏</td></tr><tr><td>toggle()</td><td>可见就隐藏，不可见就显示</td></tr></tbody></table><p><strong>以上的动画都可以添加参数：</strong></p><p>① 第一个参数就是显示 执行的时间，以毫秒为单位</p><p>② 第二个参数就是动画的回调函数（动画完成以后调用的函数）</p><p><strong>代码示例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">  * &#123;</span><br><span class="line">    margin: 0px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.div1</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    top: 50px;</span><br><span class="line">    left: 10px;</span><br><span class="line">    background: red;</span><br><span class="line">    display: none;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>瞬间显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>慢慢显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn3&quot;</span>&gt;</span>慢慢隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn4&quot;</span>&gt;</span>显示隐藏切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../JS/jquery-3.5.1.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $div1 = $(<span class="string">&quot;.div1&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 点击btn1, 立即显示</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      $div1.show();</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 点击btn2，慢慢显示</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      $div1.show(1000);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 3. 点击btn3, 慢慢隐藏</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#btn3&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      $div1.hide(1000);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="comment">// 4.点击btn4, 切换显示/隐藏</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#btn4&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      $div1.toggle(1000);</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-淡入淡出动画"><a href="#2-淡入淡出动画" class="headerlink" title="2.淡入淡出动画"></a>2.淡入淡出动画</h3><table><thead><tr><th>动画</th><th>描述</th></tr></thead><tbody><tr><td>fadeln()</td><td>淡入</td></tr><tr><td>fadeOut()</td><td>淡出</td></tr><tr><td>fade To()</td><td>在指导时长内慢慢将透明度修改指定的值。0 透明 1 完成可见 0.5 透明</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">  * &#123;</span><br><span class="line">    margin: 0px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.div1</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    top: 50px;</span><br><span class="line">    left: 10px;</span><br><span class="line">    background: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>慢慢淡出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>慢慢淡入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn3&quot;</span>&gt;</span>淡出/淡入切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../JS/jquery-3.5.1.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">   需求：</span><br><span class="line">   1. 点击btn1, 慢慢淡出</span><br><span class="line">     * 无参</span><br><span class="line">     * 有参</span><br><span class="line">       * 字符串参数</span><br><span class="line">       * 数字参数</span><br><span class="line">   2. 点击btn3, 慢慢淡入</span><br><span class="line">   3. 点击btn3, 淡出/淡入切换，动画结束时提示“动画结束了”</span><br><span class="line">   */</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $div1 = $(<span class="string">&quot;.div1&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      $div1.fadeOut(<span class="number">1000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;动画完成了！！！！&quot;</span>);</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      $div1.fadeIn();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;btn3&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      $div1.fadeToggle();</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavsScript高级（一）</title>
      <link href="posts/1104683778/"/>
      <url>posts/1104683778/</url>
      
        <content type="html"><![CDATA[<blockquote><p>请结合 javacript 基础结合参考</p></blockquote><h2 id="数据类型的分类和判断"><a href="#数据类型的分类和判断" class="headerlink" title="数据类型的分类和判断"></a>数据类型的分类和判断</h2><ul><li>基本(值)类型<ul><li>Number —– 任意数值 ——– typeof</li><li>String —– 任意字符串 —— typeof</li><li>Boolean —- true/false —– typeof</li><li>undefined — undefined —– typeof/===</li><li>null ——– null ———- ===</li></ul></li><li>对象(引用)类型<ul><li>Object —– typeof/instanceof</li><li>Array —— instanceof</li><li>Function —- typeof</li></ul></li></ul><h2 id="数据-变量-内存的理解"><a href="#数据-变量-内存的理解" class="headerlink" title="数据,变量, 内存的理解"></a>数据,变量, 内存的理解</h2><ul><li>什么是数据?<ul><li>在内存中可读的, 可传递的保存了特定信息的’东东’</li><li>一切皆数据, 函数也是数据</li><li>在内存中的所有操作的目标: 数据</li></ul></li><li>什么是变量?<ul><li>在程序运行过程中它的值是允许改变的量</li><li>一个变量对应一块小内存, 它的值保存在此内存中</li></ul></li><li>什么是内存?<ul><li>内存条通电后产生的存储空间(临时的)</li><li>一块内存包含 2 个方面的数据<ul><li>内部存储的数据</li><li>地址值数据</li></ul></li><li>内存空间的分类<ul><li>栈空间: 全局变量和局部变量</li><li>堆空间: 对象</li></ul></li></ul></li><li>内存,数据, 变量三者之间的关系<ul><li>内存是容器, 用来存储不同数据</li><li>变量是内存的标识, 通过变量我们可以操作(读/写)内存中的数据</li></ul></li></ul><h2 id="对象的理解和使用"><a href="#对象的理解和使用" class="headerlink" title="对象的理解和使用"></a>对象的理解和使用</h2><ul><li>什么是对象?<ul><li>多个数据(属性)的集合</li><li>用来保存多个数据(属性)的容器</li></ul></li><li>属性组成:<ul><li>属性名 : 字符串(标识)</li><li>属性值 : 任意类型</li></ul></li><li>属性的分类:<ul><li>一般 : 属性值不是 function 描述对象的状态</li><li>方法 : 属性值为 function 的属性 描述对象的行为</li></ul></li><li>特别的对象<ul><li>数组: 属性名是 0,1,2,3 之类的索引</li><li>函数: 可以执行的</li></ul></li><li>如何操作内部属性(方法)<ul><li>.属性名</li><li>[‘属性名’]: 属性名有特殊字符/属性名是一个变量</li></ul></li></ul><h2 id="函数的理解和使用"><a href="#函数的理解和使用" class="headerlink" title="函数的理解和使用"></a>函数的理解和使用</h2><ul><li>什么是函数?<ul><li>用来实现特定功能的, n 条语句的封装体</li><li>只有函数类型的数据是可以执行的, 其它的都不可以</li></ul></li><li>为什么要用函数?<ul><li>提高复用性</li><li>便于阅读交流</li></ul></li><li>函数也是对象<ul><li>instanceof Object===true</li><li>函数有属性: prototype</li><li>函数有方法: call()/apply()</li><li>可以添加新的属性/方法</li></ul></li><li>函数的 3 种不同角色<ul><li>一般函数 : 直接调用</li><li>构造函数 : 通过 new 调用</li><li>对象 : 通过.调用内部的属性/方法</li></ul></li><li>函数中的 this<ul><li>显式指定谁: obj.xxx()</li><li>通过 call/apply 指定谁调用: xxx.call(obj)</li><li>不指定谁调用: xxx() : window</li><li>回调函数: 看背后是通过谁来调用的: window/其它</li></ul></li><li>匿名函数自调用:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function(w, obj)&#123;</span><br><span class="line">  &#x2F;&#x2F;实现代码</span><br><span class="line">&#125;)(window, obj)</span><br></pre></td></tr></table></figure><ul><li>专业术语为: IIFE (Immediately Invoked Function Expression) 立即调用函数表达式</li></ul></li><li>回调函数的理解<ul><li>什么函数才是回调函数?<ul><li>你定义的</li><li>你没有调用</li><li>但它最终执行了(在一定条件下或某个时刻)</li></ul></li><li>常用的回调函数<ul><li>dom 事件回调函数</li><li>定时器回调函数</li><li>ajax 请求回调函数(后面讲解)</li><li>生命周期回调函数(后面讲解)</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC模板</title>
      <link href="posts/2968822672/"/>
      <url>posts/2968822672/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近刚学完 JDBC，通博客来总结一下。这里采用的是 Druid 连接池，以及调用了第三方的 jar 包。</p></blockquote><ul><li><p>调用的 jar 包：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200519130828881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="commons-dbutils"></p></li><li><p>JDBC 项目结构<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200519132800320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="项目结构"></p></li><li><p>整体结构<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200519131215366.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70#pic_center" alt="整体结构"></p></li><li><p><strong>代码如下</strong></p></li><li><p>配置数据库加载文件（放在 src 目录下）</p></li><li><p>【Druid.properties】</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/userinfo?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">username=root</span><br><span class="line">password=(填写自己的数据库密码)</span><br><span class="line">#初始化连接</span><br><span class="line">initialSize=<span class="number">10</span></span><br><span class="line">#最大连接数量</span><br><span class="line">maxActive=<span class="number">30</span></span><br><span class="line">#最小空闲连接</span><br><span class="line">minIdle=<span class="number">5</span></span><br><span class="line">#超时等待时间以毫秒为单位</span><br><span class="line">maxWait=<span class="number">5000</span></span><br></pre></td></tr></table></figure><ul><li>【JDBCutil.java】配置数据库连接池</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package com.OY.online.jdbc2.utilTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.DbUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接Druid数据连接池</span></span><br><span class="line"><span class="comment">*@Author OY</span></span><br><span class="line"><span class="comment">*@Date 2020/5/19</span></span><br><span class="line"><span class="comment">*@Time 11:03</span></span><br><span class="line"><span class="comment">*@Since version-1.8</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCutil</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource source;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">            InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;Druid.properties&quot;</span>);</span><br><span class="line">            prop.load(is);</span><br><span class="line">            source = DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConection</span><span class="params">()</span> throws SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = source.getConnection();</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭数据库连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeConection</span><span class="params">(Connection conn, Statement ps, ResultSet rs)</span></span>&#123;</span><br><span class="line">        DbUtils.closeQuietly(conn);</span><br><span class="line">        DbUtils.closeQuietly(ps);</span><br><span class="line">        DbUtils.closeQuietly(rs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 Bean 目录下创建【Customers.java】</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">package com.OY.online.jdbc.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*@Author OY</span></span><br><span class="line"><span class="comment">*@Date 2020/5/19</span></span><br><span class="line"><span class="comment">*@Time 10:11</span></span><br><span class="line"><span class="comment">*@Since version-1.8</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(<span class="keyword">int</span> id, String name, String email, Date birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Date birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Customer&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, birth=&quot;</span> + birth +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【BaseDAO.java】</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">package com.OY.online.jdbc.DAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*@Author OY</span></span><br><span class="line"><span class="comment">*@Date 2020/5/19</span></span><br><span class="line"><span class="comment">*@Time 10:14</span></span><br><span class="line"><span class="comment">*@Since version-1.8</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> abstract <span class="class"><span class="keyword">class</span> <span class="title">BaseDAO</span>&lt;</span>T&gt; &#123;</span><br><span class="line">   <span class="keyword">private</span> QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">   <span class="keyword">private</span> Class&lt;T&gt; clazz = null;</span><br><span class="line">    &#123;</span><br><span class="line">        Type genericSuperclass = <span class="keyword">this</span>.getClass().getGenericSuperclass();</span><br><span class="line">        ParameterizedType param = (ParameterizedType) genericSuperclass;</span><br><span class="line">        Type[] typeArguments = param.getActualTypeArguments();</span><br><span class="line">        clazz =(Class&lt;T&gt;) typeArguments[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *通用的增删改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Update</span><span class="params">(Connection conn, String sql , Object...args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> update = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            update = runner.update(conn, sql, args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> update;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getConnection</span><span class="params">(Connection conn, String sql , Object...args)</span></span>&#123;</span><br><span class="line">        T query = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            query = runner.query(conn, sql, <span class="keyword">new</span> BeanHandler&lt;T&gt;(clazz),args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> query;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取多条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getConnectionList</span><span class="params">(Connection conn, String sql , Object...args)</span></span>&#123;</span><br><span class="line">        List&lt;T&gt; <span class="built_in">list</span> = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">list</span> = runner.query(conn, sql, <span class="keyword">new</span> BeanListHandler&lt;T&gt;(clazz), args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库特殊值：例如count(*)、Max()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">(Connection conn, String sql, Object...args)</span></span>&#123;</span><br><span class="line">        Object value = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            value = runner.query(conn, sql, <span class="keyword">new</span> ScalarHandler(), args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>*【CustomerDAO.java】</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.OY.online.jdbc.DAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.OY.online.jdbc.bean.Customer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*@Author OY</span></span><br><span class="line"><span class="comment">*@Date 2020/5/19</span></span><br><span class="line"><span class="comment">*@Time 10:31</span></span><br><span class="line"><span class="comment">*@Since version-1.8</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> interface CustomerDAO &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将cust对象添加到数据库中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Connection conn, Customer cust)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 针对指定的id，删除表中的一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByID</span><span class="params">(Connection conn, <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 针对内存中的cust对象，去修改数据表中指定的记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Connection conn, Customer cust)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 针对指定的id查询得到对应的Customer对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Customer <span class="title">getConnectionById</span><span class="params">(Connection conn, <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询表中的所有记录构成的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">getAll</span><span class="params">(Connection conn)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  返回数据表中的数据的条目数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">getCount</span><span class="params">(Connection conn)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【CustomerDAOImpI.java】</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package com.OY.online.jdbc.DAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.OY.online.jdbc.bean.Customer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDAOImpI</span> <span class="title">extends</span> <span class="title">BaseDAO</span>&lt;</span>Customer&gt; implements CustomerDAO &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Connection conn, Customer cust)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into customers(name, email,birth)values(?,?,?)&quot;</span>;</span><br><span class="line">        Update(conn,sql,cust.getName(),cust.getEmail(),cust.getBirth());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByID</span><span class="params">(Connection conn, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;delete from customers where id =?&quot;</span>;</span><br><span class="line">        Update(conn, sql ,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Connection conn, Customer cust)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update customers set name =?, email = ?, birth =? where id =?&quot;</span>;</span><br><span class="line">        Update(conn,sql,cust.getName(),cust.getEmail(),cust.getBirth(),cust.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getConnectionById</span><span class="params">(Connection conn, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">       String sql = <span class="string">&quot;select id, name, email, birth from customers where id = ?&quot;</span>;</span><br><span class="line"><span class="comment">//        String sql = &quot;select id,name,email,birth from customers where id = ?&quot;;</span></span><br><span class="line">        Customer cust = getConnection(conn, sql, id);</span><br><span class="line">        <span class="keyword">return</span> cust;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">getAll</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line">        String sql =<span class="string">&quot;select  id, name, email, birth from customers &quot;</span>;</span><br><span class="line">        List&lt;Customer&gt; <span class="built_in">list</span> = getConnectionList(conn, sql);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getCount</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select count(*) from customers&quot;</span>;</span><br><span class="line">        Object value = getValue(conn, sql);</span><br><span class="line">        <span class="keyword">return</span> (Long) value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>测试【CustomerDAOImpITest.java】</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">package com.OY.online.jdbc.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.OY.online.jdbc.DAO.CustomerDAOImpI;</span><br><span class="line"><span class="keyword">import</span> com.OY.online.jdbc.bean.Customer;</span><br><span class="line"><span class="keyword">import</span> com.OY.online.jdbc2.utilTest.JDBCutil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDAOImpITest</span> &#123;</span></span><br><span class="line">   <span class="keyword">private</span> CustomerDAOImpI custs = <span class="keyword">new</span> CustomerDAOImpI();</span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCutil.getConection();</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">            java.util.Date date = sdf.parse(<span class="string">&quot;2001-7-8&quot;</span>);</span><br><span class="line">            Customer cust = <span class="keyword">new</span> Customer(<span class="number">1</span>, <span class="string">&quot;莫林&quot;</span>, <span class="string">&quot;molin@126.com&quot;</span>, <span class="keyword">new</span> Date(date.getTime()));</span><br><span class="line">            custs.insert(conn, cust);</span><br><span class="line">            System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;  finally &#123;</span><br><span class="line">            JDBCutil.closeConection(conn,null,null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCutil.getConection();</span><br><span class="line">            custs.deleteByID(conn,<span class="number">26</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCutil.closeConection(conn, null,null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCutil.getConection();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCutil.closeConection(conn, null,null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnectionById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCutil.getConection();</span><br><span class="line">            Customer cust = custs.getConnectionById(conn, <span class="number">27</span>);</span><br><span class="line">            System.out.println(cust);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCutil.closeConection(conn, null,null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCutil.getConection();</span><br><span class="line">            List&lt;Customer&gt; <span class="built_in">list</span> = custs.getAll(conn);</span><br><span class="line">            <span class="built_in">list</span>.forEach(System.out::println);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCutil.closeConection(conn, null,null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCutil.getConection();</span><br><span class="line">            Long count = custs.getCount(conn);</span><br><span class="line">            System.out.println(<span class="string">&quot;数据库条目数为&quot;</span>+count);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCutil.closeConection(conn, null,null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC数据连接池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程基础（一）</title>
      <link href="posts/850137752/"/>
      <url>posts/850137752/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是结合自己所学总结，自己也正在学习道路上，本篇结合 Guide 哥的博客结合，自己所学的还处于基础的阶段，没了解这么深，通过它人的来补足自己的知识点的缺漏，如果你要了解更深，文章下有转载地址。<br>通过博客来记录自己的一滴滴成长，也许过程很艰辛，但我选择坚持，不给以后的自己留下遗憾。</p></blockquote><h2 id="一-进程和多线程简介"><a href="#一-进程和多线程简介" class="headerlink" title="一 进程和多线程简介"></a>一 进程和多线程简介</h2><h3 id="1-1-进程和线程"><a href="#1-1-进程和线程" class="headerlink" title="1.1 进程和线程"></a>1.1 进程和线程</h3><p><strong>进程</strong><br>概念：程序的一次执行的过程，或是正在运行的一个程序<br>说明：进程作为资源分配单位，系统再运行时会为每个进程分配不同的内存区域<br><strong>线程</strong><br>概念;进程可进一步把细化为线程，是一个程序内部的一条执行路径。<br>说明：线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器（PC），线程切换的开销小<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200516152356738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="进程与线程"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200516152448168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="内存结构"></p><h2 id="1-2-何为进程？"><a href="#1-2-何为进程？" class="headerlink" title="1.2 何为进程？"></a>1.2 何为进程？</h2><p>进程是程序的一次执行过程，是系统运行的基本单位，因此进程是动态的。系统运行的一个程序即是一个进程从创建，运行到消亡的过程。</p><h2 id="1-3-何为多线程？"><a href="#1-3-何为多线程？" class="headerlink" title="1.3 何为多线程？"></a>1.3 何为多线程？</h2><p>线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是各个线程之间作切换工作时，负担要比进程小得多，也正是因为如此，线程也称为轻量级进程。</p><h2 id="1-4-何为多线程"><a href="#1-4-何为多线程" class="headerlink" title="1.4 何为多线程"></a>1.4 何为多线程</h2><p>多线程就是多个线程同时运行的或交替的运行。单核 CPU 的话是顺序执行，也就是交替执行。多核 CPU 的话，因为吗，每个 CPU 有自己的运算器，所以在多个 CPU 中可以同时运行。</p><h2 id="1-5-为什么多线程是必要的"><a href="#1-5-为什么多线程是必要的" class="headerlink" title="1.5 为什么多线程是必要的"></a>1.5 为什么多线程是必要的</h2><p>个人感觉可以用一句话概括：开发高并发系统的基础，利用好多线程机制可以大大提高系统整体的并发能力及性能。</p><h2 id="1-6-为什么提倡多线程而不是多线程"><a href="#1-6-为什么提倡多线程而不是多线程" class="headerlink" title="1.6 为什么提倡多线程而不是多线程"></a>1.6 为什么提倡多线程而不是多线程</h2><p>线程就是轻量级的进程，是程序执行的最小单位。使用多线程而不是用多线程去进行并发程序的设计，是因为线程之间的切花和调度的成本远小于进程。</p><h2 id="二-几个重要的概念"><a href="#二-几个重要的概念" class="headerlink" title="二 几个重要的概念"></a>二 几个重要的概念</h2><h3 id="2-1-单核-CPU-与多核-CPU-的理解"><a href="#2-1-单核-CPU-与多核-CPU-的理解" class="headerlink" title="2.1 单核 CPU 与多核 CPU 的理解"></a>2.1 单核 CPU 与多核 CPU 的理解</h3><p><strong>单核 CPU</strong>;其实就是一种假的多线程，因为在一个时间单元类，也只能执行一个线程的任务。就好比如：虽然有很多的车道，但是收费站只有一个工作人员在收费，只有收费才能过去，那么 CPU 就好比如收费人员。如果某个人不想交钱，那么收费人员就可以把他“挂起”（晾着他，等他相同了。准备好钱，再去收费）但是因为 CP 时间单位特别短，因此感觉不出来。<br><strong>多核 CPU</strong>：才能更好地发挥出多线程的效率。</p><blockquote><p><em>一个 Java 应用程序 java.exe，其实至少三个线程：main（）主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</em></p></blockquote><h3 id="2-2-并行与并发的理解"><a href="#2-2-并行与并发的理解" class="headerlink" title="2.2 并行与并发的理解"></a>2.2 并行与并发的理解</h3><p><strong>并行：</strong>多个 CPU 同时执行多个任务。比如多个人做不同的事情。<br><strong>并发：</strong>一个 CPU（采用时间片）同时执行多个任务。比如：秒杀、多个人做同一件事</p><h2 id="三-创建多线程的方式"><a href="#三-创建多线程的方式" class="headerlink" title="三 创建多线程的方式"></a>三 创建多线程的方式</h2><blockquote><p>为了更好的理解，我把 JDK 5 及以前归纳在这里了。</p></blockquote><h3 id="3-1-继承-Thread-类的方式"><a href="#3-1-继承-Thread-类的方式" class="headerlink" title="3.1 继承 Thread 类的方式"></a>3.1 继承 Thread 类的方式</h3><ol><li> 创建一个继承类 Thread 类的子类</li><li> 重写 Thread 类中的 run() –&gt; 将此线程的操作声明在 run()中</li><li> 创建 Thread 类的子类对象</li><li>通过此类对象调用 start() ；<br> &lt;1&gt; 启动当前线程<br> &lt;2&gt; 调用当前线程的 run()<br> <strong>代码示例：</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread3</span> <span class="title">extends</span> <span class="title">Thread</span> &#123;</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RevierTest</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread3 m1 = <span class="keyword">new</span> MyThread3();</span><br><span class="line">        <span class="comment">//设置线程名</span></span><br><span class="line">        m1.setName(<span class="string">&quot;线程一&quot;</span>);</span><br><span class="line">        MyThread3 m2 = <span class="keyword">new</span> MyThread3();</span><br><span class="line">        <span class="comment">//设置线程名</span></span><br><span class="line">        m2.setName(<span class="string">&quot;线程二&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程m1、m2</span></span><br><span class="line">        m1.start();</span><br><span class="line">        m2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200516161612213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>说明两个问题：</strong></p><blockquote><p><strong>问题一</strong>：我们在启动一个线程，必须调用 start()，不能调用 run()的方式启动线程<br><strong>问题二:</strong> 如果在启动一个线程，必须创建一个 Thread 子类的对象，调用此对象 start()</p></blockquote><h3 id="3-2-实现-Runnable-接口的方式"><a href="#3-2-实现-Runnable-接口的方式" class="headerlink" title="3.2 实现 Runnable 接口的方式"></a>3.2 实现 Runnable 接口的方式</h3><ol><li> 创建一个实现 Runnable 接口的类</li><li> 实现类去实现 Runable 中的抽象方法：run（）</li><li> 创建实现类的对象</li><li> 将此对象作为参数传递 Thread 类的构造器中，创建 Thread 类的对象</li><li>通过 Thread 类的对象调用 start()<br> <strong>代码示例:</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span> <span class="title">implements</span> <span class="title">Runnable</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>  i = <span class="number">0</span> ; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RevierTest</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        myThread m1 = <span class="keyword">new</span> myThread();</span><br><span class="line">        Thread t1= <span class="keyword">new</span> Thread(m1);</span><br><span class="line">        t1.setName(<span class="string">&quot;线程一&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200516162733411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>两种方式（Thread、Runable）的对比：</strong></p><blockquote><p>开发中：优先选择：实现 Runable 接口的方式<br>原因：<br>① 实现的方式没单继承性的局限<br>② 实现的方式更适合来处理多个线程共享数据的情况<br>联系： public class Thread implements Runable<br>相同点：<br>① 两种方式都需要重写 run()，将线程要执行的逻辑声明在 run（）中<br>② 目前这两种方式，要想启动线程，都是调用的 Thread 类中的 start()</p></blockquote><h3 id="3-3-实现-Callable-接口。-—JDK5-0-新增"><a href="#3-3-实现-Callable-接口。-—JDK5-0-新增" class="headerlink" title="3.3 实现 Callable 接口。 —JDK5.0 新增"></a>3.3 实现 Callable 接口。 —JDK5.0 新增</h3><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="title">implements</span> <span class="title">Callable</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.实现callable方法，将此方法需要执行的操作声明在call()</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> throws Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableTest</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//2.创建Callable接口实现类对象</span></span><br><span class="line">        Number number = <span class="keyword">new</span> Number();</span><br><span class="line">        <span class="comment">//3.将此Callable接口实现类的对象作为传递到FutureTak构造器中，创建FutureTask对象</span></span><br><span class="line">        FutureTask f1 = <span class="keyword">new</span> FutureTask(number);</span><br><span class="line">        <span class="comment">//4.将FutrueTask的对象作为参数传递到Thread类的构造器，创建Thread的对象</span></span><br><span class="line">        Thread T1 = <span class="keyword">new</span> Thread(f1);</span><br><span class="line">        Thread T2 = <span class="keyword">new</span> Thread(f1);</span><br><span class="line">        <span class="comment">//设置线程名、调用start()方法</span></span><br><span class="line">        T1.setName(<span class="string">&quot;线程一&quot;</span>);</span><br><span class="line">        T1.start();</span><br><span class="line"></span><br><span class="line">        T2.setName(<span class="string">&quot;线程二&quot;</span>);</span><br><span class="line">        T2.start();</span><br><span class="line"></span><br><span class="line">        Object sum = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取Callable中的call方法的返回值</span></span><br><span class="line">            <span class="comment">//get（）返回值即为Futruetask构造器参数Callable实现类重写call()的返回值</span></span><br><span class="line">            sum = f1.get();</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200516165855936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>说明：</strong></p><blockquote><p>如何理解实现 Callable 接口的方式创建多线程比实现 Runnable 接口创建多线程方式强大？<br>① call() 可以有返回值<br>② call() 可以抛出异常，被外面的操作捕获，获取异常的信息<br>③ callable 是支持泛型的</p></blockquote><h3 id="3-4-使用线程池-—-JDK5-0"><a href="#3-4-使用线程池-—-JDK5-0" class="headerlink" title="3.4 使用线程池 — JDK5.0"></a>3.4 使用线程池 — JDK5.0</h3><p><strong>代码示例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NuberThread</span> <span class="title">implements</span>  <span class="title">Runnable</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NuberThread1</span> <span class="title">implements</span>  <span class="title">Runnable</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolTest</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//提供指定的线程数量的线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        ThreadPoolExecutor severicel = (ThreadPoolExecutor) service;</span><br><span class="line">        <span class="comment">//设置线程池的属性</span></span><br><span class="line"><span class="comment">//        System.out.println(service.getClass());</span></span><br><span class="line"><span class="comment">//        service1.setCorePoolSize(15);</span></span><br><span class="line"><span class="comment">//        service1.setKeepAliveTime();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span></span><br><span class="line">        <span class="comment">//适用Callable接口</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NuberThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> NuberThread1());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//适用Callable接口</span></span><br><span class="line">        <span class="comment">//service.submit(Callable callable);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200516171435130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>说明：</strong></p><blockquote><p>① 提高响应速度（减少创建新线程的时间）<br>② 降低资源消耗（重复利用线程中的线程，不需要每次都创建）<br>③ 便于线程管理<br>corePoolSize:线程池的大小</p></blockquote><pre><code>    maximumPoolSize:最大线程数    keepAliveTime:线程没任务时最多保持多长时间后会终止</code></pre><h2 id="四-一些常用方法"><a href="#四-一些常用方法" class="headerlink" title="四 一些常用方法"></a>四 一些常用方法</h2><h3 id="4-1-start"><a href="#4-1-start" class="headerlink" title="4.1 start()"></a>4.1 start()</h3><p>启动当前线程；调用当前线程的 run()</p><h3 id="4-2-run"><a href="#4-2-run" class="headerlink" title="4.2 run()"></a>4.2 run()</h3><p>通常需要重写 Thread 类中的此方法，将创建的线程要执行的操作声明在此方法中</p><h3 id="4-3-currentThread"><a href="#4-3-currentThread" class="headerlink" title="4.3 currentThread()"></a>4.3 currentThread()</h3><p>静态方法，返回执行当前代码的线程</p><h3 id="4-4-getName"><a href="#4-4-getName" class="headerlink" title="4.4 getName()"></a>4.4 getName()</h3><p>获取当前线程的名字</p><h3 id="4-5-setName"><a href="#4-5-setName" class="headerlink" title="4.5 setName()"></a>4.5 setName()</h3><p>设置当前线程的名字</p><h3 id="4-6-yield"><a href="#4-6-yield" class="headerlink" title="4.6 yield()"></a>4.6 yield()</h3><p>释放当前 cpu 的执行权</p><h3 id="4-7-join"><a href="#4-7-join" class="headerlink" title="4.7 join()"></a>4.7 join()</h3><p>在线程 a 中调用线程 b 的 join(),此时线程 a 就进入阻塞状态，直到线程 b 完全执行完以后，线程 a 才结束阻塞状态。</p><h3 id="4-8-stop"><a href="#4-8-stop" class="headerlink" title="4.8 stop()"></a>4.8 stop()</h3><p>已过时。当执行此方法时，强制结束当前线程。</p><h3 id="4-9-sleep-long-millitime"><a href="#4-9-sleep-long-millitime" class="headerlink" title="4.9 sleep(long millitime)"></a>4.9 sleep(long millitime)</h3><p>让当前线程“睡眠”指定的 millitime 毫秒。在指定的 millitime 毫秒时间内，当前线程是阻塞状态。</p><h3 id="4-10-isAlive"><a href="#4-10-isAlive" class="headerlink" title="4.10 isAlive()"></a>4.10 isAlive()</h3><p>判断当前线程是否存活</p><h3 id="4-11-线程的优先级"><a href="#4-11-线程的优先级" class="headerlink" title="4.11 线程的优先级"></a>4.11 线程的优先级</h3><ul><li>MAX_PRIORITY：10</li><li>MIN _PRIORITY：1</li><li>NORM_PRIORITY：5 –&gt;默认优先级</li></ul><h3 id="4-12-获取和设置当前线程的优先级"><a href="#4-12-获取和设置当前线程的优先级" class="headerlink" title="4.12 获取和设置当前线程的优先级"></a>4.12 获取和设置当前线程的优先级</h3><ul><li>getPriority():获取线程的优先级</li><li>setPriority(int p):设置线程的优先级</li><li>说明：高优先级的线程要抢占低优先级线程 cpu 的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只当高优先级的线程执行完以后，低优先级的线程才执行。</li></ul><h3 id="4-13-补充：线程的分类"><a href="#4-13-补充：线程的分类" class="headerlink" title="4.13 补充：线程的分类"></a>4.13 补充：线程的分类</h3><p>一种是守护线程，一种是用户线程。</p><h2 id="五-Thread-的生命周期"><a href="#五-Thread-的生命周期" class="headerlink" title="五 Thread 的生命周期"></a>五 Thread 的生命周期</h2><h3 id="5-1-图示"><a href="#5-1-图示" class="headerlink" title="5.1 图示"></a>5.1 图示</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200516173710895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-2-说明"><a href="#5-2-说明" class="headerlink" title="5.2 说明"></a>5.2 说明</h3><ul><li>生命周期关注两个概念：状态、相应的方法</li><li>关注 ：状态 a –&gt; 状态 b：哪些方法执行了（回调方法）<br>某个方法主动调用:状态 a —&gt; 状态 b</li><li>阻塞：临时状态，不可作为最终状态</li><li>死亡：最终的状态</li></ul><blockquote><p>线程的同步机制和线程通信放到多线程（二）。</p></blockquote><p><a href="https://blog.csdn.net/qq_34337272/article/details/79640870">转载地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript 基础语法</title>
      <link href="posts/1574967654/"/>
      <url>posts/1574967654/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言： 基础知识语法，代码不多。我已经把代码打包放到文章下面了。</p></blockquote><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="1-1-JS-中一共分成六种数据类型"><a href="#1-1-JS-中一共分成六种数据类型" class="headerlink" title="1.1 JS 中一共分成六种数据类型"></a>1.1 JS 中一共分成六种数据类型</h2><ul><li><p>String 字符串</p></li><li><p>Number 数值</p></li><li><p>Boolean 布尔值</p></li><li><p>Undefined 未定义</p></li><li><p>Object 对象</p></li></ul><h2 id="1-2-String-字符串"><a href="#1-2-String-字符串" class="headerlink" title="1.2 String 字符串"></a>1.2 String 字符串</h2><p> Js 中字符串需要使用引号引起来或单引号都行<br>​ 在字符串使用\作为转义字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\&#39;  &#x3D;&#x3D;&gt; &#39;</span><br><span class="line">\&quot;  &#x3D;&#x3D;&gt; &quot;</span><br><span class="line">\n  &#x3D;&#x3D;&gt; 换行</span><br><span class="line">\t  &#x3D;&#x3D;&gt; 制表</span><br><span class="line">\\  &#x3D;&#x3D;&gt; \</span><br></pre></td></tr></table></figure><p><strong>使用 typeof 运算符检查字符串时，会返回“string”</strong></p><h2 id="1-3-Number-数值"><a href="#1-3-Number-数值" class="headerlink" title="1.3 Number 数值"></a>1.3 Number 数值</h2><p> js 中所有的整数和浮点数都是 Number 类型</p><ul><li><p><strong>特殊的数字</strong></p><p><strong>infinity</strong> 正无穷 <strong>-infinity</strong> 负无穷 <strong>NaN</strong> 非法数字(NOT A Number)</p></li><li><p><strong>其他进制的数字表示：</strong></p><ul><li>Ob 开头表示二进制，但是不是多有的浏览器都支持</li><li>O 开头表示八进制</li><li>Ox 开头表示十六进制</li></ul></li></ul><p><strong>使用 typeof 检查一个 Number 类型的数据时，会返回 number（包括 NaN 和 Infinity）</strong></p><h2 id="1-4-Boolean-布尔值"><a href="#1-4-Boolean-布尔值" class="headerlink" title="1.4 Boolean 布尔值"></a>1.4 Boolean 布尔值</h2><p> 布尔值主要用来逻辑判断，布尔值只有两个</p><ol><li><p> true 逻辑运算</p></li><li><p> false 逻辑的假</p></li></ol><p><strong>使用 typeo 检查一个布尔值时，会返回”boolean”</strong></p><h2 id="1-5-Null-空值"><a href="#1-5-Null-空值" class="headerlink" title="1.5 Null 空值"></a>1.5 Null 空值</h2><p> 空值专门来表示为空的对象，Null 类型的值只有一个 <strong>null</strong> <strong>使用 typeof 检查一个 Null 类型的值时会返回”Object”</strong></p><h2 id="1-6-Undefined-未定义"><a href="#1-6-Undefined-未定义" class="headerlink" title="1.6 Undefined 未定义"></a>1.6 Undefined 未定义</h2><p> 如果声明一个变量但是没有为变量赋值变量的值就是 undefined</p><p> 该类型的值是有一个 underfined</p><p> <strong>使用 typeof 检查一个 Undefined 类型的值时，会返回”undefined”</strong></p><h2 id="1-7-类型的转换"><a href="#1-7-类型的转换" class="headerlink" title="1.7 类型的转换"></a>1.7 类型的转换</h2><p> 类型转换就是只将其他的数据类型，转换为 String Number 或 Boolean</p><ul><li><p><strong>转换为 String</strong></p><ul><li><p>方式一(强制类型转换)：</p><p>调用被转换数据的**toString()**方法</p><p>注意： 这个方法付不适用 null 和 undefined</p><p>由于这个类型中没有方法，所以调用 toString()时会报错</p></li><li><p>方式二(强制类型转换)：</p><p>调用**String()**函数</p><p>原理：对于 Number Boolean String 都会调用他们的 toString()方法来将其转换为字符串，对于 null 值，直接转换为字符串“null”.对于 underfined 直接转换为字符串”undefined”</p></li><li><p>方式三(隐式的类型转换)：</p><p>为任意的数据类型 + “”</p><p>原理：和 String()函数一样</p></li></ul></li><li><p><strong>转换为 Number</strong></p><ul><li><p>方式一(强制类型转换):</p><p>调用<strong>Number()</strong> 函数</p></li></ul><p> <strong>转换的情况：</strong></p><p> 1.字符串 –&gt; 数字</p><p> 如果字符串是一个合法的数字，则直接转换为对应的数字</p><p> 如果字符串时一个非法的数字，则直接转为 NaN</p><p> 如果是一个空串或纯空格的字符串，则转换为 0</p><p> 2.布尔值 –&gt; 数字</p><p> true 转换为 1</p><p> false 转换为 0</p><p> 3.空值 –&gt; 数值</p><p> null 转换为 0</p><p> 4.未定义 –&gt; 数字</p><p> undefined 转换为 NaN</p><ul><li><p>方式二(强制类型的转换):</p><p>调用 parseInt() 或 parseFloat()</p><p>这两个函数专门将一个字符串转换为数字的</p><p><strong>parseInt()</strong></p><p> 可以将一个字符串中的有效的整数提取出来，并转换为 Number</p><p> 如果需要可以在 parseInt()中指出一个第二个参数。来指定 Number</p><p><strong>parseFloat()</strong></p><p> 可以将一个字符串的有效的小数提取出来，并转换为 Number</p></li><li><p>方式三(隐式的类型转换)：</p><p> 使用一元的+来进行隐式的类型转换</p><p> 原理：和 Number()函数一样</p></li></ul></li><li><p><strong>转换为布尔值</strong></p><ul><li><p>方式一(强制类型的转换)：</p><p>使用 BOOlean()函数</p><p>转换的情况：</p><p> 字符串 –&gt; 布尔 除了空串其余是 true</p><p> 数值 –&gt; 布尔 除了 0 和 NaN 其余是全是 true</p><p> null、undefined –&gt; 布尔 都是 false</p><p> 对象 –&gt; 布尔 都是 true</p></li><li><p>方式二(隐式类型转换):</p><p>为任意的数据类型做两次非运算，即可将转换为布尔值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; &quot;hello&quot;;</span><br><span class="line">a &#x3D; !!a;</span><br><span class="line">console.log(a); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h1 id="数据运算"><a href="#数据运算" class="headerlink" title="数据运算"></a>数据运算</h1></li></ul></li></ul><h2 id="2-1-运算符"><a href="#2-1-运算符" class="headerlink" title="2.1 运算符"></a>2.1 运算符</h2><p> 运算符也称为操作符</p><p> 通过运算符可以对一个或多个值进行运算或操作</p><ul><li><p><strong>typeof 运算符</strong></p><p>用来检查一个变量的数据类型</p><p>语法：typeof 变量</p><p>它会返回一个用于描述类型的字符串作为结果</p></li><li><p><strong>算数运算符</strong></p><ul><li>‘+’ 对两个值进行加法运算并返回结果</li><li>‘-‘ 对两个值进行减法运算并返回结果</li><li>‘*‘ 对两个值进行乘法运算并返回结果</li><li>/ 对两个值进行除法运算并返回结果</li><li>% 对两个值进行取余运算并返回结果</li></ul><p>除了加法以外，对非 Number 类型的值进行运算时，都会先转换为 Number 然后在做运算。而做加法运算时，如果是两个字符串进行相加，则会做拼串操作，将两个字符连接为一个字符串。任何值和字符串做加法，都会先转换为字符串，然后再拼串。</p></li><li><p>一元运算符</p><p>一元运算符只需要一个操作数</p><p>一元的 “+” ，就是正号，不会对值产生任何影响，但是可以将一个非数字转换为数字</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; true;</span><br><span class="line">a &#x3D; +a;</span><br></pre></td></tr></table></figure><ul><li>一元的 -</li></ul><p>就是负号，可以对一个数字进行符号位取反</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 10;</span><br><span class="line">a &#x3D; -a;</span><br></pre></td></tr></table></figure><ul><li><p>自增</p><p>自增可以使变量在原值的基础上自增 1</p><p>自增使用 ++</p><p>自增可以使用 前++（++a）后++(a++)</p><p>无论是++a 还是 a++都会立即使原变量自增 1</p><p>不同的是++a 和 a++的值是不同的，</p><p> ++a 的值是变量的新值（自增后的值）</p><p> a++的值是变量的原值（自增前的值）</p></li><li><p>自减</p><p> 自减可以使变量在原值的基础上自减 1</p><p> 自减使用 –</p><p> 自减可以使用 前–（–a）后–(a–)</p><p> 无论是–a 还是 a–都会立即使原变量自减 1</p><p> 不同的是–a 和 a–的值是不同的，</p><p> –a 的值是变量的新值（自减后的值）</p><p> a–的值是变量的原值（自减前的值）</p></li></ul></li></ul><h2 id="2-2-逻辑运算符"><a href="#2-2-逻辑运算符" class="headerlink" title="2.2 逻辑运算符"></a>2.2 逻辑运算符</h2><ul><li><p><strong>！</strong> 非运算可以对一个布尔值进行取反，true 变 false false 变 true</p><p>当对非布尔值使用！时，会先将其装换为布尔值然后在取反</p><p>当我们利用！来将其他的数据转换为布尔值</p></li><li><p><strong>&amp;&amp;</strong> 可以对符号两侧的值进行与运算</p><p>只要两端值都可以 true 时，才会返回 true。</p><p>只要有一个 false 就会返回 false。</p><p>与是一个短路与，如果第一个值是 false，则不再检查第二个值</p><p>对于非布尔值，它会转换为布尔值然后在运算，并检查原值</p><p>规则：</p></li></ul><p> 1.如果第一个值为 false,则返回第一个值</p><p> 2.如果第一个值为 true, 则返回第二个值</p><ul><li><p><strong>||</strong> 可以对符号两侧的值进行或运算</p><p>只有两端都是 false,才会返回 false。只要有一个 true,就会返回 true.</p><p>只要两端都是 false 时，才会返回 false。只要有一个 true,就会返回 true.</p><p>或是一个短路的或，如果第一个值是 true，则=不再检查第二值</p><p>对于非布尔值,它会将其转换为布尔值然后做运算，并返回原值</p><p>规则：</p></li></ul><p> 1.如果第一个值为 true,则返回第一个值</p><p> 2.如果第一个值 false,则返回第二个值</p><h2 id="2-3-赋值运算符"><a href="#2-3-赋值运算符" class="headerlink" title="2.3 赋值运算符"></a>2.3 赋值运算符</h2><table><thead><tr><th align="center">=</th><th>可以将符号右侧的值赋值给左侧变量</th></tr></thead><tbody><tr><td align="center">+=</td><td>a += 5 相当于 a = a+5 var str = “hello”; str += “world”;</td></tr><tr><td align="center">-=</td><td>a -= 5 相当于 a = a-5</td></tr><tr><td align="center">*=</td><td>a * = 5 相当于 a = a*5</td></tr><tr><td align="center">/=</td><td>- a /= 5 相当于 a = a/5</td></tr><tr><td align="center">%=</td><td>- a %= 5 相当于 a = a%5</td></tr></tbody></table><h2 id="2-4-关系运算符"><a href="#2-4-关系运算符" class="headerlink" title="2.4 关系运算符"></a>2.4 关系运算符</h2><p> 关系运算符用来比较两个值之间的大小关系</p><p> <strong>&gt; &gt;= &lt; &lt;=</strong></p><p> 关系运算符的规则和数学中一致，用来比较两个值之间的关系</p><p> 如果关系成立则返回 true，关系不成立则返回 false。</p><p> 如果比价的两个值是非数值，会将其装换为 Number 然后在比较。</p><p> 如果比较的两个值都是字符串，此时会比较字符串的 Unicode 编码，而不会转换为 Number.</p><h2 id="2-5-相等运算符"><a href="#2-5-相等运算符" class="headerlink" title="2.5 相等运算符"></a>2.5 相等运算符</h2><ul><li><p><strong>==</strong> 相等，判断左右两个值是否相等，如果相等返回 true,如果不等于返回 false</p><p>相等会自动对两个值进行类型转换，如果对不同的类型进行比较，会将其转换为相同的类型为相同的类型然后在比较。转换后相等它也会返回 true</p></li><li><p><strong>!=</strong> 不等，判断左右两个值是否不等，如果不等则返回 true，如果相等则返回 false</p><p>不等也会做自动的类型转换</p></li><li><p><strong>===</strong> 全等，判断左右两个值是否全等，它和相等类似，只不过它不会进行自动的类型转换</p><p>如果两个值的类型不同，则直接返回 false</p></li><li><p><strong>!==</strong> 不全等，和不等类似，但是它不会进行自动的类型转换，如果两个值的类型不同，他会直接返回 true</p><p>特殊的值：</p><p>null 和 undefined 由于 undefined 衍生出 null ，所以 null == undefined 会返回 true</p><p>NaN 不与任何值相等，包括它自身 NaN == NaN // false</p><p>判断一个值是否是 NaN，使用 isNaN() 函数</p></li></ul><h2 id="2-6-三元运算符"><a href="#2-6-三元运算符" class="headerlink" title="2.6 三元运算符"></a>2.6 三元运算符</h2><ul><li><p><strong>?:</strong></p><p>语法：条件表达式?语句 1:语句 2;</p><p>执行流程：</p><p>先对条件表达式求值判断，</p><p>如果判断结果为 true，则执行语句 1，并返回执行结果</p><p>如果判断结果为 false，则执行语句 2，并返回执行结果</p><p>优先级：</p><p>和数学中一样，JS 中的运算符也是具有优先级的，</p><p>比如 先乘除 后加减 先与 后或</p><p>具体的优先级可以参考优先级的表格，在表格中越靠上的优先级越高，</p><p>优先级越高的越优先计算，优先级相同的，从左往右计算。</p><p>优先级不需要记忆，如果越到拿不准的，使用()来改变优先级。</p></li></ul><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p> 程序都是自上向下的顺序执行的，通过流程控制语句可以改变程序执行的顺序，或者反复的执行某一段的程序。</p><p> <strong>分类：</strong></p><p> 1.条件判断语句</p><p> 2.条件分支语句</p><p> 3.循环语句</p><h2 id="3-1-条件判断语句"><a href="#3-1-条件判断语句" class="headerlink" title="3.1 条件判断语句"></a>3.1 条件判断语句</h2><p> 条件判断语句也称为 if 语句</p><ul><li><p><strong>语法一：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(条件表达式)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>执行流程：</strong></p><p> <strong>if</strong>语句执行时，会先对条件表达式进行求值判断，</p><p>如果值为 true，则执行 if 后的语句</p><p> 如果值为 false，则不执行</p></li><li><p><strong>语法二：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(条件表达式)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;else&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>执行流程：</strong></p><p> <strong>if…else</strong>语句执行时，会对条件表达式进行求值判断，</p><p> 如果值为 true，则执行 if 后的语句</p><p> 如果值为 false，则执行 else 后的语句</p></li><li><p><strong>语法三：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if(条件表达式)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;else if(条件表达式)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;else if(条件表达式)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;else if(条件表达式)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;else&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>执行流程</strong></p><p> <strong>if…else if…else</strong> 语句执行时，会自上至下依次对条件表达式进行求值判断，</p><p> 如果判断结果为 true，则执行当前 if 后的语句，执行完成后语句结束。</p><p> 如果判断结果为 false，则继续向下判断，直到找到为 true 的为止。</p><p> 如果所有的条件表达式都是 false，则执行 else 后的语句</p></li></ul><h2 id="3-2-条件分支语句"><a href="#3-2-条件分支语句" class="headerlink" title="3.2 条件分支语句"></a>3.2 条件分支语句</h2><p> <strong>switch 语句</strong></p><p> <strong>语法:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">switch(条件表达式)&#123;</span><br><span class="line">case 表达式:</span><br><span class="line">语句...</span><br><span class="line">break;</span><br><span class="line">case 表达式:</span><br><span class="line">语句...</span><br><span class="line">break;</span><br><span class="line">case 表达式:</span><br><span class="line">语句...</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">语句...</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>执行流程：</strong></p><p> **switch…case…**语句在执行时，会依次将 case 后的表达式的值和 switch 后的表达式的值进行全等比较，</p><p> 如果比较结果为 false，则继续向下比较。如果比较结果为 true，则从当前 case 处开始向下执行代码。</p><p> 如果所有的 case 判断结果都为 false，则从 default 处开始执行代码。</p><h2 id="3-3-循环语句"><a href="#3-3-循环语句" class="headerlink" title="3.3 循环语句"></a>3.3 循环语句</h2><p> 通过循环语句可以反复执行某些语句多次</p><ul><li><p><strong>while 循环</strong></p><p> <strong>语法:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while(条件表达式)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>执行流程：</strong></p><p>while 语句在执行时，会先对条件表达式进行求值判断，</p><p> 如果判断结果为 false，则终止循环</p><p> 如果判断结果为 true，则执行循环体</p><p> 循环体执行完毕，继续对条件表达式进行求值判断，依此类推</p></li><li><p><strong>do…while 循环</strong></p><p><strong>语法:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;while(条件表达式)</span><br></pre></td></tr></table></figure><p><strong>执行流程</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do...while在执行时，会先执行do后的循环体，然后在对条件表达式进行判断，</span><br><span class="line">如果判断判断结果为false，则终止循环。</span><br><span class="line">如果判断结果为true，则继续执行循环体，依此类推</span><br></pre></td></tr></table></figure></li><li><p><strong>两者区别</strong></p><p>while：先判断后执行</p><p>do…while: 先执行后判断 ，可以确保循环体至少执行一次。</p></li><li><p><strong>for 循环</strong></p><p> <strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(①初始化表达式 ; ②条件表达式 ; ④更新表达式)&#123;</span><br><span class="line">③语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>执行流程：</strong></p><p> 首先执行 ① 初始化表达式，初始化一个变量，</p><p> 然后对 ② 条件表达式进行求值判断，如果为 false 则终止循环</p><p> 如果判断结果为 true，则执行 ③ 循环体</p><p> 循环体执行完毕，执行 ④ 更新表达式，对变量进行更新。</p><p> 更新表达式执行完毕重复 ②</p><ul><li><p><strong>死循环</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while(true)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(;;)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用 vscode 和 notepad++ 打开</p></li></ul></li></ul><p><strong>链接：<a href="https://pan.baidu.com/s/1yfS00YJtShuZVncxzWUrvw">https://pan.baidu.com/s/1yfS00YJtShuZVncxzWUrvw</a></strong><br><strong>提取码：7q9u</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="posts/2068909584/"/>
      <url>posts/2068909584/</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200425174449932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>代码示例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">interface NetWork&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">browse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span> <span class="title">implements</span> <span class="title">NetWork</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">browse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;真实的服务器访问网络&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyServer</span> <span class="title">implements</span> <span class="title">NetWork</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> NetWork work;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyServer</span><span class="params">(NetWork work)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.work = work;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chek</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;联网之前的检查工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">browse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        chec();</span><br><span class="line">        work.browse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Server server = <span class="keyword">new</span> Server();</span><br><span class="line">        ProxyServer pro = <span class="keyword">new</span> ProxyServer(server);</span><br><span class="line">        pro.browse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200425174806730.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波拉契数列</title>
      <link href="posts/1566646582/"/>
      <url>posts/1566646582/</url>
      
        <content type="html"><![CDATA[<ul><li>斐波拉契数列</li><li>fn = f(n-1) + f(n-2) 其中 n 是正整数，且 n 大于等于 2<br><strong>代码示例：</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFibonacci</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = fibonacci(<span class="number">8</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(index ==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> fibonacci(index <span class="number">-1</span>) +fibonacci(index <span class="number">-2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请你重新输入&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java枚举类</title>
      <link href="posts/3305917059/"/>
      <url>posts/3305917059/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-枚举类的说明"><a href="#一、-枚举类的说明" class="headerlink" title="一、 枚举类的说明"></a>一、 枚举类的说明</h2><blockquote><p>枚举类的理解：类的对象只有有限个，确定的。<br>当需要定义一组常量时，强烈建议使用枚举类<br>如果枚举类只一个对象，则可以作为单例模式的实现方式。</p></blockquote><h2 id="二、如何定义枚举类"><a href="#二、如何定义枚举类" class="headerlink" title="二、如何定义枚举类"></a>二、如何定义枚举类</h2><h3 id="①-自定义枚举类"><a href="#①-自定义枚举类" class="headerlink" title="① 自定义枚举类"></a>① 自定义枚举类</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Season</span>&#123;</span></span><br><span class="line">    <span class="comment">// 1.声明Season对象的属性：private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有化的构造器，并给对象赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(String seasonName, String seasonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.提供当前枚举类的多个对象：public static final的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SPRING = <span class="keyword">new</span> Season(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SUMMER = <span class="keyword">new</span> Season(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season AUTUMN = <span class="keyword">new</span> Season(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season WINTER = <span class="keyword">new</span> Season(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;seasonName=&#x27;&quot;</span> + seasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, seasonDesc=&#x27;&quot;</span> + seasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeasonTest</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season autumn = Season.AUTUMN;</span><br><span class="line">        System.out.println(autumn); <span class="comment">// Season&#123;seasonName=&#x27;秋天&#x27;, seasonDesc=&#x27;秋高气爽&#x27;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②-JDK5-0-新增使用-enum-定义枚举类。"><a href="#②-JDK5-0-新增使用-enum-定义枚举类。" class="headerlink" title="② JDK5.0 新增使用 enum 定义枚举类。"></a>② JDK5.0 新增使用 enum 定义枚举类。</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用enum关键枚举类</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season1</span>&#123;</span></span><br><span class="line">    <span class="comment">// 1.提供当前枚举类的对象，多个对象之间用“,”隔开，末尾对象&quot;;&quot;结束</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.声明Season对象的属性：private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SeasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SeasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.私有化构造器，并给对象赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season1</span><span class="params">(String SeasonName, String SeasonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.SeasonName = SeasonName;</span><br><span class="line">        <span class="keyword">this</span>.SeasonDesc = SeasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.获取枚举类对象的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SeasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SeasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season1&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;SeasonName=&#x27;&quot;</span> + SeasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, SeasonDesc=&#x27;&quot;</span> + SeasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeasonTest2</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season1 season = Season1.AUTUMN;</span><br><span class="line">        System.out.println(season); <span class="comment">// Season1&#123;SeasonName=&#x27;秋天&#x27;, SeasonDesc=&#x27;秋高气爽&#x27;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="③-emum-定义枚举类之后，枚举类常用方法：（继承于-java-lang-Enum-类）"><a href="#③-emum-定义枚举类之后，枚举类常用方法：（继承于-java-lang-Enum-类）" class="headerlink" title="③ emum 定义枚举类之后，枚举类常用方法：（继承于 java.lang.Enum 类）"></a>③ emum 定义枚举类之后，枚举类常用方法：（继承于 java.lang.Enum 类）</h3><ul><li>value() 返回所有的枚举类对象的构成的数组</li><li>valueOf(String objName):返回枚举类中对象名是 objName 的对象。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">interface Info&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用enum关键字枚举类</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season2</span> <span class="title">implements</span> <span class="title">Info</span>&#123;</span></span><br><span class="line">    <span class="comment">//1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>)&#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;春天在那里&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>)&#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;宁夏&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>)&#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秋天不回来&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>)&#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;大约在冬季&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SeasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SeasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season2</span><span class="params">(String SeasonName , String SeasonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.SeasonName = SeasonName;</span><br><span class="line">        <span class="keyword">this</span>.SeasonDesc = SeasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SeasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SeasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season2&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;SeasonName=&#x27;&quot;</span> + SeasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, SeasonDesc=&#x27;&quot;</span> + SeasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeasonTest3</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season2 season = Season2.AUTUMN;</span><br><span class="line">        System.out.println(season.toString()); <span class="comment">//Season2&#123;SeasonName=&#x27;秋天&#x27;, SeasonDesc=&#x27;秋高气爽&#x27;&#125;</span></span><br><span class="line">        season.show(); <span class="comment">// 秋天不回来</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// value 返回所有的枚举类对象的构成的数组</span></span><br><span class="line">        Season2[] values = season.values();</span><br><span class="line"><span class="comment">//        for (Season2 value : values) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(value);</span></span><br><span class="line"><span class="comment">//            value.show();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;values.length; i++)&#123;</span><br><span class="line">            System.out.println(values[i]);</span><br><span class="line">            values[i].show();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;*************************************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Thread.State[] values1 = Thread.State.values();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; values1.length; i++)&#123;</span><br><span class="line">            System.out.println(values1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;***************************************&quot;</span>);</span><br><span class="line">        <span class="comment">// valueOf(String objName):返回枚举类中对象名是objName的对象。</span></span><br><span class="line">        Season2 spring = Season2.valueOf(<span class="string">&quot;SPRING&quot;</span>);</span><br><span class="line">        System.out.println(spring); <span class="comment">// Season2&#123;SeasonName=&#x27;春天&#x27;, SeasonDesc=&#x27;春暖花开&#x27;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><ul><li>value（）<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200627173851281.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200627174027756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板方法的设计模式</title>
      <link href="posts/328351179/"/>
      <url>posts/328351179/</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200425164856218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Template</span>&#123;</span></span><br><span class="line">    <span class="comment">//计算某段代码执行所需要花费的时间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">spendTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">this</span>.code();<span class="comment">//不确定的部分、易变的部分</span></span><br><span class="line">        <span class="keyword">long</span> end = Syetem.currentTimeMills();</span><br><span class="line">        System.out.println(<span class="string">&quot;花费的时间为：&quot;</span>+(end-start))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> abstract <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubTemplate</span> <span class="title">extends</span> <span class="title">Template</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>  i= <span class="number">0</span>; i &lt; Math.<span class="built_in">sqrt</span>(i); i++)&#123;</span><br><span class="line">            boolean isFlag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>  j =<span class="number">2</span>; j &lt;= Math.<span class="built_in">sqrt</span>(i); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">                    isFlag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isFlag)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高效使用Github寻找开源项目</title>
      <link href="posts/1550900565/"/>
      <url>posts/1550900565/</url>
      
        <content type="html"><![CDATA[<p><strong>Git 和 GitHub 什么关系？</strong></p><blockquote><p>Git（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</p></blockquote><blockquote><p>GitHub 是一个面向开源及私有软件项目的托管平台，因为只支持 git 作为唯一的版本库格式进行托管，故名 GitHub。</p></blockquote><blockquote><p>git 用来管理你的代码，可以对你的项目进行版本控制，github 将你用 git 管理的项目放在网上， 本地的一个个项目对应 github 上面的一个个仓库。仓库可以公开（开源），私密。程序员之间可以互相学习别人的项目，互相交流，github 是全球最大的同性交友网站。</p><p><strong>怎么在 GitHub 上靠谱的找一些开源项目</strong> &gt; <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200403140117950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 按照项目名/仓库名搜索（大小写不敏感）</span><br><span class="line">in:name xxx</span><br><span class="line"># 按照README搜索（大小写不敏感）</span><br><span class="line">in:readme xxx</span><br><span class="line"># 按照description搜索（大小写不敏感）</span><br><span class="line">in:description xxx</span><br><span class="line"><span class="meta"># stars数大于xxx</span></span><br><span class="line">stars:&gt;xxx</span><br><span class="line"><span class="meta"># forks数大于xxx</span></span><br><span class="line">forks:&gt;xxx</span><br><span class="line"># 编程语言为xxx</span><br><span class="line">language:xxx</span><br><span class="line"># 最新更新时间晚于YYYY-MM-DD</span><br><span class="line">pushed:&gt;YYYY-MM-DD</span><br></pre></td></tr></table></figure><p><strong>示例</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020040314031349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 基本命令</title>
      <link href="posts/4146242720/"/>
      <url>posts/4146242720/</url>
      
        <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix">            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-211130ba7a.css">                            <div id="content_views" class="markdown_views prism-atom-one-dark" style="user-select: text;">                    <!-- flowchart 箭头图标 勿删 -->                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>                    </svg>                                            <p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdn.net/20160730112730329?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="标题" title=""></p><h1 id="centos7-常用命令集合"><a name="t0"></a><a name="t0"></a>CentOS7 常用命令集合</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这两天一直在对CentOS 7.2进行初体验，各种学习命令肿么用，不过其实大多和DOS是一样的，只是命令的表达上可能有点儿不一样，毕竟这些都不是一家出来的嘛~</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;废话不多说，直接上命令和解析！</p><h2 id="常用命令"><a name="t1"></a><a name="t1"></a>常用命令</h2><h3 id="文件与目录操作"><a name="t2"></a><a name="t2"></a>文件与目录操作</h3><div class="table-box"><table><thead><tr>  <th>命令</th>  <th align="center">解析</th></tr></thead><tbody><tr>  <td>cd /home</td>  <td align="center">进入 ‘/home’ 目录</td></tr><tr>  <td>cd ..</td>  <td align="center">返回上一级目录</td></tr><tr>  <td>cd ../..</td>  <td align="center">返回上两级目录</td></tr><tr>  <td>cd -</td>  <td align="center">返回上次所在目录</td></tr><tr>  <td>cp file1 file2</td>  <td align="center">将file1复制为file2</td></tr><tr>  <td>cp -a dir1 dir2</td>  <td align="center">复制一个目录</td></tr><tr>  <td>cp -a /tmp/dir1 .</td>  <td align="center">复制一个目录到当前工作目录（.代表当前目录）</td></tr><tr>  <td>ls</td>  <td align="center">查看目录中的文件</td></tr><tr>  <td>ls -a</td>  <td align="center">显示隐藏文件</td></tr><tr>  <td>ls -l</td>  <td align="center">显示详细信息</td></tr><tr>  <td>ls -lrt</td>  <td align="center">按时间显示文件（l表示详细列表，r表示反向排序，t表示按时间排序）</td></tr><tr>  <td>pwd</td>  <td align="center">显示工作路径</td></tr><tr>  <td>mkdir dir1</td>  <td align="center">创建 ‘dir1’ 目录</td></tr><tr>  <td>mkdir dir1 dir2</td>  <td align="center">同时创建两个目录</td></tr><tr>  <td>mkdir -p /tmp/dir1/dir2</td>  <td align="center">创建一个目录树</td></tr><tr>  <td>mv dir1 dir2</td>  <td align="center">移动/重命名一个目录</td></tr><tr>  <td>rm -f file1</td>  <td align="center">删除 ‘file1’</td></tr><tr>  <td>rm -rf dir1</td>  <td align="center">删除 ‘dir1’ 目录及其子目录内容</td></tr></tbody></table></div><h3 id="查看文件内容"><a name="t3"></a><a name="t3"></a>查看文件内容</h3><div class="table-box"><table><thead><tr>  <th>命令</th>  <th align="center">解析</th></tr></thead><tbody><tr>  <td>cat file1</td>  <td align="center">从第一个字节开始正向查看文件的内容</td></tr><tr>  <td>head -2 file1</td>  <td align="center">查看一个文件的前两行</td></tr><tr>  <td>more file1</td>  <td align="center">查看一个长文件的内容</td></tr><tr>  <td>tac file1</td>  <td align="center">从最后一行开始反向查看一个文件的内容</td></tr><tr>  <td>tail -3 file1</td>  <td align="center">查看一个文件的最后三行</td></tr><tr>  <td>vi file</td>  <td align="center">打开并浏览文件</td></tr></tbody></table></div><h3 id="文本内容处理"><a name="t4"></a><a name="t4"></a>文本内容处理</h3><div class="table-box"><table>    <thead>        <tr>            <th>命令</th>            <th>解析</th>        </tr>    </thead>    <tbody>        <tr>            <td>grep str /tmp/test</td>            <td>在文件 ‘/tmp/test’ 中查找 “str”</td>        </tr>        <tr>            <td>grep ^str /tmp/test</td>            <td>在文件 ‘/tmp/test’ 中查找以 “str” 开始的行</td>        </tr>        <tr>            <td>grep [0-9] /tmp/test</td>            <td>查找 ‘/tmp/test’ 文件中所有包含数字的行</td>        </tr>        <tr>            <td>grep str -r /tmp/*</td>            <td>在目录 ‘/tmp’ 及其子目录中查找 “str”</td>        </tr>        <tr>            <td>diff file1 file2</td>            <td>找出两个文件的不同处</td>        </tr>        <tr>            <td>sdiff file1 file2</td>            <td>以对比的方式显示两个文件的不同</td>        </tr>          <tr>            <td>vi file</td>            <td>                <div class="table-box"><table>                    <thead>                        <tr>                            <th>操作</th>                            <th>解析</th>                        </tr>                    </thead>                    <tbody>                        <tr>                            <td>i</td>                            <td>进入编辑文本模式</td>                        </tr>                        <tr>                            <td>Esc</td>                            <td>退出编辑文本模式</td>                        </tr>                        <tr>                            <td>:w</td>                            <td>保存当前修改</td>                        </tr>                        <tr>                            <td>:q</td>                            <td>不保存退出vi</td>                        </tr>                        <tr>                            <td>:wq</td>                            <td>保存当前修改并退出vi</td>                        </tr>                    </tbody>                </table></div>            </td>        </tr>    </tbody></table></div><h3 id="查询操作"><a name="t5"></a><a name="t5"></a>查询操作</h3><div class="table-box"><table><thead><tr>  <th>命令</th>  <th align="center">解析</th></tr></thead><tbody><tr>  <td>find / -name file1</td>  <td align="center">从 ‘/’ 开始进入根文件系统查找文件和目录</td></tr><tr>  <td>find / -user user1</td>  <td align="center">查找属于用户 ‘user1’ 的文件和目录</td></tr><tr>  <td>find /home/user1 -name *.bin</td>  <td align="center">在目录 ‘/ home/user1’ 中查找以 ‘.bin’ 结尾的文件</td></tr><tr>  <td>find /usr/bin -type f -atime +100</td>  <td align="center">查找在过去100天内未被使用过的执行文件</td></tr><tr>  <td>find /usr/bin -type f -mtime -10</td>  <td align="center">查找在10天内被创建或者修改过的文件</td></tr><tr>  <td>locate *.ps</td>  <td align="center">寻找以 ‘.ps’ 结尾的文件，先运行 ‘updatedb’ 命令</td></tr><tr>  <td>find -name ‘*.[ch]’ | xargs grep -E ‘expr’</td>  <td align="center">在当前目录及其子目录所有.c和.h文件中查找 ‘expr’</td></tr><tr>  <td>find -type f -print0 | xargs -r0 grep -F ‘expr’</td>  <td align="center">在当前目录及其子目录的常规文件中查找 ‘expr’</td></tr><tr>  <td>find -maxdepth 1 -type f | xargs grep -F ‘expr’</td>  <td align="center">在当前目录中查找 ‘expr’</td></tr></tbody></table></div><h3 id="压缩解压"><a name="t6"></a><a name="t6"></a>压缩、解压</h3><div class="table-box"><table><thead><tr>  <th>命令</th>  <th align="center">解析</th></tr></thead><tbody><tr>  <td>bzip2 file1</td>  <td align="center">压缩 file1</td></tr><tr>  <td>bunzip2 file1.bz2</td>  <td align="center">解压 file1.bz2</td></tr><tr>  <td>gzip file1</td>  <td align="center">压缩 file1</td></tr><tr>  <td>gzip -9 file1</td>  <td align="center">最大程度压缩 file1</td></tr><tr>  <td>gunzip file1.gz</td>  <td align="center">解压 file1.gz</td></tr><tr>  <td>tar -cvf archive.tar file1</td>  <td align="center">把file1打包成 archive.tar（-c: 建立压缩档案；-v: 显示所有过程；-f: 使用档案名字，是必须的，是最后一个参数）</td></tr><tr>  <td>tar -cvf archive.tar file1 dir1</td>  <td align="center">把 file1，dir1 打包成 archive.tar</td></tr><tr>  <td>tar -tf archive.tar</td>  <td align="center">显示一个包中的内容</td></tr><tr>  <td>tar -xvf archive.tar</td>  <td align="center">释放一个包</td></tr><tr>  <td>tar -xvf archive.tar -C /tmp</td>  <td align="center">把压缩包释放到 /tmp目录下</td></tr><tr>  <td>zip file1.zip file1</td>  <td align="center">创建一个zip格式的压缩包</td></tr><tr>  <td>zip -r file1.zip file1 dir1</td>  <td align="center">把文件和目录压缩成一个zip格式的压缩包</td></tr><tr>  <td>unzip file1.zip</td>  <td align="center">解压一个zip格式的压缩包到当前目录</td></tr><tr>  <td>unzip test.zip -d /tmp/</td>  <td align="center">解压一个zip格式的压缩包到 /tmp 目录</td></tr></tbody></table></div><h3 id="yum安装器"><a name="t7"></a><a name="t7"></a>yum安装器</h3><div class="table-box"><table><thead><tr>  <th>命令</th>  <th align="center">解析</th></tr></thead><tbody><tr>  <td>yum -y install [package]</td>  <td align="center">下载并安装一个rpm包</td></tr><tr>  <td>yum localinstall [package.rpm]</td>  <td align="center">安装一个rpm包，使用你自己的软件仓库解决所有依赖关系</td></tr><tr>  <td>yum -y update</td>  <td align="center">更新当前系统中安装的所有rpm包</td></tr><tr>  <td>yum update [package]</td>  <td align="center">更新一个rpm包</td></tr><tr>  <td>yum remove [package]</td>  <td align="center">删除一个rpm包</td></tr><tr>  <td>yum list</td>  <td align="center">列出当前系统中安装的所有包</td></tr><tr>  <td>yum search [package]</td>  <td align="center">在rpm仓库中搜寻软件包</td></tr><tr>  <td>yum clean [package]</td>  <td align="center">清除缓存目录（/var/cache/yum）下的软件包</td></tr><tr>  <td>yum clean headers</td>  <td align="center">删除所有头文件</td></tr><tr>  <td>yum clean all</td>  <td align="center">删除所有缓存的包和头文件</td></tr></tbody></table></div><h3 id="网络相关"><a name="t8"></a><a name="t8"></a>网络相关</h3><div class="table-box"><table><thead><tr>  <th>命令</th>  <th align="center">解析</th></tr></thead><tbody><tr>  <td>ifconfig eth0</td>  <td align="center">显示一个以太网卡的配置</td></tr><tr>  <td>ifconfig eth0 192.168.1.1 netmask 255.255.255.0</td>  <td align="center">配置网卡的IP地址</td></tr><tr>  <td>ifdown eth0</td>  <td align="center">禁用 ‘eth0’ 网络设备</td></tr><tr>  <td>ifup eth0</td>  <td align="center">启用 ‘eth0’ 网络设备</td></tr><tr>  <td>iwconfig eth1</td>  <td align="center">显示一个无线网卡的配置</td></tr><tr>  <td>iwlist scan</td>  <td align="center">显示无线网络</td></tr><tr>  <td>ip addr show</td>  <td align="center">显示网卡的IP地址</td></tr></tbody></table></div><h3 id="系统相关"><a name="t9"></a><a name="t9"></a>系统相关</h3><div class="table-box"><table><thead><tr>  <th>命令</th>  <th align="center">解析</th></tr></thead><tbody><tr>  <td>su -</td>  <td align="center">切换到root权限（与su有区别）</td></tr><tr>  <td>shutdown -h now</td>  <td align="center">关机</td></tr><tr>  <td>shutdown -r now</td>  <td align="center">重启</td></tr><tr>  <td>top</td>  <td align="center">罗列使用CPU资源最多的linux任务 （输入q退出）</td></tr><tr>  <td>pstree</td>  <td align="center">以树状图显示程序</td></tr><tr>  <td>man ping</td>  <td align="center">查看参考手册（例如ping 命令）</td></tr><tr>  <td>passwd</td>  <td align="center">修改密码</td></tr><tr>  <td>df -h</td>  <td align="center">显示磁盘的使用情况</td></tr><tr>  <td>cal -3</td>  <td align="center">显示前一个月，当前月以及下一个月的月历</td></tr><tr>  <td>cal 10 1988</td>  <td align="center">显示指定月，年的月历</td></tr><tr>  <td>date –date ‘1970-01-01 UTC 1427888888 seconds’</td>  <td align="center">把一相对于1970-01-01 00:00的秒数转换成时间</td></tr></tbody></table></div><h2 id="xsheel-5相关操作"><a name="t10"></a><a name="t10"></a>XSheel 5相关操作</h2><h3 id="窗体快捷键"><a name="t11"></a><a name="t11"></a>窗体快捷键</h3><div class="table-box"><table><thead><tr>  <th>命令</th>  <th align="center">解析</th></tr></thead><tbody><tr>  <td>Ctrl + u</td>  <td align="center">删除光标之前到行首的字符</td></tr><tr>  <td>Ctrl + k</td>  <td align="center">删除光标之前到行尾的字符</td></tr><tr>  <td>Ctrl + c</td>  <td align="center">取消当前行输入的命令，相当于Ctrl + Break</td></tr><tr>  <td>Ctrl + a</td>  <td align="center">光标移动到行首（ahead of line），相当于通常的Home键</td></tr><tr>  <td>Ctrl + e</td>  <td align="center">光标移动到行尾（end of line）</td></tr><tr>  <td>Ctrl + f</td>  <td align="center">光标向前（forward）移动一个字符位置</td></tr><tr>  <td>Ctrl + b</td>  <td align="center">光标往回（backward）移动一个字符位置</td></tr><tr>  <td>Ctrl + l</td>  <td align="center">清屏，相当于执行clear命令</td></tr><tr>  <td>Ctrl + r</td>  <td align="center">显示:号提示，根据用户输入查找相关历史命令（reverse-i-search）</td></tr><tr>  <td>Ctrl + w</td>  <td align="center">删除从光标位置前到当前所处单词（word）的开头</td></tr><tr>  <td>Ctrl + t</td>  <td align="center">交换光标位置前的两个字符</td></tr><tr>  <td>Ctrl + y</td>  <td align="center">粘贴最后一次被删除的单词</td></tr><tr>  <td>Ctrl + Alt + d</td>  <td align="center">显示桌面</td></tr><tr>  <td>Alt + b</td>  <td align="center">光标往回（backward）移动到前一个单词</td></tr><tr>  <td>Alt + d</td>  <td align="center">删除从光标位置到当前所处单词的末尾</td></tr><tr>  <td>Alt + F2</td>  <td align="center">运行</td></tr><tr>  <td>Alt + F4</td>  <td align="center">关闭当前窗口</td></tr><tr>  <td>Alt + F9</td>  <td align="center">最小化当前窗口</td></tr><tr>  <td>Alt + F10</td>  <td align="center">最大化当前窗口</td></tr><tr>  <td>Alt + Tab</td>  <td align="center">切换窗口</td></tr><tr>  <td>Alt + 左键</td>  <td align="center">移动窗口（或在最下面的任务栏滚动鼠标滑轮）</td></tr></tbody></table></div><h3 id="操作小技巧"><a name="t12"></a><a name="t12"></a>操作小技巧</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;鼠标中间键：粘贴突出显示的文本。(使用鼠标左键来选择文本。把光标指向想粘贴文本的地方。点击鼠标中间键来粘贴。)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tab：命令行自动补全。使用 shell 提示时可使用这一方式。键入命令或文件名的前几个字符，然后按 [Tab] 键，它会自动补全命令或显示匹配键入字符的所有命令。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在滚动条的空白处点击鼠标中键：屏幕即滚动到那个地方。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在桌面或文件管理器中直接按 / 就可以输入位置，打开文件管理器。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在 vi 或 Firefox 中直接按 / 即可进入快速搜索状态。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;网站链接和图片可直接拖放到桌面或者目录，可以马上下载。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直接将文件管理器中的文件拖到终端中就可以在终端中得到完整的路径名。</p><h2 id="结束语"><a name="t13"></a><a name="t13"></a>结束语</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实要学好Linux的操作并不是很困难的事情，在平常的使用过程中，碰到问题，学会去网上寻找答案不失为一个非常好的手段！谢谢大家！</p>                                    <p>转载：(http://blog.csdn.net/o0darknessyy0o/article/details/52072054#t1)</p></div><div data-report-view="{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/o0DarkNessYY0o/article/details/52072054&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}"><div></div></div>                <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-60ecaf1f42.css" rel="stylesheet">                                </div>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC模板（二）</title>
      <link href="posts/1393401608/"/>
      <url>posts/1393401608/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇没有采用数据库连接池，如需要数据库连接池，可以参考我上一篇 JDBC 模板</p></blockquote><p><strong>JDBC 项目结构：</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200531160114731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="项目结构"><br><strong>整体结构</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200531160233380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="整体结构"><br><strong>代码示例：</strong></p><ul><li>配置数据库加载文件</li><li>同时在项目工程下创建 bin 目录来存在第三方 jar 包<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200531160638759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70"></li><li>导入第三方 jar 包【连接数据库】<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200531160814693.png" alt="第三方jar包"></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user=root</span><br><span class="line">password=【这里填写自己的数据库连接密码】</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/test?rewriteBatchedStatements=true</span></span><br><span class="line">driveClass=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><ul><li>【JDBCUtils】操作数据库的工具类</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">package com.oy.online.JDBC1.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*@Description 操作数据库的工具类</span></span><br><span class="line"><span class="comment">*@Author OY</span></span><br><span class="line"><span class="comment">*@Date 2020/5/30</span></span><br><span class="line"><span class="comment">*@Time 17:08</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> &#123;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *@Description 获取数据库连接</span></span><br><span class="line"><span class="comment">    *@Param</span></span><br><span class="line"><span class="comment">    *@Return</span></span><br><span class="line"><span class="comment">    *@Author OY</span></span><br><span class="line"><span class="comment">    *@Date 2020/5/30</span></span><br><span class="line"><span class="comment">    *@Time 17:09</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> throws Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件中的4个基本信息</span></span><br><span class="line">        InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">        pros.load(is);</span><br><span class="line"></span><br><span class="line">        String user = pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String url = pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        String driveClass = pros.getProperty(<span class="string">&quot;driveClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载驱动</span></span><br><span class="line">        Class.forName(driveClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.获取连接</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *@Description 关闭资源操作</span></span><br><span class="line"><span class="comment">    *@Param [conn, ps]</span></span><br><span class="line"><span class="comment">    *@Return void</span></span><br><span class="line"><span class="comment">    *@Author OY</span></span><br><span class="line"><span class="comment">    *@Date 2020/5/30</span></span><br><span class="line"><span class="comment">    *@Time 17:21</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(Connection conn, Statement ps)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ps != null)&#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(conn != null)&#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(Connection conn,Statement ps,ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ps != null)&#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(conn != null)&#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(rs != null)&#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【Customers】</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">package com.oy.online.JDBC1.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*@Description</span></span><br><span class="line"><span class="comment">*@Author OY</span></span><br><span class="line"><span class="comment">*@Date 2020/5/30</span></span><br><span class="line"><span class="comment">*@Time 17:23</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Date  birth;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(<span class="keyword">int</span> id, String name, String email, Date birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEamil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEamil</span><span class="params">(String eamil)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = eamil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Date birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Customer&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, eamil=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, birth=&quot;</span> + birth +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>【BaseDAO】</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">ackage com.oy.online.JDBC1.DAO;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oy.online.JDBC1.util.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @Description 封装针对于数据表的通用的操作</span></span><br><span class="line"><span class="comment"> * @Author OY</span></span><br><span class="line"><span class="comment"> * @Date 2020/5/30</span></span><br><span class="line"><span class="comment"> * @Time 17:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> abstract <span class="class"><span class="keyword">class</span> <span class="title">BaseDAO</span> &#123;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @Description 通用的增删改</span></span><br><span class="line"><span class="comment">     * @Param [conn, sql, args]</span></span><br><span class="line"><span class="comment">     * @Return int</span></span><br><span class="line"><span class="comment">     * @Author OY</span></span><br><span class="line"><span class="comment">     * @Date 2020/5/30</span></span><br><span class="line"><span class="comment">     * @Time 17:31</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Connection conn, String sql, Object... args)</span> </span>&#123;</span><br><span class="line">        PreparedStatement ps = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.预编译sql语句，返回preparedStatement的实例</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 2.填充占位符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3.执行</span></span><br><span class="line">            <span class="keyword">return</span> ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtils.closeResource(null, ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @Description 查询数据表中的一条记录</span></span><br><span class="line"><span class="comment">     * @Param [conn, clazz, sql, args]</span></span><br><span class="line"><span class="comment">     * @Return T</span></span><br><span class="line"><span class="comment">     * @Author OY</span></span><br><span class="line"><span class="comment">     * @Date 2020/5/30</span></span><br><span class="line"><span class="comment">     * @Time 17:44</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getInstance</span><span class="params">(Connection conn, Class&lt;T&gt; clazz, String sql, Object... args)</span> </span>&#123;</span><br><span class="line">        PreparedStatement ps = null;</span><br><span class="line">        ResultSet rs = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//2.填充占位符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 3.执行</span></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">// 获取结果集的元数据</span></span><br><span class="line">            ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line">            <span class="comment">// 获取结果集中的列数</span></span><br><span class="line">            <span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                T t = clazz.newInstance();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line">                    <span class="comment">// 获取列值</span></span><br><span class="line">                    Object colunmnValue = rs.getObject(i + <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">// 获取每个列的列名</span></span><br><span class="line">                    String columnLabel = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    Field field = clazz.getDeclaredField(columnLabel);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    field.<span class="built_in">set</span>(t,colunmnValue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtils.closeResource(null, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @Description 查询数据表中的多条数据</span></span><br><span class="line"><span class="comment">     * @Param [conn, clazz, sql, args]</span></span><br><span class="line"><span class="comment">     * @Return java.util.List&lt;T&gt;</span></span><br><span class="line"><span class="comment">     * @Author OY</span></span><br><span class="line"><span class="comment">     * @Date 2020/5/30</span></span><br><span class="line"><span class="comment">     * @Time 17:46</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getForList</span><span class="params">(Connection conn, Class&lt;T&gt; clazz, String sql, Object...args)</span> </span>&#123;</span><br><span class="line">        PreparedStatement ps = null;</span><br><span class="line">        ResultSet rs = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line">            <span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建集合对象</span></span><br><span class="line">            ArrayList&lt;T&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                T t = clazz.newInstance();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line">                    Object columValue = rs.getObject(i + <span class="number">1</span>);</span><br><span class="line">                    String columnLabel = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    Field field = clazz.getDeclaredField(columnLabel);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    field.<span class="built_in">set</span>(t, columValue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">list</span>.add(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtils.closeResource(null, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *@Description 用于查询特殊值</span></span><br><span class="line"><span class="comment">    *@Param [conn, sql, args]</span></span><br><span class="line"><span class="comment">    *@Return E</span></span><br><span class="line"><span class="comment">    *@Author OY</span></span><br><span class="line"><span class="comment">    *@Date 2020/5/30</span></span><br><span class="line"><span class="comment">    *@Time 18:02</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">E <span class="title">getValue</span><span class="params">(Connection conn, String sql, Object... args)</span> </span>&#123;</span><br><span class="line">        PreparedStatement ps = null;</span><br><span class="line">        ResultSet rs = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">return</span> (E) rs.getObject(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtils.closeResource(null, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【CustomerDAO.java】</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">package com.oy.online.JDBC1.DAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oy.online.JDBC1.bean.Customer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*@Description</span></span><br><span class="line"><span class="comment">*@Author OY</span></span><br><span class="line"><span class="comment">*@Date 2020/5/30</span></span><br><span class="line"><span class="comment">*@Time 18:03</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> interface CustomerDAO &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *@Description 将cust对象添加到数据库中</span></span><br><span class="line"><span class="comment">    *@Param [conn, cust]</span></span><br><span class="line"><span class="comment">    *@Return void</span></span><br><span class="line"><span class="comment">    *@Author OY</span></span><br><span class="line"><span class="comment">    *@Date 2020/5/30</span></span><br><span class="line"><span class="comment">    *@Time 18:05</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Connection conn, Customer cust)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *@Description 针对指定的id，删除表中的一条记录</span></span><br><span class="line"><span class="comment">    *@Param [conn, id]</span></span><br><span class="line"><span class="comment">    *@Return void</span></span><br><span class="line"><span class="comment">    *@Author OY</span></span><br><span class="line"><span class="comment">    *@Date 2020/5/30</span></span><br><span class="line"><span class="comment">    *@Time 18:05</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deletById</span><span class="params">(Connection conn, <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *@Description 针对内存中的cust对象，去修改数据表中指定的记录</span></span><br><span class="line"><span class="comment">    *@Param [conn, cust]</span></span><br><span class="line"><span class="comment">    *@Return void</span></span><br><span class="line"><span class="comment">    *@Author OY</span></span><br><span class="line"><span class="comment">    *@Date 2020/5/30</span></span><br><span class="line"><span class="comment">    *@Time 18:07</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Connection conn, Customer cust)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *@Description 指定的id查询得到指定的customer对象</span></span><br><span class="line"><span class="comment">    *@Param [conn, id]</span></span><br><span class="line"><span class="comment">    *@Return com.oy.online.JDBC1.bean.Customer</span></span><br><span class="line"><span class="comment">    *@Author OY</span></span><br><span class="line"><span class="comment">    *@Date 2020/5/30</span></span><br><span class="line"><span class="comment">    *@Time 18:11</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">Customer <span class="title">getCustomerById</span><span class="params">(Connection conn, <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *@Description 查询表中的所有数据构成的集合</span></span><br><span class="line"><span class="comment">    *@Param [conn]</span></span><br><span class="line"><span class="comment">    *@Return java.util.List&lt;com.oy.online.JDBC1.bean.Customer&gt;</span></span><br><span class="line"><span class="comment">    *@Author OY</span></span><br><span class="line"><span class="comment">    *@Date 2020/5/30</span></span><br><span class="line"><span class="comment">    *@Time 18:12</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">getAll</span><span class="params">(Connection conn)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *@Description 返回数据表中的数据的条目数</span></span><br><span class="line"><span class="comment">    *@Param [conn]</span></span><br><span class="line"><span class="comment">    *@Return java.lang.Long</span></span><br><span class="line"><span class="comment">    *@Author OY</span></span><br><span class="line"><span class="comment">    *@Date 2020/5/30</span></span><br><span class="line"><span class="comment">    *@Time 18:14</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">Long <span class="title">getCount</span><span class="params">(Connection conn)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *@Description 返回数据表中最大的生日</span></span><br><span class="line"><span class="comment">    *@Param [conn]</span></span><br><span class="line"><span class="comment">    *@Return java.sql.Date</span></span><br><span class="line"><span class="comment">    *@Author OY</span></span><br><span class="line"><span class="comment">    *@Date 2020/5/30</span></span><br><span class="line"><span class="comment">    *@Time 18:15</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">Date <span class="title">getMaxBirth</span><span class="params">(Connection conn)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>【CustomerDAOImpI.java】</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package com.oy.online.JDBC1.DAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oy.online.JDBC1.bean.Customer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDAOImpI</span> <span class="title">extends</span> <span class="title">BaseDAO</span> <span class="title">implements</span> <span class="title">CustomerDAO</span> &#123;</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Connection conn, Customer cust)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into customers(name,email,birth)values(?,?,?)&quot;</span>;</span><br><span class="line">        update(conn,sql,cust.getName(),cust.getEamil(),cust.getBirth());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletById</span><span class="params">(Connection conn, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;delete from customers where id = ?&quot;</span>;</span><br><span class="line">        update(conn,sql, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Connection conn, Customer cust)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update customers set name = ? , email = ?, birth = ? where id = ?&quot;</span>;</span><br><span class="line">        update(conn, sql, cust.getName(),cust.getEamil(),cust.getBirth(),cust.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomerById</span><span class="params">(Connection conn, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line">        Customer customer = getInstance(conn,Customer.class, sql,id);</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">getAll</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select id ,name, email, birth from customers &quot;</span>;</span><br><span class="line">        List&lt;Customer&gt; <span class="built_in">list</span> = getForList(conn, Customer.class, sql);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getCount</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select count(*) from customers&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> getValue(conn, sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getMaxBirth</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select max(birth) from customers&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> getValue(conn, sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong>【text】</p><ul><li>测试数据库连接</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.oy.online.JDBC1.text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oy.online.JDBC1.util.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*@Description 测试数据库是否连接成功</span></span><br><span class="line"><span class="comment">*@Author OY</span></span><br><span class="line"><span class="comment">*@Date 2020/5/31</span></span><br><span class="line"><span class="comment">*@Time 14:46</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtilTest</span> &#123;</span></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> throws Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            Connection conn = JDBCUtils.getConnection();</span><br><span class="line">            System.out.println(conn);</span><br><span class="line">            JDBCUtils.closeResource(conn,null,null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>测试数据库增删改查连接</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">package com.oy.online.JDBC1.text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oy.online.JDBC1.DAO.CustomerDAOImpI;</span><br><span class="line"><span class="keyword">import</span> com.oy.online.JDBC1.bean.Customer;</span><br><span class="line"><span class="keyword">import</span> com.oy.online.JDBC1.util.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDAOTest</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> CustomerDAOImpI custs = <span class="keyword">new</span> CustomerDAOImpI();</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">            Date date = sdf.parse(<span class="string">&quot;2001-8-9&quot;</span>);</span><br><span class="line">            Customer cust = <span class="keyword">new</span> Customer(<span class="number">1</span>, <span class="string">&quot;小明&quot;</span>, <span class="string">&quot;xiaoming@123.com&quot;</span>, <span class="keyword">new</span> java.sql.Date(date.getTime()));</span><br><span class="line">            custs.insert(conn,cust);</span><br><span class="line">            System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        JDBCUtils.closeResource(conn,null,null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            custs.deletById(conn,<span class="number">30</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn, null,null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">            Date date = sdf.parse(<span class="string">&quot;2000-9-12&quot;</span>);</span><br><span class="line">            Customer cust = <span class="keyword">new</span> Customer(<span class="number">31</span>, <span class="string">&quot;小白&quot;</span>, <span class="string">&quot;xiaobai@126.com&quot;</span>,<span class="keyword">new</span> java.sql.Date(date.getTime()));</span><br><span class="line">            custs.update(conn, cust);</span><br><span class="line">            System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn,null,null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCustomerById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            Customer cust = custs.getCustomerById(conn, <span class="number">31</span>);</span><br><span class="line">            System.out.println(cust);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn, null,null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            List&lt;Customer&gt; <span class="built_in">list</span> = custs.getAll(conn);</span><br><span class="line">            <span class="built_in">list</span>.forEach(System.out::println);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn,null,null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            Long count = custs.getCount(conn);</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn, null, null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMaxBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            java.sql.Date max = custs.getMaxBirth(conn);</span><br><span class="line">            System.out.println(max);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn,null,null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC数据连接池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript面向对象</title>
      <link href="posts/325844318/"/>
      <url>posts/325844318/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言： 笔记中的详细代码，我已经打包放在笔记的最后。</p></blockquote><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="1-1-对象（Object）"><a href="#1-1-对象（Object）" class="headerlink" title="1.1 对象（Object）"></a>1.1 对象（Object）</h2><p>对象时 JS 中的引用户数类型</p><p>对象时一种复合数据类型，在对象可以保存多个不同数据类型的属性</p><p>使用 typeof 检查一个对象时，会返回 object</p><h3 id="1-1-1-创建对象"><a href="#1-1-1-创建对象" class="headerlink" title="1.1.1 创建对象"></a>1.1.1 创建对象</h3><p> <strong>方式一：</strong> var obj = new Object();</p><p> <strong>方式二：</strong> var obj = {};</p><ul><li><p><strong>代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 方式一:</span><br><span class="line">var obj &#x3D; new Object();</span><br><span class="line">obj.name &#x3D; &quot;小明&quot;;</span><br><span class="line">obj.age &#x3D; 12;</span><br><span class="line">obj.sex &#x3D; &#39;M&#39;;</span><br><span class="line">console.log(obj);</span><br><span class="line">console.log(obj.name);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方式二</span><br><span class="line">var obj2 &#x3D; &#123;&#125;;</span><br><span class="line">obj2.name &#x3D; &quot;小红&quot;;</span><br><span class="line">obj2.age &#x3D; 12;</span><br><span class="line">console.log(obj2.name);</span><br></pre></td></tr></table></figure><h3 id="1-1-2-向对象中添加属性"><a href="#1-1-2-向对象中添加属性" class="headerlink" title="1.1.2 向对象中添加属性"></a>1.1.2 向对象中添加属性</h3></li></ul><p><strong>语法：</strong></p><p> 对象.属性名 = 属性值 对象[“属性名”] = 属性值</p><p> 对象的属性名没有任何的要求，不需要遵守表示符的规范，但是尽量按照表示符的要求去写。</p><p> 属性值也可以任意的数据类型。</p><h3 id="1-1-3-读取对象的属性"><a href="#1-1-3-读取对象的属性" class="headerlink" title="1.1.3 读取对象的属性"></a>1.1.3 读取对象的属性</h3><p><strong>语法：</strong></p><p> 对象.属性名</p><p> 对象[“属性名”]</p><p> 如果读取一个对象吧没有的属性，它不会报错，而是返回一个 undefined</p><h3 id="1-1-4-删除对象中的属性"><a href="#1-1-4-删除对象中的属性" class="headerlink" title="1.1.4 删除对象中的属性"></a>1.1.4 删除对象中的属性</h3><p><strong>语法：</strong></p><p> delect 对象.属性名</p><p> delect 对象[“属性名”]</p><ul><li><p><strong>代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj3 &#x3D; new Object();</span><br><span class="line">obj3.name &#x3D; &quot;小明&quot;;</span><br><span class="line">console.log(obj3.name); &#x2F;&#x2F;小明</span><br><span class="line">delete obj3.name;</span><br><span class="line">console.log(obj3.name);&#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure><h3 id="1-1-5-使用-in-检查对象中是否含有指定的属性"><a href="#1-1-5-使用-in-检查对象中是否含有指定的属性" class="headerlink" title="1.1.5 使用 in 检查对象中是否含有指定的属性"></a>1.1.5 使用 in 检查对象中是否含有指定的属性</h3></li></ul><p><strong>语法：</strong></p><p> “属性名 in 对象”</p><p> 如果在对象中含有该属性，则返回 true</p><p> 如果没有则返回 false</p><ul><li><p><strong>代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;name&quot; in obj);</span><br></pre></td></tr></table></figure><h3 id="1-1-6-使用对象字面量，在创建对象时直接向对象中添加属性"><a href="#1-1-6-使用对象字面量，在创建对象时直接向对象中添加属性" class="headerlink" title="1.1.6 使用对象字面量，在创建对象时直接向对象中添加属性"></a>1.1.6 使用对象字面量，在创建对象时直接向对象中添加属性</h3></li></ul><p><strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">属性名.属性值，</span><br><span class="line">属性名.属性值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-7-基本数据类型和引用数据类型"><a href="#1-1-7-基本数据类型和引用数据类型" class="headerlink" title="1.1.7 基本数据类型和引用数据类型"></a>1.1.7 基本数据类型和引用数据类型</h3><p><strong>基本数据类型：</strong></p><p> String Number Booolean Null Underfined</p><p><strong>引用数据类型:</strong></p><p> Object 基本数据类型的数据，变量是直接保存它的值。</p><p> 变量与变量之间是相互独立的，修改一个变量不会影响其他的变量</p><p> 引用数据类型的数据，变量是保存的对象的引用（内存地址）</p><p> 如果多个变量指向的是同一个对象，此时修改一个变量的属性，会影响其他的变量。</p><p> 比价两个变量时，对于基本数据了类型，比较的就是值，对于引用数据类型比较的是地址，地址相同才相同</p><h2 id="1-2-函数-（Function）"><a href="#1-2-函数-（Function）" class="headerlink" title="1.2 函数 （Function）"></a>1.2 函数 （Function）</h2><p> 函数也是一个对象，也具有普通对象的功能</p><p> 函数中可以封装一些代码，在需要的时候可以调用函数来执行这些代码</p><p> 使用 typeof 检查一个函数是会返回 function</p><h3 id="1-2-1-创建函数"><a href="#1-2-1-创建函数" class="headerlink" title="1.2.1 创建函数"></a>1.2.1 创建函数</h3><p><strong>函数声明</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 函数名(形参1,形参2...形参N)&#123;</span><br><span class="line">   语句...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>函数表达式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var 函数名 &#x3D; function(形参1,形参2...形参N)&#123;</span><br><span class="line">    语句...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>代码示例</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">    console.log(&quot;这是一个函数&quot;);</span><br><span class="line">    alert(&quot;哈哈哈&quot;);</span><br><span class="line">    document.write(&quot;------(&gt;_&lt;)-----&lt;br&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br><span class="line">var fun2 &#x3D;  function()&#123;</span><br><span class="line">    console.log(&quot;这是一个函数2&quot;);</span><br><span class="line">    alert(&quot;哈哈哈&quot;);</span><br><span class="line">    document.write(&quot;这是一个函数&quot;);</span><br><span class="line">&#125;</span><br><span class="line">fun2();</span><br></pre></td></tr></table></figure><h3 id="1-2-2-调用函数"><a href="#1-2-2-调用函数" class="headerlink" title="1.2.2 调用函数"></a>1.2.2 调用函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：函数对象（[实参1，实参2...实参N]）;</span><br><span class="line">    fun() 、sum()、alert()、Number()、parselnt()</span><br><span class="line">当我们调用函数时，函数中封装的代码会按照编写的顺序执行</span><br></pre></td></tr></table></figure><h3 id="1-2-3-形参和实参"><a href="#1-2-3-形参和实参" class="headerlink" title="1.2.3 形参和实参"></a>1.2.3 形参和实参</h3><p><strong>形参：</strong>形式参数</p><p> 定义函数时，可以在()中定义一个或多个形参，形参之间使用，隔开定义形参就相当于在函数内声明了对应的变量但是并不赋值。形参会在使用时才赋值。</p><p><strong>实参：</strong>实际参数</p><p> 调用函数时，可以在()传递实参，传递的实参会赋值给对应的形参，调用函数时 JS 解析器不会检查实参的类型和个数，可以传递任意数据类型的值。</p><p> 如果实参的数量大于形参，多余的实参将不会赋值</p><p> 如果实参的小于形参，则没有对应实参的形参将会赋值 undefined</p><ul><li><p><strong>代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun1(a, b, c)&#123;</span><br><span class="line">    console.log(a + b +c);</span><br><span class="line">&#125;</span><br><span class="line">fun1(1,2,3);</span><br></pre></td></tr></table></figure><h3 id="1-2-4-返回值"><a href="#1-2-4-返回值" class="headerlink" title="1.2.4 返回值"></a>1.2.4 返回值</h3></li></ul><p><strong>数的执行的结果</strong></p><p> 使用 return 来设置函数的返回值</p><p><strong>语法： return 值;</strong></p><p> 该值就会成为函数的返回值，可以通过一个变量类接收返回值</p><p> return 后边的代码都不会执行。一旦执行到 return 语句时，函数就会立即退出。</p><p> return 后可以跟任意的类型值，可以是基本数据类型，也可以是一个对象。</p><p> 如果 return 后不跟值，或者是不写 return 则函数默认返回 undefined。</p><p><strong>break、coutinue 和 return</strong></p><p> break 退出循环</p><p> continue 跳出当次循环</p><p> return 退出函数 参数，函数的实参也可以是任意的数据类型</p><h3 id="1-2-5-方法"><a href="#1-2-5-方法" class="headerlink" title="1.2.5 方法"></a>1.2.5 方法</h3><p>可以将一个函数设置为一个对象的属性,当一个对象的属性是一个函数时，我们称这个函数该对象的方法</p><p> <strong>对象.方法名();</strong> <strong>函数名();</strong></p><h2 id="1-3-作用域"><a href="#1-3-作用域" class="headerlink" title="1.3 作用域"></a>1.3 作用域</h2><p>作用域简单来说就是一个变量的作用范围。</p><p>在 JS 中作用域分成两种：</p><ul><li><p><strong>&lt;1&gt; 全局作用域</strong></p><p>直接在 script 标签中编写的代码都运行在全局域中</p><p>全局作用域在打开页面时创建，在页面关闭时销魂。</p><p>全局作用域中有一个全局对象 window，window 对象是由浏览器提供，可以在页面中直接使用，它代表的是整个的浏览器的窗口。</p><p>在全局作用域中创建的变量都会作为 window 对象的属性保存，在全局作用域中创建的函数都会作为 window 对象的方法保存</p><p>在全局作用域中创建的变量和函数可以在也页面的任意位置访问，在函数作用域也可以访问到全局作用域的变量。</p></li><li><p><strong>&lt;2&gt; 函数作用域</strong></p><p>函数作用域是函数执行时创建的作用域，每次调用函数都会创建一个新的函数作用域。</p><p>函数作用域在函数执行时创建，在函数执行结束都会销毁。</p><p>在函数作用域中创建的变量，不能在全局中访问。</p><p>当在函数作用域中使用一个变量时，它会先找自身的作用域寻找，</p><p>如果找到了则直接使用，如果没有找到则到上一级作用域中寻找，</p><p>如果找到了则使用，找不到则继续往上找，一直找</p></li><li><p><strong>&lt;3&gt; 变量的的声明提起</strong></p><p>在全局作用域中，使用 var 关键字声明的变量会在所在的代码执行之前被声明，但是不会赋值，所以我们可以在变量声明前使用变量。但是不使用 var 关键字声明的变量不会被执行提前。</p><p>在函数作用域中，也具有改特性，使用 var 关键字声明的变量会在函数所在的代码执行前被声明的变量会在函数所有的代码执行前被声明，如果没有使用 var 关键字声明变量，则变量会变成全局变量</p></li><li><p><strong>&lt;4&gt; 函数的声明提前</strong></p><p>在全局作用域中，使用函数声明创建的函数(function fun(){}),会在所有的代码块之前被创建，也就是我们可以在函数声明去调用函数，但是使用函数表达式(var fun = function(){})创建的函数没有该特性</p><p>在函数作用域中，使用函数声明创建的函数，会在所有的函数中代码执行之前就创建好了。</p></li><li><p><strong>代码示例</strong></p><p>&lt;1&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 12;</span><br><span class="line">var b &#x3D; 10;</span><br><span class="line">function fun()&#123;</span><br><span class="line">    console.log(&quot;我是fun函数&quot;);</span><br><span class="line">&#125;</span><br><span class="line">function fun2( a, b)&#123;</span><br><span class="line">    window.alert(a+b);</span><br><span class="line">&#125;</span><br><span class="line">window.fun();</span><br><span class="line">window.fun2(a,b);</span><br></pre></td></tr></table></figure><p>&lt;2&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fun();</span><br><span class="line">&#x2F;&#x2F; 函数声明，会被提前创建</span><br><span class="line">function fun()&#123;</span><br><span class="line">    console.log(&quot;我是一个fun函数&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">fun2();</span><br><span class="line">&#x2F;&#x2F; 函数表达式，不会提前创建</span><br><span class="line">var fun2 &#x3D; function () &#123;</span><br><span class="line">    console.log(&quot;我是fun2函数&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&lt;3&gt;、&lt;4&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 10;</span><br><span class="line">function fun()&#123;</span><br><span class="line">    var a &#x3D; 12;</span><br><span class="line">    console.log(&quot;a的值为:&quot;+a);</span><br><span class="line">&#125;</span><br><span class="line"> fun(); &#x2F;&#x2F; 12</span><br><span class="line">function fun2()&#123;</span><br><span class="line">    console.log(a);</span><br><span class="line">    var a &#x3D; 12;</span><br><span class="line">&#125;</span><br><span class="line"> fun2(); &#x2F;&#x2F; undefined</span><br><span class="line"></span><br><span class="line">function fun3()&#123;</span><br><span class="line">    console.log(a);</span><br><span class="line">    a &#x3D; 16;</span><br><span class="line">&#125;</span><br><span class="line">fun3(); &#x2F;&#x2F; 10</span><br><span class="line">console.log(a); &#x2F;&#x2F; 16</span><br></pre></td></tr></table></figure><h2 id="1-4-this-上下文对象"><a href="#1-4-this-上下文对象" class="headerlink" title="1.4 this(上下文对象)"></a>1.4 this(上下文对象)</h2></li></ul><p>我们每次调用函数时，解析器都会将一个上下文对象作为隐含的参数传递进函数。</p><p> 使用 this 来引用上下文对象，根据函数的形式不同，this 的值也不同</p><p>this 的不同的情况：</p><p> 1.函数不同的形式调用时,this 是 window</p><p> 2.以方法的形式调用时,this 就是调用方法的对象</p><p> 3.以构造函数的形式调用时，this 就是新创建对象</p><ul><li><strong>代码示例</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">    console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">var obj &#x3D;&#123;</span><br><span class="line">    name : &quot;小明&quot;,</span><br><span class="line">    sayName : fun</span><br><span class="line">&#125;;</span><br><span class="line">var obj2 &#x3D; &#123;</span><br><span class="line">    name : &quot;小红&quot;,</span><br><span class="line">    sayName : fun</span><br><span class="line">&#125;;</span><br><span class="line">obj.sayName(); &#x2F;&#x2F;小明</span><br><span class="line">obj2.sayName(); &#x2F;&#x2F; 小红</span><br></pre></td></tr></table></figure><h2 id="1-5-构造函数"><a href="#1-5-构造函数" class="headerlink" title="1.5 构造函数"></a>1.5 构造函数</h2><p> 构造函数时专门用来创建对象的函数</p><p> 一个构造函数我们也可以称为一个类 通过一个构造函数创建的对象，我们称该对象时这个构造函数的实例</p><p> 通过同一个构造函数创建的对象，我们称为一类对象 构造函数就是一个普通的函数，只是它的调用方式不同，</p><p> 如果直接调用，它就是一个普通函数</p><p> 如果使用 new 来调用，则它就是一个构造函数</p><p> 例子：</p><p> function Person(){</p><p> }</p><ul><li><p><strong>代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function Person(name , age, gender )&#123;</span><br><span class="line">    this.name &#x3D; name ;</span><br><span class="line">    this.age &#x3D; age;</span><br><span class="line">    this.gendar &#x3D;  gender;</span><br><span class="line">    this.sayName &#x3D; function()&#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var p1 &#x3D; new Person(&quot;小明&quot;,12,&quot;男&quot;);</span><br><span class="line">console.log(p1);</span><br><span class="line">console.log(p1.age);</span><br></pre></td></tr></table></figure><h3 id="1-5-1-构造函数的执行流程"><a href="#1-5-1-构造函数的执行流程" class="headerlink" title="1.5.1 构造函数的执行流程"></a>1.5.1 构造函数的执行流程</h3><p>① 创建一个新的对象</p><p>② 将新的对象作为函数的上下文对象</p><p>③ 执行函数中的代码</p><p>④ 将新建的对象返回</p></li></ul><h3 id="1-5-2-instanceof-用来检查一个对象是否一个类的实例"><a href="#1-5-2-instanceof-用来检查一个对象是否一个类的实例" class="headerlink" title="1.5.2 instanceof 用来检查一个对象是否一个类的实例"></a>1.5.2 instanceof 用来检查一个对象是否一个类的实例</h3><p> 语法： 对象 instanceof 构造函数</p><p> 如果该对象时构建函数的实例，则返回 true,否则返回 false</p><p> Object 是所有对象的祖先，所以任何对象和 Object 做 instanceof 都会返回 true</p><ul><li><p><strong>代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(p1 instanceof Person); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h3 id="1-5-3-枚举对象中的属性"><a href="#1-5-3-枚举对象中的属性" class="headerlink" title="1.5.3 枚举对象中的属性"></a>1.5.3 枚举对象中的属性</h3><p>for…in</p></li></ul><p> <strong>语法：</strong></p><p> for(var 属性名 in 对象){</p><p> }</p><p> for…in 语句的循环体会执行多次，对象中有几个属性就会执行几次，每次将一个属性名赋值给我们定义的变量，我们可以通过它来获取对象中的属性。</p><ul><li><p><strong>代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function fun() &#123;</span><br><span class="line">    alert(this.name);</span><br><span class="line">&#125;</span><br><span class="line">function Person(name, age, gender)&#123;</span><br><span class="line">    this.name &#x3D; name;</span><br><span class="line">    this.age &#x3D; age;</span><br><span class="line">    this.gendar &#x3D; gender;</span><br><span class="line">    this.sayName &#x3D; fun;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var p1 &#x3D; new Person(&quot;小明&quot;,12,&quot;男&quot;);</span><br><span class="line">p1.sayName();</span><br><span class="line"></span><br><span class="line">for(var n  in p1)&#123;</span><br><span class="line">    console.log(&quot;属性&quot;+n);</span><br><span class="line">    console.log(&quot;属性值:&quot;+p1[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-原型-prototype"><a href="#1-6-原型-prototype" class="headerlink" title="1.6 原型(prototype)"></a>1.6 原型(prototype)</h2></li></ul><p>创建一个函数以后，解析器都会默认在函数添加一个数 prototype</p><p> prototype 属性指向的是一个对象，这个对象我们称为原型对象。</p><p>当函数作为构造函数使用，它所创建的对象中都会含有一个隐含的属性执行该原型对象。</p><p> 这个隐含的属性可以通过.** proto **来访问。</p><p>当原型对象就相当于一个公共的区域，凡是通过同一个构造函数创建的对象他们通常都可以访问到相同的原型对象</p><p> 我们可以将对象中公有的属性和方法统一添加到原型的对象中，这样我们只需要添加一次就可以使所有的对象都可以使用。</p><p>当我们去访问对象的一个属性或调用对象的一个方法时，它会先自身中寻找，</p><p> 如果在自身中找到，则直接使用。</p><p> 如果没有找到，则去原型对象中寻找，如果找到了则使用，</p><p> 如果没有找到，则去原型的原型中寻找，以此类推。直到找到 Object 原型为止，Object 的原型的原型的值为 null,</p><p> 如果依然没有找到就返回 undefined</p><p>hasOwnProperty()</p><p> 这个方法可以用来检查对象自身中含有某个属性</p><p> 语法：对象.hasOwnProperty(“属性名”)</p><ul><li><p><strong>代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function Myclass()&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 向MyClass的原型中添加一个Name属性</span><br><span class="line">Myclass.prototype.name  &#x3D; &quot;我是原型中的名字&quot;;</span><br><span class="line"></span><br><span class="line">var mc &#x3D; new Myclass();</span><br><span class="line">mc.age &#x3D; 18;</span><br><span class="line">console.log(mc.name);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用in检查对象中是否含有某个属性时，如果对象中没有但是原型中有，也会返回true</span><br><span class="line">console.log(&quot;name&quot; in mc); &#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">console.log(mc.hasOwnProperty(&quot;age&quot;)); &#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;console.log(mc.__proto__.hasOwnProperty(&quot;hasOwnProperty&quot;));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;console.log(mc.__proto__.__proto__.hasOwnProperty(&quot;hasOwnProperty&quot;));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;console.log(mc.__proto__.__proto__.__proto__);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;console.log(mc.hello);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;console.log(mc.__proto__.__proto__.__proto__)</span><br></pre></td></tr></table></figure><h2 id="1-7-数组（Array）"><a href="#1-7-数组（Array）" class="headerlink" title="1.7 数组（Array）"></a>1.7 数组（Array）</h2><p>数组也是一个对象，是一个用来存储数据对象和 Object 类似，但是它的存储效率比普通对象要高</p><p>数组中保存的内容我们称为元素</p><p>数组使用索引(index)来操作元素</p><p>索引指由 0 开始的整数</p></li></ul><h3 id="1-7-1-数组的操作"><a href="#1-7-1-数组的操作" class="headerlink" title="1.7.1 数组的操作"></a>1.7.1 数组的操作</h3><ul><li><p><strong>创建数组：</strong></p><p>var arr = new Array()</p><p>var arr = [];</p></li><li><p><strong>向数组中添加元素</strong></p><p>语法：</p><p>数组对象[索引] = 值;</p><p>arr[0] = 123;</p><p>arr[1] = “hello”;</p></li><li><p><strong>创建数组时直接添加元素</strong></p><p>语法：</p><p>var arr = [元素 1， 元素 2…元素 N];</p><p>例子：</p><p>var arr = [123,”hello”，true, null]</p></li><li><p><strong>代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; new Array();</span><br><span class="line">arr[0] &#x3D; 1;</span><br><span class="line">arr[1] &#x3D; 2;</span><br><span class="line">console.log(arr[0]);</span><br><span class="line">var arr &#x3D; &#123;&#125;;</span><br><span class="line">arr[0] &#x3D; 123;</span><br><span class="line">arr[1] &#x3D; &quot;hello&quot;;</span><br><span class="line">console.log(arr[0]);</span><br></pre></td></tr></table></figure></li><li><p><strong>获取和修改数组的长度</strong></p><p>使用 lenght 属性来操作数组的长度</p></li></ul><p> <strong>获取长度：</strong></p><p> 数组.length</p><p> length 获取到的是数组的最大索引+1</p><p> 对于连续的数组，length 获取到的就是数组中元素的个数</p><p> <strong>修改数组的长度</strong></p><p> 数组.length = 新长度</p><p> 如果修改后的 length 大于原长度，则多出的部分会空出来</p><p> 如果修改的 length 小于原长度，则数组中多出的元素会被删除</p><p> <strong>向数组的最后添加元素</strong></p><p> 数组[数组.length] = 值</p><ul><li><p><strong>代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr2 &#x3D; [1,2,3,4];</span><br><span class="line">console.log(arr2.length);</span><br><span class="line">arr2[arr2.length] &#x3D; 5;</span><br><span class="line">console.log(arr2);&#x2F;&#x2F; [1, 2, 3, 4, 5]</span><br><span class="line">console.log(arr2.length);</span><br></pre></td></tr></table></figure><h3 id="1-7-2-数组的方法"><a href="#1-7-2-数组的方法" class="headerlink" title="1.7.2 数组的方法"></a>1.7.2 数组的方法</h3></li><li><p><strong>push()</strong></p><p>用来向数组的末尾添加一个或多个元素，并返回数组的新长度 语法： 数组.push(元素 1，元素 2,元素 N)</p></li><li><p><strong>pop()</strong></p><p>用来删除数组的最后一个元素，并返回被删除的新长度</p></li><li><p><strong>unshift()</strong></p><p>向数组的前边添加一个或多个元素，并返回数组的新长度</p></li><li><p><strong>shuift()</strong></p><p>删除数组的前边添加一个元素，并返回被删除的元素 、</p></li><li><p><strong>slice()</strong></p><p>可以从一个数组中截取指定的元素</p><p>该方法不会影响原数组，而是将截取到的内容封装为一个新的数组并返回</p><p>参数：</p></li></ul><p> 1.截取开始位置的索引（包括开始位置）</p><p> 2.截取结束位置的索引（不包括结束位置）</p><p> 第二个可以省略不写，如果不写则一直截取到最后</p><p> 参数可以传递一个负值，如果是负值，则从后往前数</p><ul><li><p><strong>splice()</strong></p><p>可以用来删除数组中指定的元素，并使用新的元素替换</p><p>该方法会将删除的元素封装到新的数组中返回</p><p>参数：</p></li></ul><p> 1.删除开始位置的索引</p><p> 2.删除的个数</p><p> 3.三个以后，都是替换元素，这些元素将会插入到开始位置的索引的前边</p><h2 id="1-8-函数"><a href="#1-8-函数" class="headerlink" title="1.8 函数"></a>1.8 函数</h2><p> <strong>call()</strong></p><p> <strong>apply()</strong></p><p> 这两个方法都是函数对象的方法需要通过函数对象来调用</p><p> 通过两个方法都可以直接调用函数，并且可以通过第一个实参来指定函数中 this</p><p> 不同的是 call 是直接传递函数的实参 apply 需要将实参封装到一个数组中传递</p><ul><li><p><strong>代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function fun(a, b)&#123;</span><br><span class="line">    console.log(&quot;a&#x3D;&quot; + a);</span><br><span class="line">    console.log(&quot;b&#x3D;&quot; + b);</span><br><span class="line">&#125;</span><br><span class="line">var obj  &#x3D; &#123;</span><br><span class="line">  name : &quot;obj&quot;,</span><br><span class="line">  sayName:function () &#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; fun(obj,2,3)</span><br><span class="line">fun.apply(obj,[2,3]);</span><br></pre></td></tr></table></figure></li></ul><p><strong>arguments()</strong></p><p> arguments 和 this 类似，都是函数中的隐含的参数</p><p> arguments 是一个类数组元素，它用来封装函数执行过程中的实参,所以即使不定义形参，也可以通过 arguments 来使用实参</p><p> arguments 中有一个属性 callee 表示当前执行的函数对象</p><ul><li><p><strong>代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function fun(a,b)&#123;</span><br><span class="line">    &#x2F;&#x2F; console.log(arguments instanceof Array);</span><br><span class="line">    console.log(arguments.callee &#x3D;&#x3D; fun)</span><br><span class="line">&#125;;</span><br><span class="line">fun(&quot;hello&quot;,true); &#x2F;&#x2F; t</span><br></pre></td></tr></table></figure></li></ul><p><strong>this</strong></p><p> this 是函数的上下文对象，根据函数的调用方式不同会执行不同的对象</p><p> 1、函数的形式调用时，this 是 window</p><p> 2、以方法的形式调用的形式调用时，this 是调用方法的对象</p><p> 3、以构造函数的形式调用时，this 是新建的那个对象</p><p> 4、使用 call 和 apply 调用时，this 是指的那个对象</p><p> 5、在全局作用域中 this 代表 window</p><h2 id="1-9-包装类"><a href="#1-9-包装类" class="headerlink" title="1.9 包装类"></a>1.9 包装类</h2><p>在 JS 中为我们提供三个包装类：（不推荐）</p><p> String() Boolean() Number()</p><p> 通过这三个包装类可以创建基本类型的对象</p><p> 例子：</p><p> var num = new Number(2)</p><p> var str = new String(“hello”)</p><p> var bool = new Boolean(true)</p><p> 但是在实际应用中千万这么干。</p><p> 当我们去操作一个基本数据类型的属性和方法时，</p><p> 解析器会临时将其转换为对应的包装类，然后再去操作属性和方法，</p><p> 解析完成以后在将这个临时对象进行销毁。</p><h2 id="1-10-字符串的相关方法"><a href="#1-10-字符串的相关方法" class="headerlink" title="1.10 字符串的相关方法"></a>1.10 字符串的相关方法</h2><h3 id="1-10-1-length"><a href="#1-10-1-length" class="headerlink" title="1.10.1 length"></a>1.10.1 length</h3><p> 获取字符串的长度</p><h3 id="1-10-2-charAt"><a href="#1-10-2-charAt" class="headerlink" title="1.10.2 charAt()"></a>1.10.2 charAt()</h3><p> 根据索引获取指定的字符</p><h3 id="1-10-3-charCodeAt"><a href="#1-10-3-charCodeAt" class="headerlink" title="1.10.3 charCodeAt()"></a>1.10.3 charCodeAt()</h3><p> 根据索引获取指定的字符编码</p><h3 id="1-10-4-String-fromCharCode"><a href="#1-10-4-String-fromCharCode" class="headerlink" title="1.10.4 String.fromCharCode()"></a>1.10.4 String.fromCharCode()</h3><p> 根据字符编码获取字符</p><h3 id="1-10-5-indexOf"><a href="#1-10-5-indexOf" class="headerlink" title="1.10.5 indexOf()"></a>1.10.5 indexOf()</h3><h3 id="1-10-6-lastindexOf"><a href="#1-10-6-lastindexOf" class="headerlink" title="1.10.6 lastindexOf()"></a>1.10.6 lastindexOf()</h3><p> 从一个字符串中检索指定内容</p><p> 需要一个字符串作为参数，这个字符串就是要检索的内容，如果找到该内容，则会返回其第一次出现的索引，如果没有找到则返回-1。</p><p> 可以指定第二个参数，来表示开始查找的位置</p><p> indexOf()是从前往后找</p><p> lastindexOf()是从后向前找</p><h3 id="1-10-7-slice"><a href="#1-10-7-slice" class="headerlink" title="1.10.7 slice()"></a>1.10.7 slice()</h3><p> 可以从一个字符串中截取指定的内容，并将截取到的内容返回，不会影响变量</p><p> 参数：</p><p> 第一个:截取开始的位置（包括开始）</p><p> 第二个：截取结束的位置（不包括结束）</p><p> 可以省略第二个参数，如果省略则一直截取到最后</p><p> 可以传负数，如果是负数则从后往前数</p><h3 id="1-10-8-substr"><a href="#1-10-8-substr" class="headerlink" title="1.10.8 substr()"></a>1.10.8 substr()</h3><p> 和 slice()基本一致，不同的是它不能接受负值作为一个参数，如果设置一个负值，则会自动修正为 0</p><p> substring()中如果第二个参数小于第一个，自动调整位置</p><h3 id="1-10-9-toLowerCase"><a href="#1-10-9-toLowerCase" class="headerlink" title="1.10.9 toLowerCase()"></a>1.10.9 toLowerCase()</h3><p> 将字符串转换为小写并返回</p><h3 id="1-10-10-toUpperCase"><a href="#1-10-10-toUpperCase" class="headerlink" title="1.10.10 toUpperCase()"></a>1.10.10 toUpperCase()</h3><p> 将字符串转换为大写并返回</p><h3 id="1-10-11-split"><a href="#1-10-11-split" class="headerlink" title="1.10.11 split()"></a>1.10.11 split()</h3><p> 可以根据指定内容将一个字符串拆分为一个数组</p><p> 参数：</p><p> 需要一个字符串作为参数，将会根据字符串去拆分数组</p><p> 可以接收一个正则表达式，此时会根据正则表达式去拆分数组</p><h3 id="1-10-12-match"><a href="#1-10-12-match" class="headerlink" title="1.10.12 match()"></a>1.10.12 match()</h3><p> 可以将字符串中和正则表达式匹配的内容提取出来</p><p>参数：</p><p> 正则表达式，可以根据该正则表达式将字符串中符合要求的内容提取出来 并且封装到一个数组中返回</p><h3 id="1-10-13-replace"><a href="#1-10-13-replace" class="headerlink" title="1.10.13 replace()"></a>1.10.13 replace()</h3><p> 可以将字符串中指定内容替换为新的内容</p><p> 参数：</p><p> 第一个：被替换的内容，可以是一个正则表达式</p><p> 第二个：替换的新内容</p><h3 id="1-10-14-search"><a href="#1-10-14-search" class="headerlink" title="1.10.14 search()"></a>1.10.14 search()</h3><p> 可以根据正则表达式去字符串中查找指定的内容</p><p> 参数：</p><p> 正则表达式，将会根据该表达式查询内容，并且将第一个匹配到的内容的索引返回，如果没有匹配到任何内容，则返回-1。</p><ul><li><strong>代码示例</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个字符串</span><br><span class="line">var str &#x3D; &quot;Hello world&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * length 属性</span><br><span class="line"> *&#x2F;</span><br><span class="line">console.log(str.length); &#x2F;&#x2F; 11</span><br><span class="line">&#x2F;**</span><br><span class="line"> * charAt()</span><br><span class="line"> *&#x2F;</span><br><span class="line">var result &#x3D; str.charAt(2);</span><br><span class="line">console.log(result); &#x2F;&#x2F; l</span><br><span class="line">&#x2F;**</span><br><span class="line"> * charCodeAt()</span><br><span class="line"> *&#x2F;</span><br><span class="line">var result &#x3D; str.charCodeAt(0);</span><br><span class="line">console.log(result); &#x2F;&#x2F; 72</span><br><span class="line">&#x2F;**</span><br><span class="line"> * String.fromCharCode()</span><br><span class="line"> *&#x2F;</span><br><span class="line">var result &#x3D; String.fromCharCode(0x2692);</span><br><span class="line">console.log(result); &#x2F;&#x2F; ⚒</span><br><span class="line">&#x2F;**</span><br><span class="line"> * concat()</span><br><span class="line"> *&#x2F;</span><br><span class="line">result &#x3D; str.concat(&quot;你好，世界&quot;);</span><br><span class="line">console.log(result); &#x2F;&#x2F; Hello world你好，世界</span><br><span class="line">&#x2F;**</span><br><span class="line"> * indexof()</span><br><span class="line"> *&#x2F;</span><br><span class="line">str &#x3D; &quot;hello , worid&quot;;</span><br><span class="line">result &#x3D; str.indexOf(&quot;h&quot;,1);</span><br><span class="line">console.log(result); &#x2F;&#x2F; -1</span><br><span class="line">result &#x3D; str.lastIndexOf(&quot;h&quot;,5);</span><br><span class="line">console.log(result); &#x2F;&#x2F; 0</span><br><span class="line">&#x2F;**</span><br><span class="line"> * slice()</span><br><span class="line"> *&#x2F;</span><br><span class="line">str &#x3D; &quot;hello , world&quot;;</span><br><span class="line">result &#x3D; str.slice(1,4);&#x2F;&#x2F; ell</span><br><span class="line">result &#x3D; str.slice(1,-1);</span><br><span class="line">console.log(result); &#x2F;&#x2F; ello , worl</span><br><span class="line">&#x2F;**</span><br><span class="line"> * substring()</span><br><span class="line"> *&#x2F;</span><br><span class="line">result &#x3D; str.substring(0,1); &#x2F;&#x2F; h</span><br><span class="line">console.log(result);</span><br><span class="line">&#x2F;**</span><br><span class="line"> * substr()</span><br><span class="line"> *&#x2F;</span><br><span class="line">result &#x3D; str.substr(3,2); &#x2F;&#x2F; lo</span><br><span class="line">console.log(result);</span><br><span class="line">&#x2F;**</span><br><span class="line"> * split()</span><br><span class="line"> *&#x2F;</span><br><span class="line">str &#x3D; &quot;abcdefg&quot;;</span><br><span class="line">result &#x3D; str.split(&quot;d&quot;);</span><br><span class="line">console.log(result); &#x2F;&#x2F; [&quot;abc&quot;, &quot;efg&quot;]</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * toUpperCase()</span><br><span class="line"> *&#x2F;</span><br><span class="line">str &#x3D; &quot;abcdefg&quot;;</span><br><span class="line">result &#x3D; str.toUpperCase();</span><br><span class="line">console.log(result); &#x2F;&#x2F; ABCDEFG</span><br><span class="line">&#x2F;**</span><br><span class="line"> * toLowerCase()</span><br><span class="line"> *&#x2F;</span><br><span class="line">str &#x3D; &quot;ABCDEFG&quot;;</span><br><span class="line">result &#x3D; str.toLocaleLowerCase();</span><br><span class="line">console.log(result); &#x2F;&#x2F; abcdefg</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var str &#x3D; &quot;1a2b3c4d5e6f7&quot;;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * split()</span><br><span class="line"> *&#x2F;</span><br><span class="line">&#x2F;&#x2F; 用任意的字母来将字符串拆分</span><br><span class="line">var result &#x3D; str.split(&#x2F;[A-z]&#x2F;);</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">str &#x3D; &quot;hello abc hello aec afc&quot;;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * search()</span><br><span class="line"> *&#x2F;</span><br><span class="line">result &#x3D; str.search(&#x2F;a[befj]c&#x2F;);</span><br><span class="line"></span><br><span class="line">console.log(result);&#x2F;&#x2F; 6</span><br><span class="line"></span><br><span class="line">str &#x3D; &quot;1a2a3a4a5e6f7A8B9C&quot;;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * match()</span><br><span class="line"> *&#x2F;</span><br><span class="line">result &#x3D; str.match(&#x2F;[a-z]&#x2F;ig);</span><br><span class="line">console.log(result[2]); &#x2F;&#x2F; a</span><br><span class="line">&#x2F;**</span><br><span class="line"> * replace()</span><br><span class="line"> *&#x2F;</span><br><span class="line">result  &#x3D; str.replace(&#x2F;[a-z]&#x2F;gi,&quot;&quot;);</span><br><span class="line">console.log(result); &#x2F;&#x2F; 123456789</span><br></pre></td></tr></table></figure><h2 id="1-11-Date"><a href="#1-11-Date" class="headerlink" title="1.11 Date"></a>1.11 Date</h2><p> 日期的对象，在 JS 中通过 Date 对象来表示一个时间</p><p> <strong>创建对象</strong></p><p> 创建一个当前的时间对象</p><p> var d = new Date();</p><p> 创建一个指定的时间对象</p><p> var d = new Date(“月/日/年 时:分:秒”);</p><p> <strong>方法：</strong></p><p> <strong>getDate()</strong></p><p> 当前日期对象是几日（1-31）</p><p> <strong>getDay()</strong></p><p> 返回当前日期对象时周几（0-6）</p><p> 0 周日</p><p> 1 周一 。。。</p><p> <strong>getMonth()</strong></p><p> 返回当前日期对象的月份（0-11）</p><p> 0 一月</p><p> 1 二月 。。。</p><p> getFullYear() 从 Date 对象以四位数字返回年份。</p><p> getHours() 返回 Date 对象的小时 (0 ~ 23)。</p><p> getMinutes() 返回 Date 对象的分钟 (0 ~ 59)。</p><p> getSeconds() 返回 Date 对象的秒数 (0 ~ 59)。</p><p> getMilliseconds() 返回 Date 对象的毫秒(0 ~ 999)。</p><p> <strong>getTime()</strong></p><p> 返回当前日期对象的时间戳</p><p> 时间戳，指的是从 1970 年月 1 日 0 时 0 分 0 秒，到现在时间的毫秒数</p><p> 计算机底层保存时间都是以时间戳的形式保存的。</p><p> <strong>Date.now()</strong></p><p> 可以获取当前代码执行时的时间戳</p><ul><li><p><strong>代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">var d &#x3D; new Date(); &#x2F;&#x2F; Sun Jun 28 2020 17:51:48 GMT+0800 (中国标准时间)</span><br><span class="line">console.log(d);</span><br><span class="line"></span><br><span class="line">var d &#x3D; new Date(&quot;2&#x2F;18&#x2F;2011 11:10:30&quot;);</span><br><span class="line">&#x2F;**</span><br><span class="line"> * getDate()</span><br><span class="line"> *&#x2F;</span><br><span class="line">var date &#x3D; d.getDate();</span><br><span class="line">console.log(date); &#x2F;&#x2F; 18</span><br><span class="line">&#x2F;**</span><br><span class="line"> *  getDay()</span><br><span class="line"> *  会返回一个0-6的值</span><br><span class="line"> *      0 表示周日</span><br><span class="line"> *      1 表示周一</span><br><span class="line"> *&#x2F;</span><br><span class="line">date &#x3D; d.getDay();</span><br><span class="line">console.log(date); &#x2F;&#x2F; 5</span><br><span class="line">&#x2F;**</span><br><span class="line"> *  getMonth()</span><br><span class="line"> *  会返回一个0-11的值</span><br><span class="line"> *      0 表示1月</span><br><span class="line"> *      1 表示2月</span><br><span class="line"> *      11 表示12月</span><br><span class="line"> *&#x2F;</span><br><span class="line">var month &#x3D; d.getMonth();</span><br><span class="line">console.log(month); &#x2F;&#x2F; 1</span><br><span class="line">&#x2F;**</span><br><span class="line"> *  getFullYear()</span><br><span class="line"> *&#x2F;</span><br><span class="line">var year &#x3D; d.getFullYear();</span><br><span class="line">console.log(year); &#x2F;&#x2F; 2011</span><br><span class="line">&#x2F;**</span><br><span class="line"> *  getTime</span><br><span class="line"> *  获取当前日期对象的时间戳</span><br><span class="line"> *&#x2F;</span><br><span class="line">var time &#x3D; d.getTime();</span><br><span class="line">console.log(time); &#x2F;&#x2F; 1297998630000</span><br></pre></td></tr></table></figure><h2 id="1-12-Math"><a href="#1-12-Math" class="headerlink" title="1.12 Math"></a>1.12 Math</h2><p>Math 属于一个工具类，它不需要我们创建对象，它里边封装了属性运算相关的常量和方法</p><p>我们可以直接使用它来进行数学运算相关的操作</p></li></ul><p> <strong>方法：</strong></p><p> <strong>Math.PI</strong></p><p> 常量，圆周率</p><p> <strong>Math.abs()</strong></p><p> 绝对值运算</p><p> <strong>Math.ceil()</strong></p><p> 向上取整</p><p> <strong>Math.floor()</strong></p><p> 向下取整</p><p> <strong>Math.round()</strong></p><p> 四舍五入取整</p><p> <strong>Math.random()</strong></p><p> 生成一个 0-1 之间的随机数</p><p> 生成一个 x-y 之间的随机数</p><p> ==Math.round(Math.random()*(y-x)+x);==</p><p> <strong>Math.pow(x,y)</strong></p><p> 求 x 的 y 次幂</p><p> <strong>Math.sqrt()</strong></p><p> 对一个数进行开方</p><p> <strong>Math.max()</strong></p><p> 求多个数中最大值</p><p> <strong>Math.min()</strong></p><p> 求多个数中的最小值</p><ul><li><p><strong>代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Math.PI</span><br><span class="line"> *&#x2F;</span><br><span class="line">console.log(Math.PI); &#x2F;&#x2F; 3.141592653589793</span><br><span class="line">&#x2F;**</span><br><span class="line"> * abs()</span><br><span class="line"> *&#x2F;</span><br><span class="line">console.log(Math.abs(-1)); &#x2F;&#x2F; 1</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Math.ceil()</span><br><span class="line"> * Math.floor()</span><br><span class="line"> * Math.round()</span><br><span class="line"> *&#x2F;</span><br><span class="line">console.log(Math.ceil(1.234)); &#x2F;&#x2F; 2</span><br><span class="line">console.log(Math.floor(1.2334));&#x2F;&#x2F; 1</span><br><span class="line">console.log(Math.round(2.5)); &#x2F;&#x2F; 3</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Math.random()</span><br><span class="line"> *  生成一个0-x之间的随机数</span><br><span class="line"> *   Math.round(Math.random()*x)</span><br><span class="line"> *  生成一个x-y之间的随机数</span><br><span class="line"> *   Math.round(Math.random()*(y-x)+x)</span><br><span class="line"> *&#x2F;</span><br><span class="line">&#x2F;&#x2F; 生成一个0-10的随机数</span><br><span class="line">console.log(Math.random()); &#x2F;&#x2F; 0.6920747685502069</span><br><span class="line">&#x2F;&#x2F; 生成一个0-20的随机数</span><br><span class="line">console.log(Math.random()*20); &#x2F;&#x2F; 9.90282879250878</span><br><span class="line">&#x2F;&#x2F; 生成一个1-20的随机数</span><br><span class="line">console.log((Math.random()*19)+1); &#x2F;&#x2F; 6.28945228050076</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * max() 可以获取多个数组的最大值</span><br><span class="line"> * min() 可以获取多个数组中的最小值</span><br><span class="line"> *&#x2F;</span><br><span class="line">console.log(Math.max(10,45,30,100)); &#x2F;&#x2F; 100</span><br><span class="line">console.log(Math.min(10,45,30,100));&#x2F;&#x2F; 10</span><br><span class="line">&#x2F;**</span><br><span class="line"> * pow(x,y)</span><br><span class="line"> *&#x2F;</span><br><span class="line">console.log(Math.pow(2,3)); &#x2F;&#x2F; 8</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * sqrt()</span><br><span class="line"> *&#x2F;</span><br><span class="line">console.log(Math.sqrt(4)); &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure><h2 id="1-13-正则表达式"><a href="#1-13-正则表达式" class="headerlink" title="1.13 正则表达式"></a>1.13 正则表达式</h2><p>正则用来定义一些字符串的规则，程序可以根据这些规则来判断一个字符串是否符合规定，也可以将一个字符串符合规则的内容提取出来。</p></li></ul><h3 id="1-13-1-创建正则表达式"><a href="#1-13-1-创建正则表达式" class="headerlink" title="1.13.1 创建正则表达式"></a>1.13.1 创建正则表达式</h3><p> var reg = new RegExp(“正则”,”匹配模式”)</p><p> var reg = /正则表达式/ 匹配模式</p><p><strong>语法</strong></p><p> 匹配模式:</p><p> i ： 忽视大小写</p><p> g : 全局匹配模式</p><p> 设置匹配模式时，可以都不设置，也可以设置 1 个，也可以全设置，设置时没有顺序要求</p><h3 id="1-13-2-正则语法："><a href="#1-13-2-正则语法：" class="headerlink" title="1.13.2 正则语法："></a>1.13.2 正则语法：</h3><p><strong>语法：</strong></p><table><thead><tr><th align="center">|</th><th align="left">或</th><th align="center">[A-Z]</th><th>大写字母</th></tr></thead><tbody><tr><td align="center">[]</td><td align="left">或</td><td align="center">[A-z]</td><td>任意字母</td></tr><tr><td align="center">[^]</td><td align="left">除了</td><td align="center">[0-9]</td><td>任意数字</td></tr><tr><td align="center">[a-z]</td><td align="left">小写字母</td><td align="center"></td><td></td></tr></tbody></table><p><strong>量词：</strong></p><table><thead><tr><th>{n}</th><th>正好 n 次</th><th>+</th><th>至少 1 次 {1,}</th></tr></thead><tbody><tr><td>{m,n}</td><td>m-n 次</td><td>?</td><td>0 次或 1 次 {0,1}</td></tr><tr><td>{m,}</td><td>至少 m 次</td><td>*</td><td>0 次或多次 {0,}</td></tr></tbody></table><p><strong>转义字符：</strong></p><table><thead><tr><th>\ .</th><th>表示.</th><th>\\</th><th>表示\</th></tr></thead><tbody><tr><td>.</td><td>表示任意字符</td><td>\w</td><td>相当于[A-z0-9_]</td></tr><tr><td>\W</td><td>相当于[ ^ A-z0-9]</td><td>\d</td><td>任意数字</td></tr><tr><td>\D</td><td>除了数字</td><td>\s</td><td>空格</td></tr><tr><td>\S</td><td>除了空格</td><td>\b</td><td>单词边界</td></tr><tr><td>\B</td><td>除了单词边界</td><td>^</td><td>表示开始</td></tr><tr><td>$</td><td>表示结束</td><td></td><td></td></tr></tbody></table><h3 id="1-13-3-方法"><a href="#1-13-3-方法" class="headerlink" title="1.13.3 方法"></a>1.13.3 方法</h3><p> <strong>test()</strong></p><p> 可以用来检查一个字符是否符合正则表达式</p><p> 如果符合返回 true,否则返回 false</p><ul><li><p><strong>代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; new RegExp(&quot;ab&quot;,&quot;i&quot;);</span><br><span class="line">var str &#x3D; &quot;a&quot;;</span><br><span class="line">console.log(reg.test(str)); &#x2F;&#x2F; false</span><br><span class="line"></span><br><span class="line">var reg &#x3D; &#x2F;a&#x2F;i; &#x2F;&#x2F; true</span><br><span class="line">console.log(reg.test(&quot;abc&quot;));</span><br><span class="line"></span><br><span class="line">reg &#x3D; &#x2F;a|b|c&#x2F;; &#x2F;&#x2F; true</span><br><span class="line">console.log(reg.test(&quot;adfasdscvd&quot;));</span><br><span class="line"></span><br><span class="line">reg &#x3D; &#x2F;[a-z]&#x2F;;</span><br><span class="line">console.log(reg.test(&quot;asddf&quot;)); &#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;检查一个字符串中是否含有 abc 或 adc 或 aec</span><br><span class="line">reg &#x3D; &#x2F;a[bde]c&#x2F;;</span><br><span class="line">console.log(reg.test(&quot;abc&quot;));&#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">reg &#x3D; &#x2F;[^ab]&#x2F;;</span><br><span class="line">console.log(reg.test(&quot;bcds&quot;)); &#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">reg &#x3D; &#x2F;[^0-9]&#x2F;;</span><br><span class="line">console.log(reg.test(&quot;234234234532&quot;)); &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 邮箱正则表达式</span><br><span class="line"> * 电子邮件</span><br><span class="line"> * hello  .nihao          @     abc  .com.cn</span><br><span class="line"> *</span><br><span class="line"> * 任意字母数字下划线    .任意字母数字下划线  @   任意字母数字     .任意字母（2-5位）   .任意字母（2-5位）</span><br><span class="line"> *</span><br><span class="line"> * \w&#123;3,&#125;  (\.\w+)*  @  [A-z0-9]+  (\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">var emailReg &#x3D; &#x2F;^\w&#123;3,&#125;(\.\w+)*@[A-z0-9]+(\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$&#x2F;;</span><br><span class="line"></span><br><span class="line">var email &#x3D; &quot;abc.hello@163.com&quot;;</span><br><span class="line"></span><br><span class="line">console.log(emailReg.test(email));</span><br></pre></td></tr></table></figure><p><strong>可以用 vscode 和 notepad++ 打开</strong><br>链接：<a href="https://pan.baidu.com/s/1yfS00YJtShuZVncxzWUrvw">https://pan.baidu.com/s/1yfS00YJtShuZVncxzWUrvw </a><br>提取码：7q9u</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java多线程基础（二）</title>
      <link href="posts/872766944/"/>
      <url>posts/872766944/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong><em>未来可期</em></strong>。<strong>一位正行走在编程世界中的小白</strong>，希望能遇到更多正在努力中的小伙伴。</p></blockquote><h1 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h1><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><blockquote><p>我以生活中的例子来打开这个问题，例如：我们做火车买票为例子。<br>创建个窗口，总票数为 100 张，使用实现 Runable 接口的方式</p></blockquote><p>代码示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window1</span> <span class="title">implements</span> <span class="title">Runnable</span>&#123;</span></span><br><span class="line">    <span class="comment">//总票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:卖票，票号为：&quot;</span>+ticket);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest1</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window1 w1 = <span class="keyword">new</span> Window1();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口二&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200523151627722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>在卖票的过程中，通过上面的代码运行的代码，在最后出现了重票、错票，从而出现了线程的安全问题。</li><li>出现线程安全的原因，就是当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，一起来操作车票。</li><li>出现了问题，总要有解决的办法，在 java 多线程就给我们提供了这个解决办法方法。</li><li>我先简单的描述一下解决问题的方法，当一个线程 a 在操作 ticket 的时候，其他线程不能参与进来。直到线程 a 操作完 ticket 时，其他线程才可以开始操作 ticket.这种情况即使线程 a 出现了阻塞，也不能被改变。</li></ul><h2 id="二、解决方法"><a href="#二、解决方法" class="headerlink" title="二、解决方法"></a>二、解决方法</h2><h3 id="方式一：同步代码块"><a href="#方式一：同步代码块" class="headerlink" title="方式一：同步代码块"></a>方式一：同步代码块</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">synchronized(同步监视器)&#123;</span><br><span class="line"><span class="comment">// 需要不同的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>操作共享数据的代码，即为需要被同步的代码 –&gt; 不能包含代码多了，也不能包含的代码少了。</li><li>共享数据，多个数据共同操作的变量，比如：ticket 就是共享数据。</li><li>同步监视器俗称 <strong>锁</strong>。任何一个类的对象，都可以充当锁。</li><li><em>要求：多个线程必须要用同一把锁。</em></li></ul><h4 id="①-解决继承-Thread-类线程安全问题"><a href="#①-解决继承-Thread-类线程安全问题" class="headerlink" title="① 解决继承 Thread 类线程安全问题"></a>① 解决继承 Thread 类线程安全问题</h4><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window2</span> <span class="title">extends</span> <span class="title">Thread</span>&#123;</span></span><br><span class="line"><span class="comment">//共享数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//添加同步代码块</span></span><br><span class="line">        <span class="comment">// Class clazz =Window2.class,其中Window2.class只会加载一次</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                synchronized(Window2.class)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println(getName()+<span class="string">&quot;:卖票,票号为:&quot;</span>+ticket);</span><br><span class="line">                        ticket--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Window2Test</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window2 t1 = <span class="keyword">new</span> Window2();</span><br><span class="line">        Window2 t2 = <span class="keyword">new</span> Window2();</span><br><span class="line">        Window2 t3 = <span class="keyword">new</span> Window2();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口二&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200523161256515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="②-解决实现-Runable-接口线程安全"><a href="#②-解决实现-Runable-接口线程安全" class="headerlink" title="② 解决实现 Runable 接口线程安全"></a>② 解决实现 Runable 接口线程安全</h4><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window1</span> <span class="title">implements</span> <span class="title">Runnable</span>&#123;</span></span><br><span class="line">    <span class="comment">//总票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//设置同步代码块</span></span><br><span class="line">            <span class="comment">// 此时的this：唯一的Window1的对象</span></span><br><span class="line">            synchronized(<span class="keyword">this</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:卖票，票号为：&quot;</span>+ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest1</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window1 w1 = <span class="keyword">new</span> Window1();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口二&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200523161905980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>补充：</strong></p><blockquote><p>在实现 Runable 接口创建多线程的方式中，我们可以考虑使用<strong>this</strong>充当同步监视器。<br>在继承 Thread 类创建多线程的方式中，慎用 this 充当同步监视器，考虑使用当前类充当同步监视器。</p></blockquote><h3 id="方式二：同步方法"><a href="#方式二：同步方法" class="headerlink" title="方式二：同步方法"></a>方式二：同步方法</h3><blockquote><p>如果操作共享数据的代码完整的声明在一个方法中，我们不妨碍将此方法声明同步的</p></blockquote><h4 id="①-使用同步方法解决-Thread-类的线程安全问题"><a href="#①-使用同步方法解决-Thread-类的线程安全问题" class="headerlink" title="① 使用同步方法解决 Thread 类的线程安全问题"></a>① 使用同步方法解决 Thread 类的线程安全问题</h4><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window3</span> <span class="title">extends</span> <span class="title">Thread</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">          show();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> synchronized  <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123; <span class="comment">//同步监视器：Window3.class</span></span><br><span class="line">        <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;：卖票，票号为：&quot;</span>+ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest3</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window3 w1 = <span class="keyword">new</span> Window3();</span><br><span class="line">        Window3 w2 = <span class="keyword">new</span> Window3();</span><br><span class="line">        Window3 w3 = <span class="keyword">new</span> Window3();</span><br><span class="line"></span><br><span class="line">        w1.setName(<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line">        w2.setName(<span class="string">&quot;窗口二&quot;</span>);</span><br><span class="line">        w3.setName(<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200523163737783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="②-使用同步方法解决实现-Runable-接口线程安全"><a href="#②-使用同步方法解决实现-Runable-接口线程安全" class="headerlink" title="② 使用同步方法解决实现 Runable 接口线程安全"></a>② 使用同步方法解决实现 Runable 接口线程安全</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window4</span> <span class="title">implements</span> <span class="title">Runnable</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> synchronized <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123; <span class="comment">//同步监视器:this</span></span><br><span class="line">        <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:卖票，票号为：&quot;</span>+ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest4</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window4 w = <span class="keyword">new</span> Window4();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口二&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200523164945872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>关于同步方法的总结：</strong></p><ul><li>同步方法仍然涉及到同步监视器只是不需要我们显示的声明。</li><li>非静态的同步方法，同步监视器是：<strong>this</strong></li><li>静态的同步方法，同步监视器是: 当前类本身</li></ul><h3 id="方式三：Lock-锁-–-JDK5-0-新增"><a href="#方式三：Lock-锁-–-JDK5-0-新增" class="headerlink" title="方式三：Lock 锁 – JDK5.0 新增"></a>方式三：Lock 锁 – JDK5.0 新增</h3><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window5</span> <span class="title">implements</span> <span class="title">Runnable</span>&#123;</span></span><br><span class="line">    <span class="comment">// 1.实例化ReentrantLock</span></span><br><span class="line">    ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="comment">// 2. 调用锁定方法lock()</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;：售票，票号为：&quot;</span>+ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;  finally &#123;</span><br><span class="line">                <span class="comment">// 3.调用解锁方法:unlock()</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window5 w = <span class="keyword">new</span> Window5();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200523171243650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><em>使用的优先顺序</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lock --&gt; 同步代码块(已经进入方法体,分配了相对应资源) --&gt; 同步方法（在方法体之外）</span><br></pre></td></tr></table></figure><p><em>利弊</em></p><ul><li>同步的方式，解决了线程的安全问题。–&gt; 好处</li><li>操作同步代码时，只能一个线程参与，其他线程等待。就相当于是一个的单线程的过程，效率低。</li></ul><p><strong>synchronzied 与 Lock 的异同</strong></p><ul><li>synchronzied 机制在执行完相对应的同步代码块后，自动的释放同步监视器</li><li>Lock 需要手动的启动（lock()），同时结束时也需要手动的实现(unlock());</li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><blockquote><p>死锁的理解：不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</p></blockquote><p><strong>说明：</strong></p><ul><li>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续</li><li>我们使用同步时，要避免出现死锁。</li></ul><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> synchronized <span class="keyword">void</span> <span class="title">foo</span><span class="params">(B b)</span> </span>&#123; <span class="comment">//同步监视器：A类的对象：a</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程名: &quot;</span> + Thread.currentThread().getName()</span><br><span class="line">                + <span class="string">&quot; 进入了A实例的foo方法&quot;</span>); <span class="comment">// ①</span></span><br><span class="line"><span class="comment">//try &#123;</span></span><br><span class="line"><span class="comment">//Thread.sleep(200);</span></span><br><span class="line"><span class="comment">//&#125; catch (InterruptedException ex) &#123;</span></span><br><span class="line"><span class="comment">//ex.printStackTrace();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程名: &quot;</span> + Thread.currentThread().getName()</span><br><span class="line">                + <span class="string">&quot; 企图调用B实例的last方法&quot;</span>); <span class="comment">// ③</span></span><br><span class="line">        b.last();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> synchronized <span class="keyword">void</span> <span class="title">last</span><span class="params">()</span> </span>&#123;<span class="comment">//同步监视器：A类的对象：a</span></span><br><span class="line">        System.out.println(<span class="string">&quot;进入了A类的last方法内部&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> synchronized <span class="keyword">void</span> <span class="title">bar</span><span class="params">(A a)</span> </span>&#123;<span class="comment">//同步监视器：b</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程名: &quot;</span> + Thread.currentThread().getName()</span><br><span class="line">                + <span class="string">&quot; 进入了B实例的bar方法&quot;</span>); <span class="comment">// ②</span></span><br><span class="line"><span class="comment">//try &#123;</span></span><br><span class="line"><span class="comment">//Thread.sleep(200);</span></span><br><span class="line"><span class="comment">//&#125; catch (InterruptedException ex) &#123;</span></span><br><span class="line"><span class="comment">//ex.printStackTrace();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程名: &quot;</span> + Thread.currentThread().getName()</span><br><span class="line">                + <span class="string">&quot; 企图调用A实例的last方法&quot;</span>); <span class="comment">// ④</span></span><br><span class="line">        a.last();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> synchronized <span class="keyword">void</span> <span class="title">last</span><span class="params">()</span> </span>&#123;<span class="comment">//同步监视器：b</span></span><br><span class="line">        System.out.println(<span class="string">&quot;进入了B类的last方法内部&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> <span class="title">implements</span> <span class="title">Runnable</span> &#123;</span></span><br><span class="line">    A a = <span class="keyword">new</span> A();</span><br><span class="line">    B b = <span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread.currentThread().setName(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用a对象的foo方法</span></span><br><span class="line">        a.foo(b);</span><br><span class="line">        System.out.println(<span class="string">&quot;进入了主线程之后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread.currentThread().setName(<span class="string">&quot;副线程&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用b对象的bar方法</span></span><br><span class="line">        b.bar(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;进入了副线程之后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DeadLock dl = <span class="keyword">new</span> DeadLock();</span><br><span class="line">        <span class="keyword">new</span> Thread(dl).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        dl.init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200523181609120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a><strong>线程通信</strong></h1><h2 id="一、线程通信涉及到的三个方法"><a href="#一、线程通信涉及到的三个方法" class="headerlink" title="一、线程通信涉及到的三个方法"></a>一、线程通信涉及到的三个方法</h2><blockquote><p><strong>wait()</strong>:一旦执行此方法，当前线程就会进入阻塞状态，并释放同步监视器。<br><strong>notify()</strong>:一旦执行方法，就会唤醒被 wait 的第一个线程，如果有多个线程被 wait，就唤醒优先级最高的那个。<br><strong>notifyAll()</strong>:一旦执行此方法，就会唤醒所有被 wait()的线程。</p></blockquote><p><strong>代码示例：</strong></p><blockquote><p>线程通信的例子：使用两个线程打印 1-100。线程 1, 线程 2 交替打印</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="title">implements</span> <span class="title">Runnable</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">           synchronized(obj)&#123;</span><br><span class="line">               <span class="comment">//唤醒线程</span></span><br><span class="line">               obj.notify();</span><br><span class="line">               <span class="keyword">if</span>(number &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                       e.printStackTrace();</span><br><span class="line">                   &#125;</span><br><span class="line">                   System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span> +number);</span><br><span class="line">                   number++;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       <span class="comment">// 使得调用如下wait()方法的线程进入阻塞状态</span></span><br><span class="line">                       obj.wait();</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                       e.printStackTrace();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommunicationTest</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Number number = <span class="keyword">new</span> Number();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(number);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(number);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020052317553839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NzM4ODEw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="二、说明"><a href="#二、说明" class="headerlink" title="二、说明"></a>二、说明</h2><blockquote><p><strong>wait()，notify().notifyAll()**：三个方法必须用在同步代码块或同步方法中。<br>**wait()，notify()，notifyAll()</strong>:三个方法的调用者必须是同步代码块同步方法的同步监视器。否则会出现<strong>IllegalMonitorStateException</strong>异常<br><strong>wait()，notify()，notifyAll()**：三个方法时定义在</strong>java.lang.Object**类中。</p></blockquote><h2 id="三、释放锁的操作："><a href="#三、释放锁的操作：" class="headerlink" title="三、释放锁的操作："></a>三、释放锁的操作：</h2><blockquote><p>① 当前线程的同步方法、同步代码执行结束。<br>② 当前线程在同步代码块、同步方法中遇到 break、return 终止该代码块、该方法的继承执行。<br>③ 当前线程在同步代码块、同步方法中出现未处理的 Error 或 Exception，导致异常结束。<br>④ 当前线程在同步代码块、同步方法中执行了线程对象的 wait（）方法，当前线程暂停，并释放锁</p></blockquote><h2 id="四、不会释放锁的操作"><a href="#四、不会释放锁的操作" class="headerlink" title="四、不会释放锁的操作"></a>四、不会释放锁的操作</h2><ol><li> 线程执行同步代码块或同步方法时，程序调用<strong>Thread.sleep()、Thread.yield();</strong> 方法暂停当前线程的执行</li><li> 线程执行同步代码块时，其他线程调用了线程的 supend()方法将线程挂起，该线程不会释放锁（同步监视器）</li></ol><h2 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h2><p><strong>sleep()与 wait（）的异同</strong></p><ol><li> 相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</li><li>不同点：<br> &lt;1&gt;两个方法声明的位置不同：<strong>Thread</strong>类中声明<strong>sleep()**，</strong>Object<strong>类中声明</strong>wait()**<br> &lt;2&gt; 调用的要求不同：<strong>sleep（）</strong>可以在任何需要的场景下调用。<strong>wait（）</strong>必须使用在同步代码块或同步方法中。</li></ol><blockquote><p>java 多线程基础到这里结束了，在写博客同时一边复习自己所学的知识点，给自己不断积累知识点。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
